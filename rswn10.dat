[#clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_replacefirstchar in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth boolean_or integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 0 0 0 1 1 1 0 2 1 1 1 0 0 2 2 3 2 2 1 1 1 0 0 0 0 2 1 0 0 0 0 1 1 0 0 4 3 0 0 2 1 1 1 1 1 1 1 6 5 1 1 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 3 2 1 2 2 0 0 1 1 1 1 2 2 3 3 3 3 0 0 1 1 3 2 5 5 5 5 3 2 4 4 3 3 4 4 1 0 1 1 2 2 5 4 2 2 0 0 4 3 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 1 5 5 6 6 4 3 4 4 5 5 3 3 2 2 3 3 2 2 0 0 20 19 0 0 10 10 10 9 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 467, :normalized-error 467, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6c493685-8b94-4ac0-9b04-36a8efd4fe4e", :parent-uuids (#uuid "3077935d-6e26-4b8b-bcfb-029e86da5aec" #uuid "406a7d41-0524-4df1-a5d1-241c130f8428"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_fromstring} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean integer_fromstring) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_yank) boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit boolean_not in1 string_length integer_lt integer_fromchar) (string_fromboolean string_split \space char_isletter string_shove \% boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 1 1 0 0 1 2 1 3 1 2 0 1 0 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 2 0 1 2 1 1 0 1 0 1 0 6 4 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 1 1 0 4 2 2 1 2 1 0 1 1 0 1 0 2 1 3 2 3 2 0 1 1 0 3 1 5 4 5 4 3 2 4 3 3 2 4 3 1 0 1 0 2 1 5 4 2 1 0 1 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 1 0 1 20 18 0 1 10 9 10 9 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 417, :normalized-error 417, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ddfbfa5a-6b31-4d93-aa1b-b940817f5793", :parent-uuids (#uuid "00e159c5-727f-405b-9676-fc603e28b7c7"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gte} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_first} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction string_butlast} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup integer_mult string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring integer_gte char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq string_first) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) print_boolean integer_rot tag_boolean_969 boolean_yank string_butlast)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) (\^) (char_stackdepth) string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 0 0 1 2 1 3 1 2 1 1 1 0 1 0 1 2 0 0 1 0 4 1 3 0 4 4 1 0 3 2 1 1 3 1 2 1 3 6 2 1 2 2 2 2 2 1 2 1 2 1 2 2 1 2 1 1 2 4 1 2 2 2 1 0 3 1 2 1 2 2 2 3 1 3 0 0 3 1 2 3 0 5 2 5 2 3 0 4 1 3 0 4 0 1 2 1 2 2 1 5 1 2 1 0 3 4 1 1 3 4 1 4 1 3 0 2 1 4 0 3 0 2 2 2 1 5 2 2 1 5 1 6 3 4 1 4 1 5 2 3 1 2 1 3 0 2 1 0 3 20 16 0 3 10 7 10 6 6 3 5 2 0 3 0 3 5 2 5 2 2 1 6 3], :total-error 419, :normalized-error 419, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4191d84f-26f3-4918-9e03-8bfd4885b0bf", :parent-uuids (#uuid "6125b17d-f77e-436f-8a58-e098643c9d67" #uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline exec_s (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar) (exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult)) () ())), :errors [0 1 0 0 0 0 2 1 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 1 2 0 3 1 2 0 1 1 0 1 0 1 2 0 0 1 0 1 1 2 0 1 4 0 0 1 2 1 1 2 1 2 1 1 6 0 1 1 2 2 2 3 1 1 1 1 1 5 2 2 2 1 1 4 4 1 2 3 2 3 0 1 1 2 1 6 2 5 3 2 3 4 0 1 1 7 3 1 5 1 5 5 3 4 4 3 3 3 4 5 1 1 1 2 2 8 5 4 2 9 0 2 4 3 1 9 4 6 4 6 3 5 2 4 4 6 3 10 2 8 2 12 5 9 2 2 5 9 6 6 4 11 4 10 5 7 3 12 2 7 3 5 2 15 0 2 20 17 0 1 10 2 10 1 6 7 5 10 0 2 0 1 5 9 5 12 2 16 6 8], :total-error 622, :normalized-error 622, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "1ee5ac90-7a06-4e1f-8a8d-87b2f5dd0346", :parent-uuids (#uuid "d1477c08-11f0-4279-b5e5-084e0eab798f" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction string_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction char_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_containschar} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (string_pop integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop boolean_yankdup char_rot string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") string_parse_to_chars "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit string_containschar string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ()))), :errors [2 5 2 4 2 4 1 5 2 4 1 4 0 1 1 4 2 3 2 3 1 4 1 4 1 0 2 3 3 2 1 0 1 2 1 0 2 3 3 2 3 2 1 0 3 2 4 1 3 2 4 1 3 2 5 0 3 2 5 0 5 0 5 0 5 4 6 1 5 4 5 4 6 1 6 1 6 1 5 4 6 5 7 2 6 1 6 5 6 5 8 3 8 3 8 3 7 6 7 4 8 5 10 5 10 5 9 6 9 2 10 3 10 7 10 5 10 7 11 6 12 7 12 7 11 10 11 4 11 10 13 8 11 6 13 8 12 7 12 7 12 9 12 11 13 8 13 10 13 12 14 13 15 8 15 14 16 9 16 7 16 11 16 11 17 10 17 14 17 16 17 14 17 16 20 15 18 19 20 15 18 1 18 1 18 9 18 11 20 15 20 15 18 11 18 11 18 17 18 9], :total-error 1494, :normalized-error 1494, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a5a00862-25db-4d34-a652-6f468dc18259", :parent-uuids (#uuid "b72569d0-8cab-4ed3-8fc8-fbfc3dbd1d64" #uuid "98c2806d-bcdb-4814-b135-048475c2e702"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt)))) () ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "c5dc81c5-9e88-4850-baf5-5c45df29e4ff", :parent-uuids (#uuid "5f999162-07c6-4d80-b694-50b0f6de2516" #uuid "5b48f9c4-4a0f-4a5b-a906-a7a3617dfef9"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction string_nth} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and char_empty integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar string_nth integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq), :errors [0 0 0 1000 0 1000 1 1000 0 1000 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 0 1 1 0 0 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 89252, :normalized-error 89252, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "47d60219-0bff-4c6c-a8a3-10600f4ba6c1", :parent-uuids (#uuid "16ea5886-731c-4ba2-8ba6-c7893b9ab2a0" #uuid "2e3962a9-597b-4325-a57d-766998843952"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_stackdepth exec_yank) (char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [5 0 5 0 5 0 6 0 5 0 6 1 7 0 6 0 5 2 5 2 6 1 6 0 7 1 6 1 5 2 7 1 8 0 7 1 6 2 5 2 5 2 7 1 5 2 5 2 6 1 5 2 9 0 5 2 7 2 6 1 6 1 6 1 11 2 6 1 7 1 7 0 6 1 6 1 6 1 7 0 7 1 6 1 9 1 7 1 7 0 5 2 6 1 6 2 7 0 8 1 8 1 5 2 6 1 8 0 10 2 10 3 8 0 9 2 8 1 9 2 6 2 6 1 7 1 10 2 7 0 5 2 9 1 6 1 9 1 9 2 8 1 7 0 9 2 8 1 7 0 7 0 10 2 7 1 10 2 11 3 9 1 9 1 10 3 8 0 7 0 8 1 7 0 5 2 25 16 5 2 15 8 15 7 11 3 10 3 5 2 5 2 10 3 10 2 7 0 11 4], :total-error 894, :normalized-error 894, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b754b49b-e71d-4789-ab30-364c85bcb6a5", :parent-uuids (#uuid "c449e2ad-ff76-45f0-b644-61296b852581" #uuid "39d5f109-9fd2-41a7-91e6-6fbbec6f1133"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 0 1 0 0 1 2 0 3 1 2 0 1 1 0 1 0 1 2 0 0 1 0 1 1 0 0 1 4 1 0 1 2 1 1 0 1 0 1 0 6 3 1 0 2 0 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 1 2 1 3 2 3 2 0 1 1 0 3 1 5 3 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 0 5 3 2 1 0 1 4 2 1 0 4 2 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 3 2 0 5 3 6 4 4 2 4 2 5 4 3 1 2 1 3 2 2 1 0 1 20 17 0 1 10 9 10 8 6 4 5 4 0 1 0 1 5 4 5 3 2 1 6 5], :total-error 403, :normalized-error 403, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "edd5b1eb-c7ee-4cd4-a716-90ce1f249ca1", :parent-uuids (#uuid "34f25b14-806c-4b5b-a053-1c7931799ea6" #uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq boolean_flush) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq) (integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 0 0 0 1 1 0 0 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 2 0 3 4 1 0 3 2 1 1 2 1 2 1 2 6 3 1 2 2 1 2 1 1 2 1 2 1 2 2 1 2 1 1 2 4 1 2 1 2 1 0 3 1 3 1 2 2 1 3 1 3 0 0 3 1 2 3 0 5 2 5 2 3 0 4 1 3 0 4 1 1 2 1 2 2 1 5 2 2 1 0 3 4 1 1 2 4 1 4 1 3 0 2 1 4 1 3 0 2 1 2 1 5 2 2 1 5 2 6 3 4 1 4 1 5 2 3 0 2 1 3 0 2 1 0 4 20 17 0 3 10 7 10 7 6 3 5 2 0 3 0 3 5 2 5 2 2 1 6 3], :total-error 416, :normalized-error 416, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0db2cf90-c8ec-4b41-9333-ec3c09fde595", :parent-uuids (#uuid "b7cfccba-4fea-4e0a-a8b1-e32e3bf11cb8" #uuid "c449e2ad-ff76-45f0-b644-61296b852581"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 1, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 1, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop (string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace) (string_containschar) \^) (integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer) string_shove integer_add string_indexofchar) integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 0 1 0 0 2 2 0 3 0 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 3 4 0 0 4 2 1 1 3 1 4 1 3 6 0 1 4 2 2 2 2 1 4 1 5 1 4 2 3 2 4 1 5 4 2 2 4 2 4 0 7 1 6 1 6 2 4 3 3 3 4 0 9 1 8 3 6 5 1 5 3 3 7 4 4 3 7 4 4 1 11 1 10 2 8 5 5 2 8 0 12 4 6 1 11 4 6 4 7 3 9 2 9 4 8 3 9 2 10 2 11 5 9 2 13 5 9 6 6 4 10 4 10 5 10 3 12 2 14 3 12 2 14 0 19 20 0 0 19 10 0 10 0 6 7 5 9 0 19 0 19 5 10 5 12 2 15 6 7], :total-error 795, :normalized-error 795, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ecc49947-746a-49c0-a110-91dd9516f6ca", :parent-uuids (#uuid "e3885bf9-80a1-4098-874e-1aec32a84734" #uuid "406a7d41-0524-4df1-a5d1-241c130f8428"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_fromstring} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_749} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction string_emptystring}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar exec_flush integer_fromstring) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars tagged_749 boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_swap) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) string_emptystring)), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ea955464-6042-4661-a03a-6fee2c5e3c3d", :parent-uuids (#uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_yank boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length exec_rot (integer_fromchar) (exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) string_replacefirstchar string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult)), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 2 0 3 2 1 3 1 2 1 1 1 0 3 0 3 2 0 0 3 0 3 1 2 0 3 4 1 0 5 2 3 1 5 1 4 1 5 6 0 1 5 2 4 2 4 1 4 1 4 1 4 2 3 2 3 1 4 4 1 2 4 2 3 0 5 1 4 1 4 2 4 3 3 3 2 0 5 1 4 3 3 5 0 5 0 3 2 4 1 3 2 4 2 1 4 1 4 2 3 5 1 2 3 0 5 4 1 1 6 4 1 4 1 3 2 2 3 4 2 3 2 2 4 2 3 5 0 2 4 5 1 6 1 4 1 4 1 5 0 3 3 2 4 3 3 2 3 0 6 20 14 0 5 10 4 10 4 6 1 5 0 0 5 0 5 5 0 5 0 2 3 6 1], :total-error 500, :normalized-error 500, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "af82c44b-fa91-48b9-bfa1-b0f3cd4b4702", :parent-uuids (#uuid "61931ede-8e4e-4e88-93ee-13ee76d6da82"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction string_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction string_emptystring} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction exec_do*range} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_rot} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 integer_eq integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains string_fromboolean exec_stackdepth boolean_not boolean_frominteger integer_lt string_split string_emptystring) (integer_gte string_stackdepth boolean_eq integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split exec_do*range (char_isletter string_shove \% exec_stackdepth in1 string_length integer_lt integer_fromchar) string_rot string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 1 1 0 1 0 2 0 1 0 6 1 3 1 2 0 5 2 5 2 6 1 2 0 7 1 6 2 5 3 7 1 8 0 7 1 6 2 5 3 5 3 7 1 5 3 5 4 6 3 5 4 9 1 5 5 7 3 6 5 6 5 6 5 11 1 6 6 7 5 7 5 6 6 6 6 6 6 7 5 7 6 6 7 9 4 7 6 7 6 5 8 6 8 6 8 7 7 8 6 8 7 5 10 6 10 8 8 10 6 10 7 8 9 9 8 8 9 9 9 6 12 6 12 7 11 10 8 7 11 5 13 9 9 6 13 9 10 9 10 8 11 7 12 9 11 8 12 7 13 7 14 10 12 7 15 10 13 11 12 9 14 9 14 10 14 8 16 7 17 8 16 7 17 5 20 25 0 5 20 15 10 15 10 11 14 10 15 5 20 5 20 10 15 10 15 7 18 11 14], :total-error 1498, :normalized-error 1498, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9c0f7bab-29ab-4e54-b194-3e75df423a32", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "85a8341c-6dbf-4070-98d6-a06470f25c1c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_conjchar string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop) boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 1000 1 1 1 1 1 0 1 1 1 1 2 0 2 1 1 2 1 2 1 1 2 1 2 1 2 1 1 2 2 0 3 0 3 1 1 1 1 2 1 2 2 1 1 2 1 3 2 1 1 2 4 1 1 2 3 1 2 1 1 1 2 1 7 3 2 2 3 0 3 0 2 1 1 1 2 1 3 0 3 1 2 1 4 1 3 1 2 0 1 3 2 2 2 1 3 0 4 0 3 1 1 2 2 1 4 0 6 3 6 3 3 0 5 2 4 1 5 2 2 2 2 1 3 0 6 2 3 0 1 2 5 0 2 1 5 2 4 2 4 1 3 0 5 2 3 1 3 0 3 0 5 3 3 1 6 3 7 4 5 1 5 2 5 3 4 1 3 0 4 1 3 0 1 3 20 17 1 2 10 7 11 7 7 4 6 3 1 2 1 2 5 3 5 3 3 0 7 4], :total-error 1483, :normalized-error 1483, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4a4dca00-44a7-4961-86ff-6fa15be02ff8", :parent-uuids (#uuid "b37582b3-f36e-4af6-8480-4d16a7f36fbe"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction exec_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction char_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction string_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup \s print_string exec_pop (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_fromchar string_replacefirst exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and char_swap integer_max integer_gte exec_do*while (print_exec (string_yank exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 1 1 1 1 1 0 1 1 2 1 2 0 2 1 2 2 2 2 2 1 2 1 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 3 3 3 3 1 3 3 4 4 4 3 4 4 5 1 5 5 5 3 6 5 6 5 6 5 7 1 7 6 7 5 7 5 7 6 7 6 7 6 7 5 8 6 8 7 8 4 8 6 8 6 8 8 9 8 9 8 9 7 9 6 10 7 10 10 11 10 11 8 11 6 12 7 12 9 12 8 12 9 13 9 13 12 13 12 13 11 13 8 13 11 13 13 13 9 14 13 14 10 14 10 14 11 14 12 15 11 15 12 15 13 16 14 17 12 17 15 18 13 18 12 18 14 18 14 19 14 19 16 19 17 19 16 19 17 20 20 20 0 20 20 20 10 20 10 20 14 20 15 20 20 20 20 20 15 20 15 20 18 20 14], :total-error 1821, :normalized-error 1821, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "1eb91c42-ad53-4071-80be-3ac3c2ac90bc", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "ede29d76-fb71-4d33-92d0-b86baff7854c"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction \newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1) integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop) (integer_gt exec_if () (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank string_first) boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup \newline) boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 5 0 5 1 6 0 5 1 5 2 6 1 5 0 4 0 4 1 5 1 5 2 5 1 4 0 3 2 5 3 6 2 5 1 4 0 3 0 3 2 5 0 3 0 2 1 3 0 2 4 5 0 1 2 3 1 1 1 1 1 1 6 5 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 1 4 2 2 0 2 0 0 2 1 2 1 2 2 1 3 0 3 1 0 4 1 4 3 2 5 0 5 1 3 3 4 2 3 3 4 3 1 6 1 6 2 5 5 2 2 5 0 7 4 3 1 7 4 4 4 4 3 5 2 6 4 5 3 6 2 7 2 8 5 6 2 9 5 7 6 6 4 8 4 8 5 8 3 10 2 11 3 10 2 11 0 14 20 6 0 14 10 4 10 4 6 8 5 9 0 14 0 14 5 9 5 9 2 12 6 8], :total-error 711, :normalized-error 711, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b925dbd5-d371-408d-9ad5-5998d29a776b", :parent-uuids (#uuid "8bfa41dc-8d65-476e-baec-4ac2285d64fb" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction integer_div} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_inc} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth integer_div string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_mult integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_inc) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 in1 string_length integer_lt) integer_fromchar) (exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult)), :errors [0 0 0 0 0 0 1 1 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 2 4 2 0 2 2 0 1 2 1 2 1 1 6 4 9 1000 2 0 2 0 1 1 1 1 1 2 2 0 2 1 1 1 4 2 2 0 2 0 8 0 10 1000 1 1 2 0 12 1000 3 1 0 2 1 1 3 1 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 3 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 0 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 9 0 20 18 0 2 19 10 10 8 6 4 5 3 0 3 0 2 5 3 5 3 2 0 6 4], :total-error 3453, :normalized-error 3453, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "119dbf2c-d471-4b42-9c32-03a961e436b1", :parent-uuids (#uuid "90c9d516-2250-4be9-8d09-1f2137f4ab01" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 0 0 1 2 0 3 0 2 1 1 1 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 1 0 1 2 1 1 0 1 0 1 0 6 3 1 0 2 0 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 1 2 1 3 2 3 2 0 1 1 0 3 1 5 3 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 0 5 3 2 1 0 1 4 2 1 0 4 2 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 3 2 0 5 3 6 4 4 2 4 2 5 4 3 1 2 1 3 2 2 1 0 1 20 17 0 1 10 9 10 8 6 4 5 4 0 1 0 1 5 4 5 3 2 1 6 5], :total-error 407, :normalized-error 407, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b1a2fe31-b52b-47ed-a483-a33f5f64ac35", :parent-uuids (#uuid "406a7d41-0524-4df1-a5d1-241c130f8428" #uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 1, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_not} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction exec_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction char_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isdigit} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_shove exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline) (string_substring boolean_not char_empty char_rot integer_dec \s print_string exec_pop (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_fromchar string_replacefirst exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and char_swap integer_max integer_gte exec_do*while (print_exec (string_yank in1) char_yank boolean_yankdup string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth boolean_frominteger integer_fromboolean exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean char_isdigit tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc integer_stackdepth boolean_not boolean_frominteger print_integer string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 10 0 9 0 9 1 10 0 9 1 9 2 10 1 9 0 8 0 8 1 9 1 9 2 9 1 8 0 7 2 9 3 10 2 9 1 8 0 7 0 7 2 9 0 7 0 6 1 7 0 6 4 9 0 5 2 7 1 5 1 5 1 5 6 9 1 4 2 5 2 5 1 4 1 4 1 4 2 5 2 4 1 3 4 6 2 4 2 4 0 2 1 2 1 2 2 3 3 4 3 3 0 0 1 0 3 2 5 4 5 3 3 1 4 2 3 1 4 1 1 2 1 2 2 1 5 2 2 1 0 3 4 1 1 3 4 0 4 0 3 1 2 2 4 1 3 2 2 3 2 4 5 2 2 5 5 3 6 2 4 4 4 4 5 4 3 6 2 7 3 6 2 7 0 10 20 10 0 10 10 0 10 0 6 4 5 5 0 10 0 10 5 5 5 5 2 8 6 4], :total-error 749, :normalized-error 749, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "219dd79e-7b7c-4f1e-8e22-cc0421d1d1c9", :parent-uuids (#uuid "ede29d76-fb71-4d33-92d0-b86baff7854c"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \4} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \4 string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_length) integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush) integer_yankdup print_newline integer_dec integer_mult integer_inc string_dup) (string_stackdepth) (string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first) char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ())))), :errors [1 4 1 3 1 3 1 4 1 3 1 3 2 4 2 3 1 2 1 2 1 3 2 3 2 3 2 2 1 1 2 3 3 4 3 3 1 2 1 1 1 1 2 3 1 1 1 0 2 1 1 0 4 3 1 1 3 1 2 1 1 1 2 1 7 3 2 2 3 1 3 1 2 2 1 2 2 2 3 1 3 2 2 3 4 0 3 2 2 2 1 4 2 4 2 4 3 3 4 2 3 3 1 6 2 6 4 4 6 2 6 3 3 5 5 4 4 5 5 5 2 8 2 8 3 7 6 4 3 7 1 9 5 5 2 9 5 6 4 6 4 7 3 8 5 7 3 8 3 9 3 10 5 8 3 11 6 9 7 8 5 10 5 10 5 10 4 12 3 13 4 12 3 13 1 16 20 4 1 16 10 6 11 6 7 10 6 11 1 16 1 16 5 11 5 11 3 14 7 10], :total-error 855, :normalized-error 855, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e1cb55a6-9095-425b-82ec-208a671a25d7", :parent-uuids (#uuid "98c2806d-bcdb-4814-b135-048475c2e702" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_string} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean exec_s () (exec_yankdup string_containschar boolean_eq) (boolean_invert_first_then_and exec_do*times (print_string char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) (string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) (char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [1 0 1 1 1 1 2 0 1 1 2 1 3 0 2 1 1 2 1 2 2 1 2 1 3 1 2 2 1 3 3 1 4 0 3 1 2 2 1 3 1 3 3 1 1 3 1 4 2 3 1 4 5 1 1 5 3 3 2 5 2 5 2 5 7 1 2 6 3 5 3 5 2 6 2 6 2 6 3 5 3 6 2 7 5 4 3 6 3 6 1 8 2 8 2 8 3 7 4 6 5 7 2 10 3 10 5 8 7 6 7 7 5 9 6 8 5 9 6 9 3 12 3 12 4 11 7 8 4 11 2 13 6 9 3 13 6 10 6 10 5 11 4 12 6 11 5 12 4 13 4 14 7 12 4 15 7 13 8 12 6 14 6 14 7 14 5 16 4 17 5 16 4 17 2 20 22 0 2 20 12 10 12 10 8 14 7 15 2 20 2 20 7 15 7 15 4 18 8 14], :total-error 1183, :normalized-error 1183, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "13d0b9d7-ad8a-482b-8ccb-fefcb91634cb", :parent-uuids (#uuid "39d5f109-9fd2-41a7-91e6-6fbbec6f1133" #uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 1 0 4 2 3 1 3 1 4 1 3 6 1 1 4 2 2 2 2 1 4 1 3 1 3 2 2 2 4 1 3 4 1 2 3 2 2 0 4 1 3 1 3 2 2 3 1 3 1 0 4 1 3 3 2 5 0 5 0 3 3 4 0 3 1 4 0 1 4 1 3 2 3 5 0 2 3 0 4 4 1 1 3 4 1 4 0 3 1 2 2 4 1 3 1 2 2 2 2 5 1 2 3 5 0 6 2 4 1 4 0 5 0 3 1 2 2 3 1 2 2 0 4 20 14 0 4 10 5 10 4 6 1 5 0 0 4 0 4 5 1 5 1 2 3 6 1], :total-error 446, :normalized-error 446, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "f275094e-f89b-4c00-97b9-2dfc16d86ea2", :parent-uuids (#uuid "5f999162-07c6-4d80-b694-50b0f6de2516"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction string_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction char_yank} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction char_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (string_pop integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop char_yank char_rot string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") string_parse_to_chars "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (string_reverse exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ()))), :errors [2 4 2 3 2 3 1 4 2 3 1 3 0 4 1 3 2 2 2 2 1 3 1 3 1 3 2 2 3 1 1 3 1 4 1 3 2 2 3 1 3 1 1 3 3 1 4 0 3 1 4 0 3 3 5 1 3 1 5 1 5 1 5 1 5 3 6 2 5 1 5 1 6 2 6 2 6 2 5 1 6 2 7 3 6 0 6 2 6 2 8 4 8 4 8 4 7 3 7 2 8 3 10 6 10 6 9 4 9 2 10 3 10 5 10 4 10 5 11 5 12 8 12 8 11 7 11 4 11 7 13 9 11 5 13 9 12 6 12 6 12 7 12 8 13 7 13 8 13 9 14 10 15 8 15 11 16 9 16 8 16 10 16 10 17 10 17 12 17 13 17 12 17 13 20 16 18 4 20 16 18 6 18 6 18 10 18 11 20 16 20 16 18 11 18 11 18 14 18 10], :total-error 1435, :normalized-error 1435, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "fec3009a-7b12-47b6-bce2-17ecc4f4b90e", :parent-uuids (#uuid "98c2806d-bcdb-4814-b135-048475c2e702"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_fromchar} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_split} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst integer_fromchar integer_pop integer_gt exec_if (exec_y (string_yank) tagged_960 exec_while (exec_s (string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last integer_yank) (string_last exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) (\^) char_stackdepth) (string_split string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a50309c3-13da-4665-96ba-d06d862f0787", :parent-uuids (#uuid "247f84a9-b119-4c96-8db0-d5f37107e603" #uuid "020e77f5-0f8f-4961-8f56-f164c0c5c19f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction print_string} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot print_string boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar) (exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_contains integer_inc integer_mult boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 1 0 4 2 3 1 3 1 3 1 3 6 1 1 3 2 2 2 2 1 3 1 3 1 3 2 2 2 3 1 3 4 1 2 3 2 2 0 4 1 4 1 3 2 2 3 1 3 2 0 4 1 3 3 2 5 1 5 1 3 3 4 0 3 1 4 0 1 4 1 3 2 2 5 0 2 2 0 4 4 1 1 3 4 0 4 0 3 1 2 2 4 0 3 1 2 2 2 3 5 1 2 3 5 1 6 2 4 1 4 0 5 1 3 1 2 2 3 1 2 2 0 5 20 15 0 4 10 5 10 5 6 2 5 1 0 4 0 4 5 1 5 1 2 2 6 2], :total-error 450, :normalized-error 450, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "87604e27-2488-4ff0-8180-efbbb604161a", :parent-uuids (#uuid "3077935d-6e26-4b8b-bcfb-029e86da5aec" #uuid "d1477c08-11f0-4279-b5e5-084e0eab798f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 2 1 0 0 0 0 0 1 0 1 0 2 0 1 0 0 0 2 0 3 1 2 0 1 0 0 0 0 0 2 0 0 0 0 1 1 1 0 0 4 0 0 0 2 0 1 0 1 0 1 0 6 0 1 1 2 1 2 2 1 0 1 0 1 4 2 1 2 0 1 3 4 1 2 2 2 2 0 1 1 1 1 5 2 4 3 1 3 2 0 0 1 6 3 0 5 0 5 3 3 3 4 2 3 2 4 4 1 0 1 1 2 7 5 3 2 8 0 0 4 2 1 8 4 5 4 5 3 4 2 3 4 5 3 9 2 7 2 11 5 8 2 1 5 8 6 5 4 10 4 9 5 6 3 11 2 6 3 4 2 14 0 1 20 18 0 0 10 1 10 0 6 6 5 9 0 0 0 0 5 8 5 11 2 15 6 7], :total-error 539, :normalized-error 539, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9d985767-6258-4f6a-9178-0656419525ac", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_k} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring exec_k (string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop boolean_rot) integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove) ())), :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 4 1000 4 1000 5 1000 5 1000 5 1000 6 1000 6 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 12 1000 13 1000 13 1000 13 1000 13 1000 13 1000 13 1000 13 1000 13 1000 14 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 16 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 19 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000], :total-error 101033, :normalized-error 101033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "08060cf8-b919-42d3-bd6b-3a7eca07afd7", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction string_substring} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction string_length} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction print_char} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction string_yankdup} {:close 0, :instruction string_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup integer_fromchar string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop string_substring exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar string_length integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq print_char string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte string_yankdup) string_empty integer_swap in1 string_length integer_lt integer_fromchar) (exec_noop string_eq) (integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 1 1 0 0 2 2 1 3 2 2 1 1 0 0 1 0 2 2 1 0 2 0 1 1 0 0 1 4 3 0 1 2 1 1 1 1 1 1 0 6 5 1 1 2 1 2 1 1 0 1 0 1 1 2 1 2 1 1 0 4 3 2 1 2 0 0 2 1 2 1 0 2 1 3 1 3 2 0 2 1 0 3 2 5 4 5 4 3 2 4 3 3 2 4 3 1 0 1 0 2 1 5 4 2 1 0 2 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 0 2 1 2 1 5 4 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 0 0 3 20 19 0 1 10 8 10 9 6 5 5 4 0 2 0 1 5 4 5 4 2 1 6 5], :total-error 438, :normalized-error 438, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ccd820a0-a8f5-45cb-931d-94a3f7a8c8c7", :parent-uuids (#uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85" #uuid "b37582b3-f36e-4af6-8480-4d16a7f36fbe"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring string_first string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (boolean_or integer_mod boolean_empty integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth string_replacefirstchar exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop exec_yankdup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_shove (string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_removechar boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 4 1000 4 1000 5 1000 5 1000 5 1000 6 1000 6 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 12 1000 13 1000 13 1000 13 1000 13 1000 13 1000 13 1000 13 1000 13 1000 14 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 16 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 19 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000], :total-error 101033, :normalized-error 101033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9f8654ec-3b21-4d35-940a-ad9ba30d29a7", :parent-uuids (#uuid "ec94db8e-b78e-45f4-b0a3-3dfd2d36f4f3" #uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 1, :instruction string_emptystring} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 print_integer string_containschar) exec_s (\newline integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger char_stackdepth integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_do*count (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last string_fromboolean boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar tag_boolean_969 boolean_yank string_emptystring) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) (in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult)), :errors [0 1 1 1 1 1 1 0 1 1 2 0 2 1 2 0 2 1 2 1 2 0 2 0 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 3 3 3 3 1 3 3 4 3 4 2 4 3 5 1 5 3 5 1 6 2 6 2 6 2 7 3 7 2 7 1 7 1 7 2 7 2 7 2 7 1 8 1 8 2 8 1 8 1 8 1 8 3 9 2 9 2 9 1 9 0 10 0 10 3 11 2 11 0 11 2 12 2 12 0 12 1 12 0 13 1 13 2 13 2 13 1 13 2 13 1 13 3 13 1 14 2 14 1 14 1 14 0 14 1 15 1 15 0 15 1 16 1 17 2 17 1 18 2 18 3 18 1 18 1 19 2 19 0 19 1 19 0 19 1 20 3 20 17 20 3 20 7 20 7 20 3 20 2 20 3 20 3 20 2 20 2 20 1 20 3], :total-error 1208, :normalized-error 1208, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e2f335ce-45cc-4cbc-b793-17bbc0a7679c", :parent-uuids (#uuid "ee6b1020-755a-4b45-8722-fe3a3290a7d8" #uuid "15a196ac-1e35-4033-93ec-7a8554f0644e"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_nth} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_nth string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger char_stackdepth integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar exec_stackdepth) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () integer_sub print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult) () ())), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7c250614-6232-43ea-a7a9-98597b2c69d0", :parent-uuids (#uuid "43d5d6dd-b30e-4366-a4e7-e0fef0f0187b" #uuid "ee6b1020-755a-4b45-8722-fe3a3290a7d8"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 1, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 1, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 1, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 0, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 1, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq) (char_isdigit boolean_invert_first_then_and char_empty integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while () integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and) boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean) (char_isletter) boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush) (integer_fromboolean exec_pop (string_reverse print_boolean) integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar \^ integer_div string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space) char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 1 2 0 2 0 3 1 2 0 3 0 4 1 3 0 2 1 2 1 3 0 3 0 4 0 3 1 2 2 4 0 5 1 4 0 3 1 2 2 2 2 4 0 2 2 2 3 3 2 2 3 6 0 2 4 4 2 3 4 3 4 3 4 8 0 3 5 4 4 4 4 3 5 3 5 3 5 4 4 4 5 3 6 6 3 4 5 4 5 2 7 3 7 3 7 4 6 5 5 5 6 2 9 3 9 5 7 7 5 7 6 5 8 6 7 5 8 6 8 3 11 3 11 4 10 7 7 4 10 2 12 6 8 3 12 6 9 6 9 5 10 4 11 6 10 5 11 4 12 4 13 7 11 4 14 7 12 8 11 6 13 6 13 7 13 5 15 4 16 5 15 4 16 2 19 22 1 2 19 12 9 12 9 8 13 7 14 2 19 2 19 7 14 7 14 4 17 8 13], :total-error 1143, :normalized-error 1143, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a735cf28-859f-402f-b418-6705e988fd9e", :parent-uuids (#uuid "2e3962a9-597b-4325-a57d-766998843952"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction string_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction char_yank} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction char_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (string_pop integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop char_yank char_rot string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") string_parse_to_chars "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ()))), :errors [2 4 2 3 2 3 1 4 2 3 1 3 0 4 1 3 2 2 2 2 1 3 1 3 1 3 2 2 3 1 1 3 1 4 1 3 2 2 3 1 3 1 1 3 3 1 4 0 3 1 4 0 3 3 5 1 3 1 5 1 5 1 5 1 5 3 6 2 5 1 5 1 6 2 6 2 6 2 5 1 6 2 7 3 6 0 6 2 6 2 8 4 8 4 8 4 7 3 7 2 8 3 10 6 10 6 9 4 9 2 10 3 10 5 10 4 10 5 11 5 12 8 12 8 11 7 11 4 11 7 13 9 11 5 13 9 12 6 12 6 12 7 12 8 13 7 13 8 13 9 14 10 15 8 15 11 16 9 16 8 16 10 16 10 17 10 17 12 17 13 17 12 17 13 20 16 18 4 20 16 18 6 18 6 18 10 18 11 20 16 20 16 18 11 18 11 18 14 18 10], :total-error 1435, :normalized-error 1435, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "22face5b-b297-4a03-9646-ff2b94723975", :parent-uuids (#uuid "98c2806d-bcdb-4814-b135-048475c2e702"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 0 0 2 2 2 1 1 1 1 1 1 6 2 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 0 5 2 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 1 5 2 2 0 0 2 4 1 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 1 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 16 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 394, :normalized-error 394, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "3028b2bd-d76c-4084-88cb-474942272f90", :parent-uuids (#uuid "1e0c624a-8b63-4e17-b006-e5b4d792305b" #uuid "00e159c5-727f-405b-9676-fc603e28b7c7"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean char_iswhitespace string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult)))) ()) () ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6d0e5ded-7491-4f6a-bb21-634f26909e59", :parent-uuids (#uuid "e683010d-39b4-4603-b366-90e6074cad3f" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) string_replacefirst string_replacefirst char_iswhitespace string_containschar \^ integer_div string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not)), :errors [1 1000 1 1000 1 1000 2 1000 1 1000 2 1000 3 1000 2 1000 1 1000 1 1000 2 1000 2 1000 3 1000 2 1000 1 1000 3 1000 4 1000 3 1000 2 1000 1 1000 1 1000 3 1000 1 1000 1 1000 2 1000 1 1000 5 1000 1 1000 3 1000 2 1000 2 1000 2 1000 7 1000 2 1000 3 1000 3 1000 2 1000 2 1000 2 1000 3 1000 3 1000 2 1000 5 1000 3 1000 3 1000 1 1000 2 1000 2 1000 3 1000 4 1000 4 1000 1 1000 2 1000 4 1000 6 1000 6 1000 4 1000 5 1000 4 1000 5 1000 2 1000 2 1000 3 1000 6 1000 3 1000 1 1000 5 1000 2 1000 5 1000 5 1000 4 1000 3 1000 5 1000 4 1000 3 1000 3 1000 6 1000 3 1000 6 1000 7 1000 5 1000 5 1000 6 1000 4 1000 3 1000 4 1000 3 1000 1 1000 21 1000 1 1000 11 1000 11 1000 7 1000 6 1000 1 1000 1 1000 6 1000 6 1000 3 1000 7 1000], :total-error 100345, :normalized-error 100345, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "cd9abe39-9210-4136-b46d-02047325127b", :parent-uuids (#uuid "d524a15e-add5-45ba-9dbe-c6c20059e40c" #uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 1, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 1, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and boolean_empty integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 char_isdigit boolean_invert_first_then_and string_frominteger integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring) integer_swap string_replacefirst string_frominteger integer_pop boolean_stackdepth) exec_when (boolean_eq exec_yank string_first) boolean_empty integer_div boolean_rot) () boolean_and boolean_pop integer_max integer_gte exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter exec_yankdup boolean_dup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split char_yankdup string_containschar \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 0 1 0 0 1 2 1 3 1 2 0 1 0 0 1 0 1 2 0 0 1 0 1 1 0 0 1 4 2 0 1 2 0 1 0 1 0 1 0 6 4 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 0 2 1 3 2 3 2 0 1 1 0 3 1 5 4 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 1 5 3 2 1 0 1 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 0 5 4 6 5 4 2 4 3 5 4 3 2 2 1 3 2 2 1 0 1 20 18 0 1 10 9 10 8 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 414, :normalized-error 414, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "8cb19e9f-993e-419a-aa06-bbf24a0dbef6", :parent-uuids (#uuid "969477e2-882e-425c-b63d-e7d4c207be16" #uuid "24245317-cd9b-4427-be8c-a90a9f74a72e"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction exec_when} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring exec_noop char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth exec_when (\:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (string_replacefirstchar exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 1 0 2 2 1 1 1 1 1 1 1 6 3 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 0 5 3 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 0 5 2 2 0 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 1 5 3 6 4 4 1 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 401, :normalized-error 401, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7aa089b1-2af8-437b-81a7-8aada7495e09", :parent-uuids (#uuid "b5e72f9c-3bfa-4799-ad35-32c9b5346e19" #uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 2 1 0 0 0 0 0 1 0 1 0 2 0 1 0 0 0 2 0 3 1 2 0 1 0 0 0 0 0 2 0 0 0 0 1 1 1 0 0 4 0 0 0 2 0 1 0 1 0 1 0 6 0 1 1 2 1 2 2 1 0 1 0 1 4 2 1 2 0 1 3 4 1 2 2 2 2 0 1 1 1 1 5 2 4 3 1 3 2 0 0 1 6 3 0 5 0 5 3 3 3 4 2 3 2 4 4 1 0 1 1 2 7 5 3 2 8 0 0 4 2 1 8 4 5 4 5 3 4 2 3 4 5 3 9 2 7 2 11 5 8 2 1 5 8 6 5 4 10 4 9 5 6 3 11 2 6 3 4 2 14 0 1 20 18 0 0 10 1 10 0 6 6 5 9 0 0 0 0 5 8 5 11 2 15 6 7], :total-error 539, :normalized-error 539, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "86cca20c-d0ba-4580-805a-397d13a8ef1c", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 1, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq) (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter) string_shove boolean_xor string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [5 1 5 1 5 1 6 1 5 1 6 0 7 2 6 1 5 1 5 1 6 0 6 1 7 0 6 0 5 1 7 1 8 1 7 0 6 0 5 1 5 1 7 0 5 1 5 1 6 0 5 1 9 2 5 1 7 0 6 1 6 1 6 0 11 4 6 0 7 1 7 1 6 0 6 0 6 1 7 1 7 0 6 0 9 1 7 0 7 1 5 1 6 1 6 0 7 1 8 1 8 2 5 1 6 0 8 1 10 4 10 4 8 1 9 3 8 2 9 3 6 1 6 0 7 1 10 3 7 1 5 2 9 2 6 0 9 3 9 3 8 2 7 1 9 3 8 1 7 1 7 1 10 4 7 0 10 4 11 5 9 2 9 3 10 4 8 2 7 1 8 2 7 1 5 2 25 18 5 1 15 9 15 8 11 5 10 4 5 2 5 1 10 4 10 4 7 1 11 5], :total-error 921, :normalized-error 921, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "3a94c0f7-81b4-45e9-917e-1deb088b9c05", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "d1cd4d0e-7a0b-41f8-aae3-75cb3421689b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_containschar} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop exec_shove (exec_yankdup print_boolean char_isletter) boolean_dup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst string_containschar string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter string_shove boolean_dup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [14 0 14 1 14 1 15 0 14 1 15 1 16 0 15 1 14 2 14 2 15 1 15 1 16 1 15 2 14 3 16 1 17 0 16 1 15 2 14 3 14 3 16 1 14 3 14 4 15 3 14 4 18 1 14 5 16 3 15 5 15 5 15 5 20 1 15 6 16 5 16 5 15 6 15 6 15 6 16 5 16 6 15 7 18 4 16 6 16 6 14 8 15 8 15 8 16 7 17 6 17 7 14 10 15 10 17 8 19 6 20 7 18 9 19 8 18 9 19 9 16 12 16 12 17 11 20 8 17 11 15 13 19 9 16 13 19 10 19 10 18 11 17 12 19 11 18 12 17 13 17 14 20 12 17 15 20 13 21 12 19 14 19 14 20 14 18 16 17 17 18 16 17 17 15 20 35 0 15 20 25 10 25 10 21 14 20 15 15 20 15 20 20 15 20 15 17 18 21 14], :total-error 2478, :normalized-error 2478, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "2039c3f7-410e-40d3-81f3-ad9b4ec4b676", :parent-uuids (#uuid "c449e2ad-ff76-45f0-b644-61296b852581" #uuid "d1477c08-11f0-4279-b5e5-084e0eab798f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction string_first} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_frominteger}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq integer_mod boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop string_first) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () integer_gte print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor char_frominteger), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "abe72c92-c1c0-4d7d-b15c-e65d8225f1be", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop) boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1000 0 0 0 0 1 2 0 0 1 1 2 1 1 0 0 0 0 0 1 1 1 0 2 1 1 1 0 0 2 2 3 2 2 1 1 1 0 0 0 0 2 1 0 0 0 1 1 1 0 0 4 3 0 0 2 1 1 1 1 1 1 1 6 5 1 0 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 3 2 1 2 2 0 1 1 0 1 1 2 2 3 2 3 3 0 0 1 1 3 2 5 5 5 5 3 2 4 4 3 3 4 4 1 0 1 1 2 2 5 4 2 2 0 0 4 2 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 1 5 5 6 6 4 3 4 4 5 5 3 3 2 2 3 3 2 2 0 1 20 19 0 0 10 9 10 9 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 1467, :normalized-error 1467, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0a254bc3-b539-4e05-877f-69a9ad454778", :parent-uuids (#uuid "786587f7-d02e-4747-bd38-9f7d4a5fedf7" #uuid "8bfa41dc-8d65-476e-baec-4ac2285d64fb"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_concat} {:close 1, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and exec_pop (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_concat char_allfromstring) char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or) (integer_mult integer_mod) (print_newline string_length) integer_stackdepth char_isdigit integer_yankdup string_fromboolean boolean_flush) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop in1) (char_yank boolean_yankdup char_iswhitespace boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean integer_swap) boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 3 2 2 2 2 2 3 2 2 2 2 2 3 3 2 2 1 2 1 2 2 3 2 3 2 3 1 2 0 2 2 3 3 4 2 2 1 2 0 2 0 3 2 2 0 2 1 3 0 2 1 4 2 2 2 4 0 3 2 2 2 3 2 8 2 3 3 4 2 4 2 3 3 2 3 3 3 4 2 4 3 3 4 5 1 4 3 3 3 2 5 3 5 3 5 4 4 5 3 4 4 2 7 3 7 5 5 7 3 7 4 4 6 6 5 5 6 6 6 3 9 3 9 4 8 7 5 4 8 2 10 6 6 3 10 6 7 5 7 5 8 4 9 6 8 4 9 4 10 4 11 5 9 4 12 7 10 8 9 6 11 6 11 6 11 5 13 4 14 5 13 4 14 2 17 20 3 2 17 11 7 12 7 8 11 7 12 2 17 2 17 6 12 6 12 4 15 8 11], :total-error 993, :normalized-error 993, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "da5afd69-df88-4c20-9672-f11486ecaa8e", :parent-uuids (#uuid "f731fe9d-01b0-4124-a275-a5d4250b5adc" #uuid "efbd89f9-22d6-4c16-babe-dcf263b48dcb"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_k} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction char_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq string_butlast boolean_invert_first_then_and string_swap integer_eq string_emptystring exec_k (string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop boolean_rot) char_swap boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) integer_div string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 4 1 2 0 4 4 0 0 4 2 2 1 4 1 3 1 4 6 1 1 4 2 3 2 3 1 3 1 3 1 3 2 2 2 2 1 3 4 0 2 3 2 2 0 4 1 3 1 3 2 3 3 2 3 1 0 4 1 3 3 22 5 1 5 1 3 1 4 0 3 1 4 1 1 3 1 3 2 2 5 0 2 2 0 4 4 0 1 13 4 0 4 0 3 1 2 2 4 1 3 1 2 3 2 2 5 1 2 45 5 0 6 2 4 0 4 0 5 1 3 2 2 17 3 12 2 2 0 100 20 15 0 4 10 5 10 5 6 2 5 1 0 4 0 4 5 1 5 1 2 2 6 2], :total-error 641, :normalized-error 641, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "295fb7a4-0ecc-43d5-8674-8eff577758f7", :parent-uuids (#uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_replacefirst integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 2 1 3 0 2 4 0 0 2 2 1 1 1 1 1 1 1 6 2 1 1 2 0 2 2 1 1 1 1 1 2 2 1 2 0 1 2 4 1 2 0 2 1 0 2 1 1 1 1 2 2 3 1 3 0 0 2 1 2 3 0 5 2 5 2 3 1 4 1 3 1 4 0 1 1 1 1 2 0 5 3 2 1 0 2 4 1 1 1 4 2 4 1 3 1 2 0 4 2 3 0 2 0 2 1 5 3 2 0 5 3 6 4 4 2 4 1 5 3 3 1 2 0 3 1 2 1 0 2 20 16 0 2 10 7 10 8 6 4 5 2 0 2 0 2 5 2 5 2 2 1 6 3], :total-error 410, :normalized-error 410, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "eb109e05-620c-4b0f-848f-f36b4b14d2b5", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_749} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_emptystring exec_stackdepth exec_yank) (char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first boolean_empty integer_div boolean_rot boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars tagged_749 boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 1 0 4 2 3 1 3 1 3 1 3 6 0 1 3 2 2 2 2 1 3 1 4 1 3 2 2 2 3 1 3 4 2 2 3 2 2 0 4 1 3 1 3 2 2 3 2 3 2 0 4 1 3 3 2 5 1 5 1 3 2 4 0 3 2 4 0 1 4 1 3 2 2 5 0 2 2 0 4 4 2 1 3 4 1 4 0 3 2 2 2 4 0 3 2 2 2 2 2 5 1 2 3 5 0 6 1 4 1 4 0 5 1 3 1 2 2 3 1 2 2 0 4 20 14 0 4 10 6 10 5 6 2 5 1 0 4 0 4 5 1 5 0 2 2 6 2], :total-error 448, :normalized-error 448, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6f9e8216-acaa-4577-8d55-6ed681502800", :parent-uuids (#uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult) () ())), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d5a7f9ea-6cae-4589-aa64-c1a7529c4dbd", :parent-uuids (#uuid "e3885bf9-80a1-4098-874e-1aec32a84734" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth)) ())))) ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "874e36b8-4346-404d-9a17-6a5c28df9dfb", :parent-uuids (#uuid "ee5b5e8c-0e1e-4d4a-b9b4-590438e42747" #uuid "25f972b0-c4a4-44ef-b0f9-80e5b38d626c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq char_allfromstring integer_mult exec_yankdup exec_when (string_swap string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [7 0 7 1 7 1 7 0 6 1 7 1 7 0 7 1 6 2 7 2 7 1 7 1 7 1 7 2 6 3 7 1 7 0 6 1 7 2 7 3 7 3 7 1 7 3 6 4 7 3 7 4 7 1 7 5 7 3 7 5 7 5 7 5 7 1 7 6 7 5 7 5 7 6 7 6 7 6 7 5 8 6 8 7 8 4 7 6 8 6 8 8 8 8 8 8 9 7 8 6 10 7 9 10 11 10 11 8 11 6 12 7 12 9 12 8 12 9 13 9 13 12 13 12 13 11 13 8 13 11 13 13 13 9 14 13 13 10 14 10 14 11 14 12 15 11 15 12 14 13 15 14 17 12 17 15 15 13 17 12 18 14 18 14 19 14 19 16 19 17 18 16 19 17 20 20 20 0 19 20 20 10 20 10 19 14 20 15 20 20 20 20 20 15 20 15 20 18 19 14], :total-error 1928, :normalized-error 1928, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7d26677f-c06b-4228-8d1b-c1059bb2b69e", :parent-uuids (#uuid "f9b062f5-5690-4fc4-a598-3b15a489b929" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction ""} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction char_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction string_first} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction "2 \" - hQ 2i&"} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction char_shove} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s ("" string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_swap string_replacefirst string_frominteger char_eq integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first boolean_empty) (integer_div boolean_rot) boolean_and boolean_pop char_yank boolean_yankdup "2 \" - hQ 2i&" string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (char_shove) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1) \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 0 2 1 2 1 2 0 2 1 2 1 2 0 2 1 2 2 2 2 2 1 2 1 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 3 2 3 3 1 3 3 3 4 4 3 4 4 5 1 5 5 5 3 6 5 6 5 6 5 7 1 7 6 7 5 7 5 7 6 7 6 7 6 7 5 7 6 7 7 8 4 8 6 8 6 8 8 7 8 9 8 9 7 9 6 10 7 10 10 11 10 11 8 11 6 12 7 11 9 12 8 12 9 13 9 13 12 13 12 13 11 13 8 13 11 13 13 13 9 13 13 13 10 14 10 14 11 14 12 15 11 15 12 15 13 16 14 17 12 17 15 18 13 18 12 18 14 18 14 19 14 19 16 18 17 19 16 19 17 20 20 20 0 20 20 20 10 20 10 20 14 20 15 20 20 20 20 20 15 20 15 20 18 19 14], :total-error 1816, :normalized-error 1816, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "59684154-0c29-4f66-8cd7-fd1bf7f29704", :parent-uuids (#uuid "387aa505-00e3-47a7-b0ed-abb927946105" #uuid "52224fdc-1c93-4086-8ecb-d39a9f440eb6"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gte} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring integer_gte char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean boolean_yank print_integer) () exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) (integer_fromchar) exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_dup boolean_xor boolean_and) ()) () ())), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 2 0 3 4 0 0 4 2 2 1 4 1 4 1 4 6 0 1 5 2 4 2 4 1 5 1 5 1 5 2 4 2 5 1 6 4 3 2 5 2 5 0 7 1 7 1 7 2 6 3 5 3 6 0 9 1 9 3 7 5 5 5 6 3 8 4 7 3 8 4 8 1 11 1 11 2 10 5 7 2 10 0 12 4 8 1 12 4 9 4 9 3 10 2 11 4 10 3 11 2 12 2 13 5 11 2 14 5 12 6 11 4 13 4 13 5 13 3 15 2 16 3 15 2 16 0 19 20 1 0 19 10 9 10 9 6 13 5 14 0 19 0 19 5 14 5 14 2 17 6 13], :total-error 943, :normalized-error 943, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "5e72c0aa-e23d-40b4-bfb1-bb8e95339f6e", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "6125b17d-f77e-436f-8a58-e098643c9d67"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_nth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq char_allfromstring integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger char_stackdepth integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (string_stackdepth string_nth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 1 0 0 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 2 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 4 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 1 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 2 4 2 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 18 0 2 10 8 10 8 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 406, :normalized-error 406, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d2df6f11-77f9-4b01-a06a-4b60bec28ba7", :parent-uuids (#uuid "f9b062f5-5690-4fc4-a598-3b15a489b929" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth) exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) \^ char_stackdepth string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 0 2 1 1 1 0 0 0 0 1 0 1 1 2 2 1 0 0 0 2 1 3 2 2 1 1 1 0 0 0 0 2 2 0 0 0 0 1 0 0 0 4 3 0 0 2 2 1 1 1 1 1 1 6 5 1 1 2 2 2 1 1 1 1 1 1 0 2 2 2 2 1 1 4 3 2 2 2 2 0 0 1 1 1 1 2 1 3 3 3 3 0 0 1 1 3 2 5 5 5 4 3 3 4 4 3 3 4 3 1 1 1 1 2 2 5 5 2 1 0 0 4 3 1 1 4 4 4 4 3 3 2 2 4 4 3 2 2 2 2 1 5 5 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 1 0 0 20 19 0 0 10 9 10 10 6 6 5 4 0 0 0 0 5 5 5 5 2 1 6 5], :total-error 465, :normalized-error 465, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "5dbf5cf1-4aba-4add-9517-96954dcdd842", :parent-uuids (#uuid "16ea5886-731c-4ba2-8ba6-c7893b9ab2a0" #uuid "6125b17d-f77e-436f-8a58-e098643c9d67"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) string_replacefirstchar string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1000 1 1 1 1 1 1 1 1 2 1 2 2 2 1 2 0 2 0 2 1 2 1 3 0 3 2 3 3 3 1 3 1 3 1 3 1 3 3 3 3 3 0 3 3 4 0 4 1 4 0 5 1 5 5 5 3 6 5 6 4 6 5 7 0 7 1 7 4 7 4 7 4 7 4 7 4 7 3 8 3 8 4 8 1 8 4 8 3 8 5 9 4 9 4 9 4 9 3 10 2 10 5 11 4 11 17 11 0 12 0 12 2 12 1 12 2 13 2 13 4 13 4 13 3 13 1 13 3 13 5 13 1 14 13 14 1 14 1 14 2 14 3 15 2 15 2 15 4 16 3 17 0 17 40 18 1 18 1 18 1 18 1 19 0 19 3 19 17 19 10 19 3 20 92 20 14 20 5 20 4 20 4 20 1 20 0 20 5 20 5 20 0 20 0 20 3 20 1], :total-error 2442, :normalized-error 2442, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "12acb40e-0125-40f3-a28b-fb402e6f03f3", :parent-uuids (#uuid "7b6226d5-240d-4d52-8b4d-1333fb8f1b1a" #uuid "61931ede-8e4e-4e88-93ee-13ee76d6da82"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction print_boolean} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth print_boolean char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_yankdup "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (\^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth integer_lt integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)) ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b7f419f7-d8af-4851-818a-3dad315116c0", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f" #uuid "969477e2-882e-425c-b63d-e7d4c207be16"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger exec_y (string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 11 1 12 0 11 4 1000 0 10 2 1000 1 10 1 10 1 10 6 1000 1 9 2 10 2 10 1 9 1 9 1 9 2 10 2 9 1 8 4 11 2 9 2 9 0 7 1 7 1 7 2 8 3 9 3 8 0 5 1 5 3 7 5 9 5 8 3 6 4 7 3 6 4 6 1 3 1 3 2 4 5 7 2 4 0 2 4 6 1 2 4 5 4 5 3 4 2 3 4 4 3 3 2 2 2 1 5 3 2 0 5 2 6 3 4 1 4 1 5 1 3 1 2 2 3 1 2 2 0 1000 20 1000 0 1000 10 5 10 5 6 1 5 0 0 5 0 5 5 0 5 0 2 3 6 1], :total-error 29636, :normalized-error 29636, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "3487cf34-6e8d-490f-9b13-080bee14623c", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "d1477c08-11f0-4279-b5e5-084e0eab798f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction char_empty} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring string_first string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (boolean_or integer_mod boolean_empty integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth char_empty string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 0 0 2 2 2 1 1 1 1 1 1 6 2 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 0 5 2 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 1 5 2 2 0 0 2 4 1 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 1 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 16 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 394, :normalized-error 394, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6af475d3-d440-41c8-b5ff-854fe0e57fca", :parent-uuids (#uuid "e9d3b135-6aef-45ef-aa4d-8cfd67b7d371" #uuid "ec94db8e-b78e-45f4-b0a3-3dfd2d36f4f3"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 1, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_not} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction exec_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction char_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_yank} {:close 1, :instruction char_dup} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isdigit} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_shove exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline) (string_substring boolean_not char_empty char_rot integer_dec \s print_string exec_pop (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_shove exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_fromchar string_replacefirst exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and char_swap integer_max integer_gte exec_do*while (print_exec (string_yank in1) char_yank boolean_yankdup string_yank char_dup) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth boolean_frominteger integer_fromboolean exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean char_isdigit tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger print_integer string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 10 0 9 0 9 1 10 0 9 1 9 2 10 1 9 0 8 0 8 1 9 1 9 2 9 1 8 0 7 2 9 3 10 2 9 1 8 0 7 0 7 2 9 0 7 0 6 1 7 0 6 4 9 0 5 2 7 1 5 1 5 1 5 6 9 1 4 2 5 2 5 1 4 1 4 1 4 2 5 2 4 1 3 4 6 2 4 2 4 0 2 1 2 1 2 2 3 3 4 3 3 0 0 1 0 3 2 5 4 5 3 3 1 4 2 3 1 4 1 1 2 1 2 2 1 5 2 2 1 0 3 4 1 1 3 4 0 4 0 3 1 2 2 4 1 3 2 2 3 2 4 5 2 2 5 5 3 6 2 4 4 4 4 5 4 3 6 2 7 3 6 2 7 0 10 20 10 0 10 10 0 10 0 6 4 5 5 0 10 0 10 5 5 5 5 2 8 6 4], :total-error 749, :normalized-error 749, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "44d3d371-92e0-48f2-9dad-b1726fd6e98f", :parent-uuids (#uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85" #uuid "ede29d76-fb71-4d33-92d0-b86baff7854c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 0 0 0 0 0 1 1 1 0 2 2 1 2 0 1 2 3 3 2 2 1 1 2 0 1 0 1 2 2 0 1 0 2 1 3 0 2 4 5 0 3 2 4 1 5 1 5 1 5 6 9 1 6 2 7 2 7 1 6 1 6 1 6 2 7 2 7 1 7 4 8 2 7 2 8 0 6 1 8 1 8 2 9 3 10 3 11 0 8 1 10 3 10 5 14 5 15 3 12 4 14 3 13 4 15 1 11 1 12 2 13 5 15 2 13 0 11 4 13 1 13 4 16 4 16 3 15 2 14 4 17 3 16 2 15 2 16 5 20 2 16 5 21 6 22 4 19 4 20 5 22 3 20 2 19 3 20 2 19 0 18 20 36 0 18 10 28 10 27 6 24 5 23 0 18 0 18 5 23 5 23 2 20 6 24], :total-error 1300, :normalized-error 1300, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "707acdf9-8e0e-49cf-a8e9-a2e2c3a1c9ae", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 1, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 1, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq integer_gt exec_if (exec_y (string_yank integer_mod string_yank tagged_960 exec_while (integer_swap string_nth exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq boolean_swap) string_first) boolean_empty integer_div boolean_rot) boolean_and string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop (string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace) (string_containschar) \^) (integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer) string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "f9974a9b-519c-435f-b01c-a48271396a51", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f" #uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \4} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isdigit} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \4 string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split exec_dup (exec_empty) string_rot char_eq string_stackdepth print_exec (integer_fromboolean exec_pop () string_reverse print_boolean char_isdigit tag_boolean_969 boolean_yank print_integer) string_replacefirst string_replacefirst char_iswhitespace string_containschar \^ integer_div string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte boolean_rot char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger print_integer string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [118 1 118 1 118 1 119 0 118 1 119 1 120 1 119 0 118 2 118 2 119 1 119 0 120 1 119 1 118 2 120 0 121 0 120 0 119 2 118 2 118 2 120 1 118 2 118 4 119 3 118 4 122 0 118 4 120 2 119 5 119 5 119 5 124 1 119 5 120 5 120 4 119 5 119 5 119 5 120 4 120 4 119 5 122 2 120 4 120 4 118 6 119 5 119 6 120 4 121 3 121 3 118 6 119 6 121 3 123 2 123 1 121 3 122 2 121 3 122 2 119 5 119 5 120 5 123 1 120 4 118 6 122 2 119 5 122 3 122 3 121 3 120 4 122 2 121 3 120 4 120 4 123 2 120 4 123 2 124 1 122 3 122 3 123 1 121 4 120 4 121 4 120 4 118 7 138 13 118 6 128 3 128 3 124 1 123 1 118 6 118 6 123 1 123 2 120 4 124 0], :total-error 12353, :normalized-error 12353, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "3363cbe4-fda6-4a37-bce3-46e09ec009df", :parent-uuids (#uuid "ede29d76-fb71-4d33-92d0-b86baff7854c" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult string_removechar exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_mod exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last integer_max boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split char_yankdup string_containschar) \^) char_stackdepth string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 1 1 1 1 1 1 1 1 2 2 2 2 2 1 2 1 2 1 2 2 2 1 3 2 3 2 3 1 3 3 3 3 3 2 3 2 3 1 3 1 3 2 3 1 4 1 4 2 4 1 5 4 5 1 5 2 6 2 6 2 6 2 7 6 7 2 7 3 7 3 7 2 7 2 7 2 7 3 8 2 8 2 8 4 8 2 8 3 8 1 9 2 9 2 9 3 9 4 10 4 10 1 11 2 11 3 11 6 12 6 12 3 12 5 12 4 13 5 13 1 13 2 13 3 13 5 13 3 13 1 13 4 14 2 14 5 14 5 14 4 14 3 15 5 15 4 15 3 16 3 17 6 17 2 18 6 18 7 18 4 18 5 19 6 19 4 19 3 19 4 19 3 20 1 20 20 20 1 20 11 20 10 20 7 20 6 20 1 20 1 20 6 20 6 20 3 20 7], :total-error 1354, :normalized-error 1354, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e9264bf4-8065-45ee-a89f-f406fed84955", :parent-uuids (#uuid "25f972b0-c4a4-44ef-b0f9-80e5b38d626c"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction char_pop} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction \1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction string_rest} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction char_dup} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_dup (exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring exec_noop char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (char_pop exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean \1) (exec_yankdup string_containschar boolean_eq) integer_dup char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) integer_yankdup) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains string_rest exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth char_dup string_concat boolean_xor) integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 0 0 4 2 2 1 3 1 3 1 3 6 1 1 0 2 3 2 1 1 0 1 0 1 0 2 1 2 6 1 5 4 8 2 6 2 6 0 4 1 12 1 4 2 13 3 14 3 23 0 20 1 32 3 34 5 24 5 49 3 47 4 48 3 47 4 63 1 60 1 60 2 45 5 64 2 61 0 59 4 63 1 77 4 62 4 80 3 79 2 78 4 99 3 98 2 97 2 118 5 120 2 141 5 143 6 144 4 142 4 142 5 196 3 166 2 193 3 194 2 193 0 220 20 210 0 220 10 230 10 200 6 196 5 225 0 220 0 220 5 225 5 195 2 222 6 226], :total-error 6545, :normalized-error 6545, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "04fcd3e8-c617-4053-ac75-74fdf8269254", :parent-uuids (#uuid "b5e72f9c-3bfa-4799-ad35-32c9b5346e19"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction string_take} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) string_take boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) (integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) string_replacefirstchar string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 2 0 2 0 3 1 2 0 3 3 4 0 3 1 2 2 2 2 3 3 3 1 4 5 3 10 2 6 4 8 5 3 4 5 3 7 2 6 2 6 4 5 2 6 2 12 3 17 2 12 6 19 2 20 4 22 3 37 3 31 3 37 8 41 3 29 4 58 4 58 3 50 3 43 3 50 4 51 4 43 3 65 6 60 4 58 4 66 2 56 3 82 3 82 4 92 5 93 5 741 2 53 3 122 5 113 7 159 7 173 5 135 6 172 5 147 6 212 3 144 3 170 4 184 7 174 4 184 2 156 6 173 3 197 6 228 6 214 5 199 4 212 6 244 5 243 4 242 4 274 7 311 4 274 7 365 8 402 6 346 6 364 7 404 5 402 4 382 5 402 4 382 2 132 22 360 2 380 12 18 12 550 8 506 7 485 2 75 2 380 6 465 7 425 4 422 8 506], :total-error 15809, :normalized-error 15809, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "3d512501-6697-4747-9d3d-2c2c50af3fdf", :parent-uuids (#uuid "cdafd84d-3f6e-44e8-89b5-40ca2f5a90f8" #uuid "61931ede-8e4e-4e88-93ee-13ee76d6da82"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction char_isletter} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 1, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction print_exec} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (char_isletter in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_removechar integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while () integer_swap) string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar print_exec () string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove) print_integer string_parse_to_chars integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq) (integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 0 0 0 0 0 1 1 0 0 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 4 1 2 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 2 2 0 2 0 0 3 1 2 1 1 2 0 3 0 3 1 0 2 1 1 3 1 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 2 4 2 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 0 3 20 18 0 2 10 7 10 8 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 410, :normalized-error 410, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ab578387-d3e9-4ec1-b1f5-4b1c94fbdb49", :parent-uuids (#uuid "73edc989-55cf-4985-b9c5-9c02dc61a294"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction tag_integer_923} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_containschar} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty exec_s (\newline string_substring string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring tag_integer_923 string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop exec_shove (exec_yankdup print_boolean char_isletter) boolean_dup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (boolean_and exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) (exec_do*times (string_replacefirst string_containschar string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 3 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 1 5 2 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 1 5 3 2 0 0 2 4 2 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 0 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 400, :normalized-error 400, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4bc7389b-f9d9-404f-91f2-239737813a21", :parent-uuids (#uuid "d1477c08-11f0-4279-b5e5-084e0eab798f"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction string_eq} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap integer_eq boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot integer_dec boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) () exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space string_eq string_shove in1 string_length integer_lt string_containschar \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4df4b383-9524-4038-8a75-5ff3600c39b8", :parent-uuids (#uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52" #uuid "07bdfa30-dca2-4cfa-a206-fd3e822490cb"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \4} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \4 string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush string_last exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq integer_max boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 3 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 1 5 2 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 1 5 3 2 0 0 2 4 2 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 0 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 400, :normalized-error 400, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b7eaf361-9f6e-4a08-b53b-53e7d117f461", :parent-uuids (#uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_nth} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot exec_when (string_swap in1 integer_min string_nth exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (string_replacefirstchar exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 1 0 1 0 1 0 1 0 2 1 2 1 2 1 2 2 2 2 2 1 2 1 3 0 3 1 3 2 3 0 3 0 3 1 3 1 3 2 3 2 3 0 3 2 4 2 4 1 4 2 5 1 5 2 5 0 6 1 6 1 6 1 7 3 7 1 7 0 7 0 7 1 7 1 7 1 7 0 8 0 8 1 8 1 8 0 8 0 8 2 9 1 9 1 9 0 9 1 10 1 10 2 11 1 11 0 11 3 12 3 12 1 12 2 12 1 13 2 13 1 13 1 13 0 13 3 13 0 13 2 13 1 14 1 14 2 14 2 14 1 14 0 15 2 15 1 15 0 16 0 17 3 17 0 18 3 18 4 18 2 18 2 19 3 19 1 19 0 19 1 19 0 20 2 20 17 20 2 20 8 20 8 20 4 20 3 20 2 20 2 20 3 20 3 20 0 20 4], :total-error 1188, :normalized-error 1188, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "5eda2027-78d9-45e3-831c-5e7538e9c362", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction integer_lte} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction char_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction char_rot}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (boolean_xor exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) print_boolean boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (integer_lte string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq string_empty exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove char_swap integer_gte string_stackdepth boolean_eq string_concat boolean_xor char_rot), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 3 1 2 0 1 2 3 3 4 2 3 1 2 0 1 0 1 2 3 0 1 0 2 1 3 0 2 4 7 0 3 2 5 1 5 1 5 1 5 6 11 1 6 2 7 2 7 1 6 1 6 1 6 2 7 2 8 1 7 4 10 2 8 2 8 0 6 1 8 1 8 2 9 3 10 3 11 0 8 1 10 3 12 5 14 5 15 3 13 4 14 3 13 4 15 1 12 1 12 2 13 5 16 2 13 0 11 4 15 1 13 4 16 4 16 3 15 2 14 4 17 3 16 2 15 2 16 5 20 2 17 5 21 6 22 4 20 4 20 5 22 3 20 2 19 3 20 2 19 0 18 20 38 0 18 10 28 10 28 6 24 5 23 0 18 0 18 5 23 5 23 2 20 6 24], :total-error 1331, :normalized-error 1331, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "83f641a8-4ca1-4ee6-8d05-c6fc8f548aa1", :parent-uuids (#uuid "52224fdc-1c93-4086-8ecb-d39a9f440eb6" #uuid "a4bd5375-54aa-48c6-89ff-47d8df72482d"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction print_char} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_containschar) \^ char_stackdepth string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit print_char in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () ()), :errors [1 1000 0 1000 0 1000 2 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 3 1000 1 1000 0 1000 2 1000 4 1000 2 1000 2 1000 0 1000 0 1000 3 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 3 2 1000 2 1000 0 1000 1 7 1 1000 2 1000 3 1000 3 1 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 10 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 12 20 1000 0 1000 10 9 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 94293, :normalized-error 94293, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "bc444bd8-1c00-4546-8e26-f8633d7f88b0", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "4b8dfc95-9697-47c0-a1b5-fa3c69812d9c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction string_take} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 3, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_flush} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction string_eq} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction string_containschar} {:close 2, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) string_take boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and) (exec_yankdup print_boolean char_isletter) boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer))) exec_do*times (string_replacefirst) char_iswhitespace string_flush) (\^) (char_stackdepth) string_fromboolean string_split \space string_eq string_shove in1 string_length integer_lt string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 2 0 3 4 0 0 4 2 2 1 4 1 4 1 4 6 0 1 5 2 4 2 4 1 5 1 5 1 5 2 4 2 5 1 6 4 3 2 5 2 5 0 7 1 7 1 7 2 6 3 5 3 6 0 9 1 9 3 7 5 5 5 6 3 8 4 7 3 8 4 8 1 11 1 11 2 10 5 7 2 10 0 12 4 8 1 12 4 9 4 9 3 10 2 11 4 10 3 11 2 12 2 13 5 11 2 14 5 12 6 11 4 13 4 13 5 13 3 15 2 16 3 15 2 16 0 19 20 1 0 19 10 9 10 9 6 13 5 14 0 19 0 19 5 14 5 14 2 17 6 13], :total-error 943, :normalized-error 943, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0a649a77-8c71-4ed1-8bd6-eee2e0907789", :parent-uuids (#uuid "cdafd84d-3f6e-44e8-89b5-40ca2f5a90f8"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_while (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_do*count (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace exec_dup (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 0 1 2 0 2 2 0 3 0 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 3 0 3 4 0 0 4 2 3 1 5 1 4 1 5 6 0 1 6 2 4 2 4 1 6 1 5 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 7 1 8 1 8 2 6 3 5 3 6 0 9 1 10 3 8 5 5 5 7 3 9 4 8 3 9 4 8 1 11 1 12 2 10 5 7 2 10 0 12 4 8 1 13 4 10 4 9 3 11 2 11 4 10 3 11 2 12 2 13 5 11 2 15 5 13 6 10 4 14 4 14 5 14 3 16 2 16 3 16 2 16 0 19 20 0 0 19 10 4 10 4 6 11 5 13 0 19 0 19 5 14 5 14 2 17 6 11], :total-error 955, :normalized-error 955, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9ccba34f-28c1-49db-871f-1c5dffcbaa25", :parent-uuids (#uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52" #uuid "e9d3b135-6aef-45ef-aa4d-8cfd67b7d371"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction print_char} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 1, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction char_pop} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_swap} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction \newline} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (print_char char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (integer_mod in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger string_stackdepth integer_gt exec_if (exec_y (string_yank tagged_960 integer_eq integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_dup () exec_when (boolean_eq exec_yank string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max boolean_invert_second_then_and exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush) integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot) tag_boolean_969 boolean_yank char_pop)) (string_parse_to_chars integer_swap char_iswhitespace \newline) (\^) char_stackdepth) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq string_fromboolean string_split \space char_isletter string_shove \% boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 2 0 1 1 2 2 3 1 2 0 1 0 1 1 2 1 2 2 3 1 2 0 1 2 3 3 4 2 3 1 2 0 1 0 1 2 3 0 1 0 1 1 2 0 1 4 5 0 1 2 3 1 2 1 2 1 2 6 7 1 2 2 3 2 3 1 2 1 2 1 2 2 3 2 3 1 2 4 5 2 3 2 3 0 1 1 2 1 2 2 3 3 4 3 4 0 1 1 2 3 4 5 6 5 6 3 4 4 5 3 4 4 5 1 2 1 2 2 3 5 6 2 3 0 1 4 5 1 2 4 5 4 5 3 4 2 3 4 5 3 4 2 3 2 3 5 6 2 3 5 6 6 7 4 5 4 5 5 6 3 4 2 3 3 4 2 3 0 1 20 21 0 1 10 11 10 11 6 7 5 6 0 1 0 1 5 6 5 6 2 3 6 7], :total-error 590, :normalized-error 590, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "818a81b6-7c2f-4e1a-85da-b10ea528d54a", :parent-uuids (#uuid "fb89f621-6a5b-4815-aad5-8b7f2295c53d" #uuid "00e159c5-727f-405b-9676-fc603e28b7c7"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_nth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_nth exec_while (boolean_invert_first_then_and string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 3 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 4 3 5 0 10 1 10 3 8 5 2 5 5 3 9 4 5 3 9 4 6 1 12 1 12 2 9 5 6 2 11 0 13 4 7 1 13 4 7 4 8 3 11 2 10 4 9 3 12 2 11 2 14 5 10 2 15 5 10 6 7 4 11 4 11 5 11 3 13 2 15 3 13 2 17 0 20 20 0 0 20 10 2 10 1 6 8 5 11 0 20 0 20 5 11 5 13 2 18 6 9], :total-error 933, :normalized-error 933, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "c34efd45-8e11-4fab-a4ef-fbbab04613fb", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction char_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction string_take} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_flush} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction string_eq} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction char_frominteger} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank char_shove exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) string_take boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_flush) \^) char_stackdepth) (string_fromboolean string_split \space string_eq string_shove in1 string_length integer_lt char_frominteger) (\^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 1 0 2 2 1 1 1 1 1 1 1 6 3 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 0 5 3 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 0 5 2 2 0 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 1 5 3 6 4 4 1 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 402, :normalized-error 402, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "f458c407-dcbc-445c-b27d-38790a576132", :parent-uuids (#uuid "cdafd84d-3f6e-44e8-89b5-40ca2f5a90f8" #uuid "ede29d76-fb71-4d33-92d0-b86baff7854c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 1 2 0 1 0 0 1 0 1 1 1 1 0 2 1 1 1 0 1 2 0 3 1 2 0 1 0 0 1 0 1 2 1 0 1 0 1 1 1 0 1 4 2 0 1 2 1 1 0 1 0 1 0 6 4 1 0 2 1 2 0 1 0 1 0 1 1 2 1 2 1 1 0 4 2 2 1 2 1 0 1 1 0 1 0 2 0 3 2 3 2 0 1 1 0 3 1 5 4 5 3 3 2 4 3 3 2 4 2 1 0 1 0 2 1 5 4 2 0 0 1 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 1 2 1 2 0 5 4 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 0 0 1 20 18 0 1 10 8 10 9 6 5 5 3 0 1 0 1 5 4 5 4 2 0 6 4], :total-error 413, :normalized-error 413, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "837e8856-3909-4444-a723-5cfb8b5afcb6", :parent-uuids (#uuid "39d5f109-9fd2-41a7-91e6-6fbbec6f1133"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gte} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_first} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring integer_gte char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap exec_when (boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq string_first) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) string_frominteger boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) (string_fromboolean string_split char_yankdup string_containschar) \^) (char_stackdepth) (string_fromboolean string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains) integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 0 0 0 1 0 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 3 1 2 0 3 4 0 0 4 2 2 1 4 1 5 1 4 6 1 1 6 2 5 2 5 1 5 1 5 1 5 2 4 2 4 1 5 4 2 2 5 2 4 0 6 1 5 1 5 2 5 3 4 3 3 0 6 1 5 3 4 5 1 5 1 3 3 4 2 3 3 4 3 1 5 1 5 2 4 5 2 2 4 0 6 4 2 1 7 4 2 4 2 3 3 2 4 4 3 3 3 2 5 2 4 5 1 2 5 5 2 6 0 4 2 4 2 5 1 3 4 2 5 3 5 2 4 0 8 20 13 0 6 10 2 10 3 6 0 5 1 0 6 0 6 5 1 5 1 2 4 6 0], :total-error 544, :normalized-error 544, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "06e05e1d-e243-4635-ac52-296cf3b9c3b9", :parent-uuids (#uuid "f9e4a682-81ef-4293-8017-fa8f84c406e7" #uuid "6125b17d-f77e-436f-8a58-e098643c9d67"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction string_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction char_yank} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction char_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (string_pop integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop char_yank char_rot string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") string_parse_to_chars "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ()))), :errors [2 4 2 3 2 3 1 4 2 3 1 3 0 4 1 3 2 2 2 2 1 3 1 3 1 3 2 2 3 1 1 3 1 4 1 3 2 2 3 1 3 1 1 3 3 1 4 0 3 1 4 0 3 3 5 1 3 1 5 1 5 1 5 1 5 3 6 2 5 1 5 1 6 2 6 2 6 2 5 1 6 2 7 3 6 0 6 2 6 2 8 4 8 4 8 4 7 3 7 2 8 3 10 6 10 6 9 4 9 2 10 3 10 5 10 4 10 5 11 5 12 8 12 8 11 7 11 4 11 7 13 9 11 5 13 9 12 6 12 6 12 7 12 8 13 7 13 8 13 9 14 10 15 8 15 11 16 9 16 8 16 10 16 10 17 10 17 12 17 13 17 12 17 13 20 16 18 4 20 16 18 6 18 6 18 10 18 11 20 16 20 16 18 11 18 11 18 14 18 10], :total-error 1435, :normalized-error 1435, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "f49be010-dd15-489f-994c-310aa9766e6b", :parent-uuids (#uuid "98c2806d-bcdb-4814-b135-048475c2e702"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction char_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop exec_flush exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte char_eq boolean_eq string_concat boolean_xor integer_mult), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "59c74873-8910-4867-ba12-89388990c246", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "98c2806d-bcdb-4814-b135-048475c2e702"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup integer_mult char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 0 2 1 1 1 0 2 0 2 1 0 1 1 2 0 1 2 0 2 2 1 3 0 2 1 1 1 0 2 0 2 2 0 0 2 0 2 1 2 0 2 4 1 0 2 2 0 1 1 1 1 1 1 6 3 1 1 2 0 2 1 1 1 1 1 1 2 2 0 2 0 1 1 4 1 2 0 2 0 0 2 1 1 1 1 2 1 3 1 3 1 0 2 1 1 3 0 5 3 5 2 3 1 4 2 3 1 4 1 1 1 1 1 2 0 5 3 2 1 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 0 2 0 2 1 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 1 0 2 20 17 0 2 10 7 10 8 6 4 5 2 0 2 0 2 5 3 5 3 2 1 6 3], :total-error 405, :normalized-error 405, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "73a30785-8c79-4b3c-813b-dbf1cc78f224", :parent-uuids (#uuid "efb204ba-e64f-4129-aa25-3840ff7ade48"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_nth} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_nth exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (string_replacefirstchar exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 1 1 2 0 3 2 1 3 1 2 0 1 2 0 3 0 3 2 1 0 3 0 3 1 2 0 3 4 0 0 3 2 1 1 2 1 2 1 2 6 2 1 2 2 1 2 1 1 2 1 2 1 2 2 1 2 1 1 2 4 0 2 1 2 1 0 3 1 2 1 2 2 1 3 0 3 0 0 3 1 2 3 1 5 2 5 2 3 0 4 1 3 0 4 1 1 2 1 2 2 1 5 2 2 1 0 3 4 0 1 2 4 1 4 1 3 0 2 1 4 1 3 0 2 1 2 1 5 2 2 1 5 2 6 3 4 1 4 1 5 2 3 0 2 1 3 0 2 1 0 3 20 16 0 3 10 7 10 7 6 3 5 2 0 3 0 3 5 2 5 2 2 1 6 3], :total-error 411, :normalized-error 411, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4ececbfb-100e-4927-ba63-e9efb97f95b3", :parent-uuids (#uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 2 1 0 0 0 0 0 1 0 1 0 2 0 1 0 0 0 2 0 3 1 2 0 1 0 0 0 0 0 2 0 0 0 0 1 1 1 0 0 4 0 0 0 2 0 1 0 1 0 1 0 6 0 1 1 2 1 2 2 1 0 1 0 1 4 2 1 2 0 1 3 4 1 2 2 2 2 0 1 1 1 1 5 2 4 3 1 3 2 0 0 1 6 3 0 5 0 5 3 3 3 4 2 3 2 4 4 1 0 1 1 2 7 5 3 2 8 0 0 4 2 1 8 4 5 4 5 3 4 2 3 4 5 3 9 2 7 2 11 5 8 2 1 5 8 6 5 4 10 4 9 5 6 3 11 2 6 3 4 2 14 0 1 20 18 0 0 10 1 10 0 6 6 5 9 0 0 0 0 5 8 5 11 2 15 6 7], :total-error 539, :normalized-error 539, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6c346a02-77db-4833-ad66-1df6a1cf9623", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction print_char} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction string_length}), :program (integer_pop print_char integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop boolean_and \:) (exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split exec_empty) string_rot) (char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth in1 string_length), :errors [6 1 6 0 6 0 7 1 6 0 7 0 8 1 7 0 6 1 6 1 7 0 7 0 8 0 7 1 6 2 8 0 9 1 8 0 7 1 6 2 6 2 8 0 6 2 6 3 7 2 6 3 10 0 6 4 8 2 7 4 7 4 7 4 12 0 7 5 8 4 8 4 7 5 7 5 7 5 8 4 8 5 7 6 10 3 8 5 8 5 6 7 7 7 7 7 8 6 9 5 9 6 6 9 7 9 9 7 11 5 11 6 9 8 10 7 9 8 10 8 7 11 7 11 8 10 11 7 8 10 6 12 10 8 7 12 10 9 10 9 9 10 8 11 10 10 9 11 8 12 8 13 11 11 8 14 11 12 12 11 10 13 10 13 11 13 9 15 8 16 9 15 8 16 6 19 26 1 6 19 16 9 16 9 12 13 11 14 6 19 6 19 11 14 11 14 8 17 12 13], :total-error 1543, :normalized-error 1543, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "78328020-063b-4fbf-9851-6b39d00197f4", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "85a8341c-6dbf-4070-98d6-a06470f25c1c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction char_isletter} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 1, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction print_exec} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add}), :program (integer_pop char_stackdepth boolean_shove integer_rot integer_mult exec_yankdup exec_when (char_isletter in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_removechar integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while () integer_swap) string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_if (boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar print_exec () string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove) print_integer string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add) ()))) ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "852f4f77-402c-4ecc-a25d-5036ff10e513", :parent-uuids (#uuid "c449e2ad-ff76-45f0-b644-61296b852581" #uuid "73edc989-55cf-4985-b9c5-9c02dc61a294"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction print_integer} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \newline string_substring string_nth print_integer char_rot integer_dec string_occurrencesofchar print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean integer_eq) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar \^ char_stackdepth string_fromboolean string_split print_integer integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring char_allfromstring exec_noop exec_k () (\space char_isletter string_shove \% integer_dec string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 0 1 1 1 1 1 0 1 1 2 1 2 0 2 1 2 2 2 2 2 1 2 1 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 3 3 3 3 1 3 3 4 4 4 3 4 4 5 0 5 4 5 2 6 4 6 4 6 3 7 1 7 3 7 3 7 2 7 3 7 3 7 4 7 2 8 2 8 3 7 0 8 2 8 2 8 4 8 4 9 4 9 2 8 2 9 1 10 4 11 3 11 1 11 0 12 1 12 1 12 0 12 1 13 0 13 3 13 3 13 3 13 1 13 2 13 5 13 1 14 3 14 1 14 0 14 1 14 2 15 0 15 2 14 2 16 2 17 0 17 2 18 0 18 1 18 1 18 1 19 1 18 2 19 2 18 1 18 2 20 5 20 15 20 4 19 6 20 5 20 1 20 1 20 5 20 4 20 1 20 0 20 2 20 2], :total-error 1237, :normalized-error 1237, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "5e67b403-d610-47d8-8840-56a8d812ec24", :parent-uuids (#uuid "ee5b5e8c-0e1e-4d4a-b9b4-590438e42747" #uuid "4e318e6e-c50b-4903-91a6-c2fb7cc74d95"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult) () ()) () ()))), :errors [0 1000 1 1000 1 1000 2 1000 1 1000 3 1000 4 1000 3 1000 2 1000 2 1000 3 1000 3 1000 5 1000 4 1000 3 1000 5 1000 6 1000 5 1000 4 1000 3 1000 3 1000 5 1000 3 1000 4 1000 5 1000 4 1000 9 1000 5 1000 7 1000 7 1000 7 1000 7 1000 13 1000 8 1000 9 1000 9 1000 8 1000 8 1000 8 1000 9 1000 10 1000 9 1000 12 1000 10 1000 10 1000 8 1000 10 1000 10 1000 11 1000 12 1000 13 1000 10 1000 12 1000 14 1000 16 1000 17 1000 15 1000 16 1000 15 1000 17 1000 14 1000 14 1000 15 1000 18 1000 15 1000 13 1000 17 1000 15 1000 18 1000 18 1000 17 1000 16 1000 19 1000 18 1000 17 1000 18 1000 22 1000 19 1000 23 1000 24 1000 22 1000 22 1000 24 1000 22 1000 21 1000 22 1000 21 1000 20 1000 40 1000 20 1000 30 1000 30 1000 26 1000 25 1000 20 1000 20 1000 25 1000 25 1000 22 1000 26 1000], :total-error 101278, :normalized-error 101278, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "270bbf73-9f30-4f48-bf5d-7fc87e9145d1", :parent-uuids (#uuid "e683010d-39b4-4603-b366-90e6074cad3f" #uuid "c449e2ad-ff76-45f0-b644-61296b852581"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (string_emptystring integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and string_flush integer_fromboolean exec_pop () boolean_pop print_boolean string_occurrencesofchar exec_k (boolean_yank print_integer) () exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult)) () ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "99f94976-fdae-4f27-a8e2-ed0a6d13edf4", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f" #uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 1, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth)) (exec_when (boolean_eq exec_yank) string_first boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup) (char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove) \% boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 1 0 0 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 0 1 1 0 0 4 4 0 0 2 2 1 1 1 1 1 1 6 6 1 1 2 2 2 2 1 1 1 1 1 1 2 2 2 2 1 1 4 4 2 2 2 2 0 0 1 1 1 1 2 2 3 3 3 3 0 0 1 1 3 3 5 5 5 5 3 3 4 4 3 3 4 4 1 1 1 1 2 2 5 5 2 2 0 0 4 4 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 2 0 0 20 20 0 0 10 10 10 10 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 490, :normalized-error 490, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "681d3559-825b-43a8-a6c4-5b87e7e8363a", :parent-uuids (#uuid "00e159c5-727f-405b-9676-fc603e28b7c7"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 1 2 0 1 0 0 1 0 1 1 1 1 0 2 1 1 1 0 1 2 0 3 1 2 0 1 0 0 1 0 1 2 1 0 1 0 1 1 1 0 1 4 2 0 1 2 1 1 0 1 0 1 0 6 4 1 0 2 1 2 0 1 0 1 0 1 1 2 1 2 1 1 0 4 2 2 1 2 1 0 1 1 0 1 0 2 0 3 2 3 2 0 1 1 0 3 1 5 4 5 3 3 2 4 3 3 2 4 2 1 0 1 0 2 1 5 4 2 0 0 1 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 1 2 1 2 0 5 4 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 0 0 1 20 18 0 1 10 8 10 9 6 5 5 3 0 1 0 1 5 4 5 4 2 0 6 4], :total-error 413, :normalized-error 413, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "69418741-5ca9-4920-9cdd-302f54832aff", :parent-uuids (#uuid "6ff91ab2-b72f-4d74-907a-c657441bfae8" #uuid "d524a15e-add5-45ba-9dbe-c6c20059e40c"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction string_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction char_yank} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 1, :instruction integer_add} {:close 0, :instruction "K;WuaPq6 ' q7"} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction char_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 1, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction boolean_swap} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction "z{l}u\"6T   $2"} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq}), :program (string_pop integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop char_yank char_rot string_removechar string_yankdup integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add) "K;WuaPq6 ' q7" string_parse_to_chars "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit integer_yankdup string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline boolean_swap string_first char_rot string_fromboolean boolean_yankdup char_iswhitespace exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_swap string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add "z{l}u\"6T   $2" integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq), :errors [8 1 8 0 8 0 7 1 7 0 7 0 6 1 7 0 7 1 8 1 7 0 7 0 7 0 7 1 7 2 7 0 6 1 5 0 8 1 8 2 8 2 7 0 8 2 7 3 7 2 8 3 6 0 8 4 7 2 8 4 8 4 8 4 6 0 8 5 7 4 7 4 8 5 8 5 7 5 8 4 6 5 8 6 6 3 7 5 8 5 8 7 9 7 8 7 8 6 8 5 9 6 10 9 10 9 9 7 9 5 10 6 11 8 11 7 12 8 11 8 12 11 13 11 11 10 11 7 11 10 13 12 11 8 13 12 11 9 12 9 12 10 13 11 13 10 13 11 13 12 14 13 15 11 16 14 14 12 15 11 16 13 16 13 17 13 17 15 18 16 17 15 16 16 20 19 18 1 19 19 18 9 18 9 17 13 18 14 20 19 20 19 18 14 18 14 18 17 17 13], :total-error 1779, :normalized-error 1779, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e3be747d-a470-42c9-a5ec-b4e2a0e0aede", :parent-uuids (#uuid "f829219d-6d72-4c4c-907a-970c004564b3" #uuid "60341fdb-e0f5-4e88-a0c3-0ff34bd2e8f7"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop) boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1000 0 0 0 0 1 2 0 0 1 1 2 1 1 0 0 0 0 0 1 1 1 0 2 1 1 1 0 0 2 2 3 2 2 1 1 1 0 0 0 0 2 1 0 0 0 1 1 1 0 0 4 3 0 0 2 1 1 1 1 1 1 1 6 5 1 0 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 3 2 1 2 2 0 1 1 0 1 1 2 2 3 2 3 3 0 0 1 1 3 2 5 5 5 5 3 2 4 4 3 3 4 4 1 0 1 1 2 2 5 4 2 2 0 0 4 2 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 1 5 5 6 6 4 3 4 4 5 5 3 3 2 2 3 3 2 2 0 1 20 19 0 0 10 9 10 9 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 1467, :normalized-error 1467, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "81789e58-e5ce-4ef2-8036-17779b939902", :parent-uuids (#uuid "a4bd5375-54aa-48c6-89ff-47d8df72482d" #uuid "786587f7-d02e-4747-bd38-9f7d4a5fedf7"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_pop char_stackdepth integer_eq integer_rot integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (string_replacefirstchar exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 1 0 0 0 0 1 1 0 0 1 1 2 1 1 1 0 2 0 2 1 1 1 1 2 0 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 0 0 2 0 2 1 1 0 2 4 1 0 2 2 0 1 1 1 1 1 1 6 3 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 1 2 0 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 0 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 8 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 402, :normalized-error 402, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "786d6f1e-8e0f-48f8-a73b-d7d6e3ca34c7", :parent-uuids (#uuid "24245317-cd9b-4427-be8c-a90a9f74a72e" #uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (string_fromboolean string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last string_flush boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 0 1 0 1 0 2 0 1 0 2 1 3 0 2 0 1 2 1 2 2 1 2 0 3 1 2 1 1 2 3 1 4 0 3 1 2 2 1 2 1 2 3 1 1 2 1 2 2 1 1 2 5 0 1 2 3 2 2 1 2 1 2 1 7 2 2 1 3 1 3 0 2 1 2 1 2 1 3 0 3 1 2 1 5 1 3 1 3 0 1 2 2 1 2 2 3 0 4 1 4 1 1 2 2 1 4 0 6 2 6 3 4 0 5 2 4 1 5 2 2 2 2 1 3 1 6 2 3 0 1 2 5 1 2 1 5 1 5 2 4 1 3 0 5 2 4 1 3 0 3 0 6 2 3 1 6 2 7 3 5 1 5 1 6 3 4 0 3 0 4 1 3 0 1 2 21 16 1 2 11 8 11 7 7 3 6 3 1 2 1 2 6 3 6 2 3 0 7 4], :total-error 494, :normalized-error 494, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9bfd7aa4-6abc-4bfb-b56e-fb1e3fc55179", :parent-uuids (#uuid "d8b481d9-8a3c-4d34-abe7-697a52fa5e89"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gte} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_first} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring integer_gte char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq string_first) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_yankdup print_boolean char_isletter) boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter) (string_shove in1 string_length integer_lt) (integer_fromchar) exec_noop string_eq integer_fromstring string_fromboolean exec_do*times (integer_sub string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 0 0 0 1 2 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 1 1 1 0 2 2 0 3 2 2 0 1 0 0 2 0 2 2 1 0 2 0 3 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 2 1 1 2 2 2 0 1 1 1 1 1 2 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 1 1 2 2 0 3 1 3 0 0 3 1 1 3 1 5 2 5 3 3 0 4 2 3 0 4 2 1 1 1 1 2 1 5 3 2 0 0 2 4 2 1 1 4 1 4 2 3 0 2 0 4 2 3 1 2 0 2 0 5 2 2 0 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 3 20 17 0 2 10 8 10 7 6 3 5 3 0 3 0 2 5 3 5 2 2 0 6 4], :total-error 396, :normalized-error 396, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "31c662c8-e91d-425b-89a8-384f706717f8", :parent-uuids (#uuid "b37582b3-f36e-4af6-8480-4d16a7f36fbe" #uuid "6125b17d-f77e-436f-8a58-e098643c9d67"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) \^ char_stackdepth string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 2 2 2 1 1 0 1 0 1 1 2 1 1 2 2 1 2 0 1 2 3 3 3 2 2 1 2 0 1 0 1 2 2 0 1 0 1 1 2 0 1 4 4 0 1 2 2 1 2 1 2 1 2 6 6 1 2 2 3 2 3 1 2 1 2 1 2 2 3 2 2 1 2 4 4 2 2 2 3 0 1 1 2 1 2 2 3 3 4 3 4 0 1 1 2 3 3 5 6 5 6 3 3 4 5 3 4 4 5 1 1 1 2 2 3 5 5 2 3 0 1 4 4 1 2 4 5 4 5 3 4 2 3 4 5 3 4 2 3 2 3 5 6 2 2 5 6 6 7 4 4 4 5 5 6 3 4 2 3 3 4 2 3 0 1 20 20 0 1 10 11 10 10 6 7 5 6 0 1 0 1 5 6 5 6 2 3 6 7], :total-error 566, :normalized-error 566, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d2b32b4b-b3db-4aae-b573-a3eb1046258a", :parent-uuids (#uuid "2087a5e0-a8a4-4e01-8bbc-e07d9182bd60" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 1, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 1, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter boolean_dup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop (string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace) string_containschar) (\^) integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer) (string_shove integer_add string_indexofchar) integer_gte in1 char_isdigit integer_swap in1) string_length integer_lt integer_fromchar exec_noop exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 0 1 0 0 2 2 0 3 0 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 3 4 0 0 4 2 1 1 3 1 4 1 3 6 0 1 4 2 2 2 2 1 4 1 5 1 4 2 3 2 4 1 5 4 2 2 4 2 4 0 7 1 6 1 6 2 4 3 3 3 4 0 9 1 8 3 6 5 1 5 3 3 7 4 4 3 7 4 4 1 11 1 10 2 8 5 5 2 8 0 12 4 6 1 11 4 6 4 7 3 9 2 9 4 8 3 9 2 10 2 11 5 9 2 13 5 9 6 6 4 10 4 10 5 10 3 12 2 14 3 12 2 14 0 19 20 0 0 19 10 0 10 0 6 7 5 9 0 19 0 19 5 10 5 12 2 15 6 7], :total-error 795, :normalized-error 795, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a2debe63-0ea3-4c43-bc25-2d55f3f61cd3", :parent-uuids (#uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_749} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars tagged_749 boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 1 1 2 0 3 2 1 3 0 2 0 1 2 0 3 0 3 2 1 0 3 0 3 1 2 0 3 4 0 0 5 2 3 1 4 1 4 1 4 6 1 1 4 2 3 2 3 1 4 1 5 1 4 2 3 2 4 1 4 4 3 2 3 2 3 0 5 1 4 1 4 2 3 3 3 3 3 0 5 1 4 3 3 5 0 5 0 3 3 4 1 3 3 4 1 1 4 1 4 2 3 5 0 2 3 0 5 4 3 1 4 4 2 4 1 3 3 2 3 4 1 3 3 2 3 2 3 5 0 2 3 5 1 6 0 4 1 4 1 5 0 3 2 2 3 3 2 2 3 0 5 20 13 0 5 10 5 10 4 6 1 5 0 0 5 0 5 5 0 5 1 2 3 6 1], :total-error 489, :normalized-error 489, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "c8efd02b-8382-4acd-a203-0de7d4953b50", :parent-uuids (#uuid "7b6226d5-240d-4d52-8b4d-1333fb8f1b1a" #uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 1, :instruction string_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_swap} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 2, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 1, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (integer_mod in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger string_rot) (integer_gt exec_if (exec_y (string_yank tagged_960 integer_eq integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_dup () exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max boolean_invert_second_then_and exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter boolean_dup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) string_parse_to_chars integer_swap char_iswhitespace string_containschar) \^) () char_stackdepth) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length exec_noop integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 0 1 0 0 1 2 1 3 1 2 0 1 0 0 1 0 1 2 0 0 1 0 2 1 0 0 1 4 2 0 1 2 0 1 0 1 0 1 0 6 4 1 1 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 2 1 1 1 0 2 1 3 1 3 2 0 1 1 0 3 1 5 4 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 1 5 3 2 1 0 1 4 1 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 0 5 4 6 5 4 2 4 3 5 4 3 2 2 1 3 2 2 1 0 2 20 18 0 1 10 8 10 8 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 417, :normalized-error 417, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "771181c2-76d2-41b6-960e-a0ecf4d98aab", :parent-uuids (#uuid "c39eda7d-5ab7-4990-870e-19b0820d34da"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction string_take} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_flush} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and print_exec (integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) string_take boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_flush) string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [922 1 922 0 922 0 923 1 922 0 923 0 924 1 923 0 922 1 922 1 923 0 923 0 924 0 923 1 922 2 924 0 925 1 924 0 923 1 922 2 922 2 924 0 922 2 922 3 923 2 922 3 926 0 922 4 924 2 923 4 923 4 923 4 928 0 923 5 924 4 924 4 923 5 923 5 923 5 924 4 924 5 923 6 926 3 924 5 924 5 922 7 923 7 923 7 924 6 925 5 925 6 922 9 923 9 925 7 927 5 927 6 925 8 926 7 925 8 926 8 923 11 923 11 924 10 927 7 924 10 922 12 926 8 923 12 926 9 926 9 925 10 924 11 926 10 925 11 924 12 924 13 927 11 924 14 927 12 928 11 926 13 926 13 927 13 925 15 924 16 925 15 924 16 922 19 942 1 922 19 932 9 932 9 928 13 927 14 922 19 922 19 927 14 927 14 924 17 928 13], :total-error 93143, :normalized-error 93143, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "fa5ff5dd-d8e7-46b3-bd48-6a8dee08d6b5", :parent-uuids (#uuid "cdafd84d-3f6e-44e8-89b5-40ca2f5a90f8" #uuid "39d5f109-9fd2-41a7-91e6-6fbbec6f1133"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop boolean_and \space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush string_replacefirstchar string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 2 0 3 2 1 3 1 2 1 1 1 0 3 0 3 2 0 0 3 0 3 1 2 0 3 4 1 0 5 2 3 1 5 1 4 1 5 6 0 1 5 2 4 2 4 1 6 1 6 1 6 2 5 2 5 1 6 4 3 2 6 2 5 0 7 1 6 1 6 2 6 3 5 3 4 0 7 1 6 3 5 5 2 5 2 3 4 4 3 3 4 4 4 1 6 1 6 2 5 5 3 2 5 0 7 4 3 1 8 4 3 4 3 3 4 2 5 4 4 3 4 2 6 2 5 5 2 2 6 5 3 6 1 4 3 4 3 5 2 3 5 2 6 3 5 2 5 0 8 20 12 0 7 10 2 10 2 6 1 5 2 0 7 0 7 5 2 5 2 2 5 6 1], :total-error 610, :normalized-error 610, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "59a7eeff-ce9d-4943-822b-25ae4e3a771a", :parent-uuids (#uuid "61931ede-8e4e-4e88-93ee-13ee76d6da82"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction string_yankdup} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction string_yank} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add exec_when (integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth string_yankdup \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (string_yank string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean boolean_pop char_shove string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar) (exec_noop string_eq integer_fromstring string_fromboolean boolean_not exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 1 1 0 1 0 1 1 1 0 2 0 2 1 2 0 2 1 2 1 2 0 2 0 3 0 3 1 3 2 3 0 3 1 3 0 3 1 3 2 3 2 3 0 3 2 4 3 4 2 4 3 5 0 5 4 5 2 6 4 6 4 6 4 7 0 7 5 7 4 7 4 7 5 7 5 7 5 7 4 8 5 8 6 8 3 8 5 8 5 8 7 9 7 9 7 9 6 9 5 10 6 10 9 11 9 11 7 11 5 12 6 12 8 12 7 12 8 13 8 13 11 13 11 13 10 13 7 13 10 13 12 13 8 14 12 14 9 14 9 14 10 14 11 15 10 15 11 15 12 16 13 17 11 17 14 18 12 18 11 18 13 18 13 19 13 19 15 19 16 19 15 19 16 20 19 20 1 20 19 20 9 20 9 20 13 20 14 20 19 20 19 20 14 20 14 20 17 20 13], :total-error 1731, :normalized-error 1731, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "62ea28ad-f28c-41ad-ac8a-5d6e6bd49994", :parent-uuids (#uuid "b0971595-74be-46fb-a0ad-9b805b15d489" #uuid "6b4fcb45-744d-4f45-850c-3f28be37fb5e"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_shove} {:close 1, :instruction char_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth string_occurrencesofchar string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and string_removechar integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup string_shove char_yank) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 1 0 1 0 1 0 1 0 2 1 2 0 2 0 2 2 2 2 2 1 2 0 3 1 3 1 3 2 3 1 3 0 3 1 3 2 3 2 3 2 3 1 3 2 4 2 4 1 4 2 5 0 5 2 5 2 6 1 6 1 6 1 7 2 7 1 7 1 7 0 7 1 7 1 7 1 7 0 8 1 8 1 8 1 8 1 8 0 8 2 9 1 9 2 9 0 9 1 10 1 10 2 11 1 11 0 11 2 12 3 12 0 12 2 12 1 13 2 13 2 13 1 13 1 13 2 13 0 13 2 13 1 14 1 14 1 14 2 14 1 14 0 15 2 15 1 15 0 16 0 17 2 17 1 18 2 18 3 18 1 18 1 19 3 19 0 19 0 19 1 19 0 20 2 20 16 20 2 20 8 20 7 20 3 20 3 20 2 20 2 20 3 20 2 20 0 20 4], :total-error 1182, :normalized-error 1182, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "2232e408-c06e-4a93-94b9-b1b9eb2208ab", :parent-uuids (#uuid "b7cfccba-4fea-4e0a-a8b1-e32e3bf11cb8"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_k} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring exec_k (string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) () (string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) integer_div string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 1 1 0 1 0 2 1 1 0 2 0 3 1 2 0 1 1 1 1 2 0 2 0 3 0 2 1 1 2 3 0 4 1 3 0 2 1 1 2 1 2 3 0 1 2 1 3 2 2 1 3 5 0 1 4 3 2 2 4 2 4 2 4 7 0 2 5 3 4 3 4 2 5 2 5 2 5 3 4 3 5 2 6 5 3 3 5 3 5 1 7 2 7 2 7 3 6 4 5 4 6 1 9 2 9 4 7 6 5 6 6 4 8 5 7 4 8 5 8 2 11 2 11 3 10 6 7 3 10 1 12 5 8 2 12 5 9 5 9 4 10 3 11 5 10 4 11 3 12 3 13 6 11 3 14 6 12 7 11 5 13 5 13 6 13 4 15 3 16 4 15 3 16 1 19 21 1 1 19 11 9 11 9 7 13 6 14 1 19 1 19 6 14 6 14 3 17 7 13], :total-error 1043, :normalized-error 1043, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "cf2c297b-ae45-460a-b7bb-48a0c8670b50", :parent-uuids (#uuid "d8b481d9-8a3c-4d34-abe7-697a52fa5e89" #uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean boolean_and \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 2 0 0 0 0 1 1 0 0 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 1 1 1 0 0 4 4 0 0 2 2 1 1 1 1 1 1 6 6 1 0 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 4 2 2 2 2 0 1 1 0 1 1 2 2 3 2 3 3 0 0 1 1 3 3 5 5 5 5 3 3 4 4 3 3 4 4 1 1 1 1 2 2 5 5 2 2 0 0 4 4 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 2 0 1 20 20 0 0 10 9 10 10 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 490, :normalized-error 490, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "cf48ecd4-27dc-4f31-ab60-e718e273bf7e", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction char_pop} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction string_rest} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction char_dup} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring exec_noop char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (char_pop exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) integer_dup char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) integer_yankdup) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains string_rest exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth char_dup string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 0 1 2 0 3 2 1 3 1 2 1 1 1 0 3 0 3 2 0 0 3 0 3 1 2 0 3 4 1 0 3 2 1 1 2 1 2 1 2 6 2 1 2 2 2 2 1 1 2 1 2 1 2 2 1 2 1 1 2 4 1 2 1 2 1 0 3 1 2 1 3 2 1 3 0 3 0 0 3 1 2 3 0 5 1 5 2 3 0 4 1 3 0 4 1 1 2 1 2 2 2 5 2 2 1 0 3 4 1 1 2 4 0 4 1 3 0 2 1 4 1 3 0 2 1 2 1 5 1 2 1 5 1 6 2 4 0 4 0 5 2 3 1 2 1 3 0 2 1 0 3 20 16 0 3 10 7 10 6 6 2 5 2 0 3 0 3 5 2 5 1 2 1 6 3], :total-error 411, :normalized-error 411, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "96fbf872-086b-4689-96cd-0ab247f14779", :parent-uuids (#uuid "b5e72f9c-3bfa-4799-ad35-32c9b5346e19" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction string_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 string_parse_to_chars string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec char_isdigit boolean_invert_first_then_and integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop string_eq) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max print_boolean char_isletter) boolean_dup string_containschar string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) () string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split char_yankdup string_containschar \^ char_stackdepth string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 2 1 1 2 1 2 1 1 2 1 3 1 2 2 2 3 2 1 3 0 3 1 2 2 2 3 2 3 3 1 2 3 3 4 3 3 3 4 5 1 4 5 5 3 5 5 5 5 5 5 7 1 6 6 6 5 6 5 6 6 6 6 6 6 6 5 8 6 7 7 8 4 8 6 7 6 7 8 8 8 8 8 8 7 8 6 9 7 9 10 10 10 11 8 10 6 11 7 12 9 11 8 11 9 12 9 13 12 12 12 12 11 13 8 12 11 12 13 13 9 13 13 13 10 13 10 13 11 13 12 14 11 14 12 14 13 15 14 16 12 17 15 17 13 17 12 18 14 17 14 18 14 18 16 18 17 18 16 18 17 19 20 20 0 19 20 19 10 20 10 19 14 19 15 19 20 19 20 19 15 19 15 19 18 19 14], :total-error 1745, :normalized-error 1745, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e74ff1df-dfe7-4ec7-a51c-4682ce8811ac", :parent-uuids (#uuid "25f972b0-c4a4-44ef-b0f9-80e5b38d626c" #uuid "2087a5e0-a8a4-4e01-8bbc-e07d9182bd60"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_fromchar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_fromchar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer integer_fromstring integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains) integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 2 0 3 4 0 0 4 2 2 1 4 1 4 1 4 6 0 1 5 2 4 2 4 1 5 1 5 1 5 2 4 2 5 1 6 4 3 2 5 2 5 0 7 1 7 1 7 2 6 3 5 3 6 0 9 1 9 3 7 5 5 5 6 3 8 4 7 3 8 4 8 1 11 1 11 2 10 5 7 2 10 0 12 4 8 1 12 4 9 4 9 3 10 2 11 4 10 3 11 2 12 2 13 5 11 2 14 5 12 6 11 4 13 4 13 5 13 3 15 2 16 3 15 2 16 0 19 20 1 0 19 10 9 10 9 6 13 5 14 0 19 0 19 5 14 5 14 2 17 6 13], :total-error 943, :normalized-error 943, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "163a8ea7-78fc-4154-a89f-40b905bfdce3", :parent-uuids (#uuid "ee5b5e8c-0e1e-4d4a-b9b4-590438e42747" #uuid "f9e4a682-81ef-4293-8017-fa8f84c406e7"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 0 0 1 2 0 3 0 2 1 1 1 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 1 0 1 2 1 1 0 1 0 1 0 6 3 1 0 2 0 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 1 2 1 3 2 3 2 0 1 1 0 3 1 5 3 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 0 5 3 2 1 0 1 4 2 1 0 4 2 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 3 2 0 5 3 6 4 4 2 4 2 5 4 3 1 2 1 3 2 2 1 0 1 20 17 0 1 10 9 10 8 6 4 5 4 0 1 0 1 5 4 5 3 2 1 6 5], :total-error 407, :normalized-error 407, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "44ede3e7-bf69-4cfd-8e64-d6147448b777", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 1 2 0 1 0 0 1 0 1 1 1 1 0 2 1 1 1 0 1 2 0 3 1 2 0 1 0 0 1 0 1 2 1 0 1 0 1 1 1 0 1 4 2 0 1 2 1 1 0 1 0 1 0 6 4 1 0 2 1 2 0 1 0 1 0 1 1 2 1 2 1 1 0 4 2 2 1 2 1 0 1 1 0 1 0 2 0 3 2 3 2 0 1 1 0 3 1 5 4 5 3 3 2 4 3 3 2 4 2 1 0 1 0 2 1 5 4 2 0 0 1 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 1 2 1 2 0 5 4 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 0 0 1 20 18 0 1 10 8 10 9 6 5 5 3 0 1 0 1 5 4 5 4 2 0 6 4], :total-error 413, :normalized-error 413, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4a2fb9d8-0cd1-4034-93e7-9e2c68a5dbe9", :parent-uuids (#uuid "39d5f109-9fd2-41a7-91e6-6fbbec6f1133" #uuid "d524a15e-add5-45ba-9dbe-c6c20059e40c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 1, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty) (char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 1000 1 1 1 1 1 1 1 1 2 0 2 0 2 1 2 1 2 1 2 0 2 1 3 0 1 0 2 1 2 0 3 1 3 0 2 1 2 1 2 1 3 0 2 1 3 0 3 1 3 0 4 1 4 1 3 1 5 1 5 1 5 1 7 5 6 2 6 1 6 3 6 2 6 2 6 2 6 3 7 2 7 3 7 4 7 2 7 4 7 2 7 4 8 2 8 5 8 6 9 7 9 4 10 6 10 6 10 8 11 11 11 7 11 10 11 9 11 11 12 6 12 8 12 7 12 10 12 9 12 7 12 9 13 9 13 10 13 12 13 11 13 10 14 13 14 12 14 11 15 12 16 14 15 11 17 15 17 16 17 14 17 14 17 18 18 14 18 15 18 16 18 15 18 14 20 30 18 14 19 24 19 22 18 18 18 19 18 14 18 14 19 19 19 17 19 16 19 20], :total-error 2652, :normalized-error 2652, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "43658219-e904-40d5-9a48-21d867ffc270", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction string_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_emptystring} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_swap} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (integer_mod in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger string_rot integer_gt exec_if (exec_y (string_yank tagged_960 integer_eq integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_dup () exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max boolean_invert_second_then_and exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup string_emptystring char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (string_parse_to_chars integer_swap char_iswhitespace string_containschar) (\^) char_stackdepth) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length exec_noop integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor), :errors [0 0 0 0 0 0 1 1 0 0 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 0 1 1 0 0 4 4 0 0 2 2 1 1 1 1 1 0 6 6 1 1 2 2 2 2 1 1 1 1 1 1 2 2 2 2 1 1 4 4 2 1 2 2 0 0 1 0 1 1 2 2 3 3 3 2 0 1 1 1 3 3 5 5 5 5 3 3 4 3 3 3 4 4 1 1 1 1 2 2 5 5 2 2 0 0 4 4 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 1 2 2 5 4 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 2 0 1 20 20 0 0 10 10 10 10 6 6 5 5 0 1 0 0 5 5 5 5 2 2 6 6], :total-error 486, :normalized-error 486, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "756d95e2-5c85-4501-91b1-dd7999e642f4", :parent-uuids (#uuid "c39eda7d-5ab7-4990-870e-19b0820d34da"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) exec_yank) (boolean_empty integer_div boolean_rot) integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar) exec_noop string_eq integer_fromstring string_fromboolean boolean_not exec_when (integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult) () ())), :errors [0 1 0 0 0 0 1 1 0 0 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 1 1 1 0 0 4 4 0 0 2 2 1 1 1 1 1 1 6 6 1 0 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 4 2 2 2 2 0 1 1 0 1 1 2 2 3 2 3 3 0 0 1 1 3 3 5 5 5 5 3 3 4 4 3 3 4 4 1 1 1 1 2 2 5 5 2 2 0 0 4 4 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 2 0 1 20 20 0 0 10 9 10 10 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 489, :normalized-error 489, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d79acb1d-981b-497b-bd49-d32df93bbcbb", :parent-uuids (#uuid "6b4fcb45-744d-4f45-850c-3f28be37fb5e" #uuid "07bdfa30-dca2-4cfa-a206-fd3e822490cb"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_swap string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) () exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter) (string_shove in1 string_length integer_lt) (integer_fromchar) exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger)), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 0 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 0 1 1 1 1000 2 1000 3 3 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 4 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 0 20 1000 0 1000 10 10 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 92264, :normalized-error 92264, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "00a0e767-1ecc-4f45-9885-550b2a748991", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_char_283} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap tag_char_283 boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth)), :errors [1 0 33 1000 1 1 1 0 33 1000 6 4 2 0 2 1 5 3 2 2 2 1 2 1 3 1 6 2 3 3 6 1 3 0 3 1 6 2 6 3 3 3 3 1 3 3 6 4 6 3 5 4 5 1 5 5 5 3 6 5 6 5 6 5 7 1 6 6 7 5 7 5 7 6 7 6 7 6 7 5 8 6 7 1000 8 4 8 6 8 6 8 8 9 8 9 8 9 7 9 6 10 7 10 10 11 10 11 8 11 6 12 7 11 9 12 8 12 9 13 9 13 12 13 12 13 11 13 8 13 11 12 13 13 9 14 13 13 5 14 10 13 6 14 7 15 11 15 12 14 13 15 14 17 12 16 15 18 13 18 12 18 14 17 14 18 1000 18 1000 18 1000 18 1000 17 17 19 20 20 0 20 20 19 10 20 10 20 14 20 15 20 20 20 20 20 15 20 15 20 18 19 14], :total-error 8808, :normalized-error 8808, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "54cf0f22-5698-47df-8491-f3e88cf4e208", :parent-uuids (#uuid "5f999162-07c6-4d80-b694-50b0f6de2516" #uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction char_frominteger} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction char_swap} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_removechar} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring char_frominteger char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop exec_shove (string_emptystring exec_stackdepth char_swap) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar \^ char_stackdepth string_removechar string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 2 1 2 1 3 1 2 1 3 0 4 0 3 1 2 1 2 1 3 0 3 1 4 0 3 2 2 3 4 1 5 1 4 1 3 1 2 3 2 3 4 0 2 3 2 3 3 2 2 3 6 1 2 3 4 1 3 2 3 2 3 2 8 2 3 2 4 2 4 1 3 2 3 2 3 2 4 1 4 1 3 2 6 1 4 1 4 1 2 3 3 2 3 3 4 1 5 0 5 0 2 3 3 2 5 0 7 1 7 2 5 0 6 1 5 0 6 1 3 2 3 2 4 2 7 2 4 1 2 3 6 1 3 2 6 0 6 1 5 0 4 1 6 1 5 0 4 1 4 1 7 1 4 1 7 1 8 2 6 0 6 0 7 2 5 1 4 1 5 0 4 1 2 3 22 16 2 3 12 7 12 6 8 2 7 2 2 3 2 3 7 1 7 1 4 1 8 3], :total-error 609, :normalized-error 609, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0a586831-3694-4fa5-8319-893c49f62a39", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "9d35c5a6-a855-4698-bea0-4f21b5211e2b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction string_length} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction print_char} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction string_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and boolean_empty integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max boolean_empty exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean boolean_dup string_containschar boolean_eq) (string_containschar string_length integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq print_char string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) string_empty integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq) integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 0 1 1 0 0 4 4 0 0 2 2 1 0 1 0 1 1 6 6 1 1 2 2 2 2 1 1 1 1 1 0 2 2 2 2 1 1 4 4 2 2 2 2 0 0 1 0 1 1 2 2 3 2 3 3 0 0 1 1 3 3 5 5 5 5 3 3 4 4 3 3 4 4 1 1 1 1 2 2 5 5 2 2 0 1 4 3 1 1 4 4 4 4 3 3 2 2 4 4 3 2 2 2 2 2 5 5 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 2 0 1 20 20 0 0 10 10 10 10 6 6 5 5 0 1 0 0 5 5 5 5 2 2 6 6], :total-error 488, :normalized-error 488, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4dcb5dc5-7e34-4f1e-be85-7d751e3cfd94", :parent-uuids (#uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85" #uuid "969477e2-882e-425c-b63d-e7d4c207be16"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and) (string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e520d51c-d4dc-4dbb-981f-35a02af48aa8", :parent-uuids (#uuid "b9bd2b6f-ea0a-4b12-ac88-005c7ae15d8f"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction char_pop} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction string_rest} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction char_dup} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring exec_noop char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (char_pop exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) integer_dup char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) integer_yankdup) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains string_rest exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth char_dup string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 0 0 4 2 2 1 3 1 3 1 3 6 1 1 3 2 3 2 2 1 3 1 3 1 3 2 2 2 2 1 3 4 0 2 2 2 2 0 4 1 3 1 4 2 2 3 1 3 1 0 4 1 3 3 1 5 0 5 1 3 1 4 0 3 1 4 0 1 3 1 3 2 3 5 1 2 2 0 4 4 0 1 3 4 1 4 0 3 1 2 2 4 0 3 1 2 2 2 2 5 0 2 2 5 0 6 1 4 1 4 1 5 1 3 2 2 2 3 1 2 2 0 4 20 15 0 4 10 6 10 5 6 1 5 1 0 4 0 4 5 1 5 0 2 2 6 2], :total-error 436, :normalized-error 436, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "daa8048c-cbd1-4f9f-baea-31d637cbb876", :parent-uuids (#uuid "b5e72f9c-3bfa-4799-ad35-32c9b5346e19"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% boolean_frominteger integer_lt string_shove integer_flush) () ())), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a0f7f1bf-a00a-41fe-9e98-b432b2718c3d", :parent-uuids (#uuid "00e159c5-727f-405b-9676-fc603e28b7c7" #uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction print_integer} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_do*count (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq print_integer string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 2 0 3 2 1 3 1 2 1 1 1 0 3 0 3 2 0 0 3 0 3 1 2 0 3 4 1 0 5 2 3 1 4 1 4 1 4 6 0 1 4 2 4 2 3 1 4 1 4 1 4 2 3 2 3 1 4 4 1 2 3 2 3 0 5 1 4 1 5 2 3 3 2 3 2 0 5 1 4 3 2 5 1 5 0 3 2 4 1 3 2 4 1 1 4 1 4 2 4 5 0 2 3 0 5 4 1 1 4 4 2 4 1 3 2 2 3 4 1 3 2 2 3 2 3 5 1 2 3 5 1 6 0 4 2 4 2 5 0 3 3 2 3 3 2 2 3 0 5 20 14 0 5 10 5 10 4 6 0 5 0 0 5 0 5 5 0 5 1 2 3 6 1], :total-error 493, :normalized-error 493, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "33b98215-11ad-46c9-9aa0-8a448c380a22", :parent-uuids (#uuid "e9d3b135-6aef-45ef-aa4d-8cfd67b7d371"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gte} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_first} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring integer_gte char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq string_first) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) (\^) (char_stackdepth) string_fromboolean string_split \space integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 0 0 1 2 1 3 1 2 1 1 1 0 1 0 1 2 0 0 1 0 4 1 3 0 4 4 1 0 3 2 1 1 3 1 2 1 3 6 2 1 2 2 2 2 2 1 2 1 2 1 2 2 1 2 1 1 2 4 1 2 2 2 1 0 3 1 2 1 2 2 2 3 1 3 0 0 3 1 2 3 0 5 2 5 2 3 0 4 1 3 0 4 0 1 2 1 2 2 1 5 1 2 1 0 3 4 1 1 3 4 1 4 1 3 0 2 1 4 0 3 0 2 2 2 1 5 2 2 1 5 1 6 3 4 1 4 1 5 2 3 1 2 1 3 0 2 1 0 3 20 16 0 3 10 7 10 6 6 3 5 2 0 3 0 3 5 2 5 2 2 1 6 3], :total-error 419, :normalized-error 419, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9220b2ac-bb46-47ae-bac9-db2d2842397f", :parent-uuids (#uuid "9d35c5a6-a855-4698-bea0-4f21b5211e2b" #uuid "6125b17d-f77e-436f-8a58-e098643c9d67"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq) (integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult) () ())), :errors [0 1 0 1 0 1 1 0 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 2 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 4 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 2 1 1 2 0 3 0 3 1 0 2 1 1 3 1 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 2 4 2 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 0 3 20 18 0 2 10 8 10 8 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 405, :normalized-error 405, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "128a93d3-082e-45ff-adca-d60d4ad1bbde", :parent-uuids (#uuid "c449e2ad-ff76-45f0-b644-61296b852581"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter) string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult)), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 0 0 1 2 0 3 0 2 1 1 1 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 1 0 1 2 1 1 0 1 0 1 0 6 3 1 0 2 0 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 1 2 1 3 2 3 2 0 1 1 0 3 1 5 3 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 0 5 3 2 1 0 1 4 2 1 0 4 2 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 3 2 0 5 3 6 4 4 2 4 2 5 4 3 1 2 1 3 2 2 1 0 1 20 17 0 1 10 9 10 8 6 4 5 4 0 1 0 1 5 4 5 3 2 1 6 5], :total-error 407, :normalized-error 407, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "3ea17376-e101-4312-b1d6-c48a44a35ee5", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 1, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_not} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction exec_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction char_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isdigit} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_containschar exec_s (\newline) (string_substring boolean_not char_empty char_rot integer_dec \s print_string exec_pop (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and exec_yank) exec_shove (string_fromchar string_replacefirst exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and char_swap integer_max integer_gte exec_do*while (print_exec (string_yank in1) char_yank boolean_yankdup string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth boolean_frominteger integer_fromboolean exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean char_isdigit tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger print_integer string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 1 2 0 2 0 3 1 2 0 3 0 4 1 3 0 2 1 2 1 3 0 3 0 4 0 3 1 2 2 4 0 5 1 4 0 3 1 2 2 2 2 4 0 2 2 2 3 3 2 2 3 6 0 2 4 4 2 3 4 3 4 3 4 8 0 3 5 4 4 4 4 3 5 3 5 3 5 4 4 4 5 3 6 6 3 4 5 4 5 2 7 3 7 3 7 4 6 5 5 5 6 2 9 3 9 5 7 7 5 7 6 5 8 6 7 5 8 6 8 3 11 3 11 4 10 7 7 4 10 2 12 6 8 3 12 6 9 6 9 5 10 4 11 6 10 5 11 4 12 4 13 7 11 4 14 7 12 8 11 6 13 6 13 7 13 5 15 4 16 5 15 4 16 2 19 22 1 2 19 12 9 12 9 8 13 7 14 2 19 2 19 7 14 7 14 4 17 8 13], :total-error 1143, :normalized-error 1143, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0fad0755-f0c9-49af-8ce4-5d210fdc8977", :parent-uuids (#uuid "ede29d76-fb71-4d33-92d0-b86baff7854c" #uuid "43d5d6dd-b30e-4366-a4e7-e0fef0f0187b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction \newline} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1) integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst char_eq integer_pop) (integer_gt exec_if () (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank string_first) boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup \newline) boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_invert_first_then_and integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 5 0 5 1 6 0 5 1 5 2 6 1 5 0 4 0 4 1 5 1 5 2 5 1 4 0 3 2 5 3 6 2 5 1 4 0 3 0 3 2 5 0 3 0 2 1 3 0 2 4 5 0 1 2 3 1 1 1 1 1 1 6 5 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 1 4 2 2 0 2 0 0 2 1 2 1 2 2 1 3 0 3 1 0 4 1 4 3 2 5 0 5 1 3 3 4 2 3 3 4 3 1 6 1 6 2 5 5 2 2 5 0 7 4 3 1 7 4 4 4 4 3 5 2 6 4 5 3 6 2 7 2 8 5 6 2 9 5 7 6 6 4 8 4 8 5 8 3 10 2 11 3 10 2 11 0 14 20 6 0 14 10 4 10 4 6 8 5 9 0 14 0 14 5 9 5 9 2 12 6 8], :total-error 711, :normalized-error 711, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ba69ea93-5f7f-4850-9d83-2e1d35b96652", :parent-uuids (#uuid "8bfa41dc-8d65-476e-baec-4ac2285d64fb"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction print_string} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction string_yank} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth print_string string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (string_yank string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 0 0 2 2 2 1 1 1 1 1 1 6 2 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 0 5 2 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 1 5 2 2 0 0 2 4 1 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 1 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 16 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 394, :normalized-error 394, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "661a45aa-8719-4ab7-a506-f8b2b79cd9a2", :parent-uuids (#uuid "43d5d6dd-b30e-4366-a4e7-e0fef0f0187b" #uuid "43fdce3c-0477-4b22-b6bb-c486a2c1ac84"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction char_eq} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 1, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction \space} {:close 0, :instruction exec_yankdup} {:close 1, :instruction char_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 1, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction string_occurrencesofchar} {:close 0, :instruction \space} {:close 1, :instruction boolean_swap} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_pop} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (string_shove integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop exec_s (char_eq string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth) (integer_add "K;WuaPq6 ' q7") (string_parse_to_chars "x ii@l}0 a  irP _") \space exec_yankdup char_shove) boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_frominteger integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec exec_empty integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \space boolean_swap string_first char_rot exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer exec_do*times (string_pop char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [3 11 3 11 3 11 2 12 3 11 2 12 1 13 2 12 3 11 3 11 2 12 2 12 2 13 2 12 3 11 2 13 1 14 1 13 3 12 3 11 3 11 2 13 3 11 3 11 3 12 4 11 3 15 5 11 3 13 5 12 6 12 5 12 5 17 6 12 5 13 5 13 6 12 7 12 6 12 5 13 6 13 6 12 6 15 6 13 7 13 8 11 8 12 8 12 7 13 7 14 8 14 10 11 10 12 9 14 9 16 10 16 10 14 10 15 10 14 11 15 12 12 12 12 11 13 11 16 11 13 13 11 11 15 12 12 11 15 12 15 12 14 12 13 13 15 13 14 13 13 14 13 15 16 15 13 16 16 16 17 16 15 16 15 17 16 17 14 17 13 17 14 17 13 20 11 18 31 20 11 18 21 18 21 18 17 18 16 20 11 20 11 18 16 18 16 18 13 17 17], :total-error 2260, :normalized-error 2260, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "bde911ca-f185-45bb-93e9-d36b7dafe8c2", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "e8bab081-e2bf-4808-b4eb-5b0118fa0aa5"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 1, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 1, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction char_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq) (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove () string_emptystring exec_stackdepth exec_yank char_rot boolean_pop string_containschar) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) integer_fromboolean exec_pop () boolean_pop char_shove print_integer char_yank integer_add string_indexofchar integer_gte in1) (char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger boolean_and string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 1 1 0 0 1 2 1 3 2 2 1 1 0 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 3 0 1 2 1 1 0 1 0 1 1 6 5 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 1 1 0 4 3 2 0 2 1 0 1 1 1 1 0 2 1 3 2 3 1 0 2 1 0 3 2 5 4 5 4 3 2 4 2 3 2 4 3 1 0 1 0 2 1 5 4 2 1 0 1 4 3 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 0 2 1 5 3 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 1 0 2 20 19 0 1 10 9 10 9 6 5 5 4 0 2 0 1 5 4 5 4 2 1 6 5], :total-error 430, :normalized-error 430, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "1d857e14-f118-4f70-967d-047447ef6986", :parent-uuids (#uuid "0bb44af4-d944-41fb-9b02-9cd7881a8bd9"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction char_swap} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap char_swap char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_while () exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) boolean_eq integer_sub char_iswhitespace string_containschar) (\^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_not string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 0 1 0 0 1 2 1 3 0 2 1 1 0 0 1 0 1 2 0 0 1 0 1 1 0 0 1 4 1 0 1 2 0 1 0 1 0 1 0 6 3 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 1 2 0 2 1 0 1 1 0 1 0 2 1 3 2 3 2 0 1 1 0 3 0 5 4 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 1 5 3 2 1 0 1 4 1 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 0 5 4 6 5 4 2 4 3 5 4 3 2 2 1 3 2 2 1 0 1 20 17 0 1 10 9 10 8 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 409, :normalized-error 409, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e068fb94-cc15-47f2-a102-94260704bf91", :parent-uuids (#uuid "67f4a596-149d-4cfa-9d6e-508cf9d0c290" #uuid "52224fdc-1c93-4086-8ecb-d39a9f440eb6"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction string_substring} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction string_length} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction print_char} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 1, :instruction string_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup integer_fromchar string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop string_substring exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar string_length integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq print_char string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) string_empty) (integer_swap) in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 1 1 0 0 1 2 1 3 2 2 1 1 0 0 1 0 1 2 1 0 1 0 2 1 0 0 1 4 3 0 1 2 1 1 0 1 0 1 0 6 5 1 1 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 3 2 1 2 1 0 2 1 1 1 0 2 1 3 1 3 2 0 1 1 0 3 2 5 4 5 4 3 2 4 3 3 2 4 3 1 0 1 0 2 1 5 4 2 1 0 1 4 3 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 1 0 2 20 19 0 1 10 8 10 9 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 432, :normalized-error 432, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "8736666b-4a45-499e-9353-a3100cf5e520", :parent-uuids (#uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction exec_dup} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth exec_dup (\:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 0 0 2 2 2 1 1 1 1 1 1 6 2 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 0 5 2 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 1 5 2 2 0 0 2 4 1 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 1 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 16 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 394, :normalized-error 394, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0c66643d-2654-42f2-b800-805d7cc4ca19", :parent-uuids (#uuid "ec94db8e-b78e-45f4-b0a3-3dfd2d36f4f3" #uuid "dd5da3ad-dbbb-4341-9abd-3761445ce25a"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 1 0 4 2 3 1 3 1 4 1 3 6 1 1 4 2 2 2 2 1 4 1 3 1 3 2 2 2 4 1 3 4 1 2 3 2 2 0 4 1 3 1 3 2 2 3 1 3 1 0 4 1 3 3 2 5 0 5 0 3 3 4 0 3 1 4 0 1 4 1 3 2 3 5 0 2 3 0 4 4 1 1 3 4 1 4 0 3 1 2 2 4 1 3 1 2 2 2 2 5 1 2 3 5 0 6 2 4 1 4 0 5 0 3 1 2 2 3 1 2 2 0 4 20 14 0 4 10 5 10 4 6 1 5 0 0 4 0 4 5 1 5 1 2 3 6 1], :total-error 446, :normalized-error 446, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "573dcbbb-32a2-46f5-957d-3b55bf4d3823", :parent-uuids (#uuid "52224fdc-1c93-4086-8ecb-d39a9f440eb6" #uuid "16ea5886-731c-4ba2-8ba6-c7893b9ab2a0"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 0 1 0 1 0 2 0 1 0 2 1 3 0 2 0 1 2 1 2 2 1 2 0 3 1 2 1 1 2 3 1 4 0 3 1 2 2 1 2 1 2 3 1 1 2 1 2 2 1 1 2 5 0 1 2 3 2 2 1 2 1 2 1 7 2 2 1 3 1 3 0 2 1 2 1 2 1 3 0 3 1 2 1 5 1 3 1 3 0 1 2 2 1 2 2 3 0 4 1 4 1 1 2 2 1 4 0 6 2 6 3 4 0 5 2 4 1 5 2 2 2 2 1 3 1 6 2 3 0 1 2 5 1 2 1 5 1 5 2 4 1 3 0 5 2 4 1 3 0 3 0 6 2 3 1 6 2 7 3 5 1 5 1 6 3 4 0 3 0 4 1 3 0 1 2 21 16 1 2 11 8 11 7 7 3 6 3 1 2 1 2 6 3 6 2 3 0 7 4], :total-error 494, :normalized-error 494, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "8c7c01ca-64ed-4345-b12b-956ca772b89a", :parent-uuids (#uuid "d524a15e-add5-45ba-9dbe-c6c20059e40c" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and boolean_empty integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 0 0 1 2 0 3 1 2 1 1 1 0 1 0 1 2 0 0 1 0 1 1 0 0 1 4 3 0 1 2 1 1 0 1 0 1 0 6 4 1 0 2 0 2 1 1 0 1 0 1 0 2 1 2 1 1 0 4 3 2 1 2 1 0 1 1 0 1 1 2 1 3 2 3 2 0 1 1 0 3 2 5 3 5 4 3 2 4 3 3 2 4 3 1 0 1 0 2 0 5 4 2 1 0 1 4 3 1 0 4 2 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 3 2 1 5 3 6 4 4 2 4 2 5 4 3 1 2 1 3 2 2 1 0 1 20 18 0 1 10 9 10 8 6 4 5 4 0 1 0 1 5 4 5 3 2 1 6 5], :total-error 417, :normalized-error 417, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "54f03ea8-ed3a-402c-b029-bd53fc55a1df", :parent-uuids (#uuid "c39eda7d-5ab7-4990-870e-19b0820d34da" #uuid "969477e2-882e-425c-b63d-e7d4c207be16"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction "2 \" - hQ 2i&"} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction integer_flush} {:close 2, :instruction in1} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_lte} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction char_isletter} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div tagged_960 exec_while (integer_swap boolean_and string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop in1) (char_yank boolean_yankdup "2 \" - hQ 2i&" string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_integer char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 integer_flush in1)) (string_parse_to_chars string_replacefirst char_iswhitespace integer_lte) \^) char_stackdepth string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove char_isletter in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains) integer_inc exec_stackdepth boolean_not integer_mult))), :errors [0 2 0 3 0 3 1 4 0 3 1 5 2 6 1 5 0 4 0 4 1 5 1 5 2 7 1 6 0 5 2 7 3 8 2 7 1 6 0 5 0 5 2 7 0 5 0 6 1 7 0 6 4 11 0 7 2 9 1 9 1 9 1 9 6 15 1 10 2 11 2 11 1 10 1 10 1 10 2 11 2 12 1 11 4 14 2 12 2 12 0 10 1 12 1 12 2 13 3 14 3 15 0 12 1 14 3 16 5 18 5 19 3 17 4 18 3 17 4 19 1 16 1 16 2 17 5 20 2 17 0 15 4 19 1 17 4 20 4 20 3 19 2 18 4 21 3 20 2 19 2 20 5 24 2 21 5 25 6 26 4 24 4 24 5 26 3 24 2 23 3 24 2 23 0 22 20 42 0 22 10 32 10 32 6 28 5 27 0 22 0 22 5 27 5 27 2 24 6 28], :total-error 1723, :normalized-error 1723, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7ee31605-a3e0-46db-ad8f-757c61c4bec1", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "34f25b14-806c-4b5b-a053-1c7931799ea6"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction string_first} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction "2 \" - hQ 2i&"} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction char_shove} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq char_allfromstring integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first boolean_empty) (integer_div boolean_rot) boolean_and boolean_pop char_yank boolean_yankdup "2 \" - hQ 2i&" string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (char_shove) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar) \^) (char_stackdepth) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1) string_length integer_lt print_integer exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 10 2 10 2 10 3 10 2 10 3 10 4 10 3 10 2 9 2 9 3 10 3 10 4 10 3 10 2 8 4 10 5 10 4 10 3 9 2 8 2 8 4 10 2 8 2 7 3 9 2 7 6 10 2 6 4 9 3 7 3 6 3 7 8 10 3 49 4 8 4 8 3 6 3 5 3 6 4 7 4 71 3 5 6 8 4 6 4 6 2 3 3 4 3 4 4 6 5 7 6 809 3 1 4 2 6 4 8 9 8 7 6 3 7 6 6 3 7 6 4 1 4 0 5 2 8 5 5 2 3 2 7 4 4 1 7 4 7 3 6 1 5 1 7 2 6 1 5 0 5 1 8 1 5 3 8 1 9 4 7 0 7 0 8 0 6 2 5 4 6 2 5 4 3 9 23 10 3 9 13 9 13 10 9 3 8 1 3 9 3 9 8 0 8 2 5 5 9 3], :total-error 1981, :normalized-error 1981, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d8250096-a3d4-4f88-b528-4e9567e88206", :parent-uuids (#uuid "387aa505-00e3-47a7-b0ed-abb927946105" #uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction char_swap} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat char_swap) (integer_mult))), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 0 0 1 2 0 3 0 2 1 1 1 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 1 0 1 2 1 1 0 1 0 1 0 6 3 1 0 2 0 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 1 2 1 3 2 3 2 0 1 1 0 3 1 5 3 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 0 5 3 2 1 0 1 4 2 1 0 4 2 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 3 2 0 5 3 6 4 4 2 4 2 5 4 3 1 2 1 3 2 2 1 0 1 20 17 0 1 10 9 10 8 6 4 5 4 0 1 0 1 5 4 5 3 2 1 6 5], :total-error 407, :normalized-error 407, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e85065a4-10aa-4caa-8885-3448ef873955", :parent-uuids (#uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4" #uuid "56e48ef1-f14e-4433-84e0-9a45b85a777d"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \4} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \4 string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 3 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 1 5 2 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 1 5 3 2 0 0 2 4 2 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 0 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 400, :normalized-error 400, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "472a14e0-98bb-44d8-bc69-515002fb725c", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction char_pop} {:close 1, :instruction exec_yank} {:close 2, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 1, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 0, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction string_rest} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction char_dup} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring exec_noop char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth exec_when (char_pop exec_yank) string_first)) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank) in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) integer_dup char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) integer_yankdup char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains string_rest exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth char_dup string_concat boolean_xor) integer_mult)), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 1 0 2 2 1 1 1 1 1 1 1 6 3 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 0 5 3 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 0 5 2 2 0 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 1 5 3 6 4 4 1 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 401, :normalized-error 401, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4dfd78f1-9b13-4c96-a3b9-d0d84436e8fb", :parent-uuids (#uuid "b5e72f9c-3bfa-4799-ad35-32c9b5346e19"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_749} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction string_substring} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction string_length} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction print_char} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction string_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq char_isletter) boolean_dup string_parse_to_chars tagged_749 boolean_invert_first_then_and exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop string_substring exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar string_length integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq print_char string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) string_empty integer_swap in1 string_length integer_lt integer_fromchar) (exec_noop string_eq) integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d2cd773f-c55d-4e06-9b32-bcd0bb40ee4c", :parent-uuids (#uuid "d26dacd3-87d8-4a71-9d06-fbe8672f5c52" #uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_eq} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction char_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction print_boolean} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 print_integer string_containschar) exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_eq string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) integer_yank boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last char_frominteger boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar print_boolean) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 0 1 0 0 1 2 1 3 1 2 0 1 0 0 1 0 1 2 0 0 1 0 1 1 0 0 1 4 2 0 1 2 0 1 0 1 0 1 0 6 4 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 1 1 0 1 0 2 1 3 2 3 2 0 1 1 0 3 1 5 4 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 1 5 3 2 1 0 1 4 2 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 0 5 4 6 5 4 2 4 3 5 4 3 2 2 1 3 2 2 1 0 1 20 18 0 1 10 9 10 8 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 414, :normalized-error 414, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d0244466-0eb0-4d71-9be9-a945b506dc1a", :parent-uuids (#uuid "15a196ac-1e35-4033-93ec-7a8554f0644e"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction char_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction string_replacefirst} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction \@} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_do*count (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) char_stackdepth exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) (string_replacefirst) string_fromboolean string_split \space char_isletter string_shove \% \@ string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 1 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 2 0 3 2 1 3 1 2 1 1 1 0 3 0 3 2 0 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 5 1 6 2 5 2 6 1 6 4 3 2 5 2 5 0 7 1 8 1 8 2 7 3 5 3 7 0 9 1 8 3 6 5 4 5 4 3 7 4 5 3 7 4 5 1 8 1 8 2 7 5 4 2 7 0 9 4 5 1 8 4 5 4 5 3 7 2 7 4 5 3 7 2 7 2 7 5 4 2 7 5 5 6 4 4 5 4 5 5 4 3 6 2 7 3 6 2 7 0 9 20 10 0 9 10 1 10 0 6 3 5 4 0 9 0 9 5 4 5 5 2 7 6 3], :total-error 710, :normalized-error 710, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "9660b191-d080-43b5-97dd-ee42d8bf2a7d", :parent-uuids (#uuid "b65f11be-8a45-4eb2-80ae-1d2cb254b680" #uuid "e9d3b135-6aef-45ef-aa4d-8cfd67b7d371"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 1, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring) (string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger) integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth) boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E " string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 1 1 1 1 1 0 1 1 2 0 2 1 2 1 2 2 2 2 2 0 2 1 3 0 3 2 3 2 3 1 3 0 3 1 3 1 3 2 3 2 3 0 3 2 4 2 4 2 4 2 5 1 5 2 5 0 6 1 6 1 6 1 7 3 7 1 7 0 7 1 7 1 7 1 7 2 7 0 8 0 8 1 8 1 8 0 8 0 8 2 9 1 9 1 9 1 9 1 10 1 10 2 11 1 11 0 11 3 12 2 12 1 12 2 12 1 13 1 13 1 13 1 13 0 13 3 13 1 13 2 13 1 14 1 14 2 14 2 14 1 14 0 15 2 15 0 15 0 16 1 17 3 17 0 18 3 18 4 18 2 18 2 19 3 19 1 19 0 19 1 19 1 20 2 20 17 20 2 20 7 20 8 20 4 20 2 20 2 20 2 20 3 20 3 20 1 20 3], :total-error 1193, :normalized-error 1193, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6ea6955a-0967-4bbb-82e9-fb523772fddb", :parent-uuids (#uuid "39b69745-ada8-4374-9cc3-a024feac3073"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction string_swap} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) \^) char_stackdepth string_fromboolean string_split \space string_swap string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 2 0 2 0 2 1 2 0 2 1 3 2 2 1 2 0 2 0 2 1 3 1 2 2 3 1 3 0 2 2 4 3 3 2 2 1 3 0 2 0 2 2 3 0 2 0 2 1 3 0 2 4 4 0 2 2 3 1 3 1 3 1 3 6 6 1 3 2 4 2 4 1 3 1 3 1 3 2 4 2 3 1 3 4 4 2 3 2 4 0 2 1 3 1 3 2 4 3 5 3 5 0 2 1 3 3 3 5 7 5 7 3 4 4 6 3 5 4 6 1 2 1 3 2 4 5 6 2 4 0 2 4 4 1 3 4 6 4 6 3 5 2 4 4 6 3 5 2 4 2 4 5 7 2 3 5 7 6 8 4 5 4 6 5 7 3 5 2 4 3 5 2 4 0 2 20 20 0 2 10 12 10 11 6 8 5 7 0 2 0 2 5 7 5 7 2 4 6 8], :total-error 658, :normalized-error 658, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "bb3c857d-ac71-4b97-810d-9a2767374b25", :parent-uuids (#uuid "2087a5e0-a8a4-4e01-8bbc-e07d9182bd60" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring integer_swap string_replacefirst string_frominteger string_stackdepth integer_gt exec_if (exec_y (string_yank tagged_960 integer_eq integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_dup () exec_when (boolean_eq exec_yank string_first) boolean_empty integer_div \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) (exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger)))), :errors [0 10 0 9 0 9 1 10 0 9 1 9 2 10 1 9 0 8 0 8 1 9 1 9 2 9 1 8 0 7 2 9 3 10 2 9 1 8 0 7 0 7 2 9 0 7 0 6 1 7 0 6 4 9 0 5 2 7 1 5 1 5 1 5 6 9 1 4 2 5 2 5 1 4 1 4 1 4 2 5 2 4 1 3 4 6 2 4 2 4 0 2 1 2 1 2 2 3 3 4 3 3 0 0 1 0 3 2 5 4 5 3 3 1 4 2 3 1 4 1 1 2 1 2 2 1 5 2 2 1 0 3 4 1 1 3 4 0 4 0 3 1 2 2 4 1 3 2 2 3 2 4 5 2 2 5 5 3 6 2 4 4 4 4 5 4 3 6 2 7 3 6 2 7 0 10 20 10 0 10 10 0 10 0 6 4 5 5 0 10 0 10 5 5 5 5 2 8 6 4], :total-error 749, :normalized-error 749, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "39bc2d42-a0ff-4537-a2cd-5701344bcc4f", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f" #uuid "fb89f621-6a5b-4815-aad5-8b7f2295c53d"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_indexofchar} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor}), :program (integer_pop char_stackdepth exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () string_indexofchar print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor), :errors [0 1 10 1 11 1 11 0 9 1 10 0 11 1 11 0 8 1 11 1 11 0 11 0 11 1 10 2 10 3 10 1 11 0 10 1 10 2 10 3 11 3 11 1 11 3 9 3 10 2 9 3 11 0 11 5 11 2 11 4 11 4 11 4 11 0 10 4 10 3 9 3 10 4 10 4 10 4 9 4 11 3 10 5 11 1 11 3 11 4 11 5 11 4 10 4 10 3 11 2 10 3 11 5 11 5 11 2 11 1 12 0 12 2 12 2 12 2 13 1 13 4 13 4 13 3 13 0 13 3 13 5 13 1 14 4 13 1 13 2 14 2 14 3 15 1 15 2 14 3 15 3 17 0 17 3 16 0 17 1 18 1 17 2 17 0 17 2 19 3 17 2 18 4 19 5 20 14 19 5 19 4 20 5 19 1 20 0 20 5 20 5 20 1 20 1 20 3 20 0], :total-error 1533, :normalized-error 1533, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "abcffeef-aeb0-462b-9d34-520e5333ebc1", :parent-uuids (#uuid "efb204ba-e64f-4129-aa25-3840ff7ade48" #uuid "a4bd5375-54aa-48c6-89ff-47d8df72482d"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 1, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 1, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and) (string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq) exec_yank) (string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup) string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 0 1 0 1 0 2 1 1 0 2 1 3 1 2 0 1 1 1 1 2 0 2 0 3 0 2 1 1 2 3 0 4 1 3 0 2 1 1 2 1 2 3 0 1 2 1 3 2 2 1 3 5 0 1 4 3 2 2 4 2 4 2 4 7 0 2 5 3 4 3 4 2 5 2 5 2 5 3 4 3 5 2 6 5 3 3 5 3 5 1 7 2 7 2 7 3 6 4 5 4 6 1 9 2 9 4 7 6 5 6 6 4 8 5 7 4 8 5 8 2 11 2 11 3 10 6 7 3 10 1 12 5 8 2 12 5 9 5 9 4 10 3 11 5 10 4 11 3 12 3 13 6 11 3 14 6 12 7 11 5 13 5 13 6 13 4 15 3 16 4 15 3 16 1 19 21 1 1 19 11 9 11 9 7 13 6 14 1 19 1 19 6 14 6 14 3 17 7 13], :total-error 1044, :normalized-error 1044, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "15817fdf-9cfa-412f-bf12-737ff87a2da8", :parent-uuids (#uuid "e683010d-39b4-4603-b366-90e6074cad3f"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 1, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 1, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and exec_stackdepth integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop (string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace) (string_containschar) \^) (integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer) string_shove integer_add string_indexofchar) integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt char_iswhitespace exec_noop exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 0 1 0 0 2 2 0 3 0 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 3 4 0 0 4 2 1 1 3 1 4 1 3 6 0 1 4 2 2 2 2 1 4 1 5 1 4 2 3 2 4 1 5 4 2 2 4 2 4 0 7 1 6 1 6 2 4 3 3 3 4 0 9 1 8 3 6 5 1 5 3 3 7 4 4 3 7 4 4 1 11 1 10 2 8 5 5 2 8 0 12 4 6 1 11 4 6 4 7 3 9 2 9 4 8 3 9 2 10 2 11 5 9 2 13 5 9 6 6 4 10 4 10 5 10 3 12 2 14 3 12 2 14 0 19 20 0 0 19 10 0 10 0 6 7 5 9 0 19 0 19 5 10 5 12 2 15 6 7], :total-error 795, :normalized-error 795, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "982c1405-a1cc-4347-823b-5f930212a8dd", :parent-uuids (#uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction char_yankdup} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar) exec_s (exec_noop string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq integer_swap string_replacefirst integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth char_yankdup \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) (exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a871d29a-97e2-4f10-895a-ef5722d47b5c", :parent-uuids (#uuid "d8b481d9-8a3c-4d34-abe7-697a52fa5e89" #uuid "2452623d-b27f-4dbb-8639-a07f572ae776"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring integer_min exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (string_replacefirstchar exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last in1 boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 0 1 1 1 1 1 0 1 1 2 1 2 0 2 1 2 2 2 2 2 1 2 1 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 3 3 3 3 1 3 3 4 4 4 3 4 4 5 1 5 5 5 3 6 5 6 5 6 5 7 1 7 6 7 5 7 5 7 6 7 6 7 6 7 5 8 6 8 7 8 4 8 6 8 6 8 8 9 8 9 8 9 7 9 6 10 7 10 10 11 10 11 8 11 6 12 7 12 9 12 8 12 9 13 9 13 12 13 12 13 11 13 8 13 11 13 13 13 9 14 13 14 10 14 10 14 11 14 12 15 11 15 12 15 13 16 14 17 12 17 15 18 13 18 12 18 14 18 14 19 14 19 16 19 17 19 16 19 17 20 20 20 0 20 20 20 10 20 10 20 14 20 15 20 20 20 20 20 15 20 15 20 18 20 14], :total-error 1821, :normalized-error 1821, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b55eb8e2-51c0-416e-988a-2750659da686", :parent-uuids (#uuid "39d5f109-9fd2-41a7-91e6-6fbbec6f1133" #uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_k} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring exec_k (string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_while (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop boolean_rot) integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean boolean_swap tag_boolean_969 boolean_yank print_integer)) (string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) integer_div string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 4 1 2 0 4 4 0 0 4 2 2 1 4 1 3 1 4 6 1 1 4 2 3 2 3 1 3 1 3 1 3 2 2 2 2 1 3 4 0 2 3 2 2 0 4 1 3 1 3 2 3 3 2 3 1 0 4 1 3 3 22 5 1 5 1 3 1 4 0 3 1 4 1 1 3 1 3 2 2 5 0 2 2 0 4 4 0 1 13 4 0 4 0 3 1 2 2 4 1 3 1 2 3 2 2 5 1 2 45 5 0 6 2 4 0 4 0 5 1 3 2 2 17 3 12 2 2 0 100 20 15 0 4 10 5 10 5 6 2 5 1 0 4 0 4 5 1 5 1 2 2 6 2], :total-error 641, :normalized-error 641, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b666d8fc-4aef-4281-bdfe-fd86364b4563", :parent-uuids (#uuid "2c9a4a9f-80a8-45dd-90cb-3ff0e03604fb"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction print_newline} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (print_newline) string_frominteger) (integer_stackdepth string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean) ())))) () ())), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "092efdb1-9d6b-47a6-ab13-b121427ae187", :parent-uuids (#uuid "42e2eb1d-c13f-4cb9-b513-5d2656f0c4c9" #uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction print_integer} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction string_swap} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth print_integer char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean integer_eq) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 string_swap print_integer)) string_parse_to_chars string_replacefirst char_iswhitespace string_containschar \^ char_stackdepth string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring char_allfromstring exec_noop exec_k () (\space char_isletter string_shove \% integer_dec string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 0 0 4 2 2 1 3 1 3 1 3 6 1 1 3 2 3 2 2 1 3 1 3 1 3 2 2 2 2 1 3 4 1 2 2 2 2 0 4 1 4 1 4 2 2 3 1 3 2 0 4 1 3 3 1 5 0 5 1 3 1 4 0 3 1 4 0 1 3 1 3 2 3 5 1 2 2 0 4 4 0 1 3 4 1 4 0 3 1 2 2 4 0 3 1 2 2 2 3 5 0 2 2 5 0 6 1 4 1 4 1 5 1 3 2 2 2 3 1 2 2 0 5 20 15 0 4 10 5 10 5 6 1 5 1 0 4 0 4 5 1 5 0 2 2 6 2], :total-error 451, :normalized-error 451, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6c08680f-4914-4d85-85d9-f8a77f2e524f", :parent-uuids (#uuid "4e318e6e-c50b-4903-91a6-c2fb7cc74d95"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last integer_max integer_empty exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split char_yankdup string_containschar) \^) char_stackdepth string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 0 0 0 1 1 1 0 2 1 1 1 0 0 2 2 3 2 2 1 1 1 0 0 0 0 2 1 0 0 0 0 1 1 0 0 4 3 0 0 2 1 1 1 1 1 1 1 6 5 1 1 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 3 2 1 2 2 0 0 1 1 1 1 2 2 3 3 3 3 0 0 1 1 3 2 5 5 5 5 3 2 4 4 3 3 4 4 1 0 1 1 2 2 5 4 2 2 0 0 4 3 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 1 5 5 6 6 4 3 4 4 5 5 3 3 2 2 3 3 2 2 0 0 20 19 0 0 10 10 10 9 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 467, :normalized-error 467, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "80cb9b74-9d0d-4c34-b1a6-c8066c70490c", :parent-uuids (#uuid "25f972b0-c4a4-44ef-b0f9-80e5b38d626c"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction char_eq} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 1, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction char_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 1, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (string_shove integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop exec_s (char_eq string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth) (integer_add "K;WuaPq6 ' q7") (string_parse_to_chars "x ii@l}0 a  irP _") string_pop exec_yankdup char_shove) boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_frominteger integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec exec_empty exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth exec_when (boolean_eq exec_yank) string_first boolean_empty integer_div boolean_rot boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 13 2 14 2 14 1 14 2 14 1 16 0 16 1 15 2 15 2 15 1 16 1 15 1 17 2 17 3 16 1 18 1 18 1 17 2 17 3 16 3 16 1 17 3 16 4 16 3 18 4 17 3 21 5 18 3 19 5 20 5 20 5 20 5 25 6 20 5 22 5 22 6 21 6 21 6 21 5 22 6 22 7 22 6 24 6 22 6 23 8 20 8 22 8 23 7 24 7 24 8 26 10 23 10 25 9 26 9 29 10 30 10 27 10 29 10 28 11 30 12 26 12 27 11 28 11 30 11 28 13 26 11 28 13 28 12 31 12 31 12 30 12 29 13 32 13 31 13 30 14 31 15 35 15 31 16 36 16 37 16 34 16 35 17 37 17 35 17 34 17 35 17 34 20 32 18 52 20 33 18 42 18 42 18 39 18 38 20 33 20 33 18 38 18 38 18 35 18 39], :total-error 3448, :normalized-error 3448, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7c988323-2e75-48a8-9b9d-ac65da0118e8", :parent-uuids (#uuid "e8bab081-e2bf-4808-b4eb-5b0118fa0aa5" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar) (exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 1 2 2 1 1 0 0 0 0 1 1 1 1 2 2 1 1 0 0 2 2 3 3 2 2 1 1 0 0 0 0 2 2 0 0 0 1 1 1 0 0 4 4 0 0 2 2 1 1 1 1 1 1 6 6 1 0 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 4 2 2 2 2 0 1 1 1 1 1 2 2 3 1 3 3 0 0 1 1 3 3 5 5 5 5 3 3 4 4 3 3 4 4 1 1 1 1 2 2 5 5 2 2 0 0 4 4 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 2 5 5 6 6 4 4 4 4 5 5 3 3 2 2 3 3 2 2 0 2 20 20 0 0 10 9 10 10 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 490, :normalized-error 490, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "2a30f0d7-7050-4cd0-962f-e64a8eb765e6", :parent-uuids (#uuid "191e9bd2-e19f-4c8f-837a-0ec1f9d0542c"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_fromchar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_794} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction string_removechar} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_rot string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot)) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_fromchar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_794 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) string_removechar) char_stackdepth string_fromboolean string_split \space char_isletter string_shove in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat exec_y (integer_mult)), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 2 1 1 0 1 0 1 1 0 1 1 2 0 1 0 0 1 2 1 3 1 2 0 1 0 0 1 0 1 2 0 0 1 0 2 1 0 0 1 4 2 0 1 2 0 1 0 1 0 1 0 6 4 1 1 2 1 2 1 1 0 1 0 1 0 2 1 2 0 1 0 4 2 2 0 2 1 0 2 1 1 1 0 2 1 3 1 3 2 0 1 1 0 3 1 5 4 5 4 3 1 4 3 3 2 4 3 1 1 1 0 2 1 5 3 2 1 0 1 4 1 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 1 2 1 5 4 2 0 5 4 6 5 4 2 4 3 5 4 3 2 2 1 3 2 2 1 0 2 20 18 0 1 10 8 10 8 6 5 5 4 0 1 0 1 5 4 5 4 2 1 6 5], :total-error 419, :normalized-error 419, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7f0a25f7-355b-4b6f-b91b-e42492590404", :parent-uuids (#uuid "f9e4a682-81ef-4293-8017-fa8f84c406e7" #uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction char_isletter} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not char_isletter integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 2 1 0 0 0 0 0 1 0 1 0 2 0 1 0 0 0 2 0 3 1 2 0 1 0 0 0 0 0 2 0 0 0 0 1 1 1 0 0 4 0 0 0 2 0 1 0 1 0 1 0 6 0 1 1 2 1 2 2 1 0 1 0 1 4 2 1 2 0 1 3 4 1 2 2 2 2 0 1 1 1 1 5 2 4 3 1 3 2 0 0 1 6 3 0 5 0 5 3 3 3 4 2 3 2 4 4 1 0 1 1 2 7 5 3 2 8 0 0 4 2 1 8 4 5 4 5 3 4 2 3 4 5 3 9 2 7 2 11 5 8 2 1 5 8 6 5 4 10 4 9 5 6 3 11 2 6 3 4 2 14 0 1 20 18 0 0 10 1 10 0 6 6 5 9 0 0 0 0 5 8 5 11 2 15 6 7], :total-error 539, :normalized-error 539, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "fcc9237d-aab1-4ba9-8171-71b8b2733e0d", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "9d35c5a6-a855-4698-bea0-4f21b5211e2b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 1, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth) boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot) (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (string_frominteger boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter exec_yankdup string_containschar boolean_eq string_containschar char_iswhitespace integer_yank) (string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 0 0 0 1 0 0 0 1 2 2 1 1 0 0 1 0 1 1 2 1 0 2 3 1 3 0 2 2 3 3 4 2 3 1 2 0 2 0 2 2 3 0 2 0 3 1 4 0 3 4 6 0 4 2 4 1 6 1 6 1 6 6 10 1 7 2 7 2 8 1 7 1 7 1 7 2 8 2 8 1 8 4 10 2 8 2 9 0 7 1 9 1 8 2 10 3 11 3 12 0 9 1 11 3 12 5 14 5 16 3 13 4 15 3 14 4 16 1 12 1 13 2 13 5 16 2 14 0 12 4 15 1 14 4 16 4 17 3 16 2 15 4 18 3 17 2 16 2 17 5 20 2 17 5 21 6 22 4 20 4 20 5 23 3 20 2 20 3 21 2 20 0 19 20 37 0 19 10 29 10 28 6 24 5 24 0 19 0 19 5 24 5 23 2 21 6 25], :total-error 1381, :normalized-error 1381, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e9373fb8-2675-4f95-959d-d8db734b63b2", :parent-uuids (#uuid "dd5da3ad-dbbb-4341-9abd-3761445ce25a"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction char_eq} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction char_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 1, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (string_shove integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop exec_s (char_eq string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") (string_parse_to_chars "x ii@l}0 a  irP _") (string_pop exec_yankdup char_shove) boolean_invert_first_then_and) integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_frominteger integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec exec_empty string_yank in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (integer_flush exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) boolean_stackdepth char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq integer_stackdepth boolean_xor integer_mult), :errors [2 0 8 0 8 0 7 1 7 0 1 0 6 1 7 0 2 0 2 0 1 0 7 0 7 0 2 1 3 1 1 2 6 1 5 0 2 2 3 1 3 1 7 0 3 1 4 2 3 2 4 2 6 0 5 3 7 2 5 5 5 5 5 5 6 0 6 6 5 7 5 6 6 6 6 6 6 5 5 7 7 5 7 7 6 3 7 5 6 8 8 6 8 8 8 8 7 8 7 10 8 11 10 8 10 10 9 7 9 14 10 14 11 8 10 14 10 13 11 14 12 11 12 12 11 13 11 7 11 12 13 11 11 8 13 13 12 16 12 16 12 15 12 14 13 17 13 15 13 15 14 15 15 20 16 14 16 21 16 22 16 13 16 20 17 22 17 20 17 19 17 20 17 18 20 18 18 1 20 18 18 27 18 9 18 24 18 22 20 18 20 18 18 23 18 23 18 19 18 23], :total-error 1899, :normalized-error 1899, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b0d83ba3-ef7f-47ee-9d96-d928c287685b", :parent-uuids (#uuid "3077935d-6e26-4b8b-bcfb-029e86da5aec" #uuid "e21ca62d-3f1c-40c1-b606-df5e04096031"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction char_isletter} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 1, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (char_isletter in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_removechar integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while () integer_swap) string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (string_replacefirstchar boolean_pop integer_max boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) tag_boolean_969 boolean_yank exec_pop () boolean_pop char_shove) print_integer string_parse_to_chars integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 2 0 1 1 3 2 4 1 3 0 2 0 2 1 3 1 3 2 5 1 4 0 3 2 5 3 6 2 5 1 4 0 3 0 3 2 5 0 3 0 4 1 5 0 4 4 9 0 5 2 7 1 7 1 7 1 6 6 13 1 8 2 9 2 9 1 8 1 8 1 8 2 9 2 10 1 9 4 12 2 9 2 10 0 8 1 9 1 10 2 11 3 12 3 12 0 9 1 12 3 14 5 16 5 17 3 15 4 15 3 15 4 17 1 14 1 14 2 15 5 18 2 15 0 13 4 17 1 15 4 18 4 18 3 17 2 16 4 19 3 18 2 16 2 18 5 21 2 19 5 23 6 24 4 22 4 22 5 24 3 22 2 21 3 22 2 21 0 19 20 40 0 20 10 30 10 30 6 26 5 25 0 19 0 20 5 25 5 25 2 22 6 26], :total-error 1514, :normalized-error 1514, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "79924941-efd9-4cad-930c-cd20313ccfa7", :parent-uuids (#uuid "73edc989-55cf-4985-b9c5-9c02dc61a294" #uuid "56e48ef1-f14e-4433-84e0-9a45b85a777d"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 1 0 4 2 3 1 3 1 4 1 3 6 1 1 4 2 2 2 2 1 4 1 3 1 3 2 2 2 4 1 3 4 1 2 3 2 2 0 4 1 3 1 3 2 2 3 1 3 1 0 4 1 3 3 2 5 0 5 0 3 3 4 0 3 1 4 0 1 4 1 3 2 3 5 0 2 3 0 4 4 1 1 3 4 1 4 0 3 1 2 2 4 1 3 1 2 2 2 2 5 1 2 3 5 0 6 2 4 1 4 0 5 0 3 1 2 2 3 1 2 2 0 4 20 14 0 4 10 5 10 4 6 1 5 0 0 4 0 4 5 1 5 1 2 3 6 1], :total-error 446, :normalized-error 446, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "1378775b-6a01-4b58-b51f-479c09030f0c", :parent-uuids (#uuid "52224fdc-1c93-4086-8ecb-d39a9f440eb6"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger) (integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_do*count (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and) exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter exec_yankdup string_containschar boolean_eq) (string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar \^) char_stackdepth) (string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [11 0 11 1 11 1 12 0 11 1 12 1 13 0 12 1 11 2 11 2 12 1 12 1 13 1 12 2 11 3 13 1 14 0 13 1 12 2 11 3 11 3 13 1 11 3 11 4 12 3 11 4 15 1 11 5 13 3 12 5 12 5 12 5 17 1 12 6 13 5 13 5 12 6 12 6 12 6 13 5 13 6 12 7 15 4 13 6 13 6 11 8 12 8 12 8 13 7 14 6 14 7 11 10 12 10 14 8 16 6 16 7 14 9 15 8 14 9 15 9 12 12 12 12 13 11 16 8 13 11 11 13 15 9 12 13 15 10 15 10 14 11 13 12 15 11 14 12 13 13 13 14 16 12 13 15 16 13 17 12 15 14 15 14 16 14 14 16 13 17 14 16 13 17 11 20 31 0 11 20 21 10 21 10 17 14 16 15 11 20 11 20 16 15 16 15 13 18 17 14], :total-error 2133, :normalized-error 2133, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "bcd894ca-c5a0-4039-a7a8-47dc5505bdd9", :parent-uuids (#uuid "e9d3b135-6aef-45ef-aa4d-8cfd67b7d371"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_rot} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1) integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop) (integer_gt exec_if () (exec_y (string_rot tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop print_newline integer_dec integer_pop integer_inc string_dup) string_stackdepth) string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first) (char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ())))), :errors [83 1000 83 1000 83 1000 83 1000 83 1000 83 1000 83 1000 84 1000 83 1000 83 1000 83 1000 84 1000 84 1000 84 1000 83 1000 83 1000 83 1000 84 1000 83 1000 83 1000 83 1000 84 1000 83 1000 83 1000 84 1000 83 1000 84 1000 83 1000 85 1000 84 1000 83 1000 84 1000 84 1000 84 1000 85 1000 85 1000 84 1000 83 1000 84 1000 85 1000 85 1000 84 1000 86 1000 85 1000 84 1000 83 1000 84 1000 84 1000 85 1000 85 1000 85 1000 83 1000 84 1000 86 1000 87 1000 87 1000 85 1000 86 1000 86 1000 87 1000 84 1000 84 1000 85 1000 88 1000 85 1000 83 1000 87 1000 84 1000 87 1000 86 1000 86 1000 85 1000 87 1000 85 1000 85 1000 85 1000 86 1000 85 1000 88 1000 89 1000 87 1000 87 1000 87 1000 86 1000 85 1000 86 1000 85 1000 83 1000 83 1000 83 1000 92 1000 93 1000 89 1000 88 1000 83 1000 83 1000 87 1000 87 1000 85 1000 89 1000], :total-error 108485, :normalized-error 108485, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "eb085527-055e-4717-abe9-c3bdcd5db8c0", :parent-uuids (#uuid "98c2806d-bcdb-4814-b135-048475c2e702" #uuid "8bfa41dc-8d65-476e-baec-4ac2285d64fb"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction \s} {:close 0, :instruction print_string} {:close 1, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 1, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_934} {:close 0, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 1, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 1, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline boolean_xor string_nth char_empty char_rot integer_dec \s) (print_string integer_eq) (char_isdigit) boolean_invert_first_then_and string_frominteger integer_eq) string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_934 exec_while (integer_swap) string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank) in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 1 0 2 2 1 1 1 1 1 1 1 6 3 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 0 5 3 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 0 5 2 2 0 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 1 5 3 6 4 4 1 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 401, :normalized-error 401, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "5c9cc05d-0fab-4855-922e-0095ee931d74", :parent-uuids (#uuid "62a1bee9-d255-41d0-a5a5-cf3bc8b9c3e9"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq) (integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult) () ())), :errors [0 1 0 1 0 1 1 0 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 2 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 4 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 0 1 1 4 2 2 0 2 0 0 2 1 2 1 1 2 0 3 0 3 1 0 2 1 1 3 1 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 2 4 2 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 0 3 20 18 0 2 10 8 10 8 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 405, :normalized-error 405, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "be5b3c39-ae8f-4f24-ae54-08cd50982abb", :parent-uuids (#uuid "c449e2ad-ff76-45f0-b644-61296b852581"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_nth boolean_and \:) (exec_shove (string_emptystring exec_stackdepth exec_yank) string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove integer_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_removechar boolean_eq string_concat boolean_xor integer_mult), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 1000 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 100245, :normalized-error 100245, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "da5e7d4b-6581-4f6d-ba18-7b8f08d70099", :parent-uuids (#uuid "b7cfccba-4fea-4e0a-a8b1-e32e3bf11cb8" #uuid "c6290173-b2fe-4f0d-89a4-cdb864733fd4"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction char_allfromstring} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_and string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_yank) (string_first) boolean_empty integer_div char_allfromstring) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (exec_string_iterate (exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 0 0 2 2 2 1 1 1 1 1 1 6 2 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 0 5 2 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 1 5 2 2 0 0 2 4 1 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 1 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 16 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 394, :normalized-error 394, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "71f4bced-7d6d-4663-9dd1-8b54cf9f25a8", :parent-uuids (#uuid "7b6226d5-240d-4d52-8b4d-1333fb8f1b1a"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_fromchar} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_div exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_fromchar boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 in1 integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth integer_flush integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 0 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 1 3 0 2 1 1 2 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 0 0 2 2 2 1 1 1 1 1 1 6 2 1 1 2 1 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 2 2 0 3 1 3 1 0 2 1 1 3 0 5 2 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 1 5 2 2 0 0 2 4 1 1 1 4 1 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 2 2 1 5 2 6 3 4 1 4 1 5 3 3 0 2 0 3 1 2 0 0 2 20 16 0 2 10 8 10 7 6 3 5 3 0 2 0 2 5 3 5 2 2 0 6 4], :total-error 394, :normalized-error 394, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "c75cdb0c-540a-4a9e-b670-c3460106d322", :parent-uuids (#uuid "5f999162-07c6-4d80-b694-50b0f6de2516"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_swap} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop (string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) tag_boolean_969 boolean_yank print_integer) () string_parse_to_chars integer_swap char_iswhitespace string_containschar) (\^) (char_stackdepth) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length exec_noop integer_fromchar exec_noop string_eq integer_lt integer_fromchar exec_noop exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 0 1 0 0 2 2 0 3 0 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 3 4 0 0 4 2 1 1 3 1 4 1 3 6 0 1 4 2 2 2 2 1 4 1 5 1 4 2 3 2 4 1 5 4 2 2 4 2 4 0 7 1 6 1 6 2 4 3 3 3 4 0 9 1 8 3 6 5 1 5 3 3 7 4 4 3 7 4 4 1 11 1 10 2 8 5 5 2 8 0 12 4 6 1 11 4 6 4 7 3 9 2 9 4 8 3 9 2 10 2 11 5 9 2 13 5 9 6 6 4 10 4 10 5 10 3 12 2 14 3 12 2 14 0 19 20 0 0 19 10 0 10 0 6 7 5 9 0 19 0 19 5 10 5 12 2 15 6 7], :total-error 795, :normalized-error 795, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ca7a05b1-f539-4987-9978-c48b889861e5", :parent-uuids (#uuid "c39eda7d-5ab7-4990-870e-19b0820d34da" #uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \4} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \4 string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_shove () exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove string_replacefirst char_iswhitespace string_containschar \^ char_stackdepth string_fromboolean print_newline \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [7 1 7 0 7 0 7 1 7 0 7 0 8 1 8 0 7 1 7 1 7 0 8 0 8 0 8 1 7 2 8 0 9 1 9 0 7 1 7 2 7 2 8 0 7 2 7 3 8 2 7 3 10 0 7 4 9 2 8 5 7 5 8 5 13 1 8 5 9 5 9 4 8 5 7 5 8 5 9 4 9 6 8 7 10 4 9 6 8 6 7 8 8 7 8 8 9 6 10 5 9 7 7 10 8 9 10 7 12 6 12 5 9 7 11 6 10 7 11 6 8 9 8 9 9 9 12 5 9 8 7 10 11 6 8 9 11 7 10 6 10 7 9 8 11 6 9 7 9 8 9 8 11 6 9 8 12 6 13 5 11 7 11 7 11 5 10 8 9 8 10 7 9 8 7 10 26 9 7 10 16 0 17 1 13 5 12 5 7 10 7 10 11 5 11 6 9 8 13 4], :total-error 1413, :normalized-error 1413, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "aa29b0d7-63bd-4a6f-9a8f-b8e29e0d1ac3", :parent-uuids (#uuid "ee5b5e8c-0e1e-4d4a-b9b4-590438e42747" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring integer_mult exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 2 1 3 0 2 4 0 0 2 2 1 1 1 1 1 1 1 6 2 1 1 2 0 2 2 1 1 1 1 1 2 2 1 2 0 1 2 4 1 2 0 2 1 0 2 1 1 1 1 2 2 3 1 3 0 0 2 1 2 3 0 5 2 5 2 3 1 4 1 3 1 4 0 1 1 1 1 2 0 5 3 2 1 0 2 4 1 1 1 4 2 4 1 3 1 2 0 4 2 3 0 2 0 2 1 5 3 2 0 5 3 6 4 4 2 4 1 5 3 3 1 2 0 3 1 2 1 0 2 20 16 0 2 10 7 10 8 6 4 5 2 0 2 0 2 5 2 5 2 2 1 6 3], :total-error 410, :normalized-error 410, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "21047c8a-31a8-4371-97a6-49531f2e4342", :parent-uuids (#uuid "ff85d59f-d1a9-4951-9791-27f45d6df96f" #uuid "1e0c624a-8b63-4e17-b006-e5b4d792305b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction print_string} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction char_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth print_string string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty char_pop boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) (string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) integer_fromboolean exec_pop () boolean_pop char_shove print_integer char_yank integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) (integer_mult))), :errors [0 0 0 0 0 0 1 1 0 0 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 0 1 1 0 2 2 0 3 1 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 2 4 2 0 2 2 0 1 1 1 1 1 1 6 4 1 2 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 2 2 0 2 0 0 3 1 2 1 1 2 0 3 0 3 1 0 2 1 1 3 1 5 3 5 3 3 1 4 2 3 1 4 2 1 1 1 1 2 0 5 3 2 0 0 2 4 2 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 0 5 3 6 4 4 2 4 2 5 3 3 1 2 0 3 1 2 0 0 3 20 18 0 2 10 7 10 8 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 410, :normalized-error 410, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "46862ac9-017c-419f-a1ed-49f009dc9eb8", :parent-uuids (#uuid "43fdce3c-0477-4b22-b6bb-c486a2c1ac84" #uuid "d1cd4d0e-7a0b-41f8-aae3-75cb3421689b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 1, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (boolean_shove in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_fromchar string_yank in1) (char_yank boolean_yankdup char_iswhitespace boolean_eq exec_yank) (string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop boolean_shove integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add integer_swap in1 string_length integer_lt integer_fromchar) exec_noop string_eq) (integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 1 0 1 1 1 0 1 1 2 2 2 1 1 0 1 0 1 1 2 1 1 2 2 1 2 0 1 2 3 3 3 2 2 1 2 0 1 0 1 2 2 0 1 0 0 1 2 0 1 4 4 0 1 2 2 1 2 1 2 1 2 6 6 1 1 2 3 2 3 1 2 1 2 1 2 2 3 2 1 1 2 4 4 2 2 2 3 0 0 1 1 1 2 2 3 3 3 3 4 0 1 1 2 3 3 5 6 5 6 3 3 4 5 3 4 4 5 1 1 1 2 2 3 5 5 2 3 0 1 4 4 1 2 4 5 4 5 3 4 2 3 4 5 3 4 2 3 2 3 5 6 2 2 5 6 6 7 4 4 4 5 5 6 3 4 2 3 3 4 2 3 0 0 20 20 0 1 10 10 10 10 6 7 5 6 0 1 0 1 5 6 5 6 2 3 6 7], :total-error 559, :normalized-error 559, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "8c254a85-db57-4384-8dc0-80bb4c4a3137", :parent-uuids (#uuid "2e3962a9-597b-4325-a57d-766998843952" #uuid "c449e2ad-ff76-45f0-b644-61296b852581"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 1, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space char_isletter) string_shove in1 string_length integer_lt) integer_fromchar exec_noop string_eq integer_fromstring string_fromboolean boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 0 0 0 1 1 0 0 1 0 2 2 1 0 0 0 0 0 1 0 1 0 2 0 1 0 0 0 2 0 3 1 2 0 1 0 0 0 0 0 2 0 0 0 0 1 1 1 0 0 4 0 0 0 2 0 1 0 1 0 1 0 6 0 1 1 2 1 2 2 1 0 1 0 1 4 2 1 2 0 1 3 4 1 2 2 2 2 0 1 1 1 1 5 2 4 3 1 3 2 0 0 1 6 3 0 5 0 5 3 3 3 4 2 3 2 4 4 1 0 1 1 2 7 5 3 2 8 0 0 4 2 1 8 4 5 4 5 3 4 2 3 4 5 3 9 2 7 2 11 5 8 2 1 5 8 6 5 4 10 4 9 5 6 3 11 2 6 3 4 2 14 0 1 20 18 0 0 10 1 10 0 6 6 5 9 0 0 0 0 5 8 5 11 2 15 6 7], :total-error 539, :normalized-error 539, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a29f0355-ed71-4435-9e44-506ba1f1fe0c", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup integer_fromchar string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush) (integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult) () ()), :errors [0 0 0 1 0 1 1 0 0 1 1 1 2 0 1 1 0 2 0 2 1 1 1 1 2 1 1 2 0 3 2 1 3 0 2 1 1 2 0 3 0 3 2 1 0 3 0 4 1 3 0 4 4 1 0 5 2 3 1 5 1 5 1 5 6 1 1 6 2 5 2 5 1 6 1 6 1 6 2 5 2 6 1 7 4 4 2 6 2 6 0 8 1 8 1 8 2 7 3 6 3 7 0 10 1 10 3 8 5 6 5 7 3 9 4 8 3 9 4 9 1 12 1 12 2 11 5 8 2 11 0 13 4 9 1 13 4 10 4 10 3 11 2 12 4 11 3 12 2 13 2 14 5 12 2 15 5 13 6 12 4 14 4 14 5 14 3 16 2 17 3 16 2 17 0 20 20 0 0 20 10 10 10 10 6 14 5 15 0 20 0 20 5 15 5 15 2 18 6 14], :total-error 1033, :normalized-error 1033, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "50af91c9-4657-445a-bd0c-49a1875410f9", :parent-uuids (#uuid "f71464fe-1cf5-4952-9d7d-0c32ae6f0b85" #uuid "2452623d-b27f-4dbb-8639-a07f572ae776"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_flush} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) exec_do*range () boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars) exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_flush) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 0 1 0 1 1 1 0 1 1 0 2 1 1 1 0 1 0 1 1 0 1 1 2 0 1 2 0 3 2 0 3 1 2 0 1 1 0 3 0 3 2 0 0 3 0 3 1 2 0 3 4 1 0 3 2 3 1 2 1 2 1 2 6 0 1 2 2 3 2 1 1 2 1 2 1 2 2 2 2 2 1 3 4 0 2 3 2 2 0 3 1 2 1 3 2 1 3 0 3 1 0 3 1 3 3 1 5 1 5 2 3 1 4 0 3 0 4 1 1 3 1 2 2 2 5 0 2 1 0 3 4 0 1 2 4 0 4 0 3 0 2 1 4 1 3 0 2 1 2 1 5 1 2 2 5 0 6 2 4 0 4 0 5 2 3 2 2 1 3 0 2 2 0 3 20 14 0 3 10 6 10 5 6 2 5 2 0 3 0 3 5 1 5 1 2 1 6 2], :total-error 413, :normalized-error 413, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "a0ebcd72-df81-4b72-8999-3eb3440f98d3", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "d524a15e-add5-45ba-9dbe-c6c20059e40c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction string_take} {:close 0, :instruction char_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction \~} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (string_take char_stackdepth exec_if (integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (string_replacefirstchar exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte \~ string_fromchar string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (boolean_pop string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult))) ()), :errors [0 1000 0 1000 0 1000 1 1000 0 1000 1 1000 2 1000 1 1000 0 1000 0 1000 1 1000 1 1000 2 1000 1 1000 0 1000 2 1000 3 1000 2 1000 1 1000 0 1000 0 1000 2 1000 0 1000 0 1000 1 1000 0 1000 4 1000 0 1000 2 1000 1 1000 1 1000 1 1000 6 1000 1 1000 2 1000 2 1000 1 1000 1 1000 1 1000 2 1000 2 1000 1 1000 4 1000 2 1000 2 1000 0 1000 1 1000 1 1000 2 1000 3 1000 3 1000 0 1000 1 1000 3 1000 5 1000 5 1000 3 1000 4 1000 3 1000 4 1000 1 1000 1 1000 2 1000 5 1000 2 1000 0 1000 4 1000 1 1000 4 1000 4 1000 3 1000 2 1000 4 1000 3 1000 2 1000 2 1000 5 1000 2 1000 5 1000 6 1000 4 1000 4 1000 5 1000 3 1000 2 1000 3 1000 2 1000 0 1000 20 18 0 1000 10 1000 10 1000 6 1000 5 1000 0 1000 0 1000 5 1000 5 1000 2 1000 6 1000], :total-error 99263, :normalized-error 99263, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "83f49ad9-1d4b-4122-9fb4-1e96152374dc", :parent-uuids (#uuid "f829219d-6d72-4c4c-907a-970c004564b3" #uuid "52224fdc-1c93-4086-8ecb-d39a9f440eb6"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 1, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_not} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction exec_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction char_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction integer_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction char_isdigit} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_shove exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline) (string_substring boolean_not char_empty char_rot integer_dec \s print_string exec_pop (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_fromchar string_replacefirst exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and char_swap integer_max integer_gte exec_do*while (print_exec (string_yank in1) char_yank boolean_yankdup string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty boolean_dup exec_pop () exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) (string_last integer_yankdup char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth boolean_frominteger integer_fromboolean exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean char_isdigit tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) (integer_div) string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring integer_empty exec_noop exec_k () (\space char_isletter string_shove string_empty exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger print_integer string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 10 0 9 0 9 1 10 0 9 1 9 2 10 1 9 0 8 0 8 1 9 1 9 2 9 1 8 0 7 2 9 3 10 2 9 1 8 0 7 0 7 2 9 0 7 0 6 1 7 0 6 4 9 0 5 2 7 1 5 1 5 1 5 6 9 1 4 2 5 2 5 1 4 1 4 1 4 2 5 2 4 1 3 4 6 2 4 2 4 0 2 1 2 1 2 2 3 3 4 3 3 0 0 1 0 3 2 5 4 5 3 3 1 4 2 3 1 4 1 1 2 1 2 2 1 5 2 2 1 0 3 4 1 1 3 4 0 4 0 3 1 2 2 4 1 3 2 2 3 2 4 5 2 2 5 5 3 6 2 4 4 4 4 5 4 3 6 2 7 3 6 2 7 0 10 20 10 0 10 10 0 10 0 6 4 5 5 0 10 0 10 5 5 5 5 2 8 6 4], :total-error 749, :normalized-error 749, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "b4a1027f-96fd-4405-9cef-3877cb307899", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "ede29d76-fb71-4d33-92d0-b86baff7854c"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank) integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop exec_while () exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (integer_sub char_iswhitespace string_containschar) \^) (char_stackdepth) (string_fromboolean string_split \space char_isletter string_shove char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 0 0 0 1 1 1 0 2 1 1 1 0 0 2 2 3 2 2 1 1 1 0 0 0 0 2 1 0 0 0 0 1 1 0 0 4 3 0 0 2 1 1 1 1 1 1 1 6 5 1 1 2 2 2 2 1 1 1 1 1 1 2 2 2 1 1 1 4 3 2 1 2 2 0 0 1 1 1 1 2 2 3 3 3 3 0 0 1 1 3 2 5 5 5 5 3 2 4 4 3 3 4 4 1 0 1 1 2 2 5 4 2 2 0 0 4 3 1 1 4 4 4 4 3 3 2 2 4 4 3 3 2 2 2 2 5 5 2 1 5 5 6 6 4 3 4 4 5 5 3 3 2 2 3 3 2 2 0 0 20 19 0 0 10 10 10 9 6 6 5 5 0 0 0 0 5 5 5 5 2 2 6 6], :total-error 467, :normalized-error 467, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e055453d-f55f-4f86-a654-4dfe2841f73a", :parent-uuids (#uuid "67f4a596-149d-4cfa-9d6e-508cf9d0c290"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction char_eq} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 1, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 1, :instruction print_newline} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 1, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction boolean_swap} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 1, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_last} {:close 0, :instruction string_yankdup} {:close 0, :instruction print_char} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (string_shove integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop exec_s (char_eq string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth) (integer_add "K;WuaPq6 ' q7") (string_parse_to_chars char_isdigit boolean_invert_first_then_and char_empty integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_yankdup exec_if (exec_y (string_yank integer_gte) string_concat) (char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod) print_newline) string_frominteger) integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec exec_empty integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline boolean_swap string_first char_rot string_fromboolean integer_max boolean_invert_second_then_and string_last string_yankdup print_char exec_while (\space integer_fromstring string_frominteger)), :errors [0 1000 4 1000 4 1000 3 1000 4 1000 3 1000 2 1000 3 1000 4 1000 4 1000 3 1000 3 1000 2 1000 3 1000 4 1000 2 1000 1 1000 1 1000 3 1000 4 1000 4 1000 2 1000 4 1000 4 1000 3 1000 4 1000 2 1000 5 1000 3 1000 5 1000 6 1000 5 1000 4 1000 6 1000 5 1000 5 1000 6 1000 7 1000 6 1000 5 1000 6 1000 7 1000 5 1000 6 1000 7 1000 8 1000 8 1000 8 1000 7 1000 6 1000 8 1000 10 1000 10 1000 8 1000 8 1000 9 1000 10 1000 9 1000 9 1000 10 1000 12 1000 12 1000 11 1000 10 1000 11 1000 13 1000 10 1000 13 1000 11 1000 11 1000 11 1000 12 1000 12 1000 13 1000 13 1000 14 1000 14 1000 15 1000 14 1000 15 1000 15 1000 15 1000 16 1000 16 1000 17 1000 16 1000 17 1000 20 1000 17 1000 20 1000 17 1000 17 1000 17 1000 17 1000 20 1000 20 1000 17 1000 17 1000 18 1000 16 1000], :total-error 100899, :normalized-error 100899, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "e4babda7-b27f-4088-b20e-8c9e8687f45d", :parent-uuids (#uuid "e8bab081-e2bf-4808-b4eb-5b0118fa0aa5" #uuid "2e3962a9-597b-4325-a57d-766998843952"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop) boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (integer_dec boolean_pop integer_max integer_gte exec_do*while (string_fromchar) string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) \^ char_stackdepth string_fromboolean string_split \space integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [5 1000 0 1 0 1 1 0 0 1 1 2 2 1 1 1 0 1 0 1 1 2 1 1 2 2 1 2 0 1 2 3 3 2 2 1 1 2 0 1 0 1 2 2 0 1 0 1 1 2 0 1 4 3 0 1 2 2 1 2 1 2 1 2 6 5 1 2 2 3 2 3 1 2 1 2 1 2 2 3 2 2 1 2 4 3 2 2 2 3 0 1 1 2 1 2 2 3 3 4 3 4 0 1 1 2 3 2 5 6 5 6 3 3 4 5 3 4 4 5 1 1 1 2 2 3 5 5 2 3 0 1 4 3 1 2 4 5 4 5 3 4 2 3 4 5 3 4 2 3 2 3 5 6 2 2 5 6 6 7 4 4 4 5 5 6 3 4 2 3 3 4 2 3 0 1 20 19 0 1 10 11 10 10 6 7 5 6 0 1 0 1 5 6 5 6 2 3 6 7], :total-error 1561, :normalized-error 1561, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "61b74b62-dc4c-4378-851f-6064a5919973", :parent-uuids (#uuid "6b4fcb45-744d-4f45-850c-3f28be37fb5e" #uuid "6125b17d-f77e-436f-8a58-e098643c9d67"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 1, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_replace} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction char_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min integer_add string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq) (char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_replace char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) integer_fromboolean exec_pop () boolean_pop char_shove print_integer char_yank integer_add string_indexofchar integer_gte in1) (char_isdigit integer_swap integer_lt string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 0 0 1 0 1 1 2 0 1 1 2 2 3 1 2 0 1 0 1 1 2 1 2 2 3 1 2 0 1 2 3 3 4 2 3 1 2 0 1 0 1 2 3 0 1 0 1 1 2 0 1 4 5 0 1 2 3 1 2 1 2 1 2 6 7 1 2 2 3 2 3 1 2 1 2 1 2 2 3 2 3 1 2 4 5 2 3 2 3 0 1 1 2 1 2 2 3 3 4 3 4 0 1 1 2 3 4 5 6 5 6 3 4 4 5 3 4 4 5 1 2 1 2 2 3 5 6 2 3 0 1 4 5 1 2 4 5 4 5 3 4 2 3 4 5 3 4 2 3 2 3 5 6 2 3 5 6 6 7 4 5 4 5 5 6 3 4 2 3 3 4 2 3 0 1 20 21 0 1 10 11 10 11 6 7 5 6 0 1 0 1 5 6 5 6 2 3 6 7], :total-error 589, :normalized-error 589, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "965970eb-b54f-401a-831a-ab9114285e7b", :parent-uuids (#uuid "8d3144d8-a55f-41e4-a126-4616438f2258" #uuid "d1cd4d0e-7a0b-41f8-aae3-75cb3421689b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_nth} {:close 0, :instruction exec_while} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_nth exec_while (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (string_replacefirstchar exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove exec_do*count (string_shove integer_add string_indexofchar integer_gte in1) char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger exec_stackdepth string_shove integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor) integer_mult), :errors [0 1 1 0 1 0 1 1 1 0 2 0 2 1 2 0 2 1 2 1 2 0 2 0 3 0 3 1 3 2 3 0 3 1 3 0 3 1 3 2 3 2 3 0 3 2 4 3 4 2 4 3 5 0 5 4 5 2 6 4 6 4 6 4 7 0 7 5 7 4 7 4 7 5 7 5 7 5 7 4 8 5 8 6 8 3 8 5 8 5 8 7 9 7 9 7 9 6 9 5 10 6 10 9 11 9 11 7 11 5 12 6 12 8 12 7 12 8 13 8 13 11 13 11 13 10 13 7 13 10 13 12 13 8 14 12 14 9 14 9 14 10 14 11 15 10 15 11 15 12 16 13 17 11 17 14 18 12 18 11 18 13 18 13 19 13 19 15 19 16 19 15 19 16 20 19 20 1 20 19 20 9 20 9 20 13 20 14 20 19 20 19 20 14 20 14 20 17 20 13], :total-error 1731, :normalized-error 1731, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "989b9ff1-ab1b-43d7-82a8-dd76db031f60", :parent-uuids (#uuid "f829219d-6d72-4c4c-907a-970c004564b3"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 3, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 1, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) string_rot char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer))) string_replacefirst string_replacefirst char_iswhitespace string_containschar) (\^) (char_stackdepth) string_fromboolean string_split char_yankdup string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 0 1 2 0 2 0 2 2 1 0 2 0 4 1 3 0 4 4 0 0 4 2 2 1 4 1 5 1 4 6 1 1 5 2 5 2 5 1 5 1 5 1 5 2 4 2 4 1 5 4 2 2 5 2 4 0 6 1 5 1 5 2 5 3 4 3 3 0 6 1 5 3 3 5 1 5 1 3 3 4 2 3 3 4 3 1 5 1 5 2 4 5 2 2 4 0 6 4 2 1 6 4 2 4 2 3 3 2 4 4 3 3 3 2 5 2 4 5 1 2 4 5 2 6 0 4 2 4 2 5 1 3 4 2 4 3 3 2 4 0 6 20 13 0 6 10 4 10 3 6 0 5 1 0 6 0 6 5 1 5 1 2 4 6 0], :total-error 543, :normalized-error 543, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "8402a3d9-53e9-48b5-8dbc-26866720ced7", :parent-uuids (#uuid "6ff91ab2-b72f-4d74-907a-c657441bfae8"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction exec_noop} {:close 0, :instruction char_yank} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction char_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (exec_noop char_yank char_rot string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") (string_parse_to_chars) "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte) string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ()))), :errors [2 4 2 3 2 3 2 4 2 3 2 3 2 4 3 3 2 2 2 2 2 3 3 3 3 3 3 2 2 1 2 3 3 4 4 3 2 2 2 1 2 1 3 3 2 1 2 0 3 1 2 0 4 3 2 1 4 1 3 1 2 1 3 1 8 3 3 2 4 1 4 1 3 2 2 2 3 2 4 1 4 2 3 3 5 0 4 2 3 2 2 4 3 4 3 4 4 3 5 2 4 3 2 6 3 6 5 4 7 2 7 3 4 5 6 4 5 5 6 5 3 8 3 8 4 7 7 4 4 7 2 9 6 5 3 9 6 6 5 6 5 7 4 8 6 7 4 8 4 9 4 10 5 8 4 11 7 9 8 8 6 10 6 10 6 10 5 12 4 13 5 12 4 13 2 16 20 4 2 16 11 6 12 6 8 10 7 11 2 16 2 16 6 11 6 11 4 14 8 10], :total-error 949, :normalized-error 949, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7cfa9a67-367b-4ef2-9c40-2970acb13a72", :parent-uuids (#uuid "98c2806d-bcdb-4814-b135-048475c2e702" #uuid "43d5d6dd-b30e-4366-a4e7-e0fef0f0187b"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction \4} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline \4 string_nth exec_do*while (string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap string_nth boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add) boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 1 0 1 1 0 0 1 1 0 2 0 1 1 0 1 0 1 1 0 1 1 2 1 1 1 0 0 2 2 3 2 2 2 1 0 0 0 0 0 2 1 0 0 0 1 1 2 0 1 4 6 0 2 2 4 1 4 1 4 1 4 6 9 1 5 2 5 2 6 1 5 1 5 1 5 2 6 2 7 1 6 4 9 2 7 2 7 0 5 1 7 1 6 2 8 3 9 3 10 0 7 1 9 3 11 5 12 5 14 3 12 4 13 3 12 4 14 1 11 1 11 2 11 5 15 2 12 0 10 4 14 1 12 4 14 4 15 3 14 2 13 4 16 3 15 2 14 2 15 5 18 2 16 5 19 6 20 4 18 4 18 5 21 3 18 2 18 3 19 2 18 0 17 20 36 0 17 10 27 10 26 6 22 5 22 0 17 0 17 5 22 5 21 2 19 6 23], :total-error 1221, :normalized-error 1221, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "d22532a9-c3d6-4bdf-8069-8b204cb20666", :parent-uuids (#uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec exec_empty print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop boolean_and \:) (exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) (exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) (exec_do*times (integer_sub char_iswhitespace string_containschar) \^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth in1 string_length integer_lt integer_fromchar exec_noop string_eq integer_fromstring exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 1 0 1 0 1 1 0 0 1 1 0 2 1 1 0 0 1 0 1 1 0 1 0 2 1 1 0 0 1 2 1 3 2 2 1 1 0 0 1 0 1 2 1 0 1 0 1 1 0 0 1 4 3 0 1 2 1 1 0 1 0 1 1 6 5 1 0 2 1 2 1 1 0 1 0 1 0 2 1 2 1 1 0 4 3 2 0 2 1 0 1 1 1 1 0 2 1 3 2 3 1 0 2 1 0 3 2 5 4 5 4 3 2 4 2 3 2 4 3 1 0 1 0 2 1 5 4 2 1 0 1 4 3 1 0 4 3 4 3 3 2 2 1 4 3 3 2 2 0 2 1 5 3 2 1 5 4 6 5 4 3 4 3 5 4 3 2 2 1 3 2 2 1 0 2 20 19 0 1 10 9 10 9 6 5 5 4 0 2 0 1 5 4 5 4 2 1 6 5], :total-error 430, :normalized-error 430, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "1169ed4c-67c5-4f59-81ce-bba4c1a124d5", :parent-uuids (#uuid "d8b481d9-8a3c-4d34-abe7-697a52fa5e89" #uuid "85a8341c-6dbf-4070-98d6-a06470f25c1c"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (string_setchar integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [2 0 1 1 1 1 1 0 1 1 2 1 2 0 2 1 2 2 2 2 2 1 2 1 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 3 3 3 3 1 3 3 4 4 4 3 4 4 5 1 5 5 5 3 6 5 6 5 6 5 7 1 7 6 7 5 7 5 7 6 7 6 7 6 7 5 8 6 8 7 8 4 8 6 8 6 8 8 9 8 9 8 9 7 9 6 10 7 10 10 11 10 11 8 11 6 12 7 12 9 12 8 12 9 13 9 13 12 13 12 13 11 13 8 13 11 13 13 13 9 14 13 14 10 14 10 14 11 14 12 15 11 15 12 15 13 16 14 17 12 17 15 18 13 18 12 18 14 18 14 19 14 19 16 19 17 19 16 19 17 20 20 20 0 20 20 20 10 20 10 20 14 20 15 20 20 20 20 20 15 20 15 20 18 20 14], :total-error 1823, :normalized-error 1823, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "ce63ef2c-2c3e-400c-998e-3393b600d49a", :parent-uuids (#uuid "5f999162-07c6-4d80-b694-50b0f6de2516" #uuid "f4555d62-0eea-4f11-953e-2d2a96a6ef0f"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction string_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction \space} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_flush} {:close 0, :instruction string_last} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_noop} {:close 0, :instruction char_yank} {:close 0, :instruction char_rot} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction in1} {:close 0, :instruction string_nth} {:close 0, :instruction integer_add} {:close 1, :instruction "K;WuaPq6 ' q7"} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction "x ii@l}0 a  irP _"} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction char_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction string_length} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction string_fromboolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 1, :instruction exec_do*count} {:close 1, :instruction string_first} {:close 0, :instruction char_rot} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction \space} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_frominteger}), :program (string_pop integer_flush \space string_replacefirstchar string_flush string_last print_integer exec_shove (string_reverse exec_noop char_yank char_rot string_removechar integer_swap integer_flush integer_rot integer_lt string_parse_to_chars in1 string_nth integer_add "K;WuaPq6 ' q7") string_parse_to_chars "x ii@l}0 a  irP _" string_pop exec_yankdup char_shove boolean_invert_first_then_and integer_yankdup integer_gte string_concat char_allfromstring char_yankdup integer_empty string_fromboolean integer_fromboolean string_frominteger boolean_or integer_mult integer_mod print_newline string_length integer_stackdepth char_isdigit string_length string_fromboolean boolean_flush integer_yankdup print_newline integer_dec integer_pop integer_inc string_dup string_stackdepth string_yank integer_max integer_gt string_occurrencesofchar \newline exec_do*count () string_first char_rot string_fromboolean integer_max boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_stackdepth exec_while (\space integer_fromstring string_frominteger)) ()))), :errors [2 4 2 3 2 3 1 4 2 3 1 3 0 4 1 3 2 2 2 2 1 3 1 3 1 3 2 2 3 1 1 3 1 4 1 3 2 2 3 1 3 1 1 3 3 1 4 0 3 1 4 0 3 3 5 1 3 1 5 1 5 1 5 1 5 3 6 2 5 1 5 1 6 2 6 2 6 2 5 1 6 2 7 3 6 0 6 2 6 2 8 4 8 4 8 4 7 3 7 2 8 3 10 6 10 6 9 4 9 2 10 3 10 5 10 4 10 5 11 5 12 8 12 8 11 7 11 4 11 7 13 9 11 5 13 9 12 6 12 6 12 7 12 8 13 7 13 8 13 9 14 10 15 8 15 11 16 9 16 8 16 10 16 10 17 10 17 12 17 13 17 12 17 13 20 16 18 4 20 16 18 6 18 6 18 10 18 11 20 16 20 16 18 11 18 11 18 14 18 10], :total-error 1435, :normalized-error 1435, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "f4598564-5366-434b-b96e-0857fbfc4e81", :parent-uuids (#uuid "6125b17d-f77e-436f-8a58-e098643c9d67" #uuid "98c2806d-bcdb-4814-b135-048475c2e702"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 1, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (integer_fromboolean string_yank in1) integer_gte exec_do*while (string_fromchar) string_yank in1) (char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split \space string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) string_replacefirst string_replacefirst char_iswhitespace string_containschar \^ char_stackdepth string_fromboolean string_split char_yankdup string_containschar \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [6 0 6 1 6 1 7 1 6 1 7 0 8 1 7 1 6 1 6 1 7 0 7 1 8 0 7 1 6 2 8 0 9 1 8 0 7 1 6 2 6 2 8 0 6 2 6 3 7 2 6 3 10 0 6 4 8 2 7 4 7 4 7 4 12 0 7 5 8 4 8 4 7 5 7 5 7 5 8 4 8 5 7 6 10 3 8 5 8 5 6 7 7 7 7 7 8 6 9 5 9 6 6 9 7 9 9 7 11 5 11 6 9 8 10 7 9 8 10 8 7 11 7 11 8 10 11 7 8 10 6 12 10 8 7 12 10 9 10 9 9 10 8 11 10 10 9 11 8 12 8 13 11 11 8 14 11 12 12 11 10 13 10 13 11 13 9 15 8 16 9 15 8 16 6 19 26 1 6 19 16 9 16 9 12 13 11 14 6 19 6 19 11 14 11 14 8 17 12 13], :total-error 1547, :normalized-error 1547, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "5e3dc413-758b-4b14-b163-08711ad6037a", :parent-uuids (#uuid "27f62e03-d236-4428-b7a1-2ca5e8c4407b" #uuid "9f6b095a-2e3e-4057-a6ab-a09d443527b8"), :genetic-operators :alternation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 1, :instruction string_containschar} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction integer_max} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_12} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop exec_pop (integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_yank tagged_960 exec_while (integer_swap boolean_frominteger boolean_and string_containschar) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot boolean_and boolean_pop integer_max integer_gte char_yankdup string_fromchar string_yank in1 char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) integer_max string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add boolean_yank print_integer) exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt tagged_12 integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 1 0 1 0 1 0 1 0 2 1 2 1 2 0 2 2 2 2 2 1 2 0 3 1 3 1 3 2 3 0 3 0 3 0 3 2 3 2 3 2 3 1 3 2 4 4 4 3 4 4 5 0 5 4 5 2 6 3 6 3 6 3 7 1 7 3 7 3 7 2 7 3 7 3 7 3 7 2 8 2 8 3 8 0 8 2 8 2 8 4 9 3 9 4 9 2 9 1 10 1 10 4 11 3 11 1 11 0 12 1 12 1 12 0 12 1 13 0 13 3 13 3 13 3 13 1 13 2 13 4 13 0 14 3 14 1 14 0 14 1 14 2 15 0 15 1 15 2 16 2 17 0 17 2 18 0 18 1 18 1 18 1 19 1 19 2 19 2 19 1 19 2 20 4 20 15 20 4 20 6 20 5 20 1 20 1 20 4 20 4 20 1 20 0 20 2 20 2], :total-error 1224, :normalized-error 1224, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "48a10c45-6810-4423-9989-0c4475ea4455", :parent-uuids (#uuid "8d3144d8-a55f-41e4-a126-4616438f2258"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 3, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 1, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) exec_shove (boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) (boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank string_last exec_shove (exec_dup (exec_empty) exec_string_iterate (char_eq string_stackdepth string_flush integer_fromboolean exec_pop () string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer))) string_replacefirst string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth) (string_fromboolean string_split char_yankdup string_containschar) (\^) char_stackdepth) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 1 2 1 1 0 0 2 0 2 1 1 1 0 2 1 1 1 0 2 2 0 3 0 2 1 1 1 0 2 0 2 2 1 0 2 0 2 1 1 0 2 4 1 0 2 2 1 1 1 1 1 1 1 6 3 1 1 2 0 2 0 1 1 1 1 1 1 2 0 2 1 1 1 4 1 2 1 2 0 0 2 1 1 1 1 2 0 3 1 3 1 0 2 1 1 3 0 5 3 5 3 3 0 4 2 3 1 4 2 1 2 1 1 2 0 5 2 2 0 0 2 4 1 1 1 4 2 4 2 3 1 2 0 4 2 3 1 2 0 2 0 5 3 2 1 5 3 6 4 4 1 4 2 5 3 3 1 2 0 3 1 2 0 0 2 20 17 0 2 10 8 10 7 6 4 5 3 0 2 0 2 5 3 5 3 2 0 6 4], :total-error 401, :normalized-error 401, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "6660c5a1-7e55-4f6b-a4e2-372c4badbe35", :parent-uuids (#uuid "6ff91ab2-b72f-4d74-907a-c657441bfae8"), :genetic-operators :uniform-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_replacefirst} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction integer_div} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction char_shove} {:close 1, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 1, :instruction string_indexofchar} {:close 1, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank integer_mod exec_dup (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth exec_yank char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) boolean_empty integer_div boolean_rot) boolean_and string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (char_empty exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_flush integer_fromboolean exec_pop (string_reverse print_boolean integer_rot tag_boolean_969 boolean_yank print_integer)) string_replacefirst string_replacefirst char_iswhitespace) (string_containschar) \^) (integer_div) (string_fromboolean string_split char_yankdup integer_mult string_setchar char_shove print_integer) string_shove integer_add string_indexofchar) integer_gte in1 char_isdigit integer_swap in1 string_length integer_lt integer_fromchar exec_noop exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [0 0 0 0 0 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 1 0 1 0 2 0 1 0 0 2 2 0 3 0 2 0 1 1 0 2 0 2 2 0 0 2 0 3 1 1 0 3 4 0 0 4 2 1 1 3 1 4 1 3 6 0 1 4 2 2 2 2 1 4 1 5 1 4 2 3 2 4 1 5 4 2 2 4 2 4 0 7 1 6 1 6 2 4 3 3 3 4 0 9 1 8 3 6 5 1 5 3 3 7 4 4 3 7 4 4 1 11 1 10 2 8 5 5 2 8 0 12 4 6 1 11 4 6 4 7 3 9 2 9 4 8 3 9 2 10 2 11 5 9 2 13 5 9 6 6 4 10 4 10 5 10 3 12 2 14 3 12 2 14 0 19 20 0 0 19 10 0 10 0 6 7 5 9 0 19 0 19 5 10 5 12 2 15 6 7], :total-error 795, :normalized-error 795, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "0f8f3886-2049-4c09-b27b-4e01a2f3b0e0", :parent-uuids (#uuid "e3885bf9-80a1-4098-874e-1aec32a84734"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction char_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction \s} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 1, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 0, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction "q(\\LXkw^X//d7E "} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction string_rest} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty char_rot integer_dec \s print_string integer_eq char_isdigit) (boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank) tagged_960 exec_while (integer_swap string_nth boolean_and \: exec_shove (string_emptystring exec_stackdepth) exec_yank) char_rot) (boolean_pop boolean_stackdepth) exec_when (boolean_eq "q(\\LXkw^X//d7E ") string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank string_rest char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup) (print_boolean char_isletter) boolean_dup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank) print_integer exec_do*times () integer_sub char_iswhitespace string_containschar \^ char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 0 1 1 1 1 2 0 1 1 2 1 3 0 2 1 1 2 1 2 2 1 2 1 3 0 2 1 1 2 3 1 4 0 3 0 2 1 1 2 1 2 3 0 1 2 1 4 2 3 1 4 5 0 1 4 3 2 2 3 2 3 2 3 7 0 2 3 3 2 3 2 2 3 2 3 2 3 3 2 3 2 2 3 5 0 3 2 3 2 1 4 2 3 2 3 3 2 4 1 4 1 1 4 2 3 4 1 6 1 6 1 4 1 5 0 4 1 5 0 2 3 2 3 3 2 6 1 3 2 1 4 5 0 2 3 5 0 5 0 4 1 3 2 5 0 4 1 3 2 3 2 6 1 3 2 6 1 7 2 5 0 5 0 6 1 4 1 3 2 4 1 3 2 1 20 21 0 1 20 11 6 11 6 7 2 6 1 1 4 1 4 6 1 6 1 3 2 7 2], :total-error 554, :normalized-error 554, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "c65eab34-121d-49ac-b55c-687f7050ee1d", :parent-uuids (#uuid "16ea5886-731c-4ba2-8ba6-c7893b9ab2a0"), :genetic-operators :uniform-close-mutation} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction char_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_nth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_969} {:close 0, :instruction boolean_yank} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction string_containschar} {:close 1, :instruction \^} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq char_allfromstring integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger char_stackdepth integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) char_yank boolean_yankdup char_iswhitespace string_parse_to_chars exec_while (boolean_invert_first_then_and integer_gte exec_do*while (integer_fromboolean exec_yankdup print_boolean char_isletter) exec_yankdup string_containschar boolean_eq) string_containschar char_iswhitespace integer_yank) (string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_nth integer_fromboolean exec_pop () boolean_pop print_boolean integer_rot tag_boolean_969 boolean_yank print_integer) () exec_do*times (string_replacefirst char_iswhitespace string_containschar) \^) char_stackdepth string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove integer_flush integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 0 1 0 1 0 2 1 1 0 2 0 3 1 2 0 1 1 1 1 2 0 2 0 3 0 2 1 1 2 3 0 4 1 3 0 2 1 1 2 1 2 3 0 1 2 1 4 2 3 1 4 5 0 1 4 3 2 2 5 2 5 2 5 7 0 2 5 3 4 3 4 2 5 2 5 2 5 3 4 3 4 2 5 5 2 3 4 3 4 1 6 2 5 2 5 3 4 4 3 4 3 1 6 2 5 4 3 6 1 6 1 4 3 5 2 4 3 5 2 2 5 2 5 3 4 6 1 3 4 1 6 5 2 2 5 5 2 5 2 4 3 3 4 5 2 4 3 3 4 3 4 6 1 3 4 6 1 7 0 5 2 5 2 6 1 4 3 3 4 4 3 3 4 1 6 21 14 1 6 11 4 11 4 7 0 6 1 1 6 1 6 6 1 6 1 3 4 7 0], :total-error 629, :normalized-error 629, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "4eaa0945-b647-4e11-8c89-575448f8e545", :parent-uuids (#uuid "00e159c5-727f-405b-9676-fc603e28b7c7" #uuid "f9b062f5-5690-4fc4-a598-3b15a489b929"), :genetic-operators [:alternation :uniform-mutation]} #clojush.individual.individual{:genome ({:close 0, :instruction integer_pop} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction string_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction \newline} {:close 0, :instruction string_substring} {:close 0, :instruction string_nth} {:close 0, :instruction char_empty} {:close 0, :instruction string_substring} {:close 0, :instruction integer_add} {:close 0, :instruction print_string} {:close 0, :instruction integer_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction string_yank} {:close 0, :instruction tagged_960} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_and} {:close 1, :instruction \:} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction string_first} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_yank} {:close 1, :instruction in1} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction string_last} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_shove} {:close 0, :instruction print_integer} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction string_length} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromchar} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction char_isletter} {:close 0, :instruction string_shove} {:close 0, :instruction \%} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction string_split} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_concat} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult}), :program (integer_pop char_stackdepth integer_eq integer_rot integer_mult exec_yankdup exec_when (string_swap in1 integer_min string_containschar exec_s (\newline string_substring string_nth char_empty string_substring integer_add print_string integer_eq char_isdigit boolean_invert_first_then_and string_frominteger boolean_invert_first_then_and string_frominteger integer_eq string_emptystring integer_swap string_replacefirst string_frominteger integer_pop integer_gt exec_if (exec_y (string_yank tagged_960 exec_while (integer_swap string_nth boolean_and \:) exec_shove (string_emptystring exec_stackdepth exec_yank) char_rot boolean_pop boolean_stackdepth) exec_when (boolean_eq exec_yank) string_first) (boolean_empty integer_div boolean_rot) boolean_and boolean_pop integer_max integer_gte exec_do*while (string_fromchar string_yank in1) string_parse_to_chars exec_while (boolean_invert_first_then_and exec_do*times (exec_swap (string_last exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) (exec_yankdup string_containschar boolean_eq) exec_noop boolean_invert_second_then_and exec_yankdup print_boolean char_isletter) exec_yankdup string_containschar boolean_eq) string_containschar integer_yank) (string_last exec_shove (exec_dup (exec_empty) string_rot) char_eq string_stackdepth string_stackdepth string_flush integer_fromboolean exec_pop () boolean_pop char_shove print_integer string_shove integer_add string_indexofchar integer_gte in1) (char_isdigit integer_swap in1 string_length integer_lt integer_fromchar) string_fromboolean string_split \space char_isletter string_shove \% exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_shove exec_stackdepth string_contains integer_inc exec_stackdepth boolean_not boolean_frominteger integer_lt string_split integer_flush) integer_gte string_stackdepth boolean_eq string_concat boolean_xor integer_mult), :errors [1 0 1 1 1 1 2 0 1 1 2 1 3 0 2 1 1 2 1 2 2 1 2 1 3 1 2 2 1 3 3 1 4 0 3 1 2 2 1 3 1 3 3 1 1 3 1 4 2 3 1 4 5 1 1 5 3 3 2 5 2 5 2 5 7 1 2 6 3 5 3 5 2 6 2 6 2 6 3 5 3 6 2 7 5 4 3 6 3 6 1 8 2 8 2 8 3 7 4 6 4 7 1 10 3 10 5 8 7 6 7 7 5 9 6 8 5 9 6 9 3 12 3 12 4 11 7 8 4 11 2 13 6 9 3 13 6 10 6 10 5 11 4 12 6 11 5 12 4 13 4 14 7 12 4 15 7 13 8 12 6 14 6 14 7 14 5 16 4 17 5 16 4 17 2 20 22 0 2 20 12 10 12 10 8 14 7 15 2 20 2 20 7 15 7 15 4 18 8 14], :total-error 1181, :normalized-error 1181, :weighted-error nil, :meta-errors (), :history nil, :ancestors nil, :uuid #uuid "7f854101-e292-47df-b4e4-0377ed420329", :parent-uuids (#uuid "5f999162-07c6-4d80-b694-50b0f6de2516" #uuid "f9b062f5-5690-4fc4-a598-3b15a489b929"), :genetic-operators :alternation}]