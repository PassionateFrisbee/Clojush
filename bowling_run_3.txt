Command line args: clojush.problems.software.bowling
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (#object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x1acc768 clojush.instructions.tag$tag_instruction_erc$fn__2160@1acc768] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x38caad07 clojush.instructions.tag$tagged_instruction_erc$fn__2166@38caad07] in1 integer_sub integer_inc boolean_stackdepth boolean_pop string_fromchar vector_string_shove exec_yankdup integer_yankdup string_flush boolean_swap exec_shove exec_y boolean_yank integer_eq string_butlast string_conjchar string_substring integer_mult vector_string_dup_times boolean_or boolean_empty exec_s_when_autoconstructing char_dup_items char_iswhitespace vector_string_replacefirst string_first exec_do*while exec_string_iterate string_indexofchar integer_fromstring char_frominteger vector_string_eq exec_dup_items boolean_dup_items exec_empty string_shove exec_rot vector_string_concat vector_string_subvec char_pop exec_dup vector_string_flush boolean_flush char_isdigit vector_string_stackdepth string_reverse exec_k char_rot boolean_xor integer_gte boolean_dup_times string_replacefirst boolean_shove vector_string_dup vector_string_occurrencesof string_last boolean_rot vector_string_rest integer_div integer_lte integer_mod string_concat vector_string_butlast exec_do*count vector_string_yankdup integer_rot vector_string_rot exec_k_when_autoconstructing vector_string_take integer_add integer_shove string_dup_times char_swap integer_max char_dup_times vector_string_remove string_eq integer_stackdepth string_take char_stackdepth integer_dup_times boolean_dup exec_dup_times vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while integer_min exec_swap integer_fromchar vector_string_yank string_stackdepth string_replacechar char_allfromstring char_yank string_pop integer_dup_items vector_string_last string_nth vector_string_pop exec_do*range exec_if char_shove boolean_invert_first_then_and integer_fromboolean char_yankdup vector_string_first boolean_frominteger string_setchar char_isletter boolean_eq string_occurrencesofchar string_replacefirstchar integer_flush string_replace char_dup exec_y_when_autoconstructing char_eq vector_string_conj integer_gt vector_string_indexof boolean_not exec_do*times exec_do*vector_string string_empty char_empty exec_pop string_yankdup string_removechar vector_string_replace char_flush vector_string_emptyvector exec_s vector_string_nth integer_lt string_containschar string_yank vector_string_pushall vector_string_set exec_noop integer_swap string_split string_fromboolean vector_string_dup_items integer_dup vector_string_length string_rest string_rot exec_yank string_parse_to_chars integer_pop integer_empty integer_dec string_contains vector_string_contains string_dup_items vector_string_reverse exec_stackdepth boolean_and string_length string_frominteger exec_flush vector_string_empty exec_when boolean_invert_second_then_and string_dup boolean_yankdup)
error-function = #object[clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472 0x85c3522 clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472@85c3522]
evalpush-limit = 4000
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-points = 1600
parent-selection = :lexicase
population-size = 1000
problem-specific-initial-report = #object[clojush.problems.software.bowling$bowling_initial_report 0x129c760d clojush.problems.software.bowling$bowling_initial_report@129c760d]
problem-specific-report = #object[clojush.problems.software.bowling$bowling_report 0x180f33b2 clojush.problems.software.bowling$bowling_report@180f33b2]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[10 10 10 10 10 10 10 10 10 10 10 10] 300]
Train Case:   1 | Input/Output: [[10 10 5 1 1 7 0 0 1 4 4 5 10 7 3 7 1] 114]
Train Case:   2 | Input/Output: [[0 3 0 5 9 0 5 4 10 2 1 3 1 5 4 10 4 4] 81]
Train Case:   3 | Input/Output: [[2 2 1 2 10 10 0 9 3 0 6 1 1 4 3 4 1 6] 84]
Train Case:   4 | Input/Output: [[2 7 0 9 6 4 8 0 7 0 3 5 10 10 6 0 1 7] 115]
Train Case:   5 | Input/Output: [[2 8 7 1 5 3 8 0 1 0 10 6 2 9 0 10 7 2] 105]
Train Case:   6 | Input/Output: [[3 1 6 4 7 3 6 0 1 4 5 2 10 10 2 6 7 0] 110]
Train Case:   7 | Input/Output: [[3 7 10 1 3 3 2 8 1 6 1 10 8 0 4 1 8 1] 99]
Train Case:   8 | Input/Output: [[5 1 9 0 9 0 0 10 2 0 5 4 1 9 10 10 0 1] 99]
Train Case:   9 | Input/Output: [[5 4 4 2 3 1 10 4 6 5 3 10 7 2 8 1 7 0] 106]
Train Case:  10 | Input/Output: [[6 1 4 4 9 1 5 0 6 1 10 10 10 6 0 5 5 4] 134]
Train Case:  11 | Input/Output: [[6 2 6 4 5 3 6 4 10 1 2 4 5 2 4 10 1 3] 100]
Train Case:  12 | Input/Output: [[6 2 10 10 4 0 1 8 1 9 6 2 5 5 8 1 3 4] 117]
Train Case:  13 | Input/Output: [[6 3 7 1 8 2 10 1 1 7 0 5 3 10 6 2 1 5] 98]
Train Case:  14 | Input/Output: [[7 1 1 5 10 10 10 5 4 8 2 2 7 9 0 10 5 3] 145]
Train Case:  15 | Input/Output: [[7 3 5 3 1 3 3 7 2 4 10 0 10 8 0 10 6 1] 115]
Train Case:  16 | Input/Output: [[9 0 5 1 1 9 10 5 2 10 6 3 6 4 7 0 8 0] 119]
Train Case:  17 | Input/Output: [[10 3 2 4 4 5 0 7 0 8 0 10 0 9 0 0 4 4] 84]
Train Case:  18 | Input/Output: [[0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0] 10]
Train Case:  19 | Input/Output: [[0 0 4 2 10 7 0 4 3 7 1 3 0 8 1 7 1 0 9] 74]
Train Case:  20 | Input/Output: [[0 4 10 8 1 5 5 0 4 4 2 2 4 10 5 2 10 3 8] 103]
Train Case:  21 | Input/Output: [[0 6 8 1 4 1 9 0 1 5 5 5 2 7 10 6 3 8 0] 92]
Train Case:  22 | Input/Output: [[0 6 8 1 4 2 2 2 6 2 10 4 6 9 0 5 1 5 0] 92]
Train Case:  23 | Input/Output: [[1 1 10 4 0 0 1 1 7 4 5 7 2 0 5 3 5 4 0] 64]
Train Case:  24 | Input/Output: [[1 4 1 4 10 8 1 9 1 1 0 10 6 0 3 2 10 3 2] 92]
Train Case:  25 | Input/Output: [[1 7 3 2 5 4 2 6 3 3 5 0 7 1 10 10 10 6 4] 125]
Train Case:  26 | Input/Output: [[2 0 3 4 7 0 6 3 7 3 9 1 10 1 9 1 7 0 6] 109]
Train Case:  27 | Input/Output: [[2 2 3 1 4 5 0 10 10 6 1 4 4 6 1 9 1 5 1] 97]
Train Case:  28 | Input/Output: [[3 2 7 2 1 6 1 7 10 2 3 7 2 3 0 0 2 0 1] 64]
Train Case:  29 | Input/Output: [[3 4 0 6 9 0 10 9 1 0 10 6 4 10 8 1 9 1 5] 131]
Train Case:  30 | Input/Output: [[4 1 8 2 0 6 8 2 7 3 0 9 5 3 10 7 3 2 3] 102]
Train Case:  31 | Input/Output: [[4 5 0 2 9 0 0 10 6 2 2 6 10 6 3 5 3 8 1] 97]
Train Case:  32 | Input/Output: [[4 5 9 0 6 0 8 2 5 1 0 1 5 3 1 5 10 4 4] 86]
Train Case:  33 | Input/Output: [[5 3 7 2 5 3 2 7 0 0 2 4 8 0 10 9 0 7 2] 85]
Train Case:  34 | Input/Output: [[5 5 4 2 10 6 2 5 1 3 2 2 7 2 1 5 5 2 2] 85]
Train Case:  35 | Input/Output: [[6 1 8 0 10 9 1 0 10 7 0 3 0 5 1 6 4 9 0] 106]
Train Case:  36 | Input/Output: [[6 3 0 1 0 0 10 6 1 7 0 0 0 2 2 8 2 0 6] 61]
Train Case:  37 | Input/Output: [[6 3 0 10 7 3 7 3 0 2 10 1 2 0 2 8 1 1 0] 83]
Train Case:  38 | Input/Output: [[6 3 1 5 0 3 6 4 2 8 4 6 10 3 7 3 2 5 0] 107]
Train Case:  39 | Input/Output: [[7 0 2 0 1 6 3 3 2 1 3 4 10 3 4 6 3 5 0] 70]
Train Case:  40 | Input/Output: [[7 0 5 2 1 3 1 7 4 1 8 1 10 3 4 2 2 0 4] 72]
Train Case:  41 | Input/Output: [[7 2 2 3 7 3 8 2 9 0 3 1 10 7 0 8 1 5 0] 102]
Train Case:  42 | Input/Output: [[9 1 8 0 3 2 7 0 5 0 9 1 3 0 8 2 10 4 0] 97]
Train Case:  43 | Input/Output: [[9 1 8 2 7 1 4 2 3 0 9 0 4 1 10 7 1 5 3] 100]
Train Case:  44 | Input/Output: [[9 1 10 6 4 6 0 7 1 2 5 2 0 10 3 0 10 0 3] 108]
Train Case:  45 | Input/Output: [[10 1 8 4 6 6 0 8 1 6 3 8 2 3 2 9 0 9 0] 104]
Train Case:  46 | Input/Output: [[10 1 9 8 1 3 1 5 1 7 1 2 1 0 6 1 6 0 8] 89]
Train Case:  47 | Input/Output: [[10 2 1 3 3 1 3 9 0 8 0 4 2 0 2 2 1 0 7] 61]
Train Case:  48 | Input/Output: [[10 7 1 5 3 1 0 8 0 6 2 6 0 3 0 1 5 9 0] 75]
Train Case:  49 | Input/Output: [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0]
Train Case:  50 | Input/Output: [[0 0 0 0 0 0 0 0 0 0 3 7 0 0 0 0 0 0 0 0] 10]
Train Case:  51 | Input/Output: [[0 9 9 1 4 5 2 2 4 0 8 1 5 5 6 0 2 0 8 0] 81]
Train Case:  52 | Input/Output: [[0 9 10 4 2 0 7 9 0 1 9 0 6 2 4 7 0 10 1 6] 93]
Train Case:  53 | Input/Output: [[1 0 3 1 8 0 2 3 8 1 6 2 8 0 9 0 6 2 6 1] 67]
Train Case:  54 | Input/Output: [[1 3 1 5 9 1 0 1 10 8 2 4 3 0 3 8 1 8 2 5] 89]
Train Case:  55 | Input/Output: [[1 3 8 0 4 3 0 9 3 0 2 2 3 6 8 2 8 0 4 0] 74]
Train Case:  56 | Input/Output: [[1 4 4 6 8 0 9 1 3 5 0 7 6 0 1 2 9 0 8 0] 85]
Train Case:  57 | Input/Output: [[2 0 3 3 5 4 7 2 6 0 7 1 2 2 7 1 5 5 0 9] 71]
Train Case:  58 | Input/Output: [[2 1 0 3 3 6 1 6 10 0 7 7 1 4 0 3 1 10 7 1] 80]
Train Case:  59 | Input/Output: [[2 1 4 0 8 1 5 5 9 1 3 0 6 0 7 3 7 1 7 2] 91]
Train Case:  60 | Input/Output: [[2 4 8 1 5 3 6 1 3 5 6 2 1 2 8 1 3 5 8 1] 75]
Train Case:  61 | Input/Output: [[3 2 0 8 8 0 9 0 3 6 9 0 2 0 1 7 4 5 0 6] 73]
Train Case:  62 | Input/Output: [[3 5 3 1 3 4 10 3 3 5 5 1 9 5 5 4 1 9 1 7] 103]
Train Case:  63 | Input/Output: [[3 5 3 5 3 5 2 2 10 1 7 4 1 0 5 1 8 7 3 5] 88]
Train Case:  64 | Input/Output: [[3 6 7 0 8 1 3 5 2 8 5 3 7 1 8 1 1 8 5 0] 87]
Train Case:  65 | Input/Output: [[4 1 6 4 8 1 2 0 1 7 3 3 5 3 8 0 6 3 0 6] 79]
Train Case:  66 | Input/Output: [[4 4 5 4 9 0 6 4 6 1 3 6 4 1 1 4 9 0 9 0] 86]
Train Case:  67 | Input/Output: [[4 5 2 2 2 4 6 1 5 4 2 0 9 1 7 0 5 2 0 3] 71]
Train Case:  68 | Input/Output: [[5 0 4 0 8 2 4 5 9 1 0 1 10 7 1 0 3 4 6 5] 87]
Train Case:  69 | Input/Output: [[5 1 0 7 0 1 1 0 2 7 5 2 1 4 10 1 0 10 8 8] 74]
Train Case:  70 | Input/Output: [[5 3 0 5 4 5 5 2 9 0 6 2 8 0 1 3 4 1 3 1] 67]
Train Case:  71 | Input/Output: [[5 3 2 8 4 3 6 2 10 1 7 9 0 4 1 4 4 7 3 5] 100]
Train Case:  72 | Input/Output: [[5 3 5 1 5 4 2 8 9 0 9 1 7 0 9 0 3 7 4 3] 105]
Train Case:  73 | Input/Output: [[5 5 8 1 3 7 1 5 9 1 6 2 4 6 0 10 5 4 9 0] 111]
Train Case:  74 | Input/Output: [[6 0 3 3 2 8 3 3 6 4 5 3 4 4 0 1 3 7 4 5] 86]
Train Case:  75 | Input/Output: [[6 3 0 5 8 1 7 3 2 7 6 4 7 2 9 0 4 1 5 2] 91]
Train Case:  76 | Input/Output: [[7 0 4 3 9 1 1 2 0 7 4 1 8 0 5 2 5 3 8 1] 72]
Train Case:  77 | Input/Output: [[7 2 1 6 0 10 7 0 6 0 6 3 8 0 8 2 3 0 0 8] 87]
Train Case:  78 | Input/Output: [[7 2 7 1 7 1 6 3 8 2 1 9 8 1 4 5 3 4 1 0] 89]
Train Case:  79 | Input/Output: [[7 3 4 4 6 0 7 1 8 0 3 3 8 2 9 1 6 2 5 0] 98]
Train Case:  80 | Input/Output: [[8 0 4 1 1 0 6 0 0 3 6 0 10 4 3 8 2 9 1 0] 82]
Train Case:  81 | Input/Output: [[8 1 3 4 9 0 1 6 9 1 9 0 9 0 10 8 2 7 3 8] 124]
Train Case:  82 | Input/Output: [[8 2 5 2 0 8 2 4 3 2 6 2 5 2 4 6 6 1 2 7] 88]
Train Case:  83 | Input/Output: [[9 0 3 0 7 2 5 5 4 3 8 2 1 0 5 0 0 4 1 4] 68]
Train Case:  84 | Input/Output: [[9 0 3 4 0 0 0 4 8 2 8 2 4 4 2 7 6 1 4 5] 85]
Train Case:  85 | Input/Output: [[9 1 3 6 3 1 9 1 2 6 0 5 2 5 0 1 0 2 5 3] 69]
Train Case:  86 | Input/Output: [[9 1 10 9 1 8 1 0 4 1 5 5 2 5 2 1 5 5 5 7] 114]
Train Case:  87 | Input/Output: [[10 8 0 9 0 1 4 1 0 4 5 2 7 8 0 6 2 10 5 1] 91]
Train Case:  88 | Input/Output: [[0 5 2 7 3 2 2 8 4 5 8 1 3 6 0 5 7 2 9 1 6] 90]
Train Case:  89 | Input/Output: [[3 3 2 6 9 1 0 0 2 4 7 0 5 5 7 0 7 0 7 3 5] 83]
Train Case:  90 | Input/Output: [[4 1 3 2 4 6 4 2 7 0 9 0 2 0 7 0 6 1 10 9 4] 85]
Train Case:  91 | Input/Output: [[4 6 7 1 1 5 8 2 0 9 9 1 9 1 0 4 2 8 6 4 10] 119]
Train Case:  92 | Input/Output: [[5 4 1 6 2 6 5 4 2 2 9 0 9 0 5 0 2 7 9 1 8] 87]
Train Case:  93 | Input/Output: [[5 4 3 1 4 5 8 0 7 3 1 9 1 2 4 3 8 0 6 4 3] 83]
Train Case:  94 | Input/Output: [[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5] 150]
Train Case:  95 | Input/Output: [[6 1 7 3 0 7 2 1 9 1 0 2 6 0 3 2 7 0 6 4 5] 72]
Train Case:  96 | Input/Output: [[6 3 5 5 6 2 4 1 0 6 8 2 4 2 7 0 0 7 10 0 3] 91]
Train Case:  97 | Input/Output: [[7 1 4 3 0 2 4 4 1 4 3 4 4 6 9 0 6 1 5 5 7] 89]
Train Case:  98 | Input/Output: [[7 1 9 0 3 6 6 3 5 0 7 0 0 8 5 2 1 0 3 7 9] 82]
Train Case:  99 | Input/Output: [[7 2 3 2 7 2 1 1 3 5 4 1 3 0 0 8 2 8 10 6 9] 94]
Test Case:   0 | Input/Output: [[10 10 8 1 5 1 10 10 10 0 8 8 2 2 7] 159]
Test Case:   1 | Input/Output: [[1 3 9 1 10 9 1 1 5 6 0 10 10 10 3 1] 138]
Test Case:   2 | Input/Output: [[3 4 9 0 10 10 5 5 4 6 9 0 10 10 2 2] 143]
Test Case:   3 | Input/Output: [[8 0 0 9 8 2 10 3 0 0 9 10 10 10 0 1] 124]
Test Case:   4 | Input/Output: [[0 2 4 2 10 10 3 1 10 6 4 6 0 6 3 7 2] 109]
Test Case:   5 | Input/Output: [[0 2 7 0 10 10 10 2 8 1 3 1 8 8 0 3 0] 116]
Test Case:   6 | Input/Output: [[1 9 7 3 0 0 7 3 10 10 7 1 2 7 10 1 7] 135]
Test Case:   7 | Input/Output: [[3 4 1 0 10 10 7 1 1 0 5 2 9 0 10 1 8] 106]
Test Case:   8 | Input/Output: [[3 7 3 2 9 0 10 10 0 0 10 2 1 9 1 9 0] 101]
Test Case:   9 | Input/Output: [[3 7 9 0 9 1 4 1 10 5 5 3 7 10 10 3 4] 147]
Test Case:  10 | Input/Output: [[4 3 4 0 10 3 4 2 3 10 0 7 10 7 1 5 1] 96]
Test Case:  11 | Input/Output: [[4 5 2 1 10 10 10 6 2 4 6 1 4 2 7 0 4] 123]
Test Case:  12 | Input/Output: [[5 1 3 2 10 10 0 4 10 4 5 7 2 6 2 6 1] 101]
Test Case:  13 | Input/Output: [[5 2 9 1 10 0 10 9 0 6 2 10 4 2 10 1 6] 129]
Test Case:  14 | Input/Output: [[6 2 1 6 8 0 10 4 0 10 10 1 4 10 10 0 0] 112]
Test Case:  15 | Input/Output: [[6 3 10 0 3 2 7 10 10 0 0 6 1 10 0 10 9] 110]
Test Case:  16 | Input/Output: [[6 3 10 7 0 10 2 4 1 1 6 0 10 5 5 0 1] 94]
Test Case:  17 | Input/Output: [[7 1 9 0 8 0 10 8 1 6 1 10 10 5 1 4 2] 113]
Test Case:  18 | Input/Output: [[7 2 10 6 2 2 4 10 4 0 6 2 1 4 10 0 1] 84]
Test Case:  19 | Input/Output: [[8 1 1 3 10 2 7 10 6 2 10 1 1 9 0 4 2] 96]
Test Case:  20 | Input/Output: [[8 1 3 1 10 10 10 8 1 0 8 6 4 5 2 6 1] 136]
Test Case:  21 | Input/Output: [[9 0 1 0 10 8 0 3 0 10 6 1 3 2 10 0 1] 80]
Test Case:  22 | Input/Output: [[10 1 7 0 0 9 1 10 10 2 2 1 5 3 6 2 2] 105]
Test Case:  23 | Input/Output: [[10 1 8 7 1 1 8 8 0 10 10 10 6 0 10 6 2] 149]
Test Case:  24 | Input/Output: [[10 3 3 7 3 1 6 5 2 10 7 2 10 6 1 7 0] 106]
Test Case:  25 | Input/Output: [[10 5 3 10 4 1 10 4 3 5 4 4 6 6 4 3 3] 114]
Test Case:  26 | Input/Output: [[10 10 6 2 5 2 9 0 4 2 0 7 3 1 10 9 0] 113]
Test Case:  27 | Input/Output: [[0 0 3 1 6 0 8 2 0 0 1 7 5 1 10 10 3 1] 75]
Test Case:  28 | Input/Output: [[0 0 7 3 8 1 3 3 10 10 7 1 5 2 2 5 7 0] 107]
Test Case:  29 | Input/Output: [[0 1 10 5 3 6 4 2 5 3 2 3 4 10 9 1 2 5] 97]
Test Case:  30 | Input/Output: [[0 2 2 4 10 8 1 1 5 6 4 5 3 10 9 0 8 1] 102]
Test Case:  31 | Input/Output: [[0 3 1 4 1 0 7 3 10 10 0 1 4 1 9 1 8 0] 92]
Test Case:  32 | Input/Output: [[0 4 10 4 2 2 7 5 1 9 0 6 4 4 0 10 2 5] 92]
Test Case:  33 | Input/Output: [[0 5 5 0 3 0 4 1 4 3 10 10 0 2 7 1 6 2] 75]
Test Case:  34 | Input/Output: [[0 6 3 5 2 2 10 10 4 2 3 7 7 2 3 4 1 3] 101]
Test Case:  35 | Input/Output: [[0 6 10 9 1 10 8 1 2 0 9 0 5 5 8 1 8 1] 121]
Test Case:  36 | Input/Output: [[0 7 1 6 2 6 10 1 3 8 0 8 1 9 1 10 9 0] 105]
Test Case:  37 | Input/Output: [[0 10 10 7 3 8 0 6 0 10 4 5 9 0 4 3 9 0] 125]
Test Case:  38 | Input/Output: [[1 0 0 8 5 3 5 1 2 7 5 3 7 1 10 10 9 0] 105]
Test Case:  39 | Input/Output: [[1 0 7 2 10 10 3 4 6 0 3 5 6 3 7 1 2 4] 94]
Test Case:  40 | Input/Output: [[1 1 10 10 5 2 0 5 6 4 4 5 0 9 6 2 9 0] 105]
Test Case:  41 | Input/Output: [[1 2 10 4 3 0 3 1 2 8 2 7 3 0 6 10 2 2] 84]
Test Case:  42 | Input/Output: [[1 3 3 0 5 2 6 4 10 1 2 5 2 10 7 3 0 2] 89]
Test Case:  43 | Input/Output: [[1 4 10 10 6 1 5 4 1 0 0 6 4 0 3 2 1 1] 82]
Test Case:  44 | Input/Output: [[1 6 5 5 9 1 2 5 1 1 10 10 9 1 1 4 7 1] 120]
Test Case:  45 | Input/Output: [[1 7 3 4 3 5 4 1 5 0 10 10 5 4 0 7 4 5] 102]
Test Case:  46 | Input/Output: [[1 8 1 6 9 0 4 1 1 4 10 8 0 10 8 1 3 2] 94]
Test Case:  47 | Input/Output: [[2 0 10 0 3 7 1 8 2 1 7 5 2 10 2 7 1 0] 81]
Test Case:  48 | Input/Output: [[2 3 10 0 10 9 1 7 1 8 2 4 1 4 5 10 1 7] 123]
Test Case:  49 | Input/Output: [[2 3 10 5 1 9 1 1 3 10 5 3 9 0 2 5 6 1] 91]
Test Case:  50 | Input/Output: [[2 4 10 5 3 5 4 6 0 10 7 0 4 0 10 9 1 5] 110]
Test Case:  51 | Input/Output: [[2 7 7 3 9 1 10 7 2 5 5 10 4 1 9 0 0 1] 126]
Test Case:  52 | Input/Output: [[3 0 4 6 0 8 7 1 8 2 10 5 1 10 0 7 1 8] 104]
Test Case:  53 | Input/Output: [[3 1 5 5 5 1 10 10 7 2 8 1 6 0 2 0 2 6] 105]
Test Case:  54 | Input/Output: [[3 1 9 1 9 1 4 1 3 3 2 4 10 10 9 0 9 0] 120]
Test Case:  55 | Input/Output: [[3 2 0 5 10 4 5 6 1 10 2 2 2 5 5 4 8 1] 88]
Test Case:  56 | Input/Output: [[3 4 0 2 3 5 4 6 5 0 10 8 0 0 1 10 3 1] 82]
Test Case:  57 | Input/Output: [[3 5 6 4 1 8 10 0 3 2 7 10 3 2 9 1 7 2] 99]
Test Case:  58 | Input/Output: [[3 5 7 2 10 6 1 7 2 10 0 2 10 8 0 9 1 9] 109]
Test Case:  59 | Input/Output: [[3 7 7 0 3 4 2 3 10 1 7 10 8 2 3 4 0 7] 109]
Test Case:  60 | Input/Output: [[3 7 10 10 8 2 4 5 7 1 4 4 0 7 3 0 7 1] 125]
Test Case:  61 | Input/Output: [[4 0 3 3 2 1 0 5 0 0 9 0 10 10 5 3 7 0] 85]
Test Case:  62 | Input/Output: [[4 0 8 1 0 1 1 8 6 1 4 0 10 9 0 10 4 4] 88]
Test Case:  63 | Input/Output: [[4 1 3 5 0 6 6 0 10 1 7 3 1 2 2 10 3 4] 83]
Test Case:  64 | Input/Output: [[4 1 8 1 9 1 10 10 3 6 9 0 0 1 4 3 7 1] 110]
Test Case:  65 | Input/Output: [[4 2 6 3 9 1 4 0 10 6 0 6 4 10 4 2 2 2] 101]
Test Case:  66 | Input/Output: [[4 3 5 3 9 1 10 9 1 6 0 9 0 9 1 10 3 4] 130]
Test Case:  67 | Input/Output: [[4 3 8 0 6 0 7 1 3 3 0 4 9 0 10 10 9 0] 105]
Test Case:  68 | Input/Output: [[4 3 10 8 1 1 1 4 3 8 2 6 4 9 0 10 5 2] 112]
Test Case:  69 | Input/Output: [[4 4 7 1 5 4 10 2 5 10 4 0 7 1 9 1 8 1] 102]
Test Case:  70 | Input/Output: [[4 5 8 2 7 1 7 1 5 5 1 4 10 0 10 10 7 2] 126]
Test Case:  71 | Input/Output: [[4 5 10 7 0 7 0 5 0 10 2 6 6 3 1 6 7 2] 96]
Test Case:  72 | Input/Output: [[4 6 3 3 10 6 0 3 3 10 8 0 5 1 0 4 6 1] 90]
Test Case:  73 | Input/Output: [[5 0 3 3 9 0 10 8 1 3 5 4 5 1 3 10 4 5] 97]
Test Case:  74 | Input/Output: [[5 0 5 5 9 0 10 0 4 1 6 4 2 10 6 4 0 0] 94]
Test Case:  75 | Input/Output: [[5 1 4 1 10 0 6 0 8 10 7 0 3 5 9 0 7 0] 89]
Test Case:  76 | Input/Output: [[5 2 2 4 3 4 9 1 4 1 10 5 0 10 3 7 1 5] 96]
Test Case:  77 | Input/Output: [[5 2 10 7 1 2 5 3 1 10 8 1 9 0 0 6 2 7] 96]
Test Case:  78 | Input/Output: [[5 2 10 7 2 5 4 6 0 10 2 7 5 1 2 7 2 0] 95]
Test Case:  79 | Input/Output: [[5 3 7 0 2 7 7 3 6 0 2 0 0 9 10 10 0 9] 105]
Test Case:  80 | Input/Output: [[5 3 10 10 2 1 6 1 9 0 1 0 5 2 7 0 1 6] 84]
Test Case:  81 | Input/Output: [[5 4 7 0 2 3 3 4 6 4 10 10 0 3 3 3 5 3] 98]
Test Case:  82 | Input/Output: [[5 4 7 2 10 7 1 9 1 4 2 8 1 8 0 10 2 4] 103]
Test Case:  83 | Input/Output: [[5 4 10 1 0 5 2 8 0 10 7 0 1 3 0 0 8 0] 72]
Test Case:  84 | Input/Output: [[5 5 0 9 10 1 1 6 1 4 0 3 4 1 3 10 2 6] 81]
Test Case:  85 | Input/Output: [[5 5 4 0 10 7 0 0 5 4 6 8 0 10 10 8 2 9] 140]
Test Case:  86 | Input/Output: [[6 0 3 1 10 8 1 10 3 1 8 2 5 1 6 4 2 5] 96]
Test Case:  87 | Input/Output: [[6 0 4 4 10 5 4 2 5 7 0 0 4 2 7 10 3 0] 85]
Test Case:  88 | Input/Output: [[6 1 8 1 9 0 10 0 6 10 6 1 4 5 0 6 8 0] 94]
Test Case:  89 | Input/Output: [[6 3 1 5 10 10 4 5 7 3 0 10 1 4 3 6 4 3] 109]
Test Case:  90 | Input/Output: [[6 3 1 8 8 2 10 7 0 7 3 10 9 0 7 2 4 2] 125]
Test Case:  91 | Input/Output: [[6 3 4 1 9 1 10 2 2 10 1 7 1 6 8 0 3 2] 98]
Test Case:  92 | Input/Output: [[6 3 5 5 7 1 7 0 10 8 2 5 5 10 2 8 5 3] 139]
Test Case:  93 | Input/Output: [[6 3 10 1 6 10 0 9 7 0 0 4 9 0 3 7 3 4] 101]
Test Case:  94 | Input/Output: [[6 4 3 0 10 2 4 10 1 8 6 4 3 4 10 10 3 0] 122]
Test Case:  95 | Input/Output: [[6 4 5 4 3 4 0 5 5 1 10 6 0 7 3 10 2 3] 104]
Test Case:  96 | Input/Output: [[6 4 10 1 9 0 0 5 2 0 3 4 3 6 0 10 0 6] 95]
Test Case:  97 | Input/Output: [[7 0 0 1 7 1 0 2 10 7 0 9 0 4 1 10 0 8] 82]
Test Case:  98 | Input/Output: [[7 1 10 1 3 0 6 10 8 2 2 0 8 1 8 2 2 3] 92]
Test Case:  99 | Input/Output: [[7 1 10 7 1 3 7 8 1 2 5 2 3 10 6 1 9 0] 106]
Test Case: 100 | Input/Output: [[7 2 1 6 10 10 6 4 2 0 2 1 0 4 10 4 6 5] 118]
Test Case: 101 | Input/Output: [[7 2 2 4 2 8 10 7 0 5 4 3 2 10 1 0 0 2] 87]
Test Case: 102 | Input/Output: [[7 2 3 7 10 2 4 1 6 1 4 3 2 8 2 10 3 2] 108]
Test Case: 103 | Input/Output: [[7 2 5 2 5 1 0 9 0 2 5 1 7 2 10 10 7 2] 103]
Test Case: 104 | Input/Output: [[7 3 0 4 7 3 6 1 10 5 2 0 6 2 4 10 8 1] 101]
Test Case: 105 | Input/Output: [[7 3 3 6 7 0 10 5 3 1 7 6 4 10 9 0 3 6] 120]
Test Case: 106 | Input/Output: [[7 3 8 2 6 0 2 3 10 10 2 5 5 4 6 3 5 1] 115]
Test Case: 107 | Input/Output: [[8 0 0 8 2 0 10 8 0 3 1 7 0 10 9 0 8 1] 92]
Test Case: 108 | Input/Output: [[8 0 7 2 4 4 6 1 10 2 7 1 0 0 9 10 8 0] 96]
Test Case: 109 | Input/Output: [[8 0 10 1 7 0 9 2 7 10 0 9 7 0 3 2 6 1] 99]
Test Case: 110 | Input/Output: [[8 0 10 10 6 4 5 3 6 4 7 3 9 1 1 8 7 0] 140]
Test Case: 111 | Input/Output: [[8 1 6 0 9 0 3 1 7 0 3 0 6 3 10 10 5 1] 94]
Test Case: 112 | Input/Output: [[8 1 6 0 9 1 9 0 8 0 10 5 3 0 10 10 0 9] 125]
Test Case: 113 | Input/Output: [[8 2 3 3 2 0 1 8 2 1 10 4 2 10 6 2 4 3] 88]
Test Case: 114 | Input/Output: [[8 2 5 2 1 9 8 0 7 0 7 3 0 2 10 10 6 3] 121]
Test Case: 115 | Input/Output: [[8 2 6 2 4 6 5 4 8 1 10 5 3 10 4 1 0 6] 109]
Test Case: 116 | Input/Output: [[9 0 4 1 10 6 4 4 1 10 0 5 0 2 7 1 5 2] 90]
Test Case: 117 | Input/Output: [[9 0 6 0 5 2 2 1 2 6 10 10 3 5 10 2 8 0] 112]
Test Case: 118 | Input/Output: [[9 0 9 0 10 4 0 1 6 5 1 3 4 10 5 4 9 0] 93]
Test Case: 119 | Input/Output: [[9 0 9 0 10 10 5 4 8 1 2 7 9 1 6 3 8 1] 123]
Test Case: 120 | Input/Output: [[9 1 1 8 0 4 9 0 8 1 10 8 1 8 2 10 0 3] 106]
Test Case: 121 | Input/Output: [[9 1 2 5 8 2 10 0 3 1 8 5 1 8 1 10 8 1] 107]
Test Case: 122 | Input/Output: [[9 1 10 5 3 6 0 10 0 6 9 0 3 5 8 1 6 3] 109]
Test Case: 123 | Input/Output: [[10 0 0 9 1 2 1 0 7 7 3 10 0 9 4 4 9 0] 97]
Test Case: 124 | Input/Output: [[10 1 7 10 6 3 3 0 5 3 6 4 7 0 7 1 4 5] 106]
Test Case: 125 | Input/Output: [[10 1 8 7 2 6 3 9 1 6 0 3 5 10 6 4 4 2] 116]
Test Case: 126 | Input/Output: [[10 2 3 10 2 2 2 4 2 0 6 3 4 1 3 4 2 4] 73]
Test Case: 127 | Input/Output: [[10 2 5 8 2 6 0 5 0 3 3 10 1 7 9 0 7 2] 101]
Test Case: 128 | Input/Output: [[10 2 7 1 4 3 5 6 4 10 2 8 3 0 9 0 1 3] 110]
Test Case: 129 | Input/Output: [[10 2 8 7 0 6 4 10 1 4 3 4 4 2 3 6 4 4] 114]
Test Case: 130 | Input/Output: [[10 3 1 6 2 0 3 10 7 1 7 1 4 6 4 4 7 2] 94]
Test Case: 131 | Input/Output: [[10 3 2 9 1 6 3 6 4 10 3 5 5 3 9 0 5 0] 113]
Test Case: 132 | Input/Output: [[10 3 5 6 1 3 5 10 8 2 0 2 8 1 8 0 0 8] 98]
Test Case: 133 | Input/Output: [[10 4 5 6 3 6 2 1 1 7 1 2 8 10 9 1 0 7] 112]
Test Case: 134 | Input/Output: [[10 5 0 8 2 7 1 1 8 10 2 1 9 1 4 6 3 1] 101]
Test Case: 135 | Input/Output: [[10 5 4 8 0 10 6 4 5 5 5 0 9 1 1 9 8 1] 129]
Test Case: 136 | Input/Output: [[10 6 2 3 1 3 4 9 1 4 1 10 3 1 9 0 5 2] 90]
Test Case: 137 | Input/Output: [[10 6 3 2 7 10 10 7 3 7 3 6 1 0 1 7 3 6] 141]
Test Case: 138 | Input/Output: [[10 6 4 3 5 4 5 10 9 1 3 6 9 0 4 3 8 0] 116]
Test Case: 139 | Input/Output: [[10 7 0 3 5 3 7 10 10 2 8 5 3 6 1 6 4 7] 141]
Test Case: 140 | Input/Output: [[10 7 3 6 4 9 0 3 1 10 0 3 4 3 3 6 6 0] 106]
Test Case: 141 | Input/Output: [[10 8 1 1 4 3 6 9 0 7 2 3 3 8 1 10 2 0] 89]
Test Case: 142 | Input/Output: [[10 8 2 7 1 10 1 9 6 3 4 0 5 1 6 0 4 2] 112]
Test Case: 143 | Input/Output: [[10 9 0 9 1 6 2 8 0 5 0 2 1 10 5 0 5 0] 93]
Test Case: 144 | Input/Output: [[10 9 1 2 0 4 1 6 4 10 8 2 9 0 0 1 2 6] 116]
Test Case: 145 | Input/Output: [[10 9 1 3 1 2 3 5 3 4 3 10 3 1 1 7 2 5] 90]
Test Case: 146 | Input/Output: [[10 10 1 9 9 0 8 2 7 1 1 2 1 0 1 1 4 4] 108]
Test Case: 147 | Input/Output: [[10 10 3 2 3 4 1 2 4 5 5 5 7 2 5 5 8 0] 114]
Test Case: 148 | Input/Output: [[10 10 4 1 2 4 2 2 9 1 0 6 1 0 9 0 1 1] 82]
Test Case: 149 | Input/Output: [[10 10 7 2 0 7 2 4 5 3 2 5 7 3 0 2 0 8] 103]
Test Case: 150 | Input/Output: [[10 10 8 2 0 8 3 0 4 5 2 5 0 1 8 0 2 4] 100]
Test Case: 151 | Input/Output: [[0 0 8 0 10 3 2 3 2 5 1 5 3 4 0 3 1 2 7] 64]
Test Case: 152 | Input/Output: [[0 0 10 4 5 1 0 6 0 6 1 7 1 10 0 5 10 4 7] 91]
Test Case: 153 | Input/Output: [[0 0 10 7 0 7 3 1 4 2 1 7 0 2 7 4 3 1 4] 71]
Test Case: 154 | Input/Output: [[0 1 8 1 5 5 4 5 5 1 10 1 5 0 1 1 1 2 1] 67]
Test Case: 155 | Input/Output: [[0 2 0 3 10 2 6 5 4 4 3 1 4 5 3 2 2 0 6] 70]
Test Case: 156 | Input/Output: [[0 2 0 4 2 6 5 2 2 4 0 9 8 0 7 3 10 0 2] 78]
Test Case: 157 | Input/Output: [[0 2 0 6 2 4 1 9 10 8 0 8 0 1 2 6 0 6 2] 85]
Test Case: 158 | Input/Output: [[0 2 4 0 10 3 6 9 1 4 5 8 1 8 1 8 1 2 6] 92]
Test Case: 159 | Input/Output: [[0 2 10 9 1 8 2 2 8 3 0 7 0 2 4 5 2 2 2] 92]
Test Case: 160 | Input/Output: [[0 3 2 4 10 0 10 8 0 9 1 6 2 2 2 8 1 2 6] 100]
Test Case: 161 | Input/Output: [[0 3 4 5 2 2 0 1 10 5 1 3 2 4 2 8 0 7 2] 67]
Test Case: 162 | Input/Output: [[0 3 5 3 1 6 2 8 4 0 1 5 0 7 9 0 10 0 8] 84]
Test Case: 163 | Input/Output: [[0 3 7 1 10 3 5 0 5 10 1 3 4 4 3 0 0 10 9] 90]
Test Case: 164 | Input/Output: [[0 3 10 8 1 9 0 3 0 6 1 3 3 2 8 3 3 0 2] 77]
Test Case: 165 | Input/Output: [[0 4 1 9 6 3 10 4 0 7 3 9 1 10 5 0 10 10 7] 133]
Test Case: 166 | Input/Output: [[0 4 4 4 0 2 9 1 5 0 10 2 6 4 5 2 5 4 5] 85]
Test Case: 167 | Input/Output: [[0 4 8 2 0 10 5 2 1 3 7 1 2 7 8 2 10 3 1] 95]
Test Case: 168 | Input/Output: [[0 4 9 0 3 6 6 0 4 6 9 0 5 0 10 0 4 1 6] 86]
Test Case: 169 | Input/Output: [[0 6 4 0 6 0 0 9 1 5 0 0 2 3 8 1 10 8 0] 71]
Test Case: 170 | Input/Output: [[0 6 4 1 5 3 8 1 8 2 2 2 5 2 5 3 10 3 6] 87]
Test Case: 171 | Input/Output: [[0 7 5 0 5 2 5 0 10 0 3 1 3 10 7 1 10 4 6] 90]
Test Case: 172 | Input/Output: [[0 7 9 0 7 2 5 1 8 2 5 0 8 2 2 5 10 1 0] 82]
Test Case: 173 | Input/Output: [[0 7 10 4 1 4 4 9 0 6 1 6 3 4 2 6 0 6 1] 79]
Test Case: 174 | Input/Output: [[0 8 0 0 2 4 9 1 9 0 1 0 9 0 10 8 1 2 3] 85]
Test Case: 175 | Input/Output: [[0 8 0 7 2 2 3 6 10 7 3 2 2 3 3 4 3 5 1] 83]
Test Case: 176 | Input/Output: [[0 9 1 1 3 1 3 3 7 0 10 1 0 3 4 1 9 6 0] 69]
Test Case: 177 | Input/Output: [[0 9 5 0 1 9 8 0 6 4 9 0 0 3 10 8 0 4 5] 106]
Test Case: 178 | Input/Output: [[0 9 5 4 10 7 2 1 2 9 0 6 4 3 3 4 0 3 5] 89]
Test Case: 179 | Input/Output: [[0 9 7 1 2 8 10 5 4 8 0 9 0 8 0 4 5 2 5] 106]
Test Case: 180 | Input/Output: [[0 9 8 1 9 0 5 5 3 0 8 0 3 4 10 2 1 7 1] 82]
Test Case: 181 | Input/Output: [[0 10 7 3 4 6 0 9 3 6 7 2 1 6 10 3 2 6 2] 103]
Test Case: 182 | Input/Output: [[1 0 3 1 3 7 10 3 4 4 3 7 0 3 3 9 1 6 3] 94]
Test Case: 183 | Input/Output: [[1 0 7 1 2 3 4 1 6 2 1 8 5 3 10 7 1 2 7] 79]
Test Case: 184 | Input/Output: [[1 0 9 1 2 3 6 3 8 2 9 0 10 5 5 8 0 0 1] 102]
Test Case: 185 | Input/Output: [[1 0 10 4 2 3 0 5 0 9 0 3 4 5 0 6 2 5 2] 67]
Test Case: 186 | Input/Output: [[1 1 5 3 0 8 2 4 4 0 10 6 0 6 1 5 5 2 7] 78]
Test Case: 187 | Input/Output: [[1 2 3 1 0 1 5 3 10 6 1 6 1 8 0 2 2 7 1] 67]
Test Case: 188 | Input/Output: [[1 2 8 0 0 10 4 4 4 5 3 1 10 6 4 0 4 8 0] 88]
Test Case: 189 | Input/Output: [[1 3 1 6 7 2 10 7 1 6 1 4 4 8 2 1 6 3 5] 87]
Test Case: 190 | Input/Output: [[1 3 2 4 7 2 4 2 2 1 4 5 8 2 10 8 1 5 3] 93]
Test Case: 191 | Input/Output: [[1 4 10 9 0 3 7 7 2 5 2 8 2 7 2 2 7 9 0] 110]
Test Case: 192 | Input/Output: [[1 5 3 3 0 7 3 7 4 2 10 1 6 8 0 1 8 3 2] 85]
Test Case: 193 | Input/Output: [[1 5 4 2 2 4 4 5 6 4 10 6 3 5 3 5 0 4 2] 94]
Test Case: 194 | Input/Output: [[1 5 4 2 10 4 1 4 0 6 4 8 2 3 1 9 0 1 7] 88]
Test Case: 195 | Input/Output: [[1 5 10 7 2 2 8 9 1 1 8 1 7 5 3 1 5 2 7] 104]
Test Case: 196 | Input/Output: [[1 6 1 0 3 2 7 2 8 1 7 3 7 3 10 7 3 6 2] 112]
Test Case: 197 | Input/Output: [[1 6 1 7 3 5 9 0 10 6 1 9 0 4 6 8 0 2 6] 99]
Test Case: 198 | Input/Output: [[1 6 1 8 2 3 2 3 6 0 0 1 3 5 10 2 6 1 1] 69]
Test Case: 199 | Input/Output: [[1 6 4 4 6 2 7 2 7 2 2 7 9 0 10 5 4 0 5] 92]
Test Case: 200 | Input/Output: [[1 6 8 0 8 1 10 2 3 10 6 4 9 0 4 5 3 7 3] 114]
Test Case: 201 | Input/Output: [[1 6 9 1 10 5 1 4 6 7 2 3 0 0 2 4 4 9 0] 97]
Test Case: 202 | Input/Output: [[1 7 1 6 6 1 8 2 4 1 5 3 3 2 8 2 10 2 6] 100]
Test Case: 203 | Input/Output: [[1 8 6 3 10 9 0 8 0 2 4 4 1 0 0 9 1 2 0] 79]
Test Case: 204 | Input/Output: [[1 8 10 2 8 3 1 3 3 8 1 5 1 1 3 6 2 0 9] 88]
Test Case: 205 | Input/Output: [[1 9 4 0 7 0 2 7 8 0 10 3 6 3 6 1 6 3 2] 91]
Test Case: 206 | Input/Output: [[1 9 5 1 5 0 8 1 5 3 3 5 0 4 7 3 10 0 3] 91]
Test Case: 207 | Input/Output: [[1 9 5 2 2 4 0 10 10 4 5 2 5 2 3 4 5 8 1] 106]
Test Case: 208 | Input/Output: [[1 9 6 0 10 0 6 2 0 7 3 2 8 1 0 0 9 9 0] 88]
Test Case: 209 | Input/Output: [[1 9 10 8 0 4 4 8 0 6 1 9 1 2 3 7 1 2 2] 98]
Test Case: 210 | Input/Output: [[2 0 1 4 0 0 10 2 0 6 4 8 1 9 0 0 8 6 2] 73]
Test Case: 211 | Input/Output: [[2 0 3 1 8 2 1 5 1 2 10 1 0 5 5 5 1 0 3] 62]
Test Case: 212 | Input/Output: [[2 0 4 5 2 2 2 3 3 6 10 2 2 2 5 4 6 1 6] 72]
Test Case: 213 | Input/Output: [[2 0 6 2 10 7 2 6 1 7 0 2 5 1 1 8 2 3 3] 80]
Test Case: 214 | Input/Output: [[2 0 7 3 3 4 8 0 10 6 1 8 1 2 0 7 0 9 0] 81]
Test Case: 215 | Input/Output: [[2 0 9 1 6 1 1 0 4 0 10 9 1 7 0 7 0 3 3] 87]
Test Case: 216 | Input/Output: [[2 1 0 4 2 4 6 4 10 4 0 6 3 5 5 2 0 5 2] 81]
Test Case: 217 | Input/Output: [[2 1 5 5 1 9 2 7 0 9 0 2 2 4 3 1 10 1 5] 78]
Test Case: 218 | Input/Output: [[2 1 6 3 10 1 9 10 4 5 8 2 2 2 1 3 10 6 0] 116]
Test Case: 219 | Input/Output: [[2 1 8 0 2 3 5 0 3 4 7 0 1 0 7 1 10 1 2] 60]
Test Case: 220 | Input/Output: [[2 2 10 7 1 6 3 7 2 2 7 9 1 8 0 1 6 2 3] 95]
Test Case: 221 | Input/Output: [[2 3 3 1 1 6 5 0 1 2 10 4 1 8 1 3 4 2 1] 63]
Test Case: 222 | Input/Output: [[2 3 5 2 0 1 10 2 3 7 0 0 9 3 3 8 0 4 2] 69]
Test Case: 223 | Input/Output: [[2 3 9 1 4 4 7 3 3 5 1 8 5 4 8 0 10 2 7] 102]
Test Case: 224 | Input/Output: [[2 4 1 9 6 1 3 3 5 2 4 2 7 2 10 8 1 7 1] 93]
Test Case: 225 | Input/Output: [[2 4 2 7 7 3 2 0 10 6 1 8 1 0 4 3 3 5 2] 79]
Test Case: 226 | Input/Output: [[2 5 9 1 5 0 8 2 7 3 4 5 7 1 10 5 1 1 8] 106]
Test Case: 227 | Input/Output: [[2 5 10 5 3 9 1 10 5 3 2 3 6 1 2 2 6 4 7] 112]
Test Case: 228 | Input/Output: [[2 6 1 9 8 1 2 2 9 1 10 5 0 9 0 0 3 6 3] 100]
Test Case: 229 | Input/Output: [[2 6 8 1 6 4 3 7 7 1 0 10 10 0 10 10 9 1 9] 154]
Test Case: 230 | Input/Output: [[2 6 8 2 10 1 3 7 2 4 3 7 3 9 0 8 2 0 2] 102]
Test Case: 231 | Input/Output: [[2 7 0 10 2 7 10 9 0 7 0 5 0 7 3 8 1 4 0] 101]
Test Case: 232 | Input/Output: [[2 7 1 2 8 2 10 10 9 0 7 2 5 5 8 1 10 10 5] 150]
Test Case: 233 | Input/Output: [[2 7 6 3 6 4 9 0 4 3 0 0 4 3 8 0 10 3 0] 84]
Test Case: 234 | Input/Output: [[2 7 6 3 10 0 7 0 4 3 7 6 0 0 2 2 7 0 7] 86]
Test Case: 235 | Input/Output: [[2 7 8 2 9 1 6 2 10 0 3 4 1 9 0 10 9 1 3] 115]
Test Case: 236 | Input/Output: [[2 8 0 6 10 3 7 2 1 3 7 6 3 7 0 1 5 4 4] 97]
Test Case: 237 | Input/Output: [[2 8 4 5 1 8 10 1 8 7 0 1 5 0 5 0 5 4 0] 87]
Test Case: 238 | Input/Output: [[2 8 6 3 3 0 10 7 1 3 3 6 2 7 3 1 5 2 6] 93]
Test Case: 239 | Input/Output: [[3 0 1 9 5 5 9 1 5 2 8 2 10 4 0 7 0 4 4] 112]
Test Case: 240 | Input/Output: [[3 1 3 6 8 1 6 3 0 7 5 1 7 3 10 4 5 8 0] 100]
Test Case: 241 | Input/Output: [[3 1 4 0 1 9 10 8 2 1 3 3 4 0 10 4 1 7 0] 96]
Test Case: 242 | Input/Output: [[3 1 10 2 3 6 3 0 2 9 0 6 3 2 8 3 0 0 4] 73]
Test Case: 243 | Input/Output: [[3 2 6 2 2 4 0 1 1 3 7 3 7 0 8 1 10 2 0] 71]
Test Case: 244 | Input/Output: [[3 3 1 0 6 4 5 3 10 2 4 2 3 1 5 7 2 6 0] 78]
Test Case: 245 | Input/Output: [[3 3 2 1 0 9 4 1 10 0 4 2 0 9 0 9 1 3 5] 73]
Test Case: 246 | Input/Output: [[3 3 8 0 7 2 4 3 9 1 7 2 1 4 5 1 10 4 1] 87]
Test Case: 247 | Input/Output: [[3 4 2 2 10 1 1 6 4 2 4 2 8 8 2 3 1 6 3] 87]
Test Case: 248 | Input/Output: [[3 4 3 0 7 2 2 0 10 1 5 1 9 2 8 4 5 4 1] 83]
Test Case: 249 | Input/Output: [[3 4 8 1 4 2 0 10 0 4 2 0 5 5 6 3 10 2 5] 87]
Test Case: 250 | Input/Output: [[3 4 8 1 9 0 8 1 9 1 5 0 1 5 1 3 10 5 1] 86]
Test Case: 251 | Input/Output: [[3 4 10 2 3 4 3 3 0 7 2 1 7 3 5 7 0 7 2] 78]
Test Case: 252 | Input/Output: [[3 5 2 2 1 4 1 5 5 1 10 9 0 6 3 3 4 0 3] 76]
Test Case: 253 | Input/Output: [[3 5 4 5 10 0 6 9 1 9 0 7 3 2 6 5 0 5 2] 99]
Test Case: 254 | Input/Output: [[3 5 7 2 8 0 6 3 10 0 10 7 2 3 4 9 1 2 0] 101]
Test Case: 255 | Input/Output: [[3 5 9 1 8 0 7 1 10 0 7 0 1 6 0 9 0 2 2] 86]
Test Case: 256 | Input/Output: [[3 5 10 2 8 2 4 3 2 6 3 9 1 5 1 9 1 1 0] 93]
Test Case: 257 | Input/Output: [[3 6 3 5 3 1 10 9 0 5 1 10 0 2 1 9 5 5 10] 104]
Test Case: 258 | Input/Output: [[3 6 8 0 6 3 2 5 0 6 10 7 0 8 0 0 10 1 5] 88]
Test Case: 259 | Input/Output: [[3 6 8 2 7 2 8 1 9 0 0 0 10 10 2 2 1 9 8] 111]
Test Case: 260 | Input/Output: [[3 7 2 8 6 4 4 0 5 3 10 3 4 2 5 3 4 6 1] 99]
Test Case: 261 | Input/Output: [[3 7 8 0 3 3 9 1 9 1 9 0 10 5 3 9 1 2 2] 121]
Test Case: 262 | Input/Output: [[4 0 0 5 9 0 7 1 10 7 3 4 4 0 3 1 2 2 0] 76]
Test Case: 263 | Input/Output: [[4 0 0 8 8 2 5 4 7 0 3 3 10 2 1 4 4 1 2] 76]
Test Case: 264 | Input/Output: [[4 0 0 10 4 1 9 0 4 6 8 0 9 1 10 2 1 3 0] 97]
Test Case: 265 | Input/Output: [[4 0 3 7 4 1 10 6 2 6 0 7 2 8 0 4 2 9 0] 87]
Test Case: 266 | Input/Output: [[4 0 5 3 1 8 5 3 10 9 0 5 3 9 0 2 4 2 5] 87]
Test Case: 267 | Input/Output: [[4 0 6 2 7 0 5 0 7 0 10 9 0 5 1 5 0 5 3] 78]
Test Case: 268 | Input/Output: [[4 0 7 3 0 1 7 1 2 4 7 1 0 6 7 3 10 1 0] 75]
Test Case: 269 | Input/Output: [[4 1 5 5 6 0 7 3 6 1 3 3 10 4 5 10 10 5 0] 124]
Test Case: 270 | Input/Output: [[4 1 6 3 1 3 7 3 0 4 10 1 9 3 6 9 0 0 2] 85]
Test Case: 271 | Input/Output: [[4 1 8 2 9 1 6 2 6 2 5 5 0 9 10 4 1 8 1] 104]
Test Case: 272 | Input/Output: [[4 1 9 0 9 1 1 2 6 1 1 6 9 0 6 0 10 4 4] 83]
Test Case: 273 | Input/Output: [[4 2 0 7 7 1 8 2 7 2 2 6 9 0 10 3 4 7 1] 96]
Test Case: 274 | Input/Output: [[4 2 3 3 3 6 1 7 8 0 10 0 4 7 3 9 1 5 0] 94]
Test Case: 275 | Input/Output: [[4 2 10 7 0 7 1 2 2 4 3 6 2 3 7 8 1 6 3] 93]
Test Case: 276 | Input/Output: [[4 2 10 7 3 7 2 3 2 0 5 2 6 7 1 5 5 3 0] 94]
Test Case: 277 | Input/Output: [[4 3 0 7 2 2 8 1 7 1 10 8 0 0 0 5 2 7 2] 77]
Test Case: 278 | Input/Output: [[4 3 1 6 1 9 10 3 3 0 10 9 0 6 1 0 5 1 3] 100]
Test Case: 279 | Input/Output: [[4 3 3 0 10 0 3 2 4 6 1 5 5 7 0 3 1 9 0] 76]
Test Case: 280 | Input/Output: [[4 3 6 0 1 4 3 0 6 4 10 6 0 2 6 2 1 0 5] 79]
Test Case: 281 | Input/Output: [[4 3 10 7 2 6 2 6 3 5 3 6 4 5 2 5 0 1 0] 88]
Test Case: 282 | Input/Output: [[4 4 0 6 5 0 8 1 10 0 0 5 5 0 9 9 1 9 0] 85]
Test Case: 283 | Input/Output: [[4 4 1 7 2 2 3 7 10 7 0 1 5 7 1 6 2 7 0] 93]
Test Case: 284 | Input/Output: [[4 4 4 3 5 1 5 3 5 3 10 3 7 8 2 0 4 7 0] 96]
Test Case: 285 | Input/Output: [[4 4 5 3 0 10 8 0 10 8 1 1 7 6 1 5 1 6 0] 97]
Test Case: 286 | Input/Output: [[4 4 5 5 9 0 4 0 10 4 3 2 7 10 3 2 10 0 3] 106]
Test Case: 287 | Input/Output: [[4 4 7 0 2 6 6 4 8 0 10 0 8 7 3 5 2 5 0] 102]
Test Case: 288 | Input/Output: [[4 4 9 0 3 3 10 4 4 6 0 8 2 4 2 0 8 4 3] 90]
Test Case: 289 | Input/Output: [[4 4 10 7 1 0 1 0 5 9 1 4 3 4 4 8 2 2 5] 88]
Test Case: 290 | Input/Output: [[4 5 4 2 5 4 2 0 10 0 10 6 4 4 6 9 1 5 4] 119]
Test Case: 291 | Input/Output: [[4 5 4 5 2 7 9 0 1 6 1 3 10 3 6 9 0 7 0] 91]
Test Case: 292 | Input/Output: [[4 6 1 5 4 4 1 3 2 3 10 7 3 3 6 6 2 0 5] 89]
Test Case: 293 | Input/Output: [[4 6 4 2 4 5 10 1 5 5 0 2 5 6 3 0 2 7 1] 82]
Test Case: 294 | Input/Output: [[4 6 8 2 3 4 8 0 7 1 6 3 2 2 10 10 10 3 2] 135]
Test Case: 295 | Input/Output: [[5 0 0 7 3 4 7 3 0 0 1 1 8 1 6 3 10 8 1] 77]
Test Case: 296 | Input/Output: [[5 0 7 1 5 1 3 2 10 4 3 4 4 7 0 3 1 9 0] 76]
Test Case: 297 | Input/Output: [[5 0 7 2 10 0 4 0 6 7 3 8 0 6 3 3 6 7 0] 89]
Test Case: 298 | Input/Output: [[5 0 9 1 4 1 7 1 3 1 10 5 4 0 10 4 0 4 4] 90]
Test Case: 299 | Input/Output: [[5 1 2 5 2 6 2 5 7 1 9 0 4 0 10 9 1 6 0] 91]
Test Case: 300 | Input/Output: [[5 1 2 5 10 1 5 8 0 1 0 10 3 5 7 3 9 1 10] 109]
Test Case: 301 | Input/Output: [[5 1 3 7 0 7 5 2 1 9 9 0 5 0 9 0 10 2 2] 90]
Test Case: 302 | Input/Output: [[5 1 3 7 8 0 0 0 6 3 3 5 1 7 10 4 0 6 1] 82]
Test Case: 303 | Input/Output: [[5 1 5 5 9 1 10 10 8 1 2 2 9 0 1 9 9 1 6] 149]
Test Case: 304 | Input/Output: [[5 1 8 2 10 8 2 9 1 1 7 1 9 6 1 9 0 4 1] 121]
Test Case: 305 | Input/Output: [[5 2 0 9 2 2 0 2 6 1 9 0 5 2 7 1 10 6 1] 77]
Test Case: 306 | Input/Output: [[5 2 5 4 8 2 4 0 10 8 1 6 1 10 6 3 9 1 0] 107]
Test Case: 307 | Input/Output: [[5 2 8 1 3 4 8 1 4 4 1 7 1 3 3 0 10 2 7] 83]
Test Case: 308 | Input/Output: [[5 2 8 1 9 1 0 9 2 8 10 0 9 10 6 0 7 3 3] 118]
Test Case: 309 | Input/Output: [[5 2 9 1 2 3 0 2 1 4 2 4 2 3 6 1 10 3 5] 75]
Test Case: 310 | Input/Output: [[5 2 10 1 5 8 1 7 1 6 0 0 9 7 3 0 4 4 5] 84]
Test Case: 311 | Input/Output: [[5 2 10 4 4 3 5 7 3 9 0 4 6 4 3 8 0 5 1] 104]
Test Case: 312 | Input/Output: [[5 3 6 4 1 4 3 4 2 3 10 9 1 5 5 1 4 7 1] 95]
Test Case: 313 | Input/Output: [[5 3 6 4 3 6 2 7 10 9 0 0 6 9 1 4 4 6 1] 102]
Test Case: 314 | Input/Output: [[5 3 9 0 10 3 3 8 2 3 5 0 10 1 2 9 1 2 3] 91]
Test Case: 315 | Input/Output: [[5 4 3 2 10 8 0 1 6 5 4 9 1 0 9 2 2 0 2] 81]
Test Case: 316 | Input/Output: [[5 5 4 0 10 0 10 3 2 9 0 1 1 1 3 2 0 8 0] 81]
Test Case: 317 | Input/Output: [[5 5 8 1 8 0 8 2 10 7 0 5 0 4 2 1 8 3 2] 104]
Test Case: 318 | Input/Output: [[5 5 10 3 0 5 5 7 2 4 0 10 0 8 4 4 4 6 9] 119]
Test Case: 319 | Input/Output: [[5 5 10 9 0 7 1 7 3 5 5 6 1 3 4 1 4 0 2] 108]
Test Case: 320 | Input/Output: [[6 0 1 1 5 4 10 9 1 7 2 2 5 8 1 8 1 6 2] 96]
Test Case: 321 | Input/Output: [[6 0 1 1 6 0 4 1 8 2 4 4 10 5 4 8 0 5 2] 84]
Test Case: 322 | Input/Output: [[6 0 5 1 4 2 5 2 3 2 8 2 10 3 1 8 1 1 1] 79]
Test Case: 323 | Input/Output: [[6 0 8 0 1 1 5 3 9 1 6 4 10 0 8 9 1 0 3] 99]
Test Case: 324 | Input/Output: [[6 0 10 5 2 3 4 9 0 8 0 8 1 2 6 1 7 4 3] 86]
Test Case: 325 | Input/Output: [[6 1 0 4 10 5 5 6 4 7 3 5 1 3 6 9 0 3 1] 107]
Test Case: 326 | Input/Output: [[6 1 1 5 2 7 7 0 2 7 0 7 0 9 6 0 10 2 4] 82]
Test Case: 327 | Input/Output: [[6 1 5 5 7 2 7 0 4 0 5 5 0 7 10 9 1 2 7] 102]
Test Case: 328 | Input/Output: [[6 1 7 0 3 0 6 1 3 5 1 7 5 5 10 9 1 4 4] 102]
Test Case: 329 | Input/Output: [[6 1 8 0 6 4 8 2 1 1 10 5 0 4 1 0 1 1 8] 81]
Test Case: 330 | Input/Output: [[6 1 9 1 3 7 10 7 1 10 9 1 7 3 4 4 10 8 0] 143]
Test Case: 331 | Input/Output: [[6 2 2 0 9 1 0 10 10 2 7 0 10 10 5 1 4 6 1] 121]
Test Case: 332 | Input/Output: [[6 2 5 2 7 0 3 4 10 4 5 2 7 1 4 9 0 2 3] 85]
Test Case: 333 | Input/Output: [[6 2 9 1 5 4 10 1 8 4 3 8 0 2 3 0 10 6 1] 103]
Test Case: 334 | Input/Output: [[6 3 0 7 0 5 9 1 8 0 2 5 5 0 10 2 7 2 0] 89]
Test Case: 335 | Input/Output: [[6 3 1 7 5 5 0 2 6 1 10 3 3 10 6 1 10 8 2] 102]
Test Case: 336 | Input/Output: [[6 4 2 6 10 4 1 1 5 2 8 3 4 0 5 8 0 4 0] 83]
Test Case: 337 | Input/Output: [[6 4 5 3 2 4 2 4 6 2 3 3 7 2 3 1 10 0 3] 78]
Test Case: 338 | Input/Output: [[6 4 6 1 10 3 4 9 0 5 1 8 1 5 3 8 1 6 2] 96]
Test Case: 339 | Input/Output: [[6 4 10 7 1 8 1 8 2 3 7 7 3 2 2 0 2 7 2] 112]
Test Case: 340 | Input/Output: [[7 0 4 0 10 6 2 5 2 0 4 8 1 3 0 5 0 2 5] 72]
Test Case: 341 | Input/Output: [[7 0 4 4 3 5 10 0 1 5 5 3 5 1 8 2 3 0 9] 79]
Test Case: 342 | Input/Output: [[7 0 4 4 9 1 6 0 10 0 10 8 2 4 2 5 5 6 1] 118]
Test Case: 343 | Input/Output: [[7 0 6 2 7 0 4 0 3 2 2 2 1 1 10 5 2 5 2] 68]
Test Case: 344 | Input/Output: [[7 0 6 3 6 3 8 0 7 2 1 9 0 10 9 0 10 3 0] 96]
Test Case: 345 | Input/Output: [[7 0 10 8 0 0 3 5 3 0 9 0 4 8 0 4 2 6 1] 78]
Test Case: 346 | Input/Output: [[7 1 0 2 1 3 3 6 10 1 1 1 5 0 9 7 1 7 2] 69]
Test Case: 347 | Input/Output: [[7 1 1 7 3 4 2 7 0 7 3 6 9 0 10 0 3 1 4] 78]
Test Case: 348 | Input/Output: [[7 1 2 0 8 1 0 9 10 5 0 7 3 0 4 3 4 4 3] 76]
Test Case: 349 | Input/Output: [[7 1 2 3 5 0 2 3 6 0 1 2 8 0 3 2 10 9 0] 73]
Test Case: 350 | Input/Output: [[7 1 3 4 4 4 10 4 1 1 6 5 5 9 1 1 8 9 0] 98]
Test Case: 351 | Input/Output: [[7 1 5 1 10 5 2 0 8 8 1 3 3 5 3 1 8 6 3] 87]
Test Case: 352 | Input/Output: [[7 1 5 2 1 7 10 8 1 0 3 9 0 5 5 6 2 7 1] 95]
Test Case: 353 | Input/Output: [[7 1 5 3 2 5 3 3 10 3 2 0 8 3 3 5 3 6 0] 77]
Test Case: 354 | Input/Output: [[7 1 6 2 10 0 6 7 2 8 1 6 2 2 3 3 5 5 3] 85]
Test Case: 355 | Input/Output: [[7 1 9 0 6 4 6 1 5 4 2 3 10 4 4 1 1 5 0] 87]
Test Case: 356 | Input/Output: [[7 1 9 1 2 0 0 0 4 0 10 0 5 1 7 8 0 2 6] 70]
Test Case: 357 | Input/Output: [[7 1 10 7 0 0 6 7 1 5 0 6 0 1 4 1 6 9 0] 78]
Test Case: 358 | Input/Output: [[7 2 3 3 4 6 5 2 7 1 0 7 0 6 10 3 0 9 0] 83]
Test Case: 359 | Input/Output: [[7 2 4 5 8 2 4 6 6 2 4 6 0 1 2 6 10 7 2] 103]
Test Case: 360 | Input/Output: [[7 2 6 0 2 3 0 4 8 1 3 2 10 4 6 4 4 1 1] 82]
Test Case: 361 | Input/Output: [[7 2 6 0 4 5 7 1 10 8 1 8 1 1 9 5 5 3 6] 106]
Test Case: 362 | Input/Output: [[7 2 6 3 1 0 8 1 10 9 0 6 3 2 8 2 1 9 0] 89]
Test Case: 363 | Input/Output: [[7 2 7 0 3 2 2 3 9 0 10 9 0 1 5 8 0 1 1] 79]
Test Case: 364 | Input/Output: [[7 2 10 0 4 3 6 9 0 5 5 2 0 2 6 7 3 4 0] 85]
Test Case: 365 | Input/Output: [[7 3 0 5 9 1 3 6 5 4 7 1 10 5 4 7 3 5 1] 103]
Test Case: 366 | Input/Output: [[7 3 1 0 9 1 2 3 10 8 2 9 0 5 4 9 1 3 6] 108]
Test Case: 367 | Input/Output: [[7 3 1 0 10 3 1 4 5 2 5 8 1 4 4 8 0 4 1] 76]
Test Case: 368 | Input/Output: [[7 3 2 7 10 2 6 5 5 5 2 0 7 8 0 0 2 5 1] 92]
Test Case: 369 | Input/Output: [[7 3 5 4 6 2 0 9 10 0 1 5 2 9 1 7 2 9 0] 95]
Test Case: 370 | Input/Output: [[7 3 6 1 4 0 3 4 0 2 8 1 2 0 10 6 0 5 2] 76]
Test Case: 371 | Input/Output: [[7 3 8 0 0 8 1 3 8 1 2 5 3 6 10 2 6 9 0] 98]
Test Case: 372 | Input/Output: [[7 3 8 1 0 6 3 6 10 1 3 3 7 4 5 7 3 9 0] 111]
Test Case: 373 | Input/Output: [[7 3 10 6 2 2 1 9 0 4 3 4 2 2 8 8 0 2 6] 105]
Test Case: 374 | Input/Output: [[7 3 10 6 4 8 2 10 1 2 6 0 5 5 3 2 7 3 9] 137]
Test Case: 375 | Input/Output: [[7 3 10 8 1 7 0 8 2 8 2 1 0 9 0 8 1 4 2] 109]
Test Case: 376 | Input/Output: [[8 0 0 7 3 4 7 3 9 0 3 1 5 4 10 1 8 0 6] 97]
Test Case: 377 | Input/Output: [[8 0 0 9 10 5 0 1 3 3 0 6 1 3 3 10 10 6 2] 101]
Test Case: 378 | Input/Output: [[8 0 1 2 8 0 7 0 10 5 3 5 4 1 8 4 2 6 2] 84]
Test Case: 379 | Input/Output: [[8 0 1 7 5 3 9 1 2 1 8 0 10 3 6 5 0 2 0] 82]
Test Case: 380 | Input/Output: [[8 0 2 6 9 1 0 3 8 1 1 5 10 3 5 9 1 8 0] 96]
Test Case: 381 | Input/Output: [[8 0 4 0 1 7 1 2 0 0 3 1 10 1 5 8 0 3 0] 60]
Test Case: 382 | Input/Output: [[8 0 5 0 10 2 7 3 3 10 1 6 5 5 0 10 10 6 6] 123]
Test Case: 383 | Input/Output: [[8 0 6 3 9 1 3 6 10 1 7 2 4 3 0 9 0 6 1] 90]
Test Case: 384 | Input/Output: [[8 0 7 0 3 0 4 5 2 0 4 5 10 0 3 5 2 0 3] 64]
Test Case: 385 | Input/Output: [[8 0 8 2 3 5 1 7 8 1 4 5 9 1 10 8 0 2 2] 105]
Test Case: 386 | Input/Output: [[8 1 1 1 3 3 10 3 6 8 0 9 1 4 3 5 0 7 1] 87]
Test Case: 387 | Input/Output: [[8 1 2 4 9 1 1 7 6 4 4 1 9 0 10 6 1 3 6] 95]
Test Case: 388 | Input/Output: [[8 1 3 0 9 0 5 2 4 2 10 6 2 5 2 0 4 3 4] 78]
Test Case: 389 | Input/Output: [[8 1 3 7 1 0 4 0 1 4 8 1 10 2 3 8 1 3 3] 74]
Test Case: 390 | Input/Output: [[8 1 4 5 3 4 6 2 9 0 6 3 10 0 5 10 3 7 10] 111]
Test Case: 391 | Input/Output: [[8 1 5 1 1 5 8 0 1 9 9 0 1 5 10 3 6 4 4] 99]
Test Case: 392 | Input/Output: [[8 1 9 0 4 6 8 1 6 0 7 1 8 0 10 4 3 6 1] 98]
Test Case: 393 | Input/Output: [[8 1 9 0 8 1 5 3 2 5 5 5 0 9 10 4 5 2 0] 91]
Test Case: 394 | Input/Output: [[8 1 9 0 10 3 2 8 2 9 1 7 2 3 1 4 5 3 6] 105]
Test Case: 395 | Input/Output: [[8 2 1 1 8 2 8 1 8 2 10 8 1 6 2 8 0 2 7] 113]
Test Case: 396 | Input/Output: [[8 2 1 2 1 5 1 5 7 0 3 2 9 1 3 5 10 9 0] 87]
Test Case: 397 | Input/Output: [[8 2 3 2 2 0 9 0 2 4 9 0 10 4 2 4 5 1 3] 79]
Test Case: 398 | Input/Output: [[8 2 4 4 0 8 3 7 6 1 5 0 7 0 9 1 10 3 6] 113]
Test Case: 399 | Input/Output: [[8 2 6 4 10 5 3 4 1 8 1 6 3 6 3 7 1 5 0] 107]
Test Case: 400 | Input/Output: [[8 2 7 3 10 4 3 9 1 5 5 8 1 8 2 4 2 0 7] 130]
Test Case: 401 | Input/Output: [[8 2 8 0 1 0 7 2 6 4 3 5 4 4 10 7 1 8 0] 99]
Test Case: 402 | Input/Output: [[8 2 10 1 3 1 9 2 3 7 2 6 0 2 8 1 6 3 5] 96]
Test Case: 403 | Input/Output: [[8 2 10 9 1 4 5 4 6 3 4 1 6 6 1 5 2 5 1] 110]
Test Case: 404 | Input/Output: [[9 0 0 1 8 1 10 5 3 7 3 10 8 2 9 0 9 1 1] 124]
Test Case: 405 | Input/Output: [[9 0 0 6 10 9 0 9 0 4 6 2 3 6 0 6 2 1 6] 90]
Test Case: 406 | Input/Output: [[9 0 1 3 8 0 9 1 0 0 4 3 8 0 10 5 2 3 5] 78]
Test Case: 407 | Input/Output: [[9 0 1 5 8 0 2 3 7 0 10 4 6 0 3 0 8 4 4] 84]
Test Case: 408 | Input/Output: [[9 0 1 6 7 2 10 1 6 0 3 9 1 7 1 8 0 6 3] 94]
Test Case: 409 | Input/Output: [[9 0 1 8 5 4 5 4 3 3 7 2 4 1 9 0 10 7 0] 89]
Test Case: 410 | Input/Output: [[9 0 2 1 6 0 1 7 10 5 3 0 1 1 6 6 1 5 4] 76]
Test Case: 411 | Input/Output: [[9 0 5 0 4 0 7 0 5 5 10 9 1 3 2 6 3 8 1] 101]
Test Case: 412 | Input/Output: [[9 0 5 2 6 0 1 2 9 0 0 1 5 3 4 4 10 4 3] 75]
Test Case: 413 | Input/Output: [[9 0 6 1 5 5 2 1 9 1 10 3 6 9 0 5 1 0 3] 97]
Test Case: 414 | Input/Output: [[9 0 6 2 1 4 0 7 8 0 3 4 1 6 10 0 9 3 4] 86]
Test Case: 415 | Input/Output: [[9 0 6 2 6 0 0 6 0 3 0 8 0 5 7 1 10 7 1] 79]
Test Case: 416 | Input/Output: [[9 0 7 1 3 1 8 1 6 2 1 0 10 4 4 2 4 2 1] 74]
Test Case: 417 | Input/Output: [[9 0 7 3 9 1 1 0 1 3 4 3 10 2 0 0 7 7 2] 81]
Test Case: 418 | Input/Output: [[9 0 8 0 6 4 7 3 0 0 6 4 4 0 3 4 10 8 1] 97]
Test Case: 419 | Input/Output: [[9 0 9 0 9 0 6 2 7 0 10 6 4 8 2 2 6 1 1] 102]
Test Case: 420 | Input/Output: [[9 0 10 8 0 9 1 3 6 5 4 7 1 9 1 1 6 7 1] 100]
Test Case: 421 | Input/Output: [[9 1 1 9 4 5 2 2 6 3 2 1 10 6 3 8 1 1 5] 93]
Test Case: 422 | Input/Output: [[9 1 3 0 3 5 6 1 10 6 3 0 8 9 0 1 7 0 3] 87]
Test Case: 423 | Input/Output: [[9 1 6 0 4 0 1 5 4 5 2 1 2 3 9 1 10 8 1] 97]
Test Case: 424 | Input/Output: [[9 1 7 3 5 5 2 8 6 3 7 3 7 1 1 0 10 8 0] 121]
Test Case: 425 | Input/Output: [[9 1 7 3 7 0 0 1 9 0 6 4 4 3 7 2 10 9 0] 109]
Test Case: 426 | Input/Output: [[9 1 8 0 6 1 5 2 1 8 10 1 4 5 0 3 5 1 7] 90]
Test Case: 427 | Input/Output: [[9 1 8 2 10 7 0 5 2 3 2 8 2 4 4 5 0 7 0] 108]
Test Case: 428 | Input/Output: [[9 1 10 9 1 7 3 2 4 9 0 8 0 8 2 8 1 8 1] 128]
Test Case: 429 | Input/Output: [[10 0 2 1 6 6 0 2 0 3 6 2 8 2 5 3 6 0 6] 72]
Test Case: 430 | Input/Output: [[10 0 3 3 1 1 4 8 1 1 0 4 1 7 0 8 0 1 1] 57]
Test Case: 431 | Input/Output: [[10 0 6 4 3 8 1 7 2 9 1 0 2 5 3 9 0 6 2] 84]
Test Case: 432 | Input/Output: [[10 0 6 5 5 8 1 5 0 7 3 3 4 4 6 4 3 8 0] 103]
Test Case: 433 | Input/Output: [[10 0 6 10 4 1 2 2 9 1 9 1 3 4 1 1 10 1 4] 102]
Test Case: 434 | Input/Output: [[10 0 7 10 5 1 7 0 2 5 1 3 6 2 9 0 8 2 8] 99]
Test Case: 435 | Input/Output: [[10 1 0 6 4 4 2 3 2 9 0 4 6 5 1 6 3 6 1] 83]
Test Case: 436 | Input/Output: [[10 1 1 1 6 8 1 3 4 3 5 5 5 4 6 3 5 2 7] 89]
Test Case: 437 | Input/Output: [[10 1 1 8 2 0 10 2 2 7 2 4 4 4 6 10 10 1 0] 109]
Test Case: 438 | Input/Output: [[10 1 1 9 1 8 2 0 9 4 3 2 0 0 9 3 3 4 5] 84]
Test Case: 439 | Input/Output: [[10 1 2 2 2 5 3 9 1 0 6 0 2 3 0 5 5 9 0] 77]
Test Case: 440 | Input/Output: [[10 2 0 8 2 6 0 1 5 10 0 5 9 1 1 1 7 3 1] 86]
Test Case: 441 | Input/Output: [[10 2 5 8 2 2 6 10 2 6 5 3 6 0 3 1 7 3 3] 101]
Test Case: 442 | Input/Output: [[10 2 6 2 7 8 2 7 1 10 5 2 8 0 1 0 10 8 10] 121]
Test Case: 443 | Input/Output: [[10 2 8 8 1 4 6 5 1 3 1 1 5 0 1 1 8 7 0] 95]
Test Case: 444 | Input/Output: [[10 3 0 0 9 8 1 4 6 10 7 3 7 2 1 4 5 5 7] 122]
Test Case: 445 | Input/Output: [[10 3 0 3 4 10 1 0 3 1 4 3 2 0 0 2 9 1 10] 70]
Test Case: 446 | Input/Output: [[10 3 4 1 2 1 5 1 8 6 2 8 0 10 8 2 9 1 2] 109]
Test Case: 447 | Input/Output: [[10 3 6 2 6 5 1 5 2 8 0 2 3 8 0 5 1 8 0] 84]
Test Case: 448 | Input/Output: [[10 4 2 0 7 1 4 0 7 4 3 7 1 0 6 2 8 1 0] 74]
Test Case: 449 | Input/Output: [[10 4 4 8 0 1 8 6 4 5 0 5 5 7 0 7 2 4 2] 102]
Test Case: 450 | Input/Output: [[10 4 6 3 6 5 5 5 4 6 0 2 1 4 5 7 2 1 8] 102]
Test Case: 451 | Input/Output: [[10 4 6 5 3 9 0 2 6 9 1 5 1 9 0 6 0 0 2] 98]
Test Case: 452 | Input/Output: [[10 5 0 1 4 5 1 5 3 2 5 6 1 2 4 0 5 3 4] 71]
Test Case: 453 | Input/Output: [[10 5 2 3 7 4 4 4 6 3 1 9 0 10 8 2 5 5 3] 120]
Test Case: 454 | Input/Output: [[10 5 2 6 3 6 3 9 1 0 8 1 0 6 2 1 9 3 6] 91]
Test Case: 455 | Input/Output: [[10 5 3 10 6 4 7 3 0 1 5 1 5 2 5 5 10 3 4] 124]
Test Case: 456 | Input/Output: [[10 5 4 10 6 4 1 6 9 1 5 0 1 7 6 0 6 4 0] 110]
Test Case: 457 | Input/Output: [[10 6 0 4 3 6 1 1 6 8 2 8 1 10 9 0 2 8 0] 108]
Test Case: 458 | Input/Output: [[10 6 1 7 1 7 2 6 1 8 2 9 1 7 0 1 3 7 2] 104]
Test Case: 459 | Input/Output: [[10 6 2 8 1 2 4 2 8 4 2 9 1 6 3 1 6 6 0] 99]
Test Case: 460 | Input/Output: [[10 6 3 6 1 6 0 6 0 6 3 8 0 4 1 7 2 5 1] 84]
Test Case: 461 | Input/Output: [[10 6 4 2 4 3 7 7 0 3 3 8 1 0 1 7 0 1 0] 86]
Test Case: 462 | Input/Output: [[10 6 4 7 3 2 5 6 2 7 2 1 1 5 4 1 2 7 2] 96]
Test Case: 463 | Input/Output: [[10 6 4 10 6 1 2 6 2 5 9 0 3 5 5 3 10 8 8] 130]
Test Case: 464 | Input/Output: [[10 7 0 7 2 3 2 5 5 5 3 2 8 0 2 7 2 4 0] 86]
Test Case: 465 | Input/Output: [[10 7 0 9 0 0 4 4 6 6 4 7 0 9 0 8 1 1 2] 98]
Test Case: 466 | Input/Output: [[10 7 1 1 5 1 9 10 7 2 8 2 5 0 3 3 3 7 10] 126]
Test Case: 467 | Input/Output: [[10 8 0 6 4 3 0 7 2 0 8 3 1 6 4 9 0 1 5] 97]
Test Case: 468 | Input/Output: [[10 8 1 6 0 0 6 2 7 0 9 9 1 4 0 4 2 7 0] 89]
Test Case: 469 | Input/Output: [[10 8 2 4 1 1 7 5 0 0 3 6 2 1 0 5 0 0 4] 73]
Test Case: 470 | Input/Output: [[10 9 0 1 6 10 3 1 8 1 7 1 1 3 4 2 10 4 7] 101]
Test Case: 471 | Input/Output: [[10 9 0 9 0 4 1 8 1 0 3 3 6 0 0 0 9 1 5] 78]
Test Case: 472 | Input/Output: [[10 9 1 0 7 8 2 3 5 8 2 1 9 1 8 8 0 6 3] 106]
Test Case: 473 | Input/Output: [[10 9 1 4 4 5 1 4 0 7 3 1 3 2 6 9 1 0 6] 91]
Test Case: 474 | Input/Output: [[10 10 0 1 8 2 6 0 4 1 3 7 5 1 8 1 10 5 9] 113]
Test Case: 475 | Input/Output: [[10 10 0 4 8 2 0 5 0 5 8 0 5 1 8 1 9 1 1] 92]
Test Case: 476 | Input/Output: [[10 10 7 0 8 1 0 3 2 6 0 0 7 1 7 0 0 10 5] 101]
Test Case: 477 | Input/Output: [[0 0 6 1 6 1 0 4 0 3 7 1 5 1 10 4 1 1 9 2] 67]
Test Case: 478 | Input/Output: [[0 0 9 1 2 3 1 4 4 2 0 8 6 3 9 1 2 4 2 6] 71]
Test Case: 479 | Input/Output: [[0 0 9 1 8 0 7 2 3 5 7 0 8 2 9 1 9 0 3 3] 103]
Test Case: 480 | Input/Output: [[0 0 9 1 10 9 0 8 0 3 1 7 0 9 0 7 3 1 9 8] 105]
Test Case: 481 | Input/Output: [[0 1 0 6 2 7 2 5 3 0 8 2 4 5 2 4 6 2 1 5] 69]
Test Case: 482 | Input/Output: [[0 1 4 2 3 2 8 1 6 3 9 0 2 6 4 1 7 1 9 0] 69]
Test Case: 483 | Input/Output: [[0 2 3 7 8 1 6 1 2 3 3 3 8 0 9 0 2 0 0 0] 66]
Test Case: 484 | Input/Output: [[0 2 9 1 8 1 3 6 3 2 0 10 6 1 5 1 2 4 5 1] 84]
Test Case: 485 | Input/Output: [[0 3 2 2 1 2 8 0 8 2 4 0 8 2 6 0 7 0 0 6] 71]
Test Case: 486 | Input/Output: [[0 3 6 1 4 2 6 2 1 6 4 3 5 1 1 5 6 3 2 5] 66]
Test Case: 487 | Input/Output: [[0 3 6 1 8 1 8 2 5 1 3 6 4 3 9 1 0 5 0 7] 78]
Test Case: 488 | Input/Output: [[0 4 0 5 8 0 9 0 10 6 4 3 2 9 0 0 5 8 2 5] 93]
Test Case: 489 | Input/Output: [[0 4 1 2 8 2 0 1 0 5 2 7 6 2 2 4 5 2 2 2] 57]
Test Case: 490 | Input/Output: [[0 4 1 9 6 2 8 0 2 2 3 7 2 2 9 0 9 1 8 0] 91]
Test Case: 491 | Input/Output: [[0 4 6 1 0 2 3 2 4 0 0 5 9 0 5 0 4 4 3 0] 52]
Test Case: 492 | Input/Output: [[0 5 9 1 8 1 5 5 0 7 2 8 2 7 4 0 0 5 0 0] 79]
Test Case: 493 | Input/Output: [[0 6 1 7 7 0 8 2 8 1 5 0 2 2 3 1 9 0 3 6] 79]
Test Case: 494 | Input/Output: [[0 6 1 9 7 2 5 0 10 3 1 7 1 8 1 6 1 3 7 0] 89]
Test Case: 495 | Input/Output: [[0 6 3 0 5 1 7 2 3 3 3 7 2 4 10 9 1 9 1 4] 101]
Test Case: 496 | Input/Output: [[0 6 6 2 5 5 0 5 8 1 7 1 5 2 1 8 2 8 2 5] 81]
Test Case: 497 | Input/Output: [[0 6 8 1 9 1 6 2 3 5 5 3 0 7 8 1 5 1 7 2] 86]
Test Case: 498 | Input/Output: [[0 6 9 1 1 0 1 9 5 1 7 1 6 0 6 1 6 0 2 0] 68]
Test Case: 499 | Input/Output: [[0 7 1 2 2 0 9 1 9 1 7 3 1 9 2 4 6 0 0 3] 86]
Test Case: 500 | Input/Output: [[0 8 1 6 7 2 2 2 8 1 7 3 9 0 6 2 0 6 8 1] 88]
Test Case: 501 | Input/Output: [[0 8 5 4 5 2 2 0 0 8 5 1 9 0 5 1 1 8 1 0] 65]
Test Case: 502 | Input/Output: [[0 9 0 6 5 0 4 4 9 0 4 6 2 2 7 3 4 3 9 0] 83]
Test Case: 503 | Input/Output: [[0 9 0 10 9 0 1 5 2 0 6 4 7 2 6 3 6 3 2 0] 91]
Test Case: 504 | Input/Output: [[0 9 3 7 7 0 5 4 8 1 4 3 2 0 10 4 4 8 2 1] 97]
Test Case: 505 | Input/Output: [[0 10 3 7 7 3 0 7 6 0 7 2 1 0 6 4 8 2 7 1] 106]
Test Case: 506 | Input/Output: [[0 10 7 3 9 1 7 3 5 5 3 3 2 5 1 7 0 0 7 1] 110]
Test Case: 507 | Input/Output: [[1 0 4 1 0 6 0 8 0 3 4 3 0 2 2 7 6 0 7 1] 55]
Test Case: 508 | Input/Output: [[1 0 5 4 9 0 3 3 9 0 2 6 8 1 1 6 0 9 8 1] 76]
Test Case: 509 | Input/Output: [[1 0 8 2 6 2 5 2 4 0 0 8 9 1 7 1 2 0 5 4] 80]
Test Case: 510 | Input/Output: [[1 1 0 7 2 4 5 1 2 0 2 3 8 0 5 3 10 10 5 5] 89]
Test Case: 511 | Input/Output: [[1 1 4 4 3 6 2 5 6 2 5 2 5 5 5 0 3 3 5 1] 73]
Test Case: 512 | Input/Output: [[1 1 6 2 9 0 1 8 1 0 4 4 4 0 2 0 10 10 8 9] 98]
Test Case: 513 | Input/Output: [[1 1 7 1 8 0 4 4 0 9 1 5 3 1 6 2 4 0 1 5] 63]
Test Case: 514 | Input/Output: [[1 1 10 4 4 0 2 1 2 4 4 1 0 7 3 1 6 9 1 1] 71]
Test Case: 515 | Input/Output: [[1 2 0 6 8 2 4 5 1 1 6 4 9 1 8 1 0 9 4 4] 97]
Test Case: 516 | Input/Output: [[1 2 3 1 0 4 6 4 9 0 1 6 8 1 1 2 4 6 5 0] 78]
Test Case: 517 | Input/Output: [[1 2 3 1 2 0 0 1 4 2 4 1 7 0 6 2 4 0 8 1] 49]
Test Case: 518 | Input/Output: [[1 2 3 4 8 1 7 0 3 4 9 0 5 4 8 0 2 4 8 0] 73]
Test Case: 519 | Input/Output: [[1 2 6 3 3 6 5 4 4 0 10 3 5 1 3 9 1 10 2 1] 97]
Test Case: 520 | Input/Output: [[1 3 0 7 0 4 8 2 1 1 7 0 1 5 9 0 0 7 8 0] 65]
Test Case: 521 | Input/Output: [[1 3 4 1 5 4 2 8 8 1 3 4 9 1 0 0 8 1 3 6] 80]
Test Case: 522 | Input/Output: [[1 3 6 0 5 4 7 0 7 3 4 6 4 5 2 4 2 2 9 0] 82]
Test Case: 523 | Input/Output: [[1 3 7 0 4 0 1 0 6 1 0 7 2 0 3 3 8 1 9 0] 56]
Test Case: 524 | Input/Output: [[1 3 7 2 2 1 5 4 3 5 2 1 10 3 3 1 4 8 2 7] 80]
Test Case: 525 | Input/Output: [[1 3 7 3 5 5 4 0 6 0 9 0 8 0 10 7 0 9 1 0] 94]
Test Case: 526 | Input/Output: [[1 3 10 2 3 0 7 5 2 3 5 9 0 1 4 6 1 4 6 0] 77]
Test Case: 527 | Input/Output: [[1 5 2 1 2 2 10 0 0 5 4 9 1 1 2 2 0 10 10 2] 70]
Test Case: 528 | Input/Output: [[1 5 6 0 7 1 0 4 8 0 8 0 5 0 0 6 3 2 2 5] 63]
Test Case: 529 | Input/Output: [[1 5 6 3 2 3 0 6 1 9 2 0 4 3 4 6 1 3 7 2] 71]
Test Case: 530 | Input/Output: [[1 5 8 2 0 0 6 3 6 3 6 3 3 7 3 4 4 0 7 2] 76]
Test Case: 531 | Input/Output: [[1 6 1 5 0 4 6 4 7 2 8 1 3 0 3 5 2 0 0 9] 74]
Test Case: 532 | Input/Output: [[1 6 1 7 5 1 7 2 9 0 9 0 8 2 4 1 10 7 3 8] 105]
Test Case: 533 | Input/Output: [[1 6 4 1 5 0 1 0 0 0 10 1 2 0 9 5 3 9 1 4] 65]
Test Case: 534 | Input/Output: [[1 6 4 2 4 6 6 4 0 1 6 1 8 1 7 1 0 2 7 2] 75]
Test Case: 535 | Input/Output: [[1 6 7 1 8 2 4 2 1 2 3 4 1 9 7 3 1 2 0 3] 79]
Test Case: 536 | Input/Output: [[1 7 2 0 1 3 9 0 0 2 2 0 4 2 1 7 6 1 2 4] 54]
Test Case: 537 | Input/Output: [[1 7 2 5 4 3 8 1 2 4 4 6 2 4 0 9 0 9 7 1] 81]
Test Case: 538 | Input/Output: [[1 7 2 8 2 2 7 0 5 1 7 1 4 6 2 0 0 4 2 4] 69]
Test Case: 539 | Input/Output: [[1 7 4 3 2 2 7 3 5 4 4 6 9 0 1 2 5 2 1 8] 90]
Test Case: 540 | Input/Output: [[1 7 6 2 5 3 0 10 3 0 1 1 7 1 1 1 10 7 3 9] 91]
Test Case: 541 | Input/Output: [[1 7 8 1 0 0 6 3 7 1 3 7 5 5 4 6 0 10 6 1] 96]
Test Case: 542 | Input/Output: [[1 7 9 0 3 4 6 0 3 7 3 4 9 0 8 1 9 0 1 1] 79]
Test Case: 543 | Input/Output: [[1 8 5 4 1 9 5 4 0 10 1 4 3 6 8 2 2 7 6 2] 96]
Test Case: 544 | Input/Output: [[1 9 1 5 8 2 2 7 6 2 9 1 1 6 0 0 5 5 1 2] 78]
Test Case: 545 | Input/Output: [[1 9 5 4 5 0 0 7 0 1 1 5 8 0 0 3 4 2 0 7] 67]
Test Case: 546 | Input/Output: [[1 9 7 3 0 8 9 0 2 4 1 5 0 5 9 1 6 2 4 4] 93]
Test Case: 547 | Input/Output: [[1 9 8 0 8 1 8 1 3 5 3 6 7 0 1 4 4 4 7 2] 90]
Test Case: 548 | Input/Output: [[2 0 7 3 1 4 7 0 7 2 0 3 5 5 3 2 5 5 4 5] 78]
Test Case: 549 | Input/Output: [[2 0 9 0 9 0 0 1 4 2 1 9 4 5 6 1 0 9 4 5] 75]
Test Case: 550 | Input/Output: [[2 1 0 6 6 0 8 2 1 9 3 4 1 0 1 1 7 1 5 0] 62]
Test Case: 551 | Input/Output: [[2 1 4 1 2 1 0 10 9 0 2 2 8 2 8 1 10 10 10 10] 130]
Test Case: 552 | Input/Output: [[2 1 9 1 3 7 9 0 7 2 4 3 0 9 10 9 1 9 1 10] 128]
Test Case: 553 | Input/Output: [[2 2 3 1 1 5 1 2 4 4 9 1 9 1 5 0 9 1 6 1] 87]
Test Case: 554 | Input/Output: [[2 3 0 3 8 1 6 1 3 6 8 0 5 4 1 1 5 2 6 0] 65]
Test Case: 555 | Input/Output: [[2 3 1 2 10 0 4 9 0 0 7 7 0 6 2 6 4 4 6 5] 86]
Test Case: 556 | Input/Output: [[2 3 5 2 3 3 6 1 4 3 10 7 1 9 0 9 0 10 8 8] 102]
Test Case: 557 | Input/Output: [[2 4 1 0 3 4 7 3 6 1 2 5 4 4 7 2 5 4 5 2] 77]
Test Case: 558 | Input/Output: [[2 4 2 7 8 2 6 1 6 4 5 0 0 2 0 4 0 2 6 0] 72]
Test Case: 559 | Input/Output: [[2 4 4 4 0 1 0 0 8 1 7 3 1 8 2 1 4 1 1 3] 56]
Test Case: 560 | Input/Output: [[2 4 6 1 2 7 9 1 2 6 8 1 1 0 3 1 5 5 6 2] 80]
Test Case: 561 | Input/Output: [[2 4 7 2 4 0 0 5 7 2 5 5 4 1 9 0 7 1 6 2] 77]
Test Case: 562 | Input/Output: [[2 4 7 2 9 1 0 1 6 0 5 4 7 3 2 4 7 3 5 0] 79]
Test Case: 563 | Input/Output: [[2 4 9 1 10 0 2 7 2 3 0 5 1 7 1 7 3 9 1 0] 95]
Test Case: 564 | Input/Output: [[2 5 4 2 2 5 0 0 1 0 0 6 7 1 7 3 0 7 2 0] 54]
Test Case: 565 | Input/Output: [[2 5 7 0 7 0 7 2 4 1 1 1 0 0 7 3 9 0 1 3] 69]
Test Case: 566 | Input/Output: [[2 5 7 1 4 5 5 5 3 7 8 0 6 0 9 1 3 5 7 0] 97]
Test Case: 567 | Input/Output: [[2 6 1 7 4 2 3 7 2 7 4 3 2 2 9 0 3 1 5 3] 75]
Test Case: 568 | Input/Output: [[2 6 4 1 6 2 8 0 0 10 9 1 7 3 3 7 4 2 3 6] 107]
Test Case: 569 | Input/Output: [[2 7 4 1 7 2 1 0 9 1 1 3 1 7 6 0 2 7 0 2] 64]
Test Case: 570 | Input/Output: [[2 7 4 6 8 0 8 1 6 0 2 1 2 5 4 0 4 6 3 0] 80]
Test Case: 571 | Input/Output: [[2 7 5 5 9 0 4 6 9 0 7 2 7 1 5 5 6 0 8 0] 112]
Test Case: 572 | Input/Output: [[2 7 7 2 2 6 9 1 0 2 2 2 5 2 1 6 0 3 4 0] 63]
Test Case: 573 | Input/Output: [[2 7 9 0 3 5 1 7 6 1 9 0 7 1 2 3 7 0 3 0] 73]
Test Case: 574 | Input/Output: [[2 8 3 5 5 4 9 0 6 3 7 3 2 7 3 7 3 1 6 3] 95]
Test Case: 575 | Input/Output: [[2 8 8 0 6 2 6 0 5 2 5 4 4 4 5 2 10 6 4 0] 101]
Test Case: 576 | Input/Output: [[3 0 0 1 7 2 2 7 3 3 9 1 9 1 9 0 3 3 4 4] 89]
Test Case: 577 | Input/Output: [[3 0 3 1 6 2 1 9 9 1 4 5 2 6 6 2 1 8 4 1] 87]
Test Case: 578 | Input/Output: [[3 0 4 0 5 3 0 7 8 0 5 5 1 6 3 2 4 5 6 2] 70]
Test Case: 579 | Input/Output: [[3 0 4 1 5 0 8 1 4 3 3 5 7 1 5 3 5 0 7 2] 67]
Test Case: 580 | Input/Output: [[3 1 3 1 10 7 2 4 3 7 3 7 0 0 3 0 7 10 1 7] 95]
Test Case: 581 | Input/Output: [[3 1 3 2 7 0 9 1 6 3 4 3 6 4 8 0 7 1 9 0] 91]
Test Case: 582 | Input/Output: [[3 1 3 7 2 6 4 3 0 3 2 3 1 3 6 1 9 0 6 1] 66]
Test Case: 583 | Input/Output: [[3 1 5 4 8 1 10 6 3 7 3 2 1 1 1 5 1 10 3 4] 90]
Test Case: 584 | Input/Output: [[3 1 6 1 5 1 0 4 4 4 9 1 5 0 1 2 3 7 5 2] 74]
Test Case: 585 | Input/Output: [[3 1 7 1 1 9 10 0 3 0 10 3 3 1 3 9 0 8 2 8] 98]
Test Case: 586 | Input/Output: [[3 1 7 2 9 0 3 4 3 6 1 1 5 1 4 4 3 1 9 0] 67]
Test Case: 587 | Input/Output: [[3 1 10 8 1 7 0 7 2 2 2 9 0 3 2 1 8 8 2 8] 93]
Test Case: 588 | Input/Output: [[3 2 2 5 6 1 1 2 6 0 5 5 6 0 4 5 9 1 4 4] 81]
Test Case: 589 | Input/Output: [[3 2 4 5 2 4 5 1 4 1 6 0 5 5 8 2 2 7 9 0] 85]
Test Case: 590 | Input/Output: [[3 2 4 6 8 0 4 5 3 2 9 0 9 0 1 9 8 0 2 6] 97]
Test Case: 591 | Input/Output: [[3 2 5 1 1 9 2 8 4 4 7 1 5 5 9 1 7 1 0 2] 99]
Test Case: 592 | Input/Output: [[3 2 6 1 10 5 3 3 7 6 4 9 1 5 5 4 5 10 3 1] 125]
Test Case: 593 | Input/Output: [[3 2 6 2 9 1 7 3 8 0 7 0 1 6 0 1 0 3 2 2] 78]
Test Case: 594 | Input/Output: [[3 3 0 8 0 1 9 0 6 1 6 2 5 0 1 0 6 3 7 0] 61]
Test Case: 595 | Input/Output: [[3 3 4 4 3 0 3 2 0 2 1 7 2 7 1 3 5 5 3 5] 66]
Test Case: 596 | Input/Output: [[3 3 4 4 8 2 7 3 9 0 2 6 4 5 6 2 7 3 3 5] 105]
Test Case: 597 | Input/Output: [[3 3 4 6 6 4 10 3 0 5 4 5 0 0 4 5 2 8 2 10] 103]
Test Case: 598 | Input/Output: [[3 3 7 3 1 9 7 1 2 2 5 2 3 4 10 3 2 10 9 4] 103]
Test Case: 599 | Input/Output: [[3 4 0 6 3 7 5 4 0 4 9 1 1 2 0 10 2 0 4 4] 77]
Test Case: 600 | Input/Output: [[3 4 1 1 7 0 3 5 9 1 4 4 9 1 6 0 1 4 6 0] 79]
Test Case: 601 | Input/Output: [[3 4 6 3 2 2 4 0 5 5 0 2 1 3 5 4 5 3 3 6] 66]
Test Case: 602 | Input/Output: [[3 4 9 0 5 5 4 2 5 5 1 5 8 2 4 1 1 0 2 3] 78]
Test Case: 603 | Input/Output: [[3 5 0 0 1 1 5 4 1 2 1 8 7 2 7 0 1 8 5 0] 61]
Test Case: 604 | Input/Output: [[3 5 1 3 5 3 5 4 9 0 10 0 7 3 0 7 3 10 6 7] 108]
Test Case: 605 | Input/Output: [[3 6 5 5 0 2 7 3 2 5 4 1 6 0 9 1 1 4 4 2] 73]
Test Case: 606 | Input/Output: [[3 6 7 0 8 2 0 8 2 8 8 1 8 2 1 2 9 1 0 4] 89]
Test Case: 607 | Input/Output: [[3 6 8 1 7 0 10 8 1 9 0 8 2 4 0 2 5 10 0 8] 105]
Test Case: 608 | Input/Output: [[3 6 9 1 2 4 9 1 5 0 4 6 0 7 6 1 9 1 6 1] 94]
Test Case: 609 | Input/Output: [[3 7 1 1 5 1 9 1 6 2 2 0 2 8 3 3 5 1 2 5] 77]
Test Case: 610 | Input/Output: [[3 7 8 0 4 3 3 1 1 1 5 3 5 2 7 3 0 6 3 1] 74]
Test Case: 611 | Input/Output: [[3 7 10 6 2 2 0 6 0 4 1 9 0 3 0 6 1 0 10 0] 88]
Test Case: 612 | Input/Output: [[3 7 10 6 2 6 3 7 1 4 2 2 7 9 0 9 1 0 10 2] 109]
Test Case: 613 | Input/Output: [[4 0 1 0 9 0 5 5 2 3 9 0 4 6 9 0 6 4 0 5] 83]
Test Case: 614 | Input/Output: [[4 0 3 2 1 1 8 0 8 2 7 1 4 6 3 3 3 6 5 1] 78]
Test Case: 615 | Input/Output: [[4 0 5 1 4 4 2 6 9 1 4 4 10 9 1 4 3 9 1 7] 106]
Test Case: 616 | Input/Output: [[4 0 5 2 4 5 5 4 6 0 7 0 1 2 6 3 7 2 4 3] 70]
Test Case: 617 | Input/Output: [[4 0 6 0 8 1 2 0 3 3 7 1 6 1 8 1 9 1 4 5] 74]
Test Case: 618 | Input/Output: [[4 0 6 4 3 6 0 0 1 5 3 4 8 2 0 6 1 9 3 2] 73]
Test Case: 619 | Input/Output: [[4 1 2 2 4 3 5 5 8 0 7 3 6 0 0 6 5 4 6 3] 88]
Test Case: 620 | Input/Output: [[4 1 3 5 1 5 6 4 4 5 6 4 1 2 9 1 3 4 4 1] 81]
Test Case: 621 | Input/Output: [[4 1 5 5 5 2 6 4 4 0 8 2 5 2 7 3 10 9 1 2] 119]
Test Case: 622 | Input/Output: [[4 1 6 2 7 1 0 7 8 0 1 1 1 9 8 1 0 5 7 2] 79]
Test Case: 623 | Input/Output: [[4 1 6 4 7 0 4 6 4 0 10 5 4 2 1 6 4 7 3 8] 113]
Test Case: 624 | Input/Output: [[4 1 7 0 6 2 5 5 0 2 9 0 2 8 8 2 7 0 0 6] 89]
Test Case: 625 | Input/Output: [[4 1 7 3 10 1 2 8 0 9 0 6 0 7 1 4 0 9 1 3] 89]
Test Case: 626 | Input/Output: [[4 1 8 2 5 1 6 0 1 7 2 6 8 1 8 0 9 1 7 0] 89]
Test Case: 627 | Input/Output: [[4 2 6 0 9 0 7 0 1 8 0 4 5 5 6 0 0 6 7 2] 78]
Test Case: 628 | Input/Output: [[4 2 6 1 9 1 2 6 2 1 1 8 8 0 4 4 2 4 0 6] 73]
Test Case: 629 | Input/Output: [[4 2 6 4 1 5 1 3 6 4 4 3 7 3 2 7 2 7 1 8] 87]
Test Case: 630 | Input/Output: [[4 2 7 0 1 9 10 5 4 6 2 1 6 0 2 2 0 3 7 0] 90]
Test Case: 631 | Input/Output: [[4 2 7 0 3 1 6 3 6 3 6 4 4 2 9 0 0 7 3 3] 77]
Test Case: 632 | Input/Output: [[4 3 9 0 3 6 4 5 4 4 3 7 6 1 9 1 7 1 4 0] 94]
Test Case: 633 | Input/Output: [[4 3 9 0 7 0 7 0 7 2 8 1 8 0 1 8 8 1 2 6] 82]
Test Case: 634 | Input/Output: [[4 3 9 1 0 0 3 3 4 6 6 4 10 6 4 5 5 9 1 7] 130]
Test Case: 635 | Input/Output: [[4 4 0 6 8 1 3 1 1 9 4 4 0 8 5 4 8 0 0 4] 78]
Test Case: 636 | Input/Output: [[4 4 0 7 4 0 5 5 6 1 8 0 3 7 8 0 3 3 9 0] 91]
Test Case: 637 | Input/Output: [[4 4 1 7 3 3 6 2 7 0 3 7 1 3 2 0 3 6 2 3] 68]
Test Case: 638 | Input/Output: [[4 4 2 1 8 0 7 0 10 6 1 7 1 8 2 8 1 9 1 5] 100]
Test Case: 639 | Input/Output: [[4 4 2 4 8 2 4 5 0 5 3 0 6 2 3 3 5 2 4 2] 72]
Test Case: 640 | Input/Output: [[4 4 4 1 1 6 7 2 8 2 0 2 0 10 9 0 3 0 0 9] 81]
Test Case: 641 | Input/Output: [[4 4 10 4 0 7 0 5 5 4 3 0 2 4 6 8 0 0 10 9] 101]
Test Case: 642 | Input/Output: [[4 5 0 4 0 2 9 0 7 2 8 2 0 2 3 4 2 8 4 3] 73]
Test Case: 643 | Input/Output: [[4 5 1 0 5 4 10 4 3 2 5 7 2 8 1 7 3 4 6 2] 94]
Test Case: 644 | Input/Output: [[4 5 2 6 8 0 3 6 7 0 9 1 1 7 5 2 6 0 8 0] 81]
Test Case: 645 | Input/Output: [[4 5 3 3 3 3 8 2 0 7 7 0 3 6 6 3 2 0 0 4] 69]
Test Case: 646 | Input/Output: [[4 5 3 4 0 7 8 0 4 1 9 0 1 1 8 2 8 2 7 2] 91]
Test Case: 647 | Input/Output: [[4 5 4 1 0 5 10 4 2 0 6 6 1 1 9 0 0 5 5 1] 75]
Test Case: 648 | Input/Output: [[4 5 5 4 2 5 2 4 8 0 10 8 2 5 3 4 2 10 4 2] 104]
Test Case: 649 | Input/Output: [[4 5 7 1 9 0 8 2 9 0 1 5 4 1 2 7 5 4 3 6] 92]
Test Case: 650 | Input/Output: [[4 6 2 0 9 1 1 2 4 1 0 10 6 4 6 1 0 2 5 3] 82]
Test Case: 651 | Input/Output: [[4 6 3 2 5 1 5 4 9 0 3 7 10 6 3 6 2 9 1 9] 117]
Test Case: 652 | Input/Output: [[4 6 4 4 7 2 9 1 3 3 2 5 0 1 8 1 10 9 1 9] 106]
Test Case: 653 | Input/Output: [[4 6 5 4 0 2 0 8 0 9 5 1 1 2 4 6 6 4 4 2] 88]
Test Case: 654 | Input/Output: [[4 6 6 3 9 1 0 6 7 0 3 2 1 1 1 1 1 7 2 4] 71]
Test Case: 655 | Input/Output: [[4 6 8 0 3 1 5 1 9 0 5 5 3 7 5 5 5 2 2 6] 103]
Test Case: 656 | Input/Output: [[4 6 8 0 9 0 2 7 7 2 2 8 4 1 8 0 4 4 6 3] 97]
Test Case: 657 | Input/Output: [[4 6 9 0 0 7 6 2 6 0 4 3 8 0 2 6 1 9 8 1] 99]
Test Case: 658 | Input/Output: [[4 6 9 0 1 1 0 3 1 2 0 0 5 3 4 4 3 0 7 0] 62]
Test Case: 659 | Input/Output: [[5 0 0 2 2 4 9 1 6 2 10 3 1 6 2 2 8 9 1 0] 92]
Test Case: 660 | Input/Output: [[5 0 0 3 6 1 4 2 3 0 8 1 8 2 1 6 9 1 7 0] 75]
Test Case: 661 | Input/Output: [[5 0 0 8 3 4 1 6 5 2 7 0 9 1 6 3 3 0 4 4] 77]
Test Case: 662 | Input/Output: [[5 0 1 5 5 0 1 2 10 7 1 4 3 1 9 8 0 10 3 3] 94]
Test Case: 663 | Input/Output: [[5 0 1 9 7 3 3 1 8 2 2 4 1 9 9 0 1 1 6 0] 93]
Test Case: 664 | Input/Output: [[5 0 2 5 3 7 8 1 6 2 2 7 0 7 7 0 10 4 6 4] 104]
Test Case: 665 | Input/Output: [[5 0 3 1 6 1 9 1 3 0 2 7 8 0 5 0 8 1 5 4] 72]
Test Case: 666 | Input/Output: [[5 0 4 4 0 7 5 5 8 2 6 2 8 0 5 3 9 0 5 1] 93]
Test Case: 667 | Input/Output: [[5 1 0 1 4 5 6 4 6 4 7 1 3 3 4 4 5 2 9 0] 87]
Test Case: 668 | Input/Output: [[5 1 1 4 5 0 0 3 1 1 5 3 0 4 10 7 0 10 10 2] 79]
Test Case: 669 | Input/Output: [[5 1 1 7 2 2 5 0 4 4 9 0 5 0 3 7 2 0 8 1] 68]
Test Case: 670 | Input/Output: [[5 1 2 0 3 3 2 1 1 6 0 7 8 1 2 0 3 1 8 0] 54]
Test Case: 671 | Input/Output: [[5 1 2 5 2 8 0 4 7 3 7 3 6 2 5 0 2 2 0 8] 85]
Test Case: 672 | Input/Output: [[5 1 3 3 8 0 7 2 1 7 6 2 4 6 7 2 1 0 6 0] 78]
Test Case: 673 | Input/Output: [[5 1 3 3 9 1 0 2 0 2 3 1 6 1 0 6 9 0 4 4] 60]
Test Case: 674 | Input/Output: [[5 2 2 6 6 3 1 1 8 0 3 4 2 2 7 2 6 2 0 0] 62]
Test Case: 675 | Input/Output: [[5 2 3 2 0 2 7 1 7 0 0 4 6 4 5 5 8 2 2 2] 82]
Test Case: 676 | Input/Output: [[5 2 6 4 1 1 4 3 4 1 5 5 5 2 6 4 4 5 3 1] 81]
Test Case: 677 | Input/Output: [[5 2 8 0 4 6 10 9 0 3 7 4 3 7 2 3 7 9 1 1] 123]
Test Case: 678 | Input/Output: [[5 2 8 0 9 1 4 0 3 0 3 0 1 1 8 0 5 2 4 3] 63]
Test Case: 679 | Input/Output: [[5 2 9 0 9 0 5 5 10 4 0 9 0 0 0 3 0 6 4 0] 85]
Test Case: 680 | Input/Output: [[5 3 2 0 3 5 8 1 8 0 3 6 1 5 1 3 9 1 2 1] 69]
Test Case: 681 | Input/Output: [[5 3 2 2 3 6 5 4 2 2 0 2 1 8 1 5 9 1 3 4] 71]
Test Case: 682 | Input/Output: [[5 3 5 5 1 7 5 0 5 1 9 0 0 0 2 5 3 4 0 5] 66]
Test Case: 683 | Input/Output: [[5 3 6 1 9 0 1 4 2 1 9 1 7 3 6 3 0 5 1 4] 84]
Test Case: 684 | Input/Output: [[5 3 6 4 0 7 7 3 0 2 2 3 2 4 8 0 5 1 2 7] 71]
Test Case: 685 | Input/Output: [[5 3 7 1 1 9 2 7 5 3 8 0 0 3 1 8 8 2 7 0] 89]
Test Case: 686 | Input/Output: [[5 3 8 1 7 1 2 0 8 2 7 0 8 2 6 3 3 6 6 1] 92]
Test Case: 687 | Input/Output: [[5 4 0 9 8 1 9 1 5 2 1 3 3 6 2 3 9 0 1 5] 82]
Test Case: 688 | Input/Output: [[5 4 1 0 6 4 2 1 10 9 0 9 0 2 0 3 0 9 1 9] 86]
Test Case: 689 | Input/Output: [[5 4 4 1 7 0 0 6 7 2 2 3 4 4 3 0 2 6 1 4] 65]
Test Case: 690 | Input/Output: [[5 4 4 1 7 0 3 4 8 0 6 0 9 1 5 5 5 4 0 1] 82]
Test Case: 691 | Input/Output: [[5 4 5 1 7 1 9 0 1 6 0 3 8 2 8 0 10 8 2 2] 100]
Test Case: 692 | Input/Output: [[5 5 0 0 1 0 1 5 2 7 7 0 3 3 6 2 9 1 4 1] 66]
Test Case: 693 | Input/Output: [[5 5 2 1 6 0 7 3 6 1 5 3 5 5 3 4 0 1 6 3] 82]
Test Case: 694 | Input/Output: [[5 5 2 3 8 2 0 0 2 4 3 7 8 2 9 0 8 2 5 4] 103]
Test Case: 695 | Input/Output: [[5 5 4 1 6 4 3 2 8 0 1 1 5 3 4 1 2 1 7 2] 72]
Test Case: 696 | Input/Output: [[5 5 6 2 2 4 2 2 0 4 3 0 8 0 3 7 10 6 4 5] 104]
Test Case: 697 | Input/Output: [[5 5 6 2 3 0 6 2 3 1 8 0 7 2 7 3 7 0 6 0] 86]
Test Case: 698 | Input/Output: [[5 5 7 3 4 5 0 7 10 4 2 3 2 3 2 9 0 4 6 1] 99]
Test Case: 699 | Input/Output: [[6 0 1 3 0 4 3 0 4 2 10 2 4 7 0 3 1 4 6 9] 75]
Test Case: 700 | Input/Output: [[6 0 1 5 7 0 4 1 5 2 7 2 9 1 4 0 10 6 4 1] 89]
Test Case: 701 | Input/Output: [[6 0 3 0 3 6 1 2 3 5 0 10 9 0 9 0 1 8 6 1] 82]
Test Case: 702 | Input/Output: [[6 0 3 2 8 1 10 6 2 0 4 0 9 4 4 4 6 4 6 7] 98]
Test Case: 703 | Input/Output: [[6 0 4 2 1 2 2 1 2 0 3 6 5 2 4 3 2 7 5 4] 61]
Test Case: 704 | Input/Output: [[6 0 4 6 3 1 6 4 0 4 4 6 0 4 0 2 1 1 2 2] 59]
Test Case: 705 | Input/Output: [[6 0 5 2 7 0 9 1 9 1 8 0 8 1 5 2 5 3 4 2] 95]
Test Case: 706 | Input/Output: [[6 0 8 2 3 0 3 5 1 9 3 4 3 0 2 8 8 0 2 6] 87]
Test Case: 707 | Input/Output: [[6 1 0 0 1 3 5 1 2 4 1 9 7 0 3 4 7 1 6 1] 69]
Test Case: 708 | Input/Output: [[6 1 0 2 8 2 4 0 2 6 6 0 1 4 8 1 5 2 8 1] 71]
Test Case: 709 | Input/Output: [[6 1 1 1 1 0 4 0 8 0 0 0 0 1 2 0 3 3 3 5] 39]
Test Case: 710 | Input/Output: [[6 1 3 4 0 7 1 7 6 1 5 1 5 1 6 2 2 8 1 5] 73]
Test Case: 711 | Input/Output: [[6 1 4 6 1 3 4 6 0 4 2 6 5 0 9 0 8 0 1 7] 74]
Test Case: 712 | Input/Output: [[6 1 5 0 0 1 4 6 5 2 1 4 9 1 5 2 4 5 3 6] 80]
Test Case: 713 | Input/Output: [[6 1 5 1 8 1 1 1 9 0 5 5 4 3 3 3 4 4 5 3] 76]
Test Case: 714 | Input/Output: [[6 1 6 1 1 0 2 0 0 3 7 2 4 5 0 2 2 7 8 1] 58]
Test Case: 715 | Input/Output: [[6 1 7 1 5 1 5 2 10 8 0 7 2 8 0 1 9 4 6 7] 102]
Test Case: 716 | Input/Output: [[6 1 7 2 1 0 0 10 5 4 5 5 5 2 4 5 9 1 3 5] 93]
Test Case: 717 | Input/Output: [[6 1 10 8 0 3 4 4 1 2 4 3 1 5 2 6 2 10 4 4] 88]
Test Case: 718 | Input/Output: [[6 2 0 9 7 0 9 1 1 4 4 3 9 0 1 4 3 3 6 1] 74]
Test Case: 719 | Input/Output: [[6 2 1 6 3 5 7 2 1 5 0 1 4 5 6 2 2 3 6 2] 69]
Test Case: 720 | Input/Output: [[6 2 1 7 9 0 3 5 9 0 5 0 8 1 4 1 5 2 2 6] 76]
Test Case: 721 | Input/Output: [[6 2 3 2 8 0 0 8 5 3 1 7 6 2 7 1 6 3 9 0] 79]
Test Case: 722 | Input/Output: [[6 2 3 5 9 0 1 5 1 6 3 0 9 1 1 7 0 1 7 0] 68]
Test Case: 723 | Input/Output: [[6 2 5 2 5 5 1 7 8 1 1 8 2 4 9 0 6 1 6 1] 81]
Test Case: 724 | Input/Output: [[6 2 7 0 0 1 2 7 4 0 6 1 3 0 3 1 5 1 4 5] 58]
Test Case: 725 | Input/Output: [[6 2 8 2 5 1 0 5 10 3 6 0 4 0 10 0 2 9 1 7] 95]
Test Case: 726 | Input/Output: [[6 3 0 4 3 4 2 8 6 2 9 0 4 6 3 1 5 3 5 4] 87]
Test Case: 727 | Input/Output: [[6 3 0 7 1 8 6 0 0 2 0 7 4 4 8 2 1 8 5 3] 76]
Test Case: 728 | Input/Output: [[6 3 1 2 7 3 8 0 9 0 6 0 3 5 1 2 4 5 2 2] 77]
Test Case: 729 | Input/Output: [[6 3 4 1 6 0 1 4 4 3 8 0 1 1 10 1 1 3 7 4] 70]
Test Case: 730 | Input/Output: [[6 3 4 1 9 1 3 3 4 3 8 2 1 2 7 0 6 3 4 2] 76]
Test Case: 731 | Input/Output: [[6 3 6 1 2 8 8 2 6 0 1 2 0 8 8 2 0 0 4 3] 84]
Test Case: 732 | Input/Output: [[6 3 7 2 1 2 0 0 0 0 9 1 0 2 0 1 5 4 0 7] 50]
Test Case: 733 | Input/Output: [[6 4 2 6 5 0 1 8 1 0 4 6 0 10 6 0 4 2 1 2] 76]
Test Case: 734 | Input/Output: [[6 4 4 1 0 1 9 0 1 5 7 0 6 2 5 3 1 6 4 2] 71]
Test Case: 735 | Input/Output: [[6 4 4 2 7 0 3 6 5 2 7 2 7 3 5 0 3 7 0 6] 88]
Test Case: 736 | Input/Output: [[6 4 4 6 3 0 0 1 7 1 6 3 1 4 0 0 4 0 9 0] 66]
Test Case: 737 | Input/Output: [[6 4 7 3 4 1 8 1 5 2 1 0 8 0 7 1 6 0 4 3] 82]
Test Case: 738 | Input/Output: [[7 0 0 4 1 3 10 6 4 1 9 7 1 1 9 3 3 8 2 4] 104]
Test Case: 739 | Input/Output: [[7 0 3 4 4 4 0 9 2 1 1 4 0 1 5 3 3 3 5 2] 61]
Test Case: 740 | Input/Output: [[7 0 3 4 4 6 6 3 4 4 8 1 2 3 9 1 8 2 3 2] 97]
Test Case: 741 | Input/Output: [[7 0 3 5 1 0 0 8 9 0 3 6 2 6 2 2 8 1 6 3] 72]
Test Case: 742 | Input/Output: [[7 0 7 2 0 8 9 1 5 5 3 5 7 2 4 3 10 9 1 0] 106]
Test Case: 743 | Input/Output: [[7 0 8 1 5 1 1 6 3 2 8 1 3 4 4 5 7 3 2 3] 76]
Test Case: 744 | Input/Output: [[7 0 9 0 5 1 4 3 3 4 5 4 3 1 9 1 3 7 7 2] 88]
Test Case: 745 | Input/Output: [[7 0 9 1 3 5 1 7 5 4 3 3 8 1 2 6 7 3 7 2] 94]
Test Case: 746 | Input/Output: [[7 1 0 3 4 0 4 6 6 2 0 0 5 3 2 4 7 1 9 0] 70]
Test Case: 747 | Input/Output: [[7 1 0 3 4 6 6 3 4 5 0 10 1 7 3 1 6 3 8 0] 85]
Test Case: 748 | Input/Output: [[7 1 0 8 5 5 4 0 8 0 0 9 10 4 3 5 5 10 4 9] 118]
Test Case: 749 | Input/Output: [[7 2 0 1 8 2 6 4 2 6 3 1 5 4 2 0 6 4 7 2] 87]
Test Case: 750 | Input/Output: [[7 2 0 5 2 7 0 4 8 1 8 1 9 1 3 4 8 0 6 2] 81]
Test Case: 751 | Input/Output: [[7 2 0 10 10 0 1 1 1 0 5 9 1 9 0 4 2 7 3 10] 102]
Test Case: 752 | Input/Output: [[7 2 1 8 6 3 6 1 2 4 3 5 7 2 1 5 8 2 4 5] 86]
Test Case: 753 | Input/Output: [[7 2 1 8 7 2 1 2 9 1 2 5 8 0 2 2 9 0 1 6] 77]
Test Case: 754 | Input/Output: [[7 2 2 2 8 1 9 1 5 5 9 0 7 0 6 4 6 4 7 2] 114]
Test Case: 755 | Input/Output: [[7 2 2 4 4 4 1 2 9 1 4 5 0 9 7 0 3 0 7 1] 76]
Test Case: 756 | Input/Output: [[7 2 2 8 9 1 7 2 1 9 7 3 6 4 3 3 3 3 2 0] 114]
Test Case: 757 | Input/Output: [[7 2 4 3 0 7 0 6 0 9 8 0 8 1 7 3 9 0 2 1] 86]
Test Case: 758 | Input/Output: [[7 2 5 2 9 0 7 2 9 1 8 1 6 4 2 4 10 5 5 4] 113]
Test Case: 759 | Input/Output: [[7 2 5 3 4 3 4 3 9 1 5 0 2 1 3 7 3 6 9 0] 85]
Test Case: 760 | Input/Output: [[7 2 6 0 10 8 2 9 1 0 9 6 0 0 2 9 0 10 10 2] 112]
Test Case: 761 | Input/Output: [[7 2 9 0 3 7 2 2 8 2 0 1 10 0 7 2 3 10 8 0] 92]
Test Case: 762 | Input/Output: [[7 3 1 6 3 4 0 6 1 3 3 5 1 5 9 1 7 1 6 0] 80]
Test Case: 763 | Input/Output: [[7 3 1 6 8 1 5 5 1 4 2 4 5 4 7 3 6 3 4 1] 88]
Test Case: 764 | Input/Output: [[7 3 1 6 9 0 0 9 6 3 8 1 2 5 8 2 4 6 2 5] 94]
Test Case: 765 | Input/Output: [[7 3 2 0 3 0 7 0 3 7 7 2 5 2 0 2 5 0 5 2] 71]
Test Case: 766 | Input/Output: [[7 3 2 6 6 2 8 0 5 2 6 2 7 2 8 0 4 1 5 0] 78]
Test Case: 767 | Input/Output: [[7 3 3 0 3 5 4 4 0 0 1 5 8 2 0 0 0 2 4 4] 58]
Test Case: 768 | Input/Output: [[7 3 3 0 7 2 0 5 0 2 9 1 6 1 9 1 0 7 4 2] 78]
Test Case: 769 | Input/Output: [[7 3 4 3 8 2 7 3 8 0 1 4 1 3 4 6 1 1 1 6] 93]
Test Case: 770 | Input/Output: [[7 3 6 1 2 5 7 2 4 1 9 1 0 2 3 5 8 1 4 3] 80]
Test Case: 771 | Input/Output: [[7 3 6 1 7 2 2 4 8 0 7 0 8 1 1 9 5 3 1 8] 94]
Test Case: 772 | Input/Output: [[7 3 6 2 9 0 8 0 5 5 8 1 1 3 6 2 9 1 5 1] 101]
Test Case: 773 | Input/Output: [[7 3 7 2 2 5 8 0 1 6 1 0 2 7 5 3 5 2 4 1] 78]
Test Case: 774 | Input/Output: [[7 3 8 0 7 0 0 3 2 4 1 7 3 7 9 0 7 0 7 1] 93]
Test Case: 775 | Input/Output: [[7 3 8 1 5 4 7 2 4 6 0 4 6 4 3 4 7 3 9 0] 107]
Test Case: 776 | Input/Output: [[7 3 8 2 2 0 8 0 1 5 2 1 7 2 3 3 0 6 9 0] 79]
Test Case: 777 | Input/Output: [[8 0 0 5 2 8 1 6 2 7 2 3 3 3 6 4 1 2 1 8] 74]
Test Case: 778 | Input/Output: [[8 0 0 5 4 6 1 5 1 3 0 6 9 0 9 0 7 0 8 1] 74]
Test Case: 779 | Input/Output: [[8 0 0 6 2 3 6 0 4 4 3 6 1 2 9 1 7 2 4 1] 76]
Test Case: 780 | Input/Output: [[8 0 2 1 0 8 4 0 8 1 3 0 1 3 8 1 4 2 2 3] 59]
Test Case: 781 | Input/Output: [[8 0 2 5 9 1 5 3 6 0 3 6 6 2 9 0 5 3 4 5] 87]
Test Case: 782 | Input/Output: [[8 0 3 6 2 4 7 0 9 1 8 0 3 4 3 0 5 3 4 2] 80]
Test Case: 783 | Input/Output: [[8 0 4 3 4 1 0 2 0 2 1 2 5 2 5 3 0 10 5 2] 64]
Test Case: 784 | Input/Output: [[8 0 4 5 1 4 10 2 1 4 4 3 3 6 0 2 1 10 5 1] 77]
Test Case: 785 | Input/Output: [[8 0 4 6 3 1 0 5 4 2 0 5 7 2 4 1 1 9 8 1] 82]
Test Case: 786 | Input/Output: [[8 0 5 3 9 0 1 6 7 3 4 2 1 6 7 3 7 3 4 2] 96]
Test Case: 787 | Input/Output: [[8 0 6 0 8 0 1 0 2 3 9 1 2 8 9 1 3 6 5 1] 87]
Test Case: 788 | Input/Output: [[8 0 7 2 6 2 9 1 2 7 6 2 5 1 3 5 4 6 6 1] 91]
Test Case: 789 | Input/Output: [[8 0 8 1 10 2 2 0 8 2 2 0 2 7 0 1 8 10 8 1] 84]
Test Case: 790 | Input/Output: [[8 0 8 2 9 0 9 0 1 0 10 8 0 7 1 2 3 5 5 0] 95]
Test Case: 791 | Input/Output: [[8 0 9 1 6 3 4 2 3 3 2 8 8 0 0 9 7 0 8 0] 95]
Test Case: 792 | Input/Output: [[8 1 1 0 3 7 9 0 8 0 7 0 10 3 4 9 1 8 2 9] 114]
Test Case: 793 | Input/Output: [[8 1 2 7 1 8 3 5 5 0 0 10 1 7 1 4 1 1 2 0] 68]
Test Case: 794 | Input/Output: [[8 1 2 8 7 2 6 3 2 4 3 6 6 4 8 2 2 8 8 1] 116]
Test Case: 795 | Input/Output: [[8 1 3 2 7 3 3 7 3 5 7 2 6 3 8 0 6 2 0 6] 88]
Test Case: 796 | Input/Output: [[8 1 3 5 0 1 6 3 5 4 3 3 4 4 2 0 6 0 5 0] 63]
Test Case: 797 | Input/Output: [[8 1 6 0 2 3 10 2 2 5 3 1 5 3 7 8 1 6 4 6] 95]
Test Case: 798 | Input/Output: [[8 1 6 0 2 7 3 3 9 0 8 2 8 1 3 5 0 8 5 4] 91]
Test Case: 799 | Input/Output: [[8 1 6 3 7 2 4 1 1 3 0 3 9 1 8 1 4 0 4 0] 74]
Test Case: 800 | Input/Output: [[8 1 7 0 9 1 8 0 6 1 4 5 6 2 7 1 3 4 6 2] 89]
Test Case: 801 | Input/Output: [[8 1 8 2 4 6 8 2 2 8 3 6 6 4 2 4 4 1 1 2] 101]
Test Case: 802 | Input/Output: [[8 1 8 2 8 2 8 2 9 0 5 3 6 2 0 5 2 4 1 8] 109]
Test Case: 803 | Input/Output: [[8 1 9 0 7 3 9 0 4 1 5 3 8 2 8 0 0 2 7 2] 96]
Test Case: 804 | Input/Output: [[8 2 0 0 10 9 1 2 2 8 0 9 1 4 6 7 0 8 2 1] 103]
Test Case: 805 | Input/Output: [[8 2 0 3 6 2 1 7 1 3 3 3 6 0 5 2 9 0 4 4] 69]
Test Case: 806 | Input/Output: [[8 2 0 8 1 3 1 5 0 10 1 4 3 0 8 2 6 0 3 5] 77]
Test Case: 807 | Input/Output: [[8 2 1 1 8 1 3 2 4 6 3 3 4 1 2 4 2 1 7 1] 68]
Test Case: 808 | Input/Output: [[8 2 2 4 1 3 2 8 2 0 9 1 8 2 10 4 1 5 5 7] 111]
Test Case: 809 | Input/Output: [[8 2 3 1 7 2 5 2 4 1 7 2 8 2 4 4 5 4 0 6] 84]
Test Case: 810 | Input/Output: [[8 2 3 4 2 8 2 1 5 5 4 0 8 2 1 3 3 1 9 0] 81]
Test Case: 811 | Input/Output: [[8 2 4 3 0 4 4 2 5 0 1 0 3 4 5 5 5 1 1 2] 68]
Test Case: 812 | Input/Output: [[8 2 6 2 8 2 3 4 9 0 6 0 0 5 6 0 5 4 9 0] 88]
Test Case: 813 | Input/Output: [[8 2 6 4 7 0 9 0 4 1 10 4 6 0 8 6 1 9 1 2] 111]
Test Case: 814 | Input/Output: [[8 2 7 0 5 0 5 3 3 5 2 7 8 2 4 6 6 0 3 4] 97]
Test Case: 815 | Input/Output: [[8 2 8 0 9 0 2 3 1 2 8 0 7 1 9 0 7 3 2 6] 88]
Test Case: 816 | Input/Output: [[8 2 8 1 9 1 7 3 5 0 4 5 3 3 0 8 5 3 4 1] 100]
Test Case: 817 | Input/Output: [[8 2 8 2 6 4 7 1 8 1 6 0 3 4 9 0 0 7 3 6] 106]
Test Case: 818 | Input/Output: [[8 2 9 0 5 5 8 2 6 4 3 4 0 10 3 4 5 2 7 0] 116]
Test Case: 819 | Input/Output: [[9 0 0 0 9 0 8 0 0 4 9 0 8 0 7 0 10 6 4 6] 90]
Test Case: 820 | Input/Output: [[9 0 0 8 9 1 3 5 5 5 8 1 2 6 1 1 0 8 5 4] 92]
Test Case: 821 | Input/Output: [[9 0 1 0 7 2 7 1 6 2 10 9 1 8 1 8 2 8 2 9] 119]
Test Case: 822 | Input/Output: [[9 0 1 2 9 0 7 2 3 6 1 9 4 4 3 2 6 4 1 4] 82]
Test Case: 823 | Input/Output: [[9 0 1 7 4 2 4 2 3 0 10 1 5 0 4 8 1 7 3 1] 78]
Test Case: 824 | Input/Output: [[9 0 3 2 2 2 0 0 3 0 8 0 2 6 0 10 1 3 6 2] 60]
Test Case: 825 | Input/Output: [[9 0 3 3 7 1 5 3 8 1 9 0 8 1 5 1 1 3 2 5] 75]
Test Case: 826 | Input/Output: [[9 0 3 4 0 0 6 1 1 5 3 5 3 3 1 6 10 8 2 5] 85]
Test Case: 827 | Input/Output: [[9 0 6 2 4 3 4 2 6 2 3 7 4 6 1 1 5 1 9 0] 80]
Test Case: 828 | Input/Output: [[9 0 6 3 4 4 3 6 2 4 8 0 3 6 9 1 4 4 5 4] 89]
Test Case: 829 | Input/Output: [[9 0 6 3 6 2 5 0 2 6 5 1 9 1 0 1 9 0 5 1] 71]
Test Case: 830 | Input/Output: [[9 0 6 4 2 7 9 0 6 0 5 1 9 0 2 4 7 0 1 1] 75]
Test Case: 831 | Input/Output: [[9 0 7 0 9 0 2 3 4 6 0 7 5 0 3 3 7 1 6 1] 73]
Test Case: 832 | Input/Output: [[9 0 7 1 4 5 1 4 6 2 7 0 0 5 7 3 5 0 2 4] 77]
Test Case: 833 | Input/Output: [[9 0 8 0 1 4 3 2 8 0 2 2 4 2 1 3 1 3 4 4] 61]
Test Case: 834 | Input/Output: [[9 0 8 0 3 6 0 8 1 9 2 3 6 2 6 0 0 10 0 9] 84]
Test Case: 835 | Input/Output: [[9 0 8 1 3 7 9 1 3 4 9 1 4 1 6 0 5 4 3 3] 97]
Test Case: 836 | Input/Output: [[9 0 8 1 6 2 9 0 7 2 8 1 1 5 8 1 2 8 5 2] 90]
Test Case: 837 | Input/Output: [[9 0 9 0 3 0 0 10 7 1 8 1 5 0 3 1 1 1 2 0] 68]
Test Case: 838 | Input/Output: [[9 0 9 0 4 1 4 5 6 0 2 7 10 8 2 7 3 10 10 9] 133]
Test Case: 839 | Input/Output: [[9 1 1 6 6 3 8 2 1 5 0 0 8 0 9 0 0 9 9 0] 79]
Test Case: 840 | Input/Output: [[9 1 2 6 6 1 9 0 4 4 5 3 9 0 1 0 2 5 4 1] 74]
Test Case: 841 | Input/Output: [[9 1 3 4 0 6 7 1 1 2 1 9 2 5 2 3 5 4 7 0] 77]
Test Case: 842 | Input/Output: [[9 1 4 5 1 8 6 0 2 2 6 0 8 2 6 1 4 0 2 4] 81]
Test Case: 843 | Input/Output: [[9 1 5 3 4 0 0 7 9 0 9 0 0 10 9 1 3 7 4 0] 102]
Test Case: 844 | Input/Output: [[9 1 5 4 4 2 6 2 2 6 3 1 5 3 4 0 4 3 7 2] 78]
Test Case: 845 | Input/Output: [[9 1 5 5 8 0 7 3 0 10 1 0 6 1 7 1 7 0 0 9] 94]
Test Case: 846 | Input/Output: [[9 1 6 1 10 9 1 1 4 4 3 3 3 4 3 2 6 6 4 9] 106]
Test Case: 847 | Input/Output: [[9 1 6 3 5 3 6 3 5 3 5 3 7 1 8 2 8 2 1 6] 102]
Test Case: 848 | Input/Output: [[9 1 7 0 5 3 3 1 5 0 3 5 2 1 7 2 4 1 8 1] 75]
Test Case: 849 | Input/Output: [[9 1 7 1 1 9 2 6 9 0 9 0 9 0 4 5 4 5 5 3] 98]
Test Case: 850 | Input/Output: [[9 1 8 0 0 4 10 9 0 5 2 2 3 4 2 4 6 10 4 3] 113]
Test Case: 851 | Input/Output: [[9 1 8 0 9 0 4 6 0 3 5 1 0 9 6 4 0 6 2 6] 87]
Test Case: 852 | Input/Output: [[9 1 8 2 3 2 1 6 1 5 3 6 5 3 8 1 3 1 1 5] 85]
Test Case: 853 | Input/Output: [[9 1 8 2 8 1 4 2 0 3 5 1 1 5 1 1 8 2 1 1] 81]
Test Case: 854 | Input/Output: [[9 1 9 0 1 9 3 2 2 7 5 4 4 2 7 1 2 4 8 0] 92]
Test Case: 855 | Input/Output: [[9 1 9 1 7 0 5 1 6 1 6 4 7 3 2 5 6 2 4 0] 104]
Test Case: 856 | Input/Output: [[9 1 10 6 2 8 2 0 8 5 4 2 1 4 1 0 4 9 1 9] 104]
Test Case: 857 | Input/Output: [[10 1 1 1 8 4 1 1 8 6 3 6 3 4 5 7 0 0 10 5] 86]
Test Case: 858 | Input/Output: [[10 1 2 2 1 4 0 6 1 5 2 7 0 0 5 7 3 0 10 10] 79]
Test Case: 859 | Input/Output: [[10 1 7 6 1 1 1 5 0 2 5 8 2 7 2 6 0 7 3 4] 93]
Test Case: 860 | Input/Output: [[10 1 9 1 9 0 2 9 1 8 2 8 0 6 0 0 4 9 1 0] 107]
Test Case: 861 | Input/Output: [[10 2 7 0 1 2 8 7 2 7 1 6 0 4 2 1 6 10 8 2] 102]
Test Case: 862 | Input/Output: [[10 2 8 8 1 5 4 6 2 3 6 8 1 1 2 6 3 8 2 7] 111]
Test Case: 863 | Input/Output: [[10 3 0 5 0 5 1 5 0 5 2 9 1 4 4 6 4 10 4 10] 105]
Test Case: 864 | Input/Output: [[10 3 1 3 2 3 4 5 3 5 5 8 1 2 7 4 0 10 4 0] 92]
Test Case: 865 | Input/Output: [[10 3 1 5 0 4 6 9 0 9 1 6 2 5 0 6 3 7 3 10] 109]
Test Case: 866 | Input/Output: [[10 3 2 9 1 5 2 3 2 2 6 1 9 7 3 8 1 9 1 6] 115]
Test Case: 867 | Input/Output: [[10 3 5 0 1 3 6 4 6 9 1 7 3 4 4 4 6 10 10 5] 139]
Test Case: 868 | Input/Output: [[10 3 5 2 5 2 2 6 1 5 2 0 4 9 1 3 4 6 4 3] 88]
Test Case: 869 | Input/Output: [[10 3 5 5 0 3 3 1 8 1 0 7 2 3 4 4 6 10 5 5] 103]
Test Case: 870 | Input/Output: [[10 3 7 3 1 5 2 0 9 6 4 8 1 6 3 8 0 5 5 7] 114]
Test Case: 871 | Input/Output: [[10 4 1 4 1 6 1 2 6 8 1 5 5 3 6 5 0 8 2 10] 96]
Test Case: 872 | Input/Output: [[10 5 2 4 3 2 4 1 2 2 0 4 0 1 3 0 4 3 7 0] 64]
Test Case: 873 | Input/Output: [[10 6 0 5 1 5 3 1 2 2 2 7 1 9 1 7 1 9 1 5] 91]
Test Case: 874 | Input/Output: [[10 7 3 5 5 4 4 7 3 5 2 4 1 8 1 2 2 9 1 3] 110]
Test Case: 875 | Input/Output: [[10 8 0 3 3 4 2 2 0 6 3 5 4 8 1 5 3 5 5 4] 89]
Test Case: 876 | Input/Output: [[10 8 2 9 1 2 7 3 5 4 2 2 0 8 1 3 6 10 6 0] 110]
Test Case: 877 | Input/Output: [[0 0 9 1 8 2 3 3 4 1 0 4 5 1 3 4 0 1 10 1 0] 71]
Test Case: 878 | Input/Output: [[0 2 7 3 4 4 1 8 2 1 9 0 6 1 0 5 6 2 8 2 10] 85]
Test Case: 879 | Input/Output: [[0 5 9 1 9 1 0 6 0 1 7 3 8 1 7 2 0 2 6 4 6] 95]
Test Case: 880 | Input/Output: [[0 6 6 1 9 0 5 3 4 6 2 6 5 1 7 0 3 2 8 2 9] 87]
Test Case: 881 | Input/Output: [[0 8 4 1 2 6 5 5 0 1 4 1 3 5 7 3 1 6 8 2 1] 74]
Test Case: 882 | Input/Output: [[0 9 8 2 4 4 2 0 6 1 5 5 5 0 1 6 8 2 1 9 2] 90]
Test Case: 883 | Input/Output: [[0 9 8 2 5 1 4 3 3 2 3 0 8 1 9 1 6 1 10 3 3] 93]
Test Case: 884 | Input/Output: [[0 10 8 0 6 0 3 0 8 1 5 1 6 1 0 0 9 0 10 2 6] 84]
Test Case: 885 | Input/Output: [[1 0 6 3 1 7 7 1 6 0 4 3 7 2 3 3 1 6 8 2 8] 79]
Test Case: 886 | Input/Output: [[1 2 0 4 7 0 2 5 4 3 9 0 6 0 2 2 6 2 3 7 6] 71]
Test Case: 887 | Input/Output: [[1 2 6 1 4 1 2 6 7 3 6 0 1 5 9 0 1 4 1 9 4] 79]
Test Case: 888 | Input/Output: [[1 3 6 2 2 4 9 1 8 2 5 2 7 0 4 1 2 2 9 1 4] 88]
Test Case: 889 | Input/Output: [[1 3 6 3 3 4 8 1 1 7 3 1 3 7 0 7 8 0 7 3 2] 78]
Test Case: 890 | Input/Output: [[1 5 3 7 2 7 9 1 6 0 1 1 0 4 5 1 2 7 10 1 1] 82]
Test Case: 891 | Input/Output: [[1 6 3 4 9 0 4 5 3 3 5 2 5 4 1 0 2 2 9 1 6] 75]
Test Case: 892 | Input/Output: [[1 6 6 3 2 3 8 2 9 0 6 4 3 0 7 1 7 1 3 7 9] 100]
Test Case: 893 | Input/Output: [[2 0 9 0 1 9 1 0 7 0 3 3 7 2 7 2 5 1 10 3 2] 75]
Test Case: 894 | Input/Output: [[2 0 9 1 0 3 3 4 7 3 9 0 0 0 0 8 6 4 10 2 4] 94]
Test Case: 895 | Input/Output: [[2 1 6 2 0 5 1 9 7 1 9 1 2 5 3 5 6 2 9 1 8] 94]
Test Case: 896 | Input/Output: [[2 1 7 3 4 1 3 1 7 0 9 1 8 1 9 0 6 1 6 4 0] 86]
Test Case: 897 | Input/Output: [[2 1 8 1 4 4 7 2 6 1 9 1 5 0 4 3 6 0 4 6 4] 83]
Test Case: 898 | Input/Output: [[2 2 5 2 1 0 8 2 5 2 4 2 4 0 9 1 7 2 9 1 9] 89]
Test Case: 899 | Input/Output: [[2 2 6 0 0 7 5 0 2 7 2 3 3 5 3 6 6 2 6 4 10] 81]
Test Case: 900 | Input/Output: [[2 2 8 1 6 0 0 1 7 2 5 2 2 1 6 0 5 4 6 4 7] 71]
Test Case: 901 | Input/Output: [[2 3 3 6 0 3 9 0 8 2 7 2 3 4 0 5 8 2 10 4 2] 100]
Test Case: 902 | Input/Output: [[2 3 8 1 0 0 7 2 0 8 8 2 0 10 7 2 2 5 10 7 6] 97]
Test Case: 903 | Input/Output: [[2 4 1 3 3 7 3 1 6 2 6 3 2 4 1 6 1 2 5 5 5] 75]
Test Case: 904 | Input/Output: [[2 4 3 4 0 10 0 6 7 0 2 8 3 5 6 4 5 2 9 1 1] 90]
Test Case: 905 | Input/Output: [[2 4 4 5 5 1 3 7 7 0 1 6 5 2 4 2 5 1 9 1 8] 89]
Test Case: 906 | Input/Output: [[2 4 6 0 7 0 9 1 4 1 3 7 3 1 6 1 6 1 8 2 7] 86]
Test Case: 907 | Input/Output: [[2 5 4 1 2 3 0 9 9 0 5 3 5 0 5 3 6 2 10 10 7] 91]
Test Case: 908 | Input/Output: [[2 5 5 0 2 5 4 2 4 0 2 8 4 2 7 0 3 7 9 1 3] 88]
Test Case: 909 | Input/Output: [[2 5 7 1 9 0 7 0 7 3 0 8 1 8 0 6 2 4 1 9 5] 85]
Test Case: 910 | Input/Output: [[2 6 1 9 5 0 7 1 6 1 2 5 8 0 6 4 6 3 2 8 2] 95]
Test Case: 911 | Input/Output: [[2 6 7 3 8 1 7 3 3 4 2 2 7 1 9 0 2 2 7 3 2] 92]
Test Case: 912 | Input/Output: [[2 6 8 2 6 1 5 4 0 6 7 2 5 2 2 8 9 0 7 3 3] 103]
Test Case: 913 | Input/Output: [[2 7 7 0 0 0 6 2 5 2 5 4 7 3 1 7 3 0 10 4 1] 77]
Test Case: 914 | Input/Output: [[2 7 9 0 5 1 3 2 1 1 2 5 4 5 3 3 2 6 7 3 2] 73]
Test Case: 915 | Input/Output: [[3 0 8 0 9 0 7 0 0 10 3 5 6 2 7 2 1 4 9 1 2] 82]
Test Case: 916 | Input/Output: [[3 1 0 4 7 0 5 5 6 0 9 1 3 4 4 4 5 2 7 3 9] 91]
Test Case: 917 | Input/Output: [[3 4 3 6 1 6 2 6 0 6 3 0 6 4 4 1 8 1 9 1 4] 82]
Test Case: 918 | Input/Output: [[3 5 9 0 1 2 2 4 7 1 3 1 6 0 2 5 4 6 4 6 3] 78]
Test Case: 919 | Input/Output: [[3 6 8 0 7 1 3 3 7 0 6 1 8 1 8 2 2 2 7 3 2] 82]
Test Case: 920 | Input/Output: [[3 7 5 1 1 9 6 4 7 2 8 0 4 2 6 2 5 5 10 5 8] 128]
Test Case: 921 | Input/Output: [[3 7 7 2 4 4 9 1 0 6 6 1 8 2 1 5 5 5 10 5 9] 118]
Test Case: 922 | Input/Output: [[4 0 1 2 6 1 7 3 8 2 5 1 9 0 1 3 8 0 10 2 7] 93]
Test Case: 923 | Input/Output: [[4 1 1 2 1 7 6 2 1 5 5 0 0 8 4 2 2 8 0 10 3] 72]
Test Case: 924 | Input/Output: [[4 2 8 1 4 3 2 3 6 0 7 0 4 3 1 5 1 7 1 9 2] 73]
Test Case: 925 | Input/Output: [[4 3 0 3 0 1 9 0 5 1 3 7 4 3 7 0 8 0 7 3 6] 78]
Test Case: 926 | Input/Output: [[4 4 7 0 9 0 9 1 1 2 6 0 8 2 4 2 5 0 8 2 5] 84]
Test Case: 927 | Input/Output: [[4 4 7 1 0 1 3 1 5 3 8 2 4 0 9 0 4 5 7 3 0] 75]
Test Case: 928 | Input/Output: [[4 4 8 0 0 6 4 3 7 3 6 0 3 5 1 2 6 2 1 9 4] 84]
Test Case: 929 | Input/Output: [[4 6 5 1 8 1 9 0 3 5 8 2 0 5 2 3 0 0 10 8 6] 91]
Test Case: 930 | Input/Output: [[4 6 8 0 0 8 4 0 0 7 1 2 4 6 8 0 3 2 10 4 8] 101]
Test Case: 931 | Input/Output: [[4 6 8 0 1 8 1 3 1 9 6 3 8 2 5 1 3 5 7 3 2] 105]
Test Case: 932 | Input/Output: [[5 0 6 0 1 6 9 0 8 2 6 1 1 0 6 3 7 1 7 3 5] 83]
Test Case: 933 | Input/Output: [[5 2 5 4 9 1 2 0 2 3 5 2 0 10 6 3 0 0 7 3 0] 77]
Test Case: 934 | Input/Output: [[5 2 6 2 2 4 3 3 6 4 4 6 2 5 6 1 3 0 2 8 2] 82]
Test Case: 935 | Input/Output: [[5 2 9 0 3 1 6 1 1 8 4 1 4 1 4 5 3 2 9 1 1] 71]
Test Case: 936 | Input/Output: [[5 3 1 6 4 5 7 3 0 2 6 1 6 1 8 0 1 9 4 6 8] 90]
Test Case: 937 | Input/Output: [[5 3 7 3 3 5 4 3 5 1 7 2 0 7 7 2 3 1 8 2 0] 81]
Test Case: 938 | Input/Output: [[5 3 9 0 7 1 8 0 7 2 4 3 3 6 7 3 8 2 10 10 2] 118]
Test Case: 939 | Input/Output: [[5 4 6 1 8 0 8 1 0 6 7 3 3 6 6 0 5 5 0 10 5] 92]
Test Case: 940 | Input/Output: [[5 4 9 0 0 8 7 1 5 3 5 4 1 2 9 0 7 1 5 5 8] 89]
Test Case: 941 | Input/Output: [[5 5 6 3 5 2 1 8 6 2 2 6 6 3 2 5 1 0 10 2 0] 86]
Test Case: 942 | Input/Output: [[6 0 1 8 7 3 4 1 7 0 9 1 7 3 5 5 8 1 6 4 3] 113]
Test Case: 943 | Input/Output: [[6 0 2 0 1 7 2 2 6 2 3 7 5 3 8 2 5 1 7 3 10] 92]
Test Case: 944 | Input/Output: [[6 0 3 0 2 7 0 0 0 10 6 2 8 2 8 1 6 1 10 7 4] 97]
Test Case: 945 | Input/Output: [[6 0 3 2 0 10 7 2 6 0 6 2 0 5 4 5 1 6 10 5 2] 89]
Test Case: 946 | Input/Output: [[6 0 6 2 7 2 8 1 4 1 3 0 9 0 0 0 8 0 10 2 4] 73]
Test Case: 947 | Input/Output: [[6 0 9 0 6 4 3 1 4 6 5 0 1 8 2 2 5 4 6 4 4] 88]
Test Case: 948 | Input/Output: [[6 1 6 0 6 4 5 5 0 4 2 5 1 3 1 5 1 0 6 4 5] 75]
Test Case: 949 | Input/Output: [[6 1 7 1 3 4 3 1 8 1 0 1 3 3 8 0 6 1 0 10 1] 68]
Test Case: 950 | Input/Output: [[6 1 7 1 4 3 2 4 4 2 1 5 9 0 9 1 5 2 5 5 2] 83]
Test Case: 951 | Input/Output: [[6 1 8 2 4 4 2 2 3 7 3 0 1 6 9 1 6 1 7 3 2] 91]
Test Case: 952 | Input/Output: [[6 1 9 0 8 0 7 0 4 0 4 0 7 0 0 8 0 7 10 6 0] 77]
Test Case: 953 | Input/Output: [[6 2 7 0 9 0 1 6 4 1 5 1 5 0 3 3 7 1 7 3 5] 76]
Test Case: 954 | Input/Output: [[6 3 3 2 5 1 2 2 5 1 3 1 9 1 2 5 1 8 10 7 1] 80]
Test Case: 955 | Input/Output: [[6 4 5 0 1 1 0 2 6 4 7 0 3 3 7 1 8 1 10 7 6] 94]
Test Case: 956 | Input/Output: [[6 4 7 3 9 1 5 5 8 2 7 1 0 6 9 1 3 4 10 5 0] 135]
Test Case: 957 | Input/Output: [[7 0 3 6 2 0 5 5 7 0 7 3 6 3 5 3 5 5 5 5 5] 105]
Test Case: 958 | Input/Output: [[7 0 6 2 8 2 3 0 7 2 5 2 1 5 2 6 3 5 2 8 9] 88]
Test Case: 959 | Input/Output: [[7 0 7 3 9 0 9 0 7 3 9 0 7 0 4 6 4 5 9 1 5] 117]
Test Case: 960 | Input/Output: [[7 0 9 1 7 1 1 4 2 2 2 2 3 6 0 9 3 3 4 6 2] 81]
Test Case: 961 | Input/Output: [[7 0 9 1 8 1 3 7 2 2 9 1 1 8 9 0 5 3 9 1 2] 99]
Test Case: 962 | Input/Output: [[7 1 6 2 9 0 6 1 8 2 3 2 1 0 3 7 4 6 5 5 5] 95]
Test Case: 963 | Input/Output: [[7 1 7 1 3 6 9 0 7 1 2 2 2 2 2 7 6 3 5 5 8] 86]
Test Case: 964 | Input/Output: [[7 1 7 2 0 4 0 3 7 0 5 4 8 2 8 1 7 0 4 6 3] 87]
Test Case: 965 | Input/Output: [[7 1 8 1 9 1 5 0 8 2 7 2 4 1 5 1 5 3 10 5 1] 98]
Test Case: 966 | Input/Output: [[7 1 8 2 8 2 1 9 8 2 6 0 9 0 7 2 8 2 10 0 0] 125]
Test Case: 967 | Input/Output: [[7 1 8 2 9 0 4 4 8 1 4 1 8 1 0 2 2 4 8 2 3] 88]
Test Case: 968 | Input/Output: [[7 2 0 2 8 2 3 2 1 7 7 2 6 4 9 1 2 1 9 1 0] 90]
Test Case: 969 | Input/Output: [[7 2 4 4 0 3 6 4 5 5 9 0 0 4 6 0 7 0 10 0 10] 100]
Test Case: 970 | Input/Output: [[7 2 5 4 0 0 5 2 7 3 5 0 5 4 4 5 0 7 7 3 2] 82]
Test Case: 971 | Input/Output: [[7 3 0 5 2 2 8 0 4 1 6 3 8 0 1 2 5 5 6 4 6] 84]
Test Case: 972 | Input/Output: [[7 3 2 1 1 6 9 0 4 6 1 0 4 1 4 5 9 0 10 7 4] 87]
Test Case: 973 | Input/Output: [[7 3 2 4 2 2 9 1 6 0 6 2 7 1 4 1 3 2 9 1 9] 89]
Test Case: 974 | Input/Output: [[7 3 9 0 4 5 9 1 2 2 0 1 0 7 5 5 8 1 10 1 1] 100]
Test Case: 975 | Input/Output: [[8 0 2 8 3 5 9 1 0 7 5 5 3 4 1 1 3 7 10 2 8] 108]
Test Case: 976 | Input/Output: [[8 0 7 0 7 0 2 8 7 2 9 0 1 5 6 4 0 10 9 1 4] 106]
Test Case: 977 | Input/Output: [[8 0 8 0 1 2 8 0 2 3 8 1 7 1 9 0 4 3 0 10 6] 81]
Test Case: 978 | Input/Output: [[8 0 8 0 5 3 7 3 4 1 8 1 8 1 6 2 6 4 10 8 1] 108]
Test Case: 979 | Input/Output: [[8 1 2 3 0 10 0 0 4 0 8 1 6 1 6 3 7 3 10 2 2] 87]
Test Case: 980 | Input/Output: [[8 1 8 2 0 5 5 4 3 7 8 1 5 1 4 3 8 2 9 1 0] 102]
Test Case: 981 | Input/Output: [[8 2 0 0 0 3 1 0 9 0 3 5 2 2 8 1 5 5 2 8 2] 68]
Test Case: 982 | Input/Output: [[8 2 0 0 8 1 6 3 7 2 8 1 6 4 9 0 2 4 8 2 3] 93]
Test Case: 983 | Input/Output: [[8 2 0 4 3 5 6 3 9 1 6 0 0 4 0 4 1 1 9 1 2] 75]
Test Case: 984 | Input/Output: [[8 2 3 5 5 4 8 2 3 0 0 2 2 2 2 5 4 2 9 1 4] 79]
Test Case: 985 | Input/Output: [[8 2 4 4 6 4 5 1 2 1 2 5 8 2 1 1 9 1 8 2 9] 103]
Test Case: 986 | Input/Output: [[8 2 8 0 1 5 6 3 8 1 5 4 3 7 8 2 2 2 7 3 3] 106]
Test Case: 987 | Input/Output: [[8 2 8 2 3 3 2 8 3 2 4 5 0 7 7 0 2 3 3 7 5] 98]
Test Case: 988 | Input/Output: [[8 2 9 0 4 6 0 1 9 0 5 1 8 2 6 1 6 3 9 1 4] 100]
Test Case: 989 | Input/Output: [[8 2 9 1 7 1 5 0 9 1 4 2 6 4 0 7 3 2 10 6 2] 109]
Test Case: 990 | Input/Output: [[9 0 2 7 8 1 1 8 1 6 8 0 0 10 0 1 9 1 6 4 3] 91]
Test Case: 991 | Input/Output: [[9 0 5 5 4 2 0 2 9 1 7 0 4 0 2 3 0 4 10 1 1] 80]
Test Case: 992 | Input/Output: [[9 0 7 1 7 2 6 1 2 1 6 2 4 0 0 6 9 1 7 3 0] 81]
Test Case: 993 | Input/Output: [[9 0 8 0 3 2 3 2 1 4 8 1 6 2 2 0 2 0 9 1 4] 67]
Test Case: 994 | Input/Output: [[9 0 9 1 3 5 9 0 6 1 5 4 8 0 7 1 0 4 7 3 7] 92]
Test Case: 995 | Input/Output: [[9 1 1 6 4 1 4 1 4 1 7 2 5 0 6 3 5 0 8 2 0] 71]
Test Case: 996 | Input/Output: [[9 1 3 2 2 5 5 0 9 0 3 4 4 2 5 5 9 1 10 4 2] 107]
Test Case: 997 | Input/Output: [[9 1 4 6 0 5 5 2 2 4 5 5 4 4 8 2 5 2 9 1 5] 101]
Test Case: 998 | Input/Output: [[9 1 5 2 7 1 6 4 5 4 3 6 6 3 1 3 7 2 9 1 6] 101]
Test Case: 999 | Input/Output: [[9 1 5 3 6 0 8 1 5 5 1 4 9 0 2 0 4 4 9 1 9] 92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 994bc7fe4bb0d8330ff3b97ede81b749344ccefb
GitHub link = https://github.com/lspector/Clojush/commit/994bc7fe4bb0d8330ff3b97ede81b749344ccefb
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (#object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x1acc768 clojush.instructions.tag$tag_instruction_erc$fn__2160@1acc768] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x38caad07 clojush.instructions.tag$tagged_instruction_erc$fn__2166@38caad07] in1 integer_sub integer_inc boolean_stackdepth boolean_pop string_fromchar vector_string_shove exec_yankdup integer_yankdup string_flush boolean_swap exec_shove exec_y boolean_yank integer_eq string_butlast string_conjchar string_substring integer_mult vector_string_dup_times boolean_or boolean_empty exec_s_when_autoconstructing char_dup_items char_iswhitespace vector_string_replacefirst string_first exec_do*while exec_string_iterate string_indexofchar integer_fromstring char_frominteger vector_string_eq exec_dup_items boolean_dup_items exec_empty string_shove exec_rot vector_string_concat vector_string_subvec char_pop exec_dup vector_string_flush boolean_flush char_isdigit vector_string_stackdepth string_reverse exec_k char_rot boolean_xor integer_gte boolean_dup_times string_replacefirst boolean_shove vector_string_dup vector_string_occurrencesof string_last boolean_rot vector_string_rest integer_div integer_lte integer_mod string_concat vector_string_butlast exec_do*count vector_string_yankdup integer_rot vector_string_rot exec_k_when_autoconstructing vector_string_take integer_add integer_shove string_dup_times char_swap integer_max char_dup_times vector_string_remove string_eq integer_stackdepth string_take char_stackdepth integer_dup_times boolean_dup exec_dup_times vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while integer_min exec_swap integer_fromchar vector_string_yank string_stackdepth string_replacechar char_allfromstring char_yank string_pop integer_dup_items vector_string_last string_nth vector_string_pop exec_do*range exec_if char_shove boolean_invert_first_then_and integer_fromboolean char_yankdup vector_string_first boolean_frominteger string_setchar char_isletter boolean_eq string_occurrencesofchar string_replacefirstchar integer_flush string_replace char_dup exec_y_when_autoconstructing char_eq vector_string_conj integer_gt vector_string_indexof boolean_not exec_do*times exec_do*vector_string string_empty char_empty exec_pop string_yankdup string_removechar vector_string_replace char_flush vector_string_emptyvector exec_s vector_string_nth integer_lt string_containschar string_yank vector_string_pushall vector_string_set exec_noop integer_swap string_split string_fromboolean vector_string_dup_items integer_dup vector_string_length string_rest string_rot exec_yank string_parse_to_chars integer_pop integer_empty integer_dec string_contains vector_string_contains string_dup_items vector_string_reverse exec_stackdepth boolean_and string_length string_frominteger exec_flush vector_string_empty exec_when boolean_invert_second_then_and string_dup boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472 0x85c3522 clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472@85c3522]
error-threshold = 0
evalpush-limit = 4000
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-point-evaluations = 1.0E101
max-points = 1600
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.problems.software.bowling$bowling_initial_report 0x129c760d clojush.problems.software.bowling$bowling_initial_report@129c760d]
problem-specific-report = #object[clojush.problems.software.bowling$bowling_report 0x180f33b2 clojush.problems.software.bowling$bowling_report@180f33b2]
random-screen = false
random-seed = -39 13 80 98 -112 111 80 124 -35 -110 60 -78 -125 41 -77 -86
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- bowling problem report - generation 0
Test total error for best: 13823
Test mean error for best: 13.82300
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 86
Correct output:    114 | Program output: 86
Correct output:     81 | Program output: 86
Correct output:     84 | Program output: 86
Correct output:    115 | Program output: 86
Correct output:    105 | Program output: 86
Correct output:    110 | Program output: 86
Correct output:     99 | Program output: 86
Correct output:     99 | Program output: 86
Correct output:    106 | Program output: 86
Correct output:    134 | Program output: 86
Correct output:    100 | Program output: 86
Correct output:    117 | Program output: 86
Correct output:     98 | Program output: 86
Correct output:    145 | Program output: 86
Correct output:    115 | Program output: 86
Correct output:    119 | Program output: 86
Correct output:     84 | Program output: 86
Correct output:     10 | Program output: 86
Correct output:     74 | Program output: 86
Correct output:    103 | Program output: 86
Correct output:     92 | Program output: 86
Correct output:     92 | Program output: 86
Correct output:     64 | Program output: 86
Correct output:     92 | Program output: 86
Correct output:    125 | Program output: 86
Correct output:    109 | Program output: 86
Correct output:     97 | Program output: 86
Correct output:     64 | Program output: 86
Correct output:    131 | Program output: 86
Correct output:    102 | Program output: 86
Correct output:     97 | Program output: 86
Correct output:     86 | Program output: 86
Correct output:     85 | Program output: 86
Correct output:     85 | Program output: 86
Correct output:    106 | Program output: 86
Correct output:     61 | Program output: 86
Correct output:     83 | Program output: 86
Correct output:    107 | Program output: 86
Correct output:     70 | Program output: 86
Correct output:     72 | Program output: 86
Correct output:    102 | Program output: 86
Correct output:     97 | Program output: 86
Correct output:    100 | Program output: 86
Correct output:    108 | Program output: 86
Correct output:    104 | Program output: 86
Correct output:     89 | Program output: 86
Correct output:     61 | Program output: 86
Correct output:     75 | Program output: 86
Correct output:      0 | Program output: 86
Correct output:     10 | Program output: 86
Correct output:     81 | Program output: 86
Correct output:     93 | Program output: 86
Correct output:     67 | Program output: 86
Correct output:     89 | Program output: 86
Correct output:     74 | Program output: 86
Correct output:     85 | Program output: 86
Correct output:     71 | Program output: 86
Correct output:     80 | Program output: 86
Correct output:     91 | Program output: 86
Correct output:     75 | Program output: 86
Correct output:     73 | Program output: 86
Correct output:    103 | Program output: 86
Correct output:     88 | Program output: 86
Correct output:     87 | Program output: 86
Correct output:     79 | Program output: 86
Correct output:     86 | Program output: 86
Correct output:     71 | Program output: 86
Correct output:     87 | Program output: 86
Correct output:     74 | Program output: 86
Correct output:     67 | Program output: 86
Correct output:    100 | Program output: 86
Correct output:    105 | Program output: 86
Correct output:    111 | Program output: 86
Correct output:     86 | Program output: 86
Correct output:     91 | Program output: 86
Correct output:     72 | Program output: 86
Correct output:     87 | Program output: 86
Correct output:     89 | Program output: 86
Correct output:     98 | Program output: 86
Correct output:     82 | Program output: 86
Correct output:    124 | Program output: 86
Correct output:     88 | Program output: 86
Correct output:     68 | Program output: 86
Correct output:     85 | Program output: 86
Correct output:     69 | Program output: 86
Correct output:    114 | Program output: 86
Correct output:     91 | Program output: 86
Correct output:     90 | Program output: 86
Correct output:     83 | Program output: 86
Correct output:     85 | Program output: 86
Correct output:    119 | Program output: 86
Correct output:     87 | Program output: 86
Correct output:     83 | Program output: 86
Correct output:    150 | Program output: 86
Correct output:     72 | Program output: 86
Correct output:     91 | Program output: 86
Correct output:     89 | Program output: 86
Correct output:     82 | Program output: 86
Correct output:     94 | Program output: 86
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Lexicase best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty) integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Lexicase best errors: [214 28 5 2 29 19 24 13 13 20 48 14 31 12 59 29 33 2 76 12 17 6 6 22 6 39 23 11 22 45 16 11 0 1 1 20 25 3 21 16 14 16 11 14 22 18 3 25 11 86 76 5 7 19 3 12 1 15 6 5 11 13 17 2 1 7 0 15 1 12 19 14 19 25 0 5 14 1 3 12 4 38 2 18 1 17 28 5 4 3 1 33 1 3 64 14 5 3 4 8]
Lexicase best number of elite cases: 25
Lexicase best total error: 1810
Lexicase best mean error: 18.1
Lexicase best size: 210
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Zero cases best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty) integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Zero cases best errors: [214 28 5 2 29 19 24 13 13 20 48 14 31 12 59 29 33 2 76 12 17 6 6 22 6 39 23 11 22 45 16 11 0 1 1 20 25 3 21 16 14 16 11 14 22 18 3 25 11 86 76 5 7 19 3 12 1 15 6 5 11 13 17 2 1 7 0 15 1 12 19 14 19 25 0 5 14 1 3 12 4 38 2 18 1 17 28 5 4 3 1 33 1 3 64 14 5 3 4 8]
Zero cases best number of elite cases: 25
Zero cases best number of zero cases: 3
Zero cases best total error: 1810
Zero cases best mean error: 18.1
Zero cases best size: 210
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 2 1 1 1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 2 1 174 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 0.28
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 174 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0)
Population mean number of perfect (error zero) cases: 0.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty) integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Errors: [214 28 5 2 29 19 24 13 13 20 48 14 31 12 59 29 33 2 76 12 17 6 6 22 6 39 23 11 22 45 16 11 0 1 1 20 25 3 21 16 14 16 11 14 22 18 3 25 11 86 76 5 7 19 3 12 1 15 6 5 11 13 17 2 1 7 0 15 1 12 19 14 19 25 0 5 14 1 3 12 4 38 2 18 1 17 28 5 4 3 1 33 1 3 64 14 5 3 4 8]
Total: 1810
Mean: 18.1
Genome size: 186
Size: 210
Percent parens: 0.114
--- Population Statistics ---
Average total errors in population: 7.2400002531084E10
Median total errors in population: 100000000000
Error averages by case: (7.24000081651E8 7.24000031135E8 7.24000022361E8 7.24000023145E8 7.24000031405E8 7.24000028709E8 7.24000030055E8 7.24000027105E8 7.24000027105E8 7.24000028977E8 7.24000036535E8 7.24000027371E8 7.24000031945E8 7.24000026839E8 7.24000039505E8 7.24000031405E8 7.24000032485E8 7.24000023145E8 7.24000004981E8 7.24000020541E8 7.24000028173E8 7.24000025253E8 7.24000025253E8 7.24000017953E8 7.24000025253E8 7.24000034105E8 7.24000029785E8 7.24000026573E8 7.24000017953E8 7.24000035725E8 7.24000027905E8 7.24000026573E8 7.24000023669E8 7.24000023407E8 7.24000023407E8 7.24000028977E8 7.24000017187E8 7.24000022883E8 7.24000029245E8 7.24000019501E8 7.24000020021E8 7.24000027905E8 7.24000026573E8 7.24000027371E8 7.24000029515E8 7.24000028441E8 7.24000024461E8 7.24000017187E8 7.24000020801E8 7.24000003153E8 7.24000004981E8 7.24000022361E8 7.24000025517E8 7.24000018727E8 7.24000024461E8 7.24000020541E8 7.24000023407E8 7.24000019761E8 7.24000022101E8 7.24000024989E8 7.24000020801E8 7.24000020281E8 7.24000028173E8 7.24000024197E8 7.24000023933E8 7.24000021841E8 7.24000023669E8 7.24000019761E8 7.24000023933E8 7.24000020541E8 7.24000018727E8 7.24000027371E8 7.24000028709E8 7.24000030325E8 7.24000023669E8 7.24000024989E8 7.24000020021E8 7.24000023933E8 7.24000024461E8 7.24000026839E8 7.24000022621E8 7.24000033835E8 7.24000024197E8 7.24000018985E8 7.24000023407E8 7.24000019243E8 7.24000031135E8 7.24000024989E8 7.24000024725E8 7.24000022883E8 7.24000023407E8 7.24000032485E8 7.24000023933E8 7.24000022883E8 7.24000040855E8 7.24000020021E8 7.24000024989E8 7.24000024461E8 7.24000022621E8 7.24000025781E8)
Error minima by case: (139 7 1 2 8 2 3 2 2 1 18 1 10 1 7 8 12 2 0 4 2 5 5 1 5 18 2 0 1 21 1 0 0 1 1 1 1 1 0 0 2 1 0 1 1 3 3 1 5 0 0 1 4 3 3 4 1 1 2 5 5 3 2 2 1 3 0 1 1 4 3 1 2 4 0 5 2 1 3 1 0 17 2 2 1 1 7 5 4 1 1 12 1 1 2 2 5 3 0 3)
Average genome size in population (length): 99.683
Average program size in population (points): 118.662
Average percent parens in population: 0.171
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 82004600
--- Timings ---
Current time: 1559325433993 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- bowling problem report - generation 1
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction string_contains} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_fromchar} {:close 1, :instruction vector_string_last} {:close 1, :instruction vector_string_remove} {:close 0, :instruction char_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_eq} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_contains} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_rot} {:close 1, :instruction vector_string_replace} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_shove} {:close 1, :instruction string_first} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_dup_times} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_nth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 2, :instruction vector_string_butlast} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_do*range} {:close 0, :instruction string_indexofchar} {:close 0, :instruction string_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction string_replacechar} {:close 1, :instruction integer_gt} {:close 1, :instruction tagged_210} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_eq} {:close 2, :instruction vector_string_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction string_contains} {:close 0, :instruction integer_swap} {:close 1, :instruction vector_string_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction char_yank} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_butlast} {:close 0, :instruction char_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction string_first} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_k} {:close 0, :instruction vector_string_pop} {:close 1, :instruction tag_integer_280} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction string_indexofchar})
Lexicase best program: (exec_do*range () string_contains string_parse_to_chars char_isdigit integer_fromchar vector_string_last vector_string_remove char_swap char_frominteger vector_string_eq vector_string_dup_times exec_yank vector_string_butlast exec_s_when_autoconstructing (string_fromchar string_contains vector_string_dup vector_string_rot vector_string_replace) (exec_yankdup vector_string_replace string_setchar integer_eq integer_dup_times vector_string_length integer_shove string_first) (exec_stackdepth integer_lt boolean_eq) char_yankdup integer_dup integer_dup_times char_isdigit boolean_invert_first_then_and string_nth exec_noop boolean_xor exec_empty vector_string_butlast string_occurrencesofchar exec_do*range (string_indexofchar string_shove exec_pop (string_replacechar) integer_gt) tagged_210 exec_when (vector_string_eq vector_string_yank) integer_dup_items integer_rot boolean_rot string_contains integer_swap vector_string_dup_items integer_max char_yank vector_string_dup_items integer_pop string_butlast char_frominteger integer_dup_items boolean_dup integer_max integer_add string_replacechar exec_pop (exec_noop string_first boolean_pop string_replacechar exec_k (vector_string_pop tag_integer_280) (integer_div integer_lte integer_inc string_indexofchar)))
Lexicase best errors: [226 40 7 10 41 31 36 25 25 32 60 26 43 24 71 41 45 10 64 0 29 18 18 10 18 51 35 23 10 57 28 23 12 11 11 32 13 9 33 4 2 28 23 26 34 30 15 13 1 74 64 7 19 7 15 0 11 3 6 17 1 1 29 14 13 5 12 3 13 0 7 26 31 37 12 17 2 13 15 24 8 50 14 6 11 5 40 17 16 9 11 45 13 9 76 2 17 15 8 20]
Lexicase best number of elite cases: 5
Lexicase best total error: 2364
Lexicase best mean error: 23.64
Lexicase best size: 91
Percent parens: 0.121
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_nth} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction char_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_dup_items} {:close 1, :instruction string_fromchar} {:close 0, :instruction integer_max} {:close 0, :instruction string_empty} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction string_setchar} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction char_eq} {:close 1, :instruction string_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction string_replacechar} {:close 1, :instruction integer_rot} {:close 0, :instruction char_yank} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction char_rot} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_string_dup_times} {:close 1, :instruction char_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction string_replacefirstchar} {:close 2, :instruction char_dup} {:close 0, :instruction string_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_string_eq} {:close 1, :instruction string_pop} {:close 1, :instruction string_indexofchar} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_string_contains} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction string_yankdup} {:close 0, :instruction integer_fromchar} {:close 0, :instruction tagged_209} {:close 1, :instruction string_rest} {:close 1, :instruction string_emptystring} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction char_allfromstring} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_638} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_first} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_eq} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction char_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_nth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_swap} {:close 0, :instruction integer_add} {:close 1, :instruction string_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 1, :instruction char_stackdepth} {:close 0, :instruction char_rot} {:close 0, :instruction string_rest} {:close 0, :instruction char_rot} {:close 0, :instruction string_last} {:close 0, :instruction exec_eq} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_setchar} {:close 0, :instruction vector_string_set} {:close 1, :instruction string_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_s} {:close 0, :instruction vector_string_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction char_eq} {:close 1, :instruction vector_string_last} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_concat} {:close 1, :instruction exec_do*range} {:close 0, :instruction char_stackdepth} {:close 0, :instruction integer_fromchar} {:close 1, :instruction exec_do*range} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_first} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_containschar} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_length} {:close 0, :instruction tag_char_316} {:close 0, :instruction string_yank} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction string_first} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_string_replace} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction string_containschar} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_take} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction string_setchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction char_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_length})
Zero cases best program: (vector_string_concat vector_string_nth exec_y (vector_string_reverse boolean_invert_second_then_and exec_stackdepth exec_string_iterate (vector_string_subvec integer_stackdepth integer_dup char_yankdup boolean_eq) string_dup_items string_fromchar) integer_max string_empty string_conjchar char_frominteger integer_min string_setchar integer_stackdepth char_eq string_stackdepth exec_empty integer_fromstring string_butlast boolean_dup vector_string_dup_items string_replacechar integer_rot char_yank vector_string_subvec integer_eq vector_string_last exec_s_when_autoconstructing (char_rot vector_string_last exec_dup (vector_string_dup_times char_dup_times) integer_dup_times string_replacefirstchar) (char_dup) () string_yankdup char_iswhitespace exec_do*times () vector_string_eq string_pop string_indexofchar boolean_invert_first_then_and integer_gt vector_string_contains string_removechar exec_y_when_autoconstructing (integer_mult integer_dec string_yankdup) integer_fromchar tagged_209 string_rest string_emptystring vector_string_dup_items char_rot boolean_yankdup exec_do*times (in1 char_allfromstring exec_yankdup) tagged_638 boolean_invert_first_then_and vector_string_first integer_dup_times string_flush integer_lte char_iswhitespace integer_eq string_frominteger integer_empty char_yankdup boolean_dup_times vector_string_occurrencesof string_flush boolean_yankdup boolean_shove exec_swap (boolean_empty integer_mod vector_string_butlast vector_string_nth boolean_pop exec_do*times (string_swap) integer_add string_rot) (exec_empty boolean_invert_second_then_and exec_empty char_stackdepth) char_rot string_rest char_rot string_last exec_eq string_parse_to_chars vector_string_replace string_setchar vector_string_set string_dup string_conjchar exec_s (vector_string_rot boolean_rot exec_do*range (char_eq) vector_string_last) (exec_dup_times (exec_pop (char_pop vector_string_rot string_shove integer_add string_concat exec_do*range () char_stackdepth integer_fromchar exec_do*range () string_replacefirstchar string_first vector_string_yankdup string_containschar char_pop vector_string_length tag_char_316 string_yank string_removechar integer_fromchar vector_string_reverse char_flush vector_string_reverse string_first) boolean_stackdepth integer_pop boolean_dup_items vector_string_replace integer_fromchar vector_string_indexof char_stackdepth string_rot vector_string_subvec string_containschar integer_max integer_yank exec_stackdepth boolean_invert_first_then_and vector_string_take) exec_swap (integer_div string_setchar vector_string_last string_stackdepth exec_eq) (integer_lt integer_div char_empty exec_shove () string_removechar integer_lte integer_dup_items string_eq char_isdigit integer_gt vector_string_reverse char_yankdup integer_lt string_parse_to_chars vector_string_length)) ())
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 200
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 3 7 2 3 2 7 7 8 2 2 4 7 3 2 2 7 15 9 8 4 4 1 4 1 5 36 1 1 3 36 91 5 5 8 2 6 69 88 10 3 36 2 7 5 3 2 11 77 15 3 5 8 3 9 5 3 4 1 11 7 8 3 6 2 91 3 6 9 8 2 3 3 91 1 10 6 3 7 32 1 3 3 5 4 1 1 6 6 5 2 6 6 3 10 1 3 32 7)
Population mean number of elite cases: 1.10
Count of perfect (error zero) individuals by case: (0 1 3 7 2 3 2 7 7 8 0 2 4 7 0 2 0 7 15 9 8 4 4 1 4 1 5 36 1 1 3 36 91 5 5 8 2 6 69 88 10 3 36 2 7 5 3 2 0 77 15 3 5 8 3 9 5 3 4 1 0 7 8 3 6 2 91 3 6 9 8 2 3 3 91 1 10 6 3 7 32 1 3 3 5 4 1 1 6 6 5 0 6 6 3 10 1 3 32 7)
Population mean number of perfect (error zero) cases: 1.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 3, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 1, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap) string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 186
Size: 210
Percent parens: 0.114
--- Population Statistics ---
Average total errors in population: 1.4500003465074E10
Median total errors in population: 2642
Error averages by case: (1.45000190536E8 1.4500003855E8 1.45000027959E8 1.45000027694E8 1.45000039257E8 1.45000032873E8 1.45000035814E8 1.45000030343E8 1.45000030343E8 1.45000033358E8 1.4500005334E8 1.45000030682E8 1.45000040685E8 1.45000030018E8 1.45000061855E8 1.45000039257E8 1.45000042135E8 1.45000027694E8 1.45000063642E8 1.4500002912E8 1.45000031925E8 1.45000028624E8 1.45000028624E8 1.4500003264E8 1.45000028624E8 1.45000046531E8 1.45000035151E8 1.45000029707E8 1.4500003264E8 1.45000051045E8 1.45000031472E8 1.45000029707E8 1.45000027614E8 1.45000027649E8 1.45000027649E8 1.45000033358E8 1.45000034083E8 1.45000027753E8 1.45000033859E8 1.45000030012E8 1.45000029536E8 1.45000031472E8 1.45000029707E8 1.45000030682E8 1.45000034498E8 1.45000032394E8 1.45000028085E8 1.45000034083E8 1.45000028937E8 1.45000070384E8 1.45000063642E8 1.45000027959E8 1.45000028817E8 1.45000031285E8 1.45000028085E8 1.4500002912E8 1.45000027649E8 1.45000029771E8 1.450000281E8 1.45000028439E8 1.45000028937E8 1.45000029321E8 1.45000031925E8 1.4500002792E8 1.45000027761E8 1.45000028249E8 1.45000027614E8 1.45000029771E8 1.45000027761E8 1.4500002912E8 1.45000031285E8 1.45000030682E8 1.45000032873E8 1.45000036481E8 1.45000027614E8 1.45000028439E8 1.45000029536E8 1.45000027761E8 1.45000028085E8 1.45000030018E8 1.45000027824E8 1.45000045792E8 1.4500002792E8 1.45000030854E8 1.45000027649E8 1.45000030429E8 1.4500003855E8 1.45000028439E8 1.45000028256E8 1.45000027753E8 1.45000027649E8 1.45000042135E8 1.45000027761E8 1.45000027753E8 1.45000065786E8 1.45000029536E8 1.45000028439E8 1.45000028085E8 1.45000027824E8 1.4500002902E8)
Error minima by case: (5 0 0 0 0 0 0 0 0 0 3 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 136.909
Average program size in population (points): 155.494
Average percent parens in population: 0.122
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.537
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.127
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 260140500
--- Timings ---
Current time: 1559325584550 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- bowling problem report - generation 2
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction char_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Lexicase best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar char_frominteger exec_when (integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items) char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty) char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_dup_items) string_replacefirst))))
Lexicase best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Lexicase best number of elite cases: 5
Lexicase best total error: 1832
Lexicase best mean error: 18.32
Lexicase best size: 233
Percent parens: 0.137
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction char_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Zero cases best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar char_frominteger exec_when (integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items) char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty) char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_dup_items) string_replacefirst))))
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 233
Percent parens: 0.137
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 9 14 14 14 10 5 14 14 13 5 21 6 16 1 14 4 14 23 15 10 20 20 19 20 5 6 6 19 12 12 6 16 21 21 13 13 12 9 12 18 12 6 21 8 5 17 13 5 82 23 14 9 12 17 15 21 14 10 8 5 8 10 16 16 11 16 14 16 15 12 21 10 4 16 8 18 16 17 16 17 5 16 7 21 9 9 8 9 12 21 4 16 12 3 18 8 17 17 11)
Population mean number of elite cases: 1.34
Count of perfect (error zero) individuals by case: (0 9 14 14 14 10 5 14 14 13 5 21 6 16 1 14 4 14 23 15 10 20 20 19 20 5 6 6 19 12 12 6 16 21 21 13 13 12 9 12 18 12 6 21 8 5 17 13 5 82 23 14 9 12 17 15 21 14 10 8 5 8 10 16 16 11 16 14 16 15 12 21 10 4 16 8 18 16 17 16 17 5 16 7 21 9 9 8 9 12 21 4 16 12 3 18 8 17 17 11)
Population mean number of perfect (error zero) cases: 1.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_remove} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_dup_times} {:close 1, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction boolean_not} {:close 0, :instruction string_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 1, :instruction char_empty} {:close 0, :instruction vector_string_length} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction string_split} {:close 1, :instruction boolean_shove} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_first} {:close 0, :instruction exec_y} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_pushall} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_yank} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction integer_mult} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 2, :instruction char_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_replace} {:close 1, :instruction exec_while} {:close 0, :instruction string_eq} {:close 2, :instruction exec_flush} {:close 0, :instruction string_last} {:close 1, :instruction boolean_yank} {:close 0, :instruction string_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacefirst} {:close 2, :instruction char_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_flush} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction string_dup_items} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction vector_string_nth} {:close 1, :instruction vector_string_butlast} {:close 1, :instruction char_swap} {:close 1, :instruction tagged_445} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_dec} {:close 0, :instruction char_dup} {:close 0, :instruction string_eq} {:close 0, :instruction tag_vector_string_646} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_butlast} {:close 1, :instruction string_flush} {:close 1, :instruction string_shove} {:close 0, :instruction char_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction vector_string_take} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction char_yank} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction vector_string_empty} {:close 0, :instruction vector_string_last} {:close 1, :instruction string_replacechar} {:close 1, :instruction string_eq} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_nth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction vector_string_replace} {:close 0, :instruction vector_string_swap} {:close 0, :instruction string_eq} {:close 1, :instruction string_rot} {:close 0, :instruction vector_string_concat} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction vector_string_stackdepth} {:close 1, :instruction vector_string_yankdup} {:close 2, :instruction string_occurrencesofchar} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 0, :instruction char_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction string_emptystring} {:close 2, :instruction string_rot})
Best program: (integer_dup_times integer_gt integer_dup_times exec_do*times () char_dup vector_string_last boolean_empty vector_string_remove char_dup_items integer_shove exec_do*while (integer_fromboolean string_dup_times string_replacefirst) boolean_eq integer_pop in1 integer_min string_parse_to_chars vector_string_pushall vector_string_occurrencesof boolean_not string_frominteger vector_string_yankdup char_empty vector_string_length exec_stackdepth vector_string_replacefirst exec_do*range (boolean_invert_first_then_and) boolean_yankdup string_split boolean_shove string_occurrencesofchar exec_stackdepth string_first exec_y (string_eq) vector_string_pushall boolean_or integer_fromboolean string_occurrencesofchar char_isdigit vector_string_yank vector_string_reverse integer_mult string_fromchar integer_sub integer_mult exec_noop char_swap integer_dup_times string_replace exec_while () string_eq exec_flush string_last boolean_yank string_stackdepth boolean_dup_items vector_string_reverse integer_fromchar vector_string_last string_replacefirst char_dup_times integer_mod exec_while (vector_string_dup vector_string_conj boolean_empty exec_empty integer_shove) exec_dup (exec_if (vector_string_flush) (integer_fromstring boolean_yank integer_pop boolean_shove) boolean_stackdepth string_concat vector_string_eq integer_yankdup) vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger) string_indexofchar integer_pop string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_stackdepth) integer_max string_dup_items vector_string_dup_items vector_string_nth vector_string_butlast char_swap tagged_445 integer_yankdup exec_if (vector_string_last) (vector_string_length integer_dec char_dup string_eq tag_vector_string_646 string_rot vector_string_butlast string_flush) string_shove char_stackdepth exec_do*times (vector_string_take vector_string_reverse string_rot integer_yank string_butlast boolean_frominteger char_yank vector_string_yankdup vector_string_empty vector_string_last string_replacechar) string_eq string_last vector_string_nth boolean_dup_times vector_string_replace vector_string_swap string_eq string_rot vector_string_concat boolean_frominteger integer_gte vector_string_stackdepth vector_string_yankdup string_occurrencesofchar integer_gt integer_yankdup char_pop string_fromchar char_pop string_shove integer_sub string_emptystring string_rot)
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 154
Size: 170
Percent parens: 0.094
--- Population Statistics ---
Average total errors in population: 1.09400007144036E11
Median total errors in population: 2800
Error averages by case: (1.094000230891E9 1.094000074143E9 1.094000064845E9 1.094000064565E9 1.094000074735E9 1.094000069383E9 1.094000071905E9 1.094000066983E9 1.094000066983E9 1.094000069847E9 1.094000088209E9 1.094000067321E9 1.094000075985E9 1.094000066673E9 1.094000097209E9 1.094000074735E9 1.094000077279E9 1.094000064565E9 1.094000103709E9 1.094000066321E9 1.094000068505E9 1.094000065189E9 1.094000065189E9 1.094000070293E9 1.094000065189E9 1.094000081405E9 1.094000071369E9 1.094000066395E9 1.094000070293E9 1.094000085847E9 1.094000068091E9 1.094000066395E9 1.094000064531E9 1.094000064527E9 1.094000064527E9 1.094000069847E9 1.094000071863E9 1.094000064631E9 1.094000070337E9 1.094000067653E9 1.094000066929E9 1.094000068091E9 1.094000066395E9 1.094000067321E9 1.094000070845E9 1.094000068939E9 1.094000064735E9 1.094000071863E9 1.094000066055E9 1.094000110815E9 1.094000103709E9 1.094000064845E9 1.094000065397E9 1.094000068903E9 1.094000064735E9 1.094000066321E9 1.094000064527E9 1.094000067277E9 1.094000064997E9 1.094000065021E9 1.094000066055E9 1.094000066617E9 1.094000068505E9 1.094000064635E9 1.094000064567E9 1.094000065169E9 1.094000064531E9 1.094000067277E9 1.094000064567E9 1.094000066321E9 1.094000068903E9 1.094000067321E9 1.094000069383E9 1.094000072451E9 1.094000064531E9 1.094000065021E9 1.094000066929E9 1.094000064567E9 1.094000064735E9 1.094000066673E9 1.094000064721E9 1.094000080687E9 1.094000064635E9 1.094000068471E9 1.094000064527E9 1.094000068053E9 1.094000074143E9 1.094000065021E9 1.094000064869E9 1.094000064631E9 1.094000064527E9 1.094000077279E9 1.094000064567E9 1.094000064631E9 1.094000101405E9 1.094000066929E9 1.094000065021E9 1.094000064735E9 1.094000064721E9 1.094000065623E9)
Error minima by case: (5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 150.18
Average program size in population (points): 169.449
Average percent parens in population: 0.115
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9945
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.957
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.146
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 480113600
--- Timings ---
Current time: 1559325760004 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- bowling problem report - generation 3
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_remove} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_dup_times} {:close 1, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction boolean_not} {:close 0, :instruction string_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 1, :instruction char_empty} {:close 0, :instruction vector_string_length} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_first} {:close 0, :instruction exec_y} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_pushall} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_yank} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction integer_mult} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 2, :instruction char_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_replace} {:close 1, :instruction string_butlast} {:close 0, :instruction string_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction string_last} {:close 1, :instruction boolean_yank} {:close 1, :instruction string_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacefirst} {:close 2, :instruction char_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_flush} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction exec_s} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction string_dup_items} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction vector_string_nth} {:close 1, :instruction vector_string_butlast} {:close 1, :instruction char_swap} {:close 1, :instruction tagged_445} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_dec} {:close 0, :instruction char_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_dup_times integer_gt integer_dup_times exec_do*times () char_dup vector_string_last boolean_empty vector_string_remove char_dup_items integer_shove exec_do*while (integer_fromboolean string_dup_times string_replacefirst) boolean_eq integer_pop in1 integer_min string_parse_to_chars vector_string_pushall vector_string_occurrencesof boolean_not string_frominteger vector_string_yankdup char_empty vector_string_length exec_stackdepth vector_string_replacefirst exec_do*range (boolean_invert_first_then_and) boolean_yankdup string_swap boolean_shove string_occurrencesofchar exec_stackdepth string_first exec_y (string_eq) vector_string_pushall boolean_or integer_fromboolean string_occurrencesofchar char_isdigit vector_string_yank vector_string_reverse integer_mult string_fromchar integer_sub integer_mult exec_noop char_swap integer_dup_times string_replace string_butlast string_eq exec_flush string_last boolean_yank string_stackdepth boolean_dup_items vector_string_reverse integer_fromchar vector_string_last string_replacefirst char_dup_times integer_mod exec_while (vector_string_dup vector_string_conj boolean_empty exec_empty integer_shove) exec_dup (exec_if (vector_string_flush) (integer_fromstring boolean_yank integer_pop boolean_shove) boolean_stackdepth string_concat vector_string_eq exec_s () (vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger) string_indexofchar integer_pop string_removechar exec_do*while (in1)) (integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_stackdepth)) integer_max string_dup_items vector_string_dup_items vector_string_nth vector_string_butlast) char_swap tagged_445 integer_yankdup exec_if (vector_string_last) (vector_string_length integer_dec char_dup string_butlast exec_noop char_isletter) integer_rot string_rot integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap) string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Lexicase best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Lexicase best number of elite cases: 5
Lexicase best total error: 1832
Lexicase best mean error: 18.32
Lexicase best size: 213
Percent parens: 0.122
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_remove} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_dup_times} {:close 1, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction boolean_not} {:close 0, :instruction string_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 1, :instruction char_empty} {:close 0, :instruction vector_string_length} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_first} {:close 0, :instruction exec_y} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_pushall} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_yank} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction integer_mult} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 2, :instruction char_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_replace} {:close 1, :instruction string_butlast} {:close 0, :instruction string_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction string_last} {:close 1, :instruction boolean_yank} {:close 1, :instruction string_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacefirst} {:close 2, :instruction char_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_flush} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction exec_s} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction string_dup_items} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction vector_string_nth} {:close 1, :instruction vector_string_butlast} {:close 1, :instruction char_swap} {:close 1, :instruction tagged_445} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_dec} {:close 0, :instruction char_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_dup_times integer_gt integer_dup_times exec_do*times () char_dup vector_string_last boolean_empty vector_string_remove char_dup_items integer_shove exec_do*while (integer_fromboolean string_dup_times string_replacefirst) boolean_eq integer_pop in1 integer_min string_parse_to_chars vector_string_pushall vector_string_occurrencesof boolean_not string_frominteger vector_string_yankdup char_empty vector_string_length exec_stackdepth vector_string_replacefirst exec_do*range (boolean_invert_first_then_and) boolean_yankdup string_swap boolean_shove string_occurrencesofchar exec_stackdepth string_first exec_y (string_eq) vector_string_pushall boolean_or integer_fromboolean string_occurrencesofchar char_isdigit vector_string_yank vector_string_reverse integer_mult string_fromchar integer_sub integer_mult exec_noop char_swap integer_dup_times string_replace string_butlast string_eq exec_flush string_last boolean_yank string_stackdepth boolean_dup_items vector_string_reverse integer_fromchar vector_string_last string_replacefirst char_dup_times integer_mod exec_while (vector_string_dup vector_string_conj boolean_empty exec_empty integer_shove) exec_dup (exec_if (vector_string_flush) (integer_fromstring boolean_yank integer_pop boolean_shove) boolean_stackdepth string_concat vector_string_eq exec_s () (vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger) string_indexofchar integer_pop string_removechar exec_do*while (in1)) (integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_stackdepth)) integer_max string_dup_items vector_string_dup_items vector_string_nth vector_string_butlast) char_swap tagged_445 integer_yankdup exec_if (vector_string_last) (vector_string_length integer_dec char_dup string_butlast exec_noop char_isletter) integer_rot string_rot integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap) string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 213
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 13 13 17 9 15 11 13 13 17 5 20 5 20 2 9 9 17 18 9 13 12 12 13 12 7 10 13 13 8 9 13 17 26 26 17 10 15 11 5 17 9 13 20 4 12 22 10 12 70 18 13 11 9 22 9 26 11 5 20 12 6 13 15 19 15 17 11 19 9 9 20 15 8 17 20 17 19 22 20 16 2 15 11 26 10 13 20 12 15 26 9 19 15 4 17 20 22 16 10)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (0 13 13 17 9 15 11 13 13 17 5 20 5 20 2 9 9 17 18 9 13 12 12 13 12 7 10 13 13 8 9 13 17 26 26 17 10 15 11 5 17 9 13 20 4 12 22 10 12 70 18 13 11 9 22 9 26 11 5 20 12 6 13 15 19 15 17 11 19 9 9 20 15 8 17 20 17 19 22 20 16 2 15 11 26 10 13 20 12 15 26 9 19 15 4 17 20 22 16 10)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction string_yank} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_rest} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_concat} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_replacefirst})
Best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (string_parse_to_chars char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth exec_rot () (integer_inc string_yank) (vector_string_last vector_string_rest boolean_swap string_length exec_do*while (exec_dup_times (string_butlast vector_string_concat integer_div boolean_or) boolean_swap exec_empty) integer_dec char_pop exec_string_iterate (integer_fromboolean exec_flush char_eq integer_mult string_reverse boolean_dup exec_dup_items) string_replacefirst))
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 189
Size: 214
Percent parens: 0.117
--- Population Statistics ---
Average total errors in population: 9.500004361444E9
Median total errors in population: 2582
Error averages by case: (9.5000201981E7 9.5000045335E7 9.5000037454E7 9.5000036849E7 9.500004596E7 9.50000405E7 9.5000043013E7 9.5000038292E7 9.5000038292E7 9.5000040955E7 9.5000059541E7 9.5000038597E7 9.500004725E7 9.5000038013E7 9.5000068414E7 9.500004596E7 9.5000048572E7 9.5000036849E7 9.5000079683E7 9.5000039615E7 9.5000039674E7 9.5000036851E7 9.5000036851E7 9.5000044257E7 9.5000036851E7 9.5000052776E7 9.5000042474E7 9.5000037774E7 9.5000044257E7 9.5000057222E7 9.5000039299E7 9.5000037774E7 9.5000036627E7 9.5000036712E7 9.5000036712E7 9.5000040955E7 9.5000045932E7 9.500003702E7 9.5000041444E7 9.5000041257E7 9.5000040385E7 9.5000039299E7 9.5000037774E7 9.5000038597E7 9.5000041955E7 9.5000040075E7 9.500003658E7 9.5000045932E7 9.5000039254E7 9.5000087105E7 9.5000079683E7 9.5000037454E7 9.5000037E7 9.500004269E7 9.500003658E7 9.5000039615E7 9.5000036712E7 9.500004081E7 9.5000037713E7 9.5000036726E7 9.5000039254E7 9.5000039994E7 9.5000039674E7 9.5000036563E7 9.5000036576E7 9.5000037982E7 9.5000036627E7 9.500004081E7 9.5000036576E7 9.5000039615E7 9.500004269E7 9.5000038597E7 9.50000405E7 9.5000043574E7 9.5000036627E7 9.5000036726E7 9.5000040385E7 9.5000036576E7 9.500003658E7 9.5000038013E7 9.5000037221E7 9.5000052061E7 9.5000036563E7 9.5000042191E7 9.5000036712E7 9.5000041714E7 9.5000045335E7 9.5000036726E7 9.5000036641E7 9.500003702E7 9.5000036712E7 9.5000048572E7 9.5000036576E7 9.500003702E7 9.5000072575E7 9.5000040385E7 9.5000036726E7 9.500003658E7 9.5000037221E7 9.5000037171E7)
Error minima by case: (5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 152.313
Average program size in population (points): 171.731
Average percent parens in population: 0.114
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3535
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.145
Error (vector) diversity:			 0.147
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 700569200
--- Timings ---
Current time: 1559325942324 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- bowling problem report - generation 4
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction char_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth})
Lexicase best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () vector_string_yankdup integer_fromchar integer_min exec_do*while (integer_fromchar integer_min) integer_empty boolean_yankdup integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take boolean_frominteger char_yank integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth)
Lexicase best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Lexicase best number of elite cases: 5
Lexicase best total error: 1832
Lexicase best mean error: 18.32
Lexicase best size: 182
Percent parens: 0.099
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction char_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction vector_string_take} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 1, :instruction exec_when} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth})
Zero cases best program: (vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_first string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () vector_string_yankdup integer_fromchar integer_min exec_do*while (integer_fromchar integer_min) integer_empty boolean_yankdup integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take boolean_frominteger char_yank integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) vector_string_take char_allfromstring integer_stackdepth integer_lte vector_string_last boolean_empty vector_string_last string_flush exec_when () string_dup_times integer_fromchar string_butlast exec_when (vector_string_pop string_setchar integer_pop string_swap string_fromchar integer_lt exec_dup_items) string_flush exec_dup_items char_yank string_nth)
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 182
Percent parens: 0.099
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 9 18 14 12 12 7 10 10 11 6 23 8 14 6 12 5 14 22 20 14 22 22 8 22 7 11 12 8 6 10 12 15 23 23 11 10 11 13 6 18 10 12 23 8 14 19 10 8 63 22 18 9 15 19 20 23 5 9 33 8 12 14 8 16 15 15 5 16 20 15 23 12 11 15 33 18 16 19 14 18 7 8 9 23 4 9 33 8 11 23 5 16 11 4 18 33 19 18 10)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (1 9 18 14 12 12 7 10 10 11 6 23 8 14 6 12 5 14 22 20 14 22 22 8 22 7 11 12 8 6 10 12 15 23 23 11 10 11 13 6 18 10 12 23 8 14 19 10 8 63 22 18 9 15 19 20 23 5 9 33 8 12 14 8 16 15 15 5 16 20 15 23 12 11 15 33 18 16 19 14 18 7 8 9 23 4 9 33 8 11 23 5 16 11 4 18 33 19 18 10)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_last} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_string_remove} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_dup_times} {:close 1, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 0, :instruction vector_string_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction vector_string_conj} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction boolean_not} {:close 0, :instruction string_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 1, :instruction char_empty} {:close 0, :instruction vector_string_length} {:close 0, :instruction string_dup_items} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_first} {:close 0, :instruction exec_y} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_pushall} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_yank} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction integer_mult} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 2, :instruction char_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_replace} {:close 0, :instruction exec_while} {:close 0, :instruction string_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction string_last} {:close 1, :instruction boolean_yank} {:close 1, :instruction string_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacefirst} {:close 1, :instruction char_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_flush} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 2, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction string_dup_items} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction vector_string_nth} {:close 1, :instruction vector_string_butlast} {:close 1, :instruction char_swap} {:close 1, :instruction tagged_445} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_dec} {:close 0, :instruction char_dup} {:close 0, :instruction string_eq} {:close 0, :instruction tag_vector_string_646} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_butlast} {:close 1, :instruction string_flush} {:close 1, :instruction string_shove} {:close 0, :instruction char_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction vector_string_take} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction char_yank} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction vector_string_empty} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacechar} {:close 1, :instruction string_eq} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_nth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction vector_string_replace} {:close 0, :instruction vector_string_swap} {:close 0, :instruction string_eq} {:close 1, :instruction string_rot} {:close 0, :instruction vector_string_concat} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction vector_string_stackdepth} {:close 1, :instruction vector_string_yankdup} {:close 2, :instruction string_occurrencesofchar} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 0, :instruction char_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction string_emptystring} {:close 2, :instruction string_rot})
Best program: (integer_dup_times integer_gt integer_dup_times exec_do*times () char_dup vector_string_last boolean_empty vector_string_remove char_dup_items integer_shove exec_do*while (integer_fromboolean string_dup_times string_replacefirst) boolean_eq vector_string_dup_times in1 integer_min vector_string_conj vector_string_pushall vector_string_occurrencesof boolean_not string_frominteger vector_string_yankdup char_empty vector_string_length string_dup_items vector_string_replacefirst exec_do*range (boolean_invert_first_then_and) boolean_yankdup string_swap boolean_shove string_occurrencesofchar exec_stackdepth string_first exec_y (string_eq) vector_string_pushall boolean_or integer_fromboolean string_occurrencesofchar char_isdigit vector_string_yank vector_string_reverse integer_mult string_fromchar integer_sub integer_mult exec_noop char_swap integer_dup_times string_replace exec_while (string_eq exec_flush) string_last boolean_yank string_stackdepth boolean_dup_items vector_string_reverse integer_fromchar vector_string_last string_replacefirst char_dup_times integer_mod exec_while (vector_string_dup vector_string_conj boolean_empty exec_empty integer_shove) exec_dup (exec_if (vector_string_flush integer_fromstring boolean_yank integer_pop boolean_shove) (boolean_stackdepth string_concat vector_string_eq integer_yankdup) vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger)) string_indexofchar integer_pop string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_stackdepth) integer_max string_dup_items vector_string_dup_items vector_string_nth vector_string_butlast char_swap tagged_445 integer_yankdup exec_if (vector_string_last) (vector_string_length integer_dec char_dup string_eq tag_vector_string_646 string_rot vector_string_butlast string_flush) string_shove char_stackdepth exec_do*times (vector_string_take vector_string_reverse string_rot) integer_yank string_butlast boolean_frominteger char_yank vector_string_yankdup vector_string_empty vector_string_last string_replacechar string_eq string_last vector_string_nth boolean_dup_times vector_string_replace vector_string_swap string_eq string_rot vector_string_concat boolean_frominteger integer_gte vector_string_stackdepth vector_string_yankdup string_occurrencesofchar integer_gt integer_yankdup char_pop string_fromchar char_pop string_shove integer_sub string_emptystring string_rot)
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 154
Size: 170
Percent parens: 0.094
--- Population Statistics ---
Average total errors in population: 9.900005466002E9
Median total errors in population: 2566
Error averages by case: (9.9000210259E7 9.9000055845E7 9.9000048654E7 9.9000048049E7 9.9000056438E7 9.9000051238E7 9.9000053623E7 9.9000049166E7 9.9000049166E7 9.9000051671E7 9.9000069787E7 9.9000049441E7 9.900005768E7 9.9000048911E7 9.9000078606E7 9.9000056438E7 9.9000058974E7 9.9000048049E7 9.9000092697E7 9.9000050947E7 9.9000050448E7 9.9000047811E7 9.9000047811E7 9.9000055953E7 9.9000047811E7 9.9000063068E7 9.9000053104E7 9.9000048684E7 9.9000055953E7 9.9000067482E7 9.9000050095E7 9.9000048684E7 9.9000047801E7 9.9000047902E7 9.9000047902E7 9.9000051671E7 9.900005769E7 9.9000048224E7 9.9000052126E7 9.9000052761E7 9.9000051801E7 9.9000050095E7 9.9000048684E7 9.9000049441E7 9.9000052607E7 9.9000050829E7 9.9000047668E7 9.900005769E7 9.9000050572E7 9.9000100313E7 9.9000092697E7 9.9000048654E7 9.9000047952E7 9.9000054286E7 9.9000047668E7 9.9000050947E7 9.9000047902E7 9.9000052276E7 9.9000048923E7 9.9000047714E7 9.9000050572E7 9.9000051362E7 9.9000050448E7 9.9000047691E7 9.900004773E7 9.900004921E7 9.9000047801E7 9.9000052276E7 9.900004773E7 9.9000050947E7 9.9000054286E7 9.9000049441E7 9.9000051238E7 9.9000054156E7 9.9000047801E7 9.9000047714E7 9.9000051801E7 9.900004773E7 9.9000047668E7 9.9000048911E7 9.9000048421E7 9.9000062363E7 9.9000047691E7 9.9000053763E7 9.9000047902E7 9.9000053258E7 9.9000055845E7 9.9000047714E7 9.9000047683E7 9.9000048224E7 9.9000047902E7 9.9000058974E7 9.900004773E7 9.9000048224E7 9.9000082741E7 9.9000051801E7 9.9000047714E7 9.9000047668E7 9.9000048421E7 9.9000048111E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 147.213
Average program size in population (points): 166.075
Average percent parens in population: 0.114
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.725625
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.141
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 920736700
--- Timings ---
Current time: 1559326116905 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- bowling problem report - generation 5
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_yankdup} {:close 0, :instruction char_iswhitespace} {:close 2, :instruction string_parse_to_chars} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction vector_string_stackdepth} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction char_empty} {:close 0, :instruction vector_string_nth} {:close 0, :instruction vector_string_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction char_eq} {:close 0, :instruction string_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_dup} {:close 2, :instruction integer_mult} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction string_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction char_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_flush} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_replace} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction vector_string_stackdepth} {:close 1, :instruction vector_string_yankdup} {:close 2, :instruction string_occurrencesofchar} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 0, :instruction char_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction string_emptystring} {:close 2, :instruction string_rot})
Lexicase best program: (exec_noop boolean_not exec_string_iterate (integer_yankdup char_iswhitespace string_parse_to_chars) integer_fromboolean vector_string_stackdepth string_replacechar exec_do*count (integer_lte) char_empty vector_string_nth vector_string_yank integer_dup exec_y (vector_string_concat string_shove exec_do*count (char_eq string_rot exec_stackdepth string_dup) integer_mult) vector_string_dup_items integer_inc string_eq exec_do*count (char_frominteger boolean_dup_items string_first string_setchar) char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (boolean_invert_first_then_and vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_flush string_conjchar string_butlast vector_string_pushall string_replace string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar boolean_frominteger integer_gte vector_string_stackdepth vector_string_yankdup string_occurrencesofchar integer_gt integer_yankdup char_pop string_fromchar char_pop string_shove integer_sub string_emptystring string_rot)
Lexicase best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Lexicase best number of elite cases: 5
Lexicase best total error: 1832
Lexicase best mean error: 18.32
Lexicase best size: 148
Percent parens: 0.108
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_yankdup} {:close 0, :instruction char_iswhitespace} {:close 2, :instruction string_parse_to_chars} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction vector_string_stackdepth} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction char_empty} {:close 0, :instruction vector_string_nth} {:close 0, :instruction vector_string_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction char_eq} {:close 0, :instruction string_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_dup} {:close 2, :instruction integer_mult} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction string_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction char_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction string_first} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_string_set} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_flush} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_replace} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction vector_string_stackdepth} {:close 1, :instruction vector_string_yankdup} {:close 2, :instruction string_occurrencesofchar} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 0, :instruction char_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction string_emptystring} {:close 2, :instruction string_rot})
Zero cases best program: (exec_noop boolean_not exec_string_iterate (integer_yankdup char_iswhitespace string_parse_to_chars) integer_fromboolean vector_string_stackdepth string_replacechar exec_do*count (integer_lte) char_empty vector_string_nth vector_string_yank integer_dup exec_y (vector_string_concat string_shove exec_do*count (char_eq string_rot exec_stackdepth string_dup) integer_mult) vector_string_dup_items integer_inc string_eq exec_do*count (char_frominteger boolean_dup_items string_first string_setchar) char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (integer_rot integer_fromstring integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times vector_string_set integer_flush string_yankdup integer_mod string_occurrencesofchar integer_dup_items boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (boolean_invert_first_then_and vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_flush string_conjchar string_butlast vector_string_pushall string_replace string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar boolean_frominteger integer_gte vector_string_stackdepth vector_string_yankdup string_occurrencesofchar integer_gt integer_yankdup char_pop string_fromchar char_pop string_shove integer_sub string_emptystring string_rot)
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 148
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 9 12 17 21 9 7 14 14 13 5 16 11 16 4 21 10 17 17 11 11 20 20 17 20 11 7 22 17 2 21 22 18 32 32 13 10 13 11 10 14 21 22 16 12 9 14 10 9 52 17 12 18 10 14 11 32 9 10 22 9 5 11 12 19 8 18 9 19 11 10 16 9 9 18 22 14 19 14 16 8 2 12 10 32 8 9 22 9 13 32 10 19 13 3 14 22 14 8 13)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (3 9 12 17 21 9 7 14 14 13 5 16 11 16 4 21 10 17 17 11 11 20 20 17 20 11 7 22 17 2 21 22 18 32 32 13 10 13 11 10 14 21 22 16 12 9 14 10 9 52 17 12 18 10 14 11 32 9 10 22 9 5 11 12 19 8 18 9 19 11 10 16 9 9 18 22 14 19 14 16 8 2 12 10 32 8 9 22 9 13 32 10 19 13 3 14 22 14 8 13)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_nth} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction char_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_max} {:close 0, :instruction string_empty} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction string_setchar} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction char_eq} {:close 1, :instruction string_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction string_replacechar} {:close 1, :instruction integer_rot} {:close 0, :instruction char_yank} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction char_rot} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_string_dup_times} {:close 1, :instruction char_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction string_replacefirstchar} {:close 2, :instruction char_dup} {:close 0, :instruction string_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_string_eq} {:close 1, :instruction string_pop} {:close 1, :instruction string_indexofchar} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_string_contains} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction string_yankdup} {:close 0, :instruction integer_fromchar} {:close 0, :instruction tagged_209} {:close 1, :instruction string_rest} {:close 1, :instruction string_emptystring} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction char_allfromstring} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_638} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_first} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_eq} {:close 0, :instruction string_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction char_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_nth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_swap} {:close 1, :instruction integer_add} {:close 1, :instruction string_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 1, :instruction char_stackdepth} {:close 0, :instruction char_rot} {:close 0, :instruction string_rest} {:close 0, :instruction char_rot} {:close 0, :instruction string_last} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction string_length} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction vector_string_nth} {:close 0, :instruction vector_string_contains} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction char_rot} {:close 1, :instruction char_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_eq} {:close 0, :instruction string_conjchar} {:close 1, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction string_rot} {:close 0, :instruction char_dup_times} {:close 0, :instruction string_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_string_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction vector_string_rest} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction string_length} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_replacechar} {:close 0, :instruction vector_string_occurrencesof})
Best program: (vector_string_concat vector_string_nth exec_y (vector_string_reverse boolean_invert_second_then_and exec_stackdepth exec_string_iterate (vector_string_subvec integer_stackdepth integer_dup char_yankdup boolean_eq) string_dup_items string_fromchar integer_max string_empty string_conjchar char_frominteger integer_min string_setchar integer_stackdepth) char_eq string_stackdepth exec_empty integer_fromstring string_butlast boolean_dup vector_string_dup_items string_replacechar integer_rot char_yank vector_string_subvec integer_eq vector_string_last exec_s_when_autoconstructing (char_rot vector_string_last exec_dup (vector_string_dup_times char_dup_times) integer_dup_times string_replacefirstchar) (char_dup) () string_yankdup char_iswhitespace exec_do*times () vector_string_eq string_pop string_indexofchar boolean_invert_first_then_and integer_gt vector_string_contains string_removechar exec_y_when_autoconstructing (integer_mult integer_dec string_yankdup) integer_fromchar tagged_209 string_rest string_emptystring vector_string_dup_items char_rot boolean_yankdup exec_do*times (in1 char_allfromstring exec_yankdup) tagged_638 boolean_invert_first_then_and vector_string_first integer_dup_times string_flush integer_lte char_iswhitespace integer_eq string_frominteger integer_empty char_yankdup boolean_dup_times vector_string_occurrencesof string_flush boolean_yankdup boolean_shove exec_swap (boolean_empty) (integer_mod vector_string_butlast vector_string_nth boolean_pop exec_do*times (string_swap) integer_add) string_rot exec_empty boolean_invert_second_then_and exec_empty char_stackdepth char_rot string_rest char_rot string_last exec_eq exec_do*vector_string (integer_dup_times exec_yankdup string_containschar vector_string_occurrencesof string_length exec_shove (exec_flush exec_if () (vector_string_nth vector_string_contains integer_eq) boolean_not integer_stackdepth) char_rot char_stackdepth) boolean_dup string_eq string_conjchar exec_s () (exec_swap (boolean_not boolean_empty) (boolean_invert_second_then_and string_parse_to_chars string_rot)) (char_dup_times string_dup_times exec_shove (vector_string_rot integer_sub char_frominteger vector_string_subvec vector_string_rest integer_max) exec_flush string_length boolean_dup_items exec_y_when_autoconstructing (string_occurrencesofchar vector_string_length integer_flush exec_y_when_autoconstructing (char_frominteger integer_fromstring string_replacechar vector_string_occurrencesof))))
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 150
Size: 175
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 9.300006838916E9
Median total errors in population: 2642
Error averages by case: (9.3000227459E7 9.3000069709E7 9.3000062362E7 9.3000061661E7 9.3000070316E7 9.3000064936E7 9.3000067423E7 9.3000062706E7 9.3000062706E7 9.3000065387E7 9.3000084381E7 9.3000063009E7 9.300007162E7 9.3000062431E7 9.300009336E7 9.3000070316E7 9.3000072986E7 9.3000061661E7 9.3000106763E7 9.3000064639E7 9.3000064088E7 9.3000061359E7 9.3000061359E7 9.3000069337E7 9.3000061359E7 9.3000077372E7 9.3000066886E7 9.3000062188E7 9.3000069337E7 9.3000082016E7 9.3000063695E7 9.3000062188E7 9.3000061371E7 9.3000061484E7 9.3000061484E7 9.3000065387E7 9.3000071092E7 9.3000061872E7 9.3000065864E7 9.3000066299E7 9.3000065427E7 9.3000063695E7 9.3000062188E7 9.3000063009E7 9.3000066363E7 9.3000064503E7 9.300006124E7 9.3000071092E7 9.3000064272E7 9.3000114537E7 9.3000106763E7 9.3000062362E7 9.3000061474E7 9.3000067746E7 9.300006124E7 9.3000064639E7 9.3000061484E7 9.3000065854E7 9.3000062639E7 9.3000061284E7 9.3000064272E7 9.3000065028E7 9.3000064088E7 9.3000061255E7 9.3000061294E7 9.3000062936E7 9.3000061371E7 9.3000065854E7 9.3000061294E7 9.3000064639E7 9.3000067746E7 9.3000063009E7 9.3000064936E7 9.3000067974E7 9.3000061371E7 9.3000061284E7 9.3000065427E7 9.3000061294E7 9.300006124E7 9.3000062431E7 9.3000062109E7 9.3000076629E7 9.3000061255E7 9.3000067245E7 9.3000061484E7 9.3000066764E7 9.3000069709E7 9.3000061284E7 9.3000061253E7 9.3000061872E7 9.3000061484E7 9.3000072986E7 9.3000061294E7 9.3000061872E7 9.3000097569E7 9.3000065427E7 9.3000061284E7 9.300006124E7 9.3000062109E7 9.3000061625E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 146.867
Average program size in population (points): 165.543
Average percent parens in population: 0.113
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.1445
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.143
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1145459500
--- Timings ---
Current time: 1559326301183 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- bowling problem report - generation 6
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction char_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_first} {:close 0, :instruction exec_y} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_pushall} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_yank} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction integer_mult} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 2, :instruction char_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_replace} {:close 1, :instruction exec_while} {:close 0, :instruction string_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction string_last} {:close 1, :instruction boolean_yank} {:close 1, :instruction string_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacefirst} {:close 2, :instruction char_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_flush} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_shove} {:close 1, :instruction string_nth} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction char_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction string_emptystring} {:close 2, :instruction string_rot})
Lexicase best program: (vector_string_contains tagged_347 boolean_not boolean_pop char_frominteger integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_invert_first_then_and boolean_yankdup string_swap boolean_shove string_occurrencesofchar exec_stackdepth string_first exec_y (string_eq) vector_string_pushall boolean_or integer_fromboolean string_occurrencesofchar char_isdigit vector_string_yank vector_string_reverse integer_mult string_fromchar integer_sub integer_mult exec_noop char_swap integer_dup_times string_replace exec_while () string_eq exec_flush string_last boolean_yank string_stackdepth boolean_dup_items vector_string_reverse integer_fromchar vector_string_last string_replacefirst char_dup_times integer_mod exec_while (vector_string_dup vector_string_conj boolean_empty exec_empty integer_shove) exec_dup (exec_if (vector_string_flush) (integer_fromstring boolean_yank integer_pop boolean_shove) boolean_stackdepth string_concat vector_string_eq integer_yankdup) vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger) string_indexofchar integer_pop string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and char_shove string_nth string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (char_flush exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_fromchar char_pop string_shove integer_sub string_emptystring string_rot)
Lexicase best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Lexicase best number of elite cases: 5
Lexicase best total error: 1832
Lexicase best mean error: 18.32
Lexicase best size: 134
Percent parens: 0.112
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction char_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_first} {:close 0, :instruction exec_y} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_pushall} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_yank} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction integer_mult} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 2, :instruction char_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_replace} {:close 1, :instruction exec_while} {:close 0, :instruction string_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction string_last} {:close 1, :instruction boolean_yank} {:close 1, :instruction string_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_replacefirst} {:close 2, :instruction char_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction vector_string_flush} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_shove} {:close 1, :instruction string_nth} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction char_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction char_isletter} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction string_emptystring} {:close 2, :instruction string_rot})
Zero cases best program: (vector_string_contains tagged_347 boolean_not boolean_pop char_frominteger integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_invert_first_then_and boolean_yankdup string_swap boolean_shove string_occurrencesofchar exec_stackdepth string_first exec_y (string_eq) vector_string_pushall boolean_or integer_fromboolean string_occurrencesofchar char_isdigit vector_string_yank vector_string_reverse integer_mult string_fromchar integer_sub integer_mult exec_noop char_swap integer_dup_times string_replace exec_while () string_eq exec_flush string_last boolean_yank string_stackdepth boolean_dup_items vector_string_reverse integer_fromchar vector_string_last string_replacefirst char_dup_times integer_mod exec_while (vector_string_dup vector_string_conj boolean_empty exec_empty integer_shove) exec_dup (exec_if (vector_string_flush) (integer_fromstring boolean_yank integer_pop boolean_shove) boolean_stackdepth string_concat vector_string_eq integer_yankdup) vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger) string_indexofchar integer_pop string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and char_shove string_nth string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) integer_gte string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (char_flush exec_noop char_isletter) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_fromchar char_pop string_shove integer_sub string_emptystring string_rot)
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 134
Percent parens: 0.112
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 16 19 18 14 19 8 16 16 11 5 22 10 15 5 14 12 18 12 22 10 18 18 16 18 5 6 21 16 9 10 21 23 26 26 11 11 13 8 14 22 10 21 22 10 10 19 11 14 55 12 19 12 13 19 22 26 7 10 23 14 6 10 11 20 11 23 7 20 22 13 22 19 7 23 23 22 20 19 15 11 7 11 9 26 10 16 23 15 13 26 12 20 13 5 22 23 19 11 6)
Population mean number of elite cases: 1.56
Count of perfect (error zero) individuals by case: (2 16 19 18 14 19 8 16 16 11 5 22 10 15 5 14 12 18 12 22 10 18 18 16 18 5 6 21 16 9 10 21 23 26 26 11 11 13 8 14 22 10 21 22 10 10 19 11 14 55 12 19 12 13 19 22 26 7 10 23 14 6 10 11 20 11 23 7 20 22 13 22 19 7 23 23 22 20 19 15 11 7 11 9 26 10 16 23 15 13 26 12 20 13 5 22 23 19 11 6)
Population mean number of perfect (error zero) cases: 1.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_contains} {:close 0, :instruction tagged_347} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 3, :instruction string_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_yank} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_take} {:close 1, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_contains} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction string_shove} {:close 1, :instruction string_setchar} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction char_dup} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_last} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_string_eq} {:close 0, :instruction integer_lt} {:close 2, :instruction string_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_407} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_dup_times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_take} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 2, :instruction vector_string_conj} {:close 1, :instruction exec_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_pop} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_indexofchar} {:close 1, :instruction exec_noop} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction integer_mod} {:close 0, :instruction string_take} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction char_shove} {:close 1, :instruction exec_y} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_concat} {:close 0, :instruction string_take} {:close 0, :instruction string_last} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_yankdup} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_noop} {:close 1, :instruction vector_string_pushall} {:close 1, :instruction integer_rot} {:close 1, :instruction string_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup} {:close 0, :instruction string_first} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction vector_string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction string_take} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_allfromstring} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_string_yank} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*times} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction string_first} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_string_replace} {:close 0, :instruction integer_fromchar} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction string_containschar} {:close 0, :instruction char_yank} {:close 0, :instruction string_nth} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_dup_times} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_length} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 1, :instruction string_empty} {:close 0, :instruction vector_string_set} {:close 1, :instruction tag_boolean_970} {:close 0, :instruction boolean_rot} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction char_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction char_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction string_eq} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction char_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_eq} {:close 0, :instruction char_isdigit})
Best program: (vector_string_contains tagged_347 boolean_not vector_string_contains tagged_347 boolean_not boolean_pop string_stackdepth integer_gte exec_do*times (char_yank vector_string_last) vector_string_take integer_pop string_substring integer_empty string_contains boolean_pop char_isletter string_rot vector_string_contains integer_swap char_frominteger vector_string_yankdup string_shove string_setchar char_flush vector_string_swap char_dup_times integer_dup_items boolean_and boolean_dup exec_when (vector_string_pop boolean_or integer_eq integer_fromboolean string_rot string_reverse vector_string_emptyvector string_dup string_dup char_dup string_conjchar string_last integer_div integer_div) boolean_dup integer_inc vector_string_eq integer_lt string_fromboolean integer_dup_times string_dup integer_flush string_yankdup integer_mod string_occurrencesofchar boolean_flush boolean_frominteger tag_integer_407 string_butlast exec_y (vector_string_dup_times string_stackdepth exec_when (char_isletter) exec_k_when_autoconstructing (integer_empty vector_string_yankdup boolean_yankdup string_take) (exec_stackdepth integer_rot) exec_while (vector_string_conj)) exec_eq char_yankdup char_iswhitespace char_iswhitespace string_occurrencesofchar integer_mult exec_yankdup string_pop string_yankdup string_dup string_indexofchar exec_noop vector_string_indexof string_parse_to_chars string_conjchar string_butlast vector_string_pushall integer_mod string_take exec_dup_times () integer_mult char_shove exec_y () string_swap integer_fromchar integer_min exec_do*while (boolean_yankdup) string_dup_items string_concat string_take string_last exec_do*vector_string (exec_yankdup) vector_string_indexof string_replacechar integer_dup exec_s_when_autoconstructing (string_butlast exec_noop vector_string_pushall) (integer_rot) (string_rot) integer_yank integer_fromboolean exec_eq boolean_yank char_dup string_first integer_pop integer_flush vector_string_dup boolean_shove string_flush string_take integer_fromstring integer_fromboolean exec_do*range (boolean_dup char_allfromstring vector_string_occurrencesof integer_pop vector_string_yank) string_removechar exec_do*times (vector_string_reverse char_flush vector_string_reverse string_first) boolean_stackdepth integer_pop boolean_dup_items vector_string_replace integer_fromchar vector_string_indexof char_stackdepth string_rot vector_string_subvec string_containschar char_yank string_nth exec_rot () (integer_inc exec_dup_times () string_butlast exec_when (vector_string_pop string_length exec_do*times (integer_mod) exec_eq string_empty) vector_string_set tag_boolean_970) (boolean_rot vector_string_dup_items integer_stackdepth) integer_yank integer_dec char_pop exec_string_iterate (integer_fromboolean boolean_pop char_eq integer_mult string_setchar vector_string_last string_stackdepth exec_eq) exec_do*count (integer_div char_empty exec_shove () string_removechar integer_lte exec_rot (string_eq char_isdigit integer_gt vector_string_reverse char_yankdup integer_lt integer_div char_empty exec_shove () string_removechar integer_lte integer_dup_items string_eq char_isdigit) () ()))
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 206
Size: 236
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 6.900005491424E9
Median total errors in population: 2494
Error averages by case: (6.9000218164E7 6.9000056554E7 6.9000048389E7 6.900004776E7 6.9000057181E7 6.9000051617E7 6.900005422E7 6.9000049255E7 6.9000049255E7 6.90000521E7 6.9000071556E7 6.9000049584E7 6.9000058509E7 6.9000048958E7 6.9000080825E7 6.9000057181E7 6.9000059903E7 6.900004776E7 6.90000956E7 6.9000050628E7 6.9000050747E7 6.9000047716E7 6.9000047716E7 6.900005577E7 6.9000047716E7 6.9000064343E7 6.9000053667E7 6.9000048691E7 6.900005577E7 6.9000069083E7 6.9000050342E7 6.9000048691E7 6.9000047514E7 6.9000047611E7 6.9000047611E7 6.90000521E7 6.9000057679E7 6.9000047945E7 6.9000052605E7 6.9000052418E7 6.9000051466E7 6.9000050342E7 6.9000048691E7 6.9000049584E7 6.9000053126E7 6.9000051172E7 6.9000047463E7 6.9000057679E7 6.9000050259E7 6.900010366E7 6.90000956E7 6.9000048389E7 6.9000047877E7 6.9000054009E7 6.9000047463E7 6.9000050628E7 6.9000047611E7 6.9000051935E7 6.900004866E7 6.9000047591E7 6.9000050259E7 6.9000051041E7 6.9000050747E7 6.9000047452E7 6.9000047463E7 6.9000048951E7 6.9000047514E7 6.9000051935E7 6.9000047463E7 6.9000050628E7 6.9000054009E7 6.9000049584E7 6.9000051617E7 6.9000054789E7 6.9000047514E7 6.9000047591E7 6.9000051466E7 6.9000047463E7 6.9000047463E7 6.9000048958E7 6.9000048156E7 6.900006358E7 6.9000047452E7 6.900005346E7 6.9000047611E7 6.9000052929E7 6.9000056554E7 6.9000047591E7 6.9000047512E7 6.9000047945E7 6.9000047611E7 6.9000059903E7 6.9000047463E7 6.9000047945E7 6.9000085128E7 6.9000051466E7 6.9000047591E7 6.9000047463E7 6.9000048156E7 6.9000048062E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 145.993
Average program size in population (points): 164.829
Average percent parens in population: 0.114
Minimum age in population: 6.0
Maximum age in population: 10.40625
Average age in population: 8.48609375
Median age in population: 8.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.141
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 1362280200
--- Timings ---
Current time: 1559326477490 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- bowling problem report - generation 7
Test total error for best: 13507
Test mean error for best: 13.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    110 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:     99 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:    134 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    117 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:    145 | Program output: 89
Correct output:    115 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     84 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:     92 | Program output: 89
Correct output:    125 | Program output: 89
Correct output:    109 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     64 | Program output: 89
Correct output:    131 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    106 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    107 | Program output: 89
Correct output:     70 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:    102 | Program output: 89
Correct output:     97 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    108 | Program output: 89
Correct output:    104 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     61 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:      0 | Program output: 89
Correct output:     10 | Program output: 89
Correct output:     81 | Program output: 89
Correct output:     93 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     80 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     75 | Program output: 89
Correct output:     73 | Program output: 89
Correct output:    103 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     79 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     71 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     74 | Program output: 89
Correct output:     67 | Program output: 89
Correct output:    100 | Program output: 89
Correct output:    105 | Program output: 89
Correct output:    111 | Program output: 89
Correct output:     86 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     98 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:    124 | Program output: 89
Correct output:     88 | Program output: 89
Correct output:     68 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:     69 | Program output: 89
Correct output:    114 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     90 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:     85 | Program output: 89
Correct output:    119 | Program output: 89
Correct output:     87 | Program output: 89
Correct output:     83 | Program output: 89
Correct output:    150 | Program output: 89
Correct output:     72 | Program output: 89
Correct output:     91 | Program output: 89
Correct output:     89 | Program output: 89
Correct output:     82 | Program output: 89
Correct output:     94 | Program output: 89
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_fromboolean} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_set} {:close 0, :instruction string_last} {:close 0, :instruction string_last} {:close 0, :instruction string_length} {:close 0, :instruction string_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_string_concat} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction char_eq} {:close 0, :instruction char_dup_times} {:close 1, :instruction string_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction string_containschar} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction string_frominteger} {:close 2, :instruction vector_string_yankdup} {:close 1, :instruction vector_string_rot} {:close 1, :instruction integer_min} {:close 0, :instruction tag_char_432} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction char_isletter} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_concat} {:close 2, :instruction char_eq} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 2, :instruction string_reverse} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_string_length} {:close 0, :instruction char_swap} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction integer_mult} {:close 0, :instruction char_isletter} {:close 1, :instruction string_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction string_reverse} {:close 0, :instruction char_yankdup} {:close 1, :instruction vector_string_replacefirst} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_swap} {:close 1, :instruction string_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_string_shove} {:close 0, :instruction char_shove} {:close 1, :instruction char_yankdup} {:close 0, :instruction vector_string_shove} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction tag_boolean_851} {:close 0, :instruction vector_string_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_string_subvec} {:close 1, :instruction integer_fromstring} {:close 0, :instruction vector_string_take} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction vector_string_nth} {:close 0, :instruction exec_eq} {:close 1, :instruction vector_string_conj} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction string_length} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction vector_string_nth} {:close 0, :instruction vector_string_contains} {:close 1, :instruction string_length} {:close 0, :instruction string_split} {:close 1, :instruction boolean_empty} {:close 0, :instruction char_rot} {:close 1, :instruction char_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_eq} {:close 0, :instruction string_conjchar} {:close 1, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction string_rot})
Lexicase best program: (string_fromboolean exec_do*vector_string (vector_string_rest vector_string_set string_last string_last string_length string_rot exec_stackdepth vector_string_concat exec_flush) integer_mult boolean_yankdup char_eq char_dup_times string_frominteger integer_dec integer_gt string_containschar integer_gt exec_do*range (string_frominteger vector_string_yankdup) vector_string_rot integer_min tag_char_432 vector_string_pop string_removechar char_isletter integer_gte exec_yankdup string_concat char_eq string_occurrencesofchar boolean_empty integer_rot string_reverse boolean_dup_items integer_gt vector_string_length char_swap exec_do*vector_string (integer_mult) char_isletter string_fromboolean exec_if (exec_shove (integer_empty string_reverse) char_yankdup vector_string_replacefirst) (char_stackdepth) integer_yankdup integer_lte boolean_flush string_fromchar integer_swap string_dup_items integer_min in1 vector_string_occurrencesof boolean_pop boolean_eq integer_swap vector_string_shove char_shove char_yankdup vector_string_shove vector_string_yankdup tag_boolean_851 vector_string_shove string_emptystring vector_string_dup_items string_emptystring boolean_xor vector_string_subvec integer_fromstring vector_string_take vector_string_dup_items vector_string_nth exec_eq vector_string_conj integer_stackdepth char_flush integer_swap string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_dup_times exec_yankdup string_containschar vector_string_occurrencesof string_length exec_shove (exec_flush exec_if () (vector_string_nth vector_string_contains string_length) string_split boolean_empty) char_rot char_stackdepth) boolean_dup string_eq string_conjchar exec_s () (exec_swap (boolean_not boolean_empty) (boolean_invert_second_then_and string_parse_to_chars string_rot)) ())
Lexicase best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Lexicase best number of elite cases: 5
Lexicase best total error: 1832
Lexicase best mean error: 18.32
Lexicase best size: 134
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_fromboolean} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_set} {:close 0, :instruction string_last} {:close 0, :instruction string_last} {:close 0, :instruction string_length} {:close 0, :instruction string_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_string_concat} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction char_eq} {:close 0, :instruction char_dup_times} {:close 1, :instruction string_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction string_containschar} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction string_frominteger} {:close 2, :instruction vector_string_yankdup} {:close 1, :instruction vector_string_rot} {:close 1, :instruction integer_min} {:close 0, :instruction tag_char_432} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_removechar} {:close 0, :instruction char_isletter} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_concat} {:close 2, :instruction char_eq} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 2, :instruction string_reverse} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_string_length} {:close 0, :instruction char_swap} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction integer_mult} {:close 0, :instruction char_isletter} {:close 1, :instruction string_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction string_reverse} {:close 0, :instruction char_yankdup} {:close 1, :instruction vector_string_replacefirst} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_swap} {:close 1, :instruction string_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_string_shove} {:close 0, :instruction char_shove} {:close 1, :instruction char_yankdup} {:close 0, :instruction vector_string_shove} {:close 0, :instruction vector_string_yankdup} {:close 0, :instruction tag_boolean_851} {:close 0, :instruction vector_string_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_string_subvec} {:close 1, :instruction integer_fromstring} {:close 0, :instruction vector_string_take} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction vector_string_nth} {:close 0, :instruction exec_eq} {:close 1, :instruction vector_string_conj} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction string_length} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction vector_string_nth} {:close 0, :instruction vector_string_contains} {:close 1, :instruction string_length} {:close 0, :instruction string_split} {:close 1, :instruction boolean_empty} {:close 0, :instruction char_rot} {:close 1, :instruction char_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_eq} {:close 0, :instruction string_conjchar} {:close 1, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction string_rot})
Zero cases best program: (string_fromboolean exec_do*vector_string (vector_string_rest vector_string_set string_last string_last string_length string_rot exec_stackdepth vector_string_concat exec_flush) integer_mult boolean_yankdup char_eq char_dup_times string_frominteger integer_dec integer_gt string_containschar integer_gt exec_do*range (string_frominteger vector_string_yankdup) vector_string_rot integer_min tag_char_432 vector_string_pop string_removechar char_isletter integer_gte exec_yankdup string_concat char_eq string_occurrencesofchar boolean_empty integer_rot string_reverse boolean_dup_items integer_gt vector_string_length char_swap exec_do*vector_string (integer_mult) char_isletter string_fromboolean exec_if (exec_shove (integer_empty string_reverse) char_yankdup vector_string_replacefirst) (char_stackdepth) integer_yankdup integer_lte boolean_flush string_fromchar integer_swap string_dup_items integer_min in1 vector_string_occurrencesof boolean_pop boolean_eq integer_swap vector_string_shove char_shove char_yankdup vector_string_shove vector_string_yankdup tag_boolean_851 vector_string_shove string_emptystring vector_string_dup_items string_emptystring boolean_xor vector_string_subvec integer_fromstring vector_string_take vector_string_dup_items vector_string_nth exec_eq vector_string_conj integer_stackdepth char_flush integer_swap string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_dup_times exec_yankdup string_containschar vector_string_occurrencesof string_length exec_shove (exec_flush exec_if () (vector_string_nth vector_string_contains string_length) string_split boolean_empty) char_rot char_stackdepth) boolean_dup string_eq string_conjchar exec_s () (exec_swap (boolean_not boolean_empty) (boolean_invert_second_then_and string_parse_to_chars string_rot)) ())
Zero cases best errors: [215 29 4 1 30 20 25 14 14 21 49 15 32 13 60 30 34 1 75 11 18 7 7 21 7 40 24 12 21 46 17 12 1 0 0 21 24 2 22 15 13 17 12 15 23 19 4 24 10 85 75 4 8 18 4 11 0 14 5 6 10 12 18 3 2 6 1 14 2 11 18 15 20 26 1 6 13 2 4 13 3 39 3 17 0 16 29 6 5 2 0 34 2 2 65 13 6 4 3 9]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 1832
Zero cases best mean error: 18.32
Zero cases best size: 134
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 15 20 13 12 20 12 14 14 13 5 12 11 14 4 12 6 13 12 19 14 7 7 15 7 5 8 19 15 2 13 19 20 34 34 13 8 22 12 7 20 13 19 12 14 8 15 8 9 55 12 20 9 7 15 19 34 18 15 30 9 8 14 8 19 13 20 18 19 19 7 12 20 10 20 30 20 19 15 14 12 6 8 10 34 6 15 30 17 22 34 6 19 22 2 20 30 15 12 10)
Population mean number of elite cases: 1.52
Count of perfect (error zero) individuals by case: (3 15 20 13 12 20 12 14 14 13 0 12 11 14 4 12 6 13 12 19 14 7 7 15 7 5 8 19 15 2 13 19 20 34 34 13 8 22 12 7 20 13 19 12 14 8 15 8 9 55 12 20 9 7 15 19 34 18 15 30 9 8 14 8 19 13 20 18 19 19 7 12 20 10 20 30 20 19 15 14 12 6 8 10 34 6 15 30 17 22 34 6 19 22 2 20 30 15 12 10)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_nth} {:close 0, :instruction exec_y} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction char_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_dup_items} {:close 1, :instruction string_fromchar} {:close 0, :instruction integer_max} {:close 0, :instruction string_empty} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction string_setchar} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction char_eq} {:close 1, :instruction string_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 1, :instruction string_replacechar} {:close 1, :instruction integer_rot} {:close 0, :instruction char_yank} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_flush} {:close 0, :instruction char_rot} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_dup} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction char_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction string_replacefirstchar} {:close 2, :instruction char_dup} {:close 0, :instruction string_yankdup} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_string_eq} {:close 1, :instruction vector_string_eq} {:close 1, :instruction string_pop} {:close 1, :instruction string_indexofchar} {:close 1, :instruction string_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_shove} {:close 0, :instruction vector_string_replace} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction vector_string_rest} {:close 0, :instruction string_rest} {:close 0, :instruction vector_string_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction string_concat} {:close 0, :instruction string_length} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_string_occurrencesof} {:close 0, :instruction char_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction char_frominteger} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_pop} {:close 1, :instruction string_removechar} {:close 0, :instruction exec_do*while} {:close 2, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_nth} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction string_dup_items} {:close 0, :instruction vector_string_dup_items} {:close 0, :instruction vector_string_nth} {:close 1, :instruction vector_string_butlast} {:close 1, :instruction char_swap} {:close 0, :instruction string_conjchar} {:close 1, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction string_rot} {:close 0, :instruction char_dup_times} {:close 0, :instruction vector_string_indexof} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_string_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction char_frominteger} {:close 0, :instruction vector_string_subvec} {:close 0, :instruction vector_string_rest} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction vector_string_length} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_replacechar} {:close 0, :instruction vector_string_occurrencesof})
Best program: (vector_string_concat vector_string_nth exec_y (vector_string_reverse boolean_invert_second_then_and exec_stackdepth exec_string_iterate (string_removechar integer_stackdepth integer_dup char_yankdup boolean_eq) string_dup_items string_fromchar) integer_max string_empty string_conjchar char_frominteger integer_min string_setchar integer_stackdepth char_eq string_stackdepth exec_empty integer_fromstring string_butlast boolean_dup string_replacechar integer_rot char_yank vector_string_subvec integer_eq vector_string_last string_flush char_rot vector_string_last exec_dup (string_parse_to_chars char_dup_times) integer_dup_times string_replacefirstchar char_dup string_yankdup char_iswhitespace exec_do*times () vector_string_eq vector_string_eq string_pop string_indexofchar string_empty exec_empty boolean_not exec_y_when_autoconstructing (char_shove) vector_string_replace boolean_yankdup vector_string_rest string_rest vector_string_dup_items boolean_dup integer_dup_times boolean_invert_second_then_and boolean_dup_times integer_dec string_concat string_length char_allfromstring string_pop boolean_stackdepth string_concat vector_string_eq integer_yankdup vector_string_occurrencesof char_shove exec_flush integer_gte exec_pop (char_frominteger) string_indexofchar integer_pop string_removechar exec_do*while (in1) integer_flush boolean_invert_first_then_and exec_string_iterate (string_nth integer_stackdepth) integer_max string_dup_items vector_string_dup_items vector_string_nth vector_string_butlast char_swap string_conjchar exec_s () (exec_swap (boolean_not boolean_empty) (boolean_invert_second_then_and string_parse_to_chars string_rot)) (char_dup_times vector_string_indexof exec_shove (vector_string_rot integer_sub exec_flush char_frominteger vector_string_subvec vector_string_rest integer_max) exec_flush integer_rot boolean_dup_items exec_y_when_autoconstructing (string_occurrencesofchar vector_string_length integer_flush exec_y_when_autoconstructing (char_frominteger integer_fromstring string_replacechar vector_string_occurrencesof))))
Errors: [211 25 8 5 26 16 21 10 10 17 45 11 28 9 56 26 30 5 79 15 14 3 3 25 3 36 20 8 25 42 13 8 3 4 4 17 28 6 18 19 17 13 8 11 19 15 0 28 14 89 79 8 4 22 0 15 4 18 9 2 14 16 14 1 2 10 3 18 2 15 22 11 16 22 3 2 17 2 0 9 7 35 1 21 4 20 25 2 1 6 4 30 2 6 61 17 2 0 7 5]
Total: 1782
Mean: 17.82
Genome size: 124
Size: 141
Percent parens: 0.121
--- Population Statistics ---
Average total errors in population: 7.500005355346E9
Median total errors in population: 2494
Error averages by case: (7.5000212378E7 7.500005485E7 7.5000047201E7 7.500004654E7 7.5000055487E7 7.5000049997E7 7.500005249E7 7.5000047869E7 7.5000047869E7 7.5000050446E7 7.5000069628E7 7.5000048168E7 7.5000056817E7 7.5000047598E7 7.5000078591E7 7.5000055487E7 7.5000058203E7 7.500004654E7 7.5000094136E7 7.5000049656E7 7.5000049195E7 7.5000046472E7 7.5000046472E7 7.5000054984E7 7.5000046472E7 7.5000062577E7 7.5000051947E7 7.5000047355E7 7.5000054984E7 7.5000067241E7 7.500004883E7 7.5000047355E7 7.5000046294E7 7.5000046383E7 7.5000046383E7 7.5000050446E7 7.5000056875E7 7.5000046723E7 7.5000050921E7 7.5000051552E7 7.5000050538E7 7.500004883E7 7.5000047355E7 7.5000048168E7 7.500005142E7 7.5000049588E7 7.5000046239E7 7.5000056875E7 7.5000049261E7 7.500010211E7 7.5000094136E7 7.5000047201E7 7.5000046615E7 7.5000053213E7 7.5000046239E7 7.5000049656E7 7.5000046383E7 7.5000051027E7 7.5000047492E7 7.5000046343E7 7.5000049261E7 7.5000050089E7 7.5000049195E7 7.5000046234E7 7.5000046245E7 7.5000047813E7 7.5000046294E7 7.5000051027E7 7.5000046245E7 7.5000049656E7 7.5000053213E7 7.5000048168E7 7.5000049997E7 7.5000053057E7 7.5000046294E7 7.5000046343E7 7.5000050538E7 7.5000046245E7 7.5000046239E7 7.5000047598E7 7.500004695E7 7.5000061822E7 7.5000046234E7 7.5000052642E7 7.5000046383E7 7.5000052091E7 7.500005485E7 7.5000046343E7 7.5000046274E7 7.5000046723E7 7.5000046383E7 7.5000058203E7 7.5000046245E7 7.5000046723E7 7.5000082782E7 7.5000050538E7 7.5000046343E7 7.5000046239E7 7.500004695E7 7.5000046776E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 143.077
Average program size in population (points): 161.646
Average percent parens in population: 0.115
Minimum age in population: 7.0
Maximum age in population: 12.0
Average age in population: 9.897453125
Median age in population: 9.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.151
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 1575626600
--- Timings ---
Current time: 1559326651828 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
