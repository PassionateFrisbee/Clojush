Command line args: clojush.problems.software.sort_vector
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = ([] #object[clojush.problems.software.sort_vector$fn__8076 0x42172065 clojush.problems.software.sort_vector$fn__8076@42172065] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x8e77c5b clojush.instructions.tag$tag_instruction_erc$fn__2160@8e77c5b] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0xc0521e5 clojush.instructions.tag$tagged_instruction_erc$fn__2166@c0521e5] in1 integer_sub integer_inc exec_yankdup vector_integer_shove integer_yankdup exec_shove exec_y integer_mult vector_integer_dup exec_s_when_autoconstructing exec_do*vector_integer exec_dup_items exec_rot vector_integer_swap exec_dup vector_integer_butlast exec_k vector_integer_yank vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace integer_div vector_integer_rot integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth vector_integer_replacefirst integer_dup_times exec_dup_times vector_integer_indexof integer_yank integer_min exec_swap vector_integer_rest integer_dup_items vector_integer_nth exec_do*range vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush exec_y_when_autoconstructing vector_integer_length vector_integer_pop exec_do*times exec_pop vector_integer_set exec_s vector_integer_reverse exec_noop vector_integer_pushall integer_swap integer_dup exec_yank integer_pop integer_dec vector_integer_first exec_stackdepth exec_flush)
error-function = #object[clojush.problems.software.sort_vector$make_sort_vector_error_function_from_cases$the_actual_sort_vector_error_function__8095 0x1eee9b78 clojush.problems.software.sort_vector$make_sort_vector_error_function_from_cases$the_actual_sort_vector_error_function__8095@1eee9b78]
evalpush-limit = 1500
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-points = 2000
parent-selection = :lexicase
population-size = 1000
problem-specific-initial-report = #object[clojush.problems.software.sort_vector$sort_vector_initial_report 0x45295cfd clojush.problems.software.sort_vector$sort_vector_initial_report@45295cfd]
problem-specific-report = #object[clojush.problems.software.sort_vector$sort_vector_report 0x217c6a1e clojush.problems.software.sort_vector$sort_vector_report@217c6a1e]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[0] [0]]
Train Case:   1 | Input/Output: [[100] [100]]
Train Case:   2 | Input/Output: [[-100] [-100]]
Train Case:   3 | Input/Output: [[1000] [1000]]
Train Case:   4 | Input/Output: [[-1000] [-1000]]
Train Case:   5 | Input/Output: [[748] [748]]
Train Case:   6 | Input/Output: [[605] [605]]
Train Case:   7 | Input/Output: [[380] [380]]
Train Case:   8 | Input/Output: [[-697] [-697]]
Train Case:   9 | Input/Output: [[927] [927]]
Train Case:  10 | Input/Output: [[-281] [-281]]
Train Case:  11 | Input/Output: [[-710] [-710]]
Train Case:  12 | Input/Output: [[213] [213]]
Train Case:  13 | Input/Output: [[-472] [-472]]
Train Case:  14 | Input/Output: [[27] [27]]
Train Case:  15 | Input/Output: [[-602] [-602]]
Train Case:  16 | Input/Output: [[-20] [-20]]
Train Case:  17 | Input/Output: [[236] [236]]
Train Case:  18 | Input/Output: [[-789] [-789]]
Train Case:  19 | Input/Output: [[737] [737]]
Train Case:  20 | Input/Output: [[-845] [-845]]
Train Case:  21 | Input/Output: [[584] [584]]
Train Case:  22 | Input/Output: [[309] [309]]
Train Case:  23 | Input/Output: [[-846] [-846]]
Train Case:  24 | Input/Output: [[526] [526]]
Train Case:  25 | Input/Output: [[-663] [-663]]
Train Case:  26 | Input/Output: [[159] [159]]
Train Case:  27 | Input/Output: [[948] [948]]
Train Case:  28 | Input/Output: [[-434] [-434]]
Train Case:  29 | Input/Output: [[-107] [-107]]
Train Case:  30 | Input/Output: [[765] [765]]
Train Case:  31 | Input/Output: [[39] [39]]
Train Case:  32 | Input/Output: [[706] [706]]
Train Case:  33 | Input/Output: [[-688] [-688]]
Train Case:  34 | Input/Output: [[388] [388]]
Train Case:  35 | Input/Output: [[42] [42]]
Train Case:  36 | Input/Output: [[-654] [-654]]
Train Case:  37 | Input/Output: [[-709] [-709]]
Train Case:  38 | Input/Output: [[968] [968]]
Train Case:  39 | Input/Output: [[331] [331]]
Train Case:  40 | Input/Output: [[125] [125]]
Train Case:  41 | Input/Output: [[501] [501]]
Train Case:  42 | Input/Output: [[998] [998]]
Train Case:  43 | Input/Output: [[-659] [-659]]
Train Case:  44 | Input/Output: [[-832] [-832]]
Train Case:  45 | Input/Output: [[-555] [-555]]
Train Case:  46 | Input/Output: [[312] [312]]
Train Case:  47 | Input/Output: [[955] [955]]
Train Case:  48 | Input/Output: [[399] [399]]
Train Case:  49 | Input/Output: [[26] [26]]
Train Case:  50 | Input/Output: [[2 129] [2 129]]
Train Case:  51 | Input/Output: [[1 -4] [-4 1]]
Train Case:  52 | Input/Output: [[999 74] [74 999]]
Train Case:  53 | Input/Output: [[987 995] [987 995]]
Train Case:  54 | Input/Output: [[-788 -812] [-812 -788]]
Train Case:  55 | Input/Output: [[705 584] [584 705]]
Train Case:  56 | Input/Output: [[-192 -432] [-432 -192]]
Train Case:  57 | Input/Output: [[526 170] [170 526]]
Train Case:  58 | Input/Output: [[-983 -595] [-983 -595]]
Train Case:  59 | Input/Output: [[213 -937] [-937 213]]
Train Case:  60 | Input/Output: [[-859 -393] [-859 -393]]
Train Case:  61 | Input/Output: [[-43 -982] [-982 -43]]
Train Case:  62 | Input/Output: [[880 725] [725 880]]
Train Case:  63 | Input/Output: [[996 -403] [-403 996]]
Train Case:  64 | Input/Output: [[555 -193] [-193 555]]
Train Case:  65 | Input/Output: [[256 -980] [-980 256]]
Train Case:  66 | Input/Output: [[541 -157] [-157 541]]
Train Case:  67 | Input/Output: [[-390 18] [-390 18]]
Train Case:  68 | Input/Output: [[-853 -423] [-853 -423]]
Train Case:  69 | Input/Output: [[-55 -166] [-166 -55]]
Train Case:  70 | Input/Output: [[-514 -566] [-566 -514]]
Train Case:  71 | Input/Output: [[-191 -325] [-325 -191]]
Train Case:  72 | Input/Output: [[-336 30] [-336 30]]
Train Case:  73 | Input/Output: [[285 -925] [-925 285]]
Train Case:  74 | Input/Output: [[-467 958] [-467 958]]
Train Case:  75 | Input/Output: [[-267 957] [-267 957]]
Train Case:  76 | Input/Output: [[880 -823] [-823 880]]
Train Case:  77 | Input/Output: [[310 -103] [-103 310]]
Train Case:  78 | Input/Output: [[-483 354] [-483 354]]
Train Case:  79 | Input/Output: [[871 661] [661 871]]
Train Case:  80 | Input/Output: [[-807 529] [-807 529]]
Train Case:  81 | Input/Output: [[-150 159] [-150 159]]
Train Case:  82 | Input/Output: [[-913 68] [-913 68]]
Train Case:  83 | Input/Output: [[611 -528] [-528 611]]
Train Case:  84 | Input/Output: [[671 448] [448 671]]
Train Case:  85 | Input/Output: [[-494 -160] [-494 -160]]
Train Case:  86 | Input/Output: [[-643 -881] [-881 -643]]
Train Case:  87 | Input/Output: [[811 17] [17 811]]
Train Case:  88 | Input/Output: [[-626 -795] [-795 -626]]
Train Case:  89 | Input/Output: [[858 -661] [-661 858]]
Train Case:  90 | Input/Output: [[-38 286] [-38 286]]
Train Case:  91 | Input/Output: [[697 -811] [-811 697]]
Train Case:  92 | Input/Output: [[957 -904] [-904 957]]
Train Case:  93 | Input/Output: [[254 -339] [-339 254]]
Train Case:  94 | Input/Output: [[190 656] [190 656]]
Train Case:  95 | Input/Output: [[914 606] [606 914]]
Train Case:  96 | Input/Output: [[-670 577] [-670 577]]
Train Case:  97 | Input/Output: [[456 -328] [-328 456]]
Train Case:  98 | Input/Output: [[-929 -157] [-929 -157]]
Train Case:  99 | Input/Output: [[914 -901] [-901 914]]
Train Case: 100 | Input/Output: [[-322 723 181] [-322 181 723]]
Train Case: 101 | Input/Output: [[-469 322 -998 -290] [-998 -469 -290 322]]
Train Case: 102 | Input/Output: [[289 869 -683 -457] [-683 -457 289 869]]
Train Case: 103 | Input/Output: [[-938 -176 379 -847] [-938 -847 -176 379]]
Train Case: 104 | Input/Output: [[-652 -440 944] [-652 -440 944]]
Train Case: 105 | Input/Output: [[965 -862 -151 650] [-862 -151 650 965]]
Train Case: 106 | Input/Output: [[328 125 880 -113 281] [-113 125 281 328 880]]
Train Case: 107 | Input/Output: [[-609 884 451 939] [-609 451 884 939]]
Train Case: 108 | Input/Output: [[395 492 -701] [-701 395 492]]
Train Case: 109 | Input/Output: [[-833 43 460 -199 932] [-833 -199 43 460 932]]
Train Case: 110 | Input/Output: [[424 -230 972 -781] [-781 -230 424 972]]
Train Case: 111 | Input/Output: [[-867 -297 -200] [-867 -297 -200]]
Train Case: 112 | Input/Output: [[-204 882 934] [-204 882 934]]
Train Case: 113 | Input/Output: [[-221 -184 -806] [-806 -221 -184]]
Train Case: 114 | Input/Output: [[501 539 828] [501 539 828]]
Train Case: 115 | Input/Output: [[-120 -257 -862 982 599] [-862 -257 -120 599 982]]
Train Case: 116 | Input/Output: [[-345 -601 362 -448 154] [-601 -448 -345 154 362]]
Train Case: 117 | Input/Output: [[-328 978 24 22 263] [-328 22 24 263 978]]
Train Case: 118 | Input/Output: [[414 10 745 -187] [-187 10 414 745]]
Train Case: 119 | Input/Output: [[-841 708 -910] [-910 -841 708]]
Train Case: 120 | Input/Output: [[-685 -625 -628] [-685 -628 -625]]
Train Case: 121 | Input/Output: [[-983 184 -364 -104] [-983 -364 -104 184]]
Train Case: 122 | Input/Output: [[734 -161 -20 792] [-161 -20 734 792]]
Train Case: 123 | Input/Output: [[-37 393 -506 -41] [-506 -41 -37 393]]
Train Case: 124 | Input/Output: [[-563 -591 -894 -957 -114] [-957 -894 -591 -563 -114]]
Train Case: 125 | Input/Output: [[-898 558 249] [-898 249 558]]
Train Case: 126 | Input/Output: [[-59 355 -482 471 -737] [-737 -482 -59 355 471]]
Train Case: 127 | Input/Output: [[323 478 22 -78 -276] [-276 -78 22 323 478]]
Train Case: 128 | Input/Output: [[-418 -218 -79 201 -561] [-561 -418 -218 -79 201]]
Train Case: 129 | Input/Output: [[151 475 -575 -160] [-575 -160 151 475]]
Train Case: 130 | Input/Output: [[5 520 787] [5 520 787]]
Train Case: 131 | Input/Output: [[-223 648 918 411 -468] [-468 -223 411 648 918]]
Train Case: 132 | Input/Output: [[-56 -877 415 -237] [-877 -237 -56 415]]
Train Case: 133 | Input/Output: [[135 -930 -146] [-930 -146 135]]
Train Case: 134 | Input/Output: [[485 -945 465 -964] [-964 -945 465 485]]
Train Case: 135 | Input/Output: [[-619 -556 -190] [-619 -556 -190]]
Train Case: 136 | Input/Output: [[208 -907 -876 580] [-907 -876 208 580]]
Train Case: 137 | Input/Output: [[999 980 527 -237] [-237 527 980 999]]
Train Case: 138 | Input/Output: [[278 -902 41] [-902 41 278]]
Train Case: 139 | Input/Output: [[-358 -798 -675 -951] [-951 -798 -675 -358]]
Train Case: 140 | Input/Output: [[-244 374 -639 382 548] [-639 -244 374 382 548]]
Train Case: 141 | Input/Output: [[16 -553 -806 -820 -741] [-820 -806 -741 -553 16]]
Train Case: 142 | Input/Output: [[-141 -97 -937 598] [-937 -141 -97 598]]
Train Case: 143 | Input/Output: [[581 238 -624 -352] [-624 -352 238 581]]
Train Case: 144 | Input/Output: [[734 713 640 -124 -223] [-223 -124 640 713 734]]
Train Case: 145 | Input/Output: [[-670 -865 977 -803] [-865 -803 -670 977]]
Train Case: 146 | Input/Output: [[-696 443 108 -928 256] [-928 -696 108 256 443]]
Train Case: 147 | Input/Output: [[-783 -763 -739 -811 -549] [-811 -783 -763 -739 -549]]
Train Case: 148 | Input/Output: [[-428 797 333] [-428 333 797]]
Train Case: 149 | Input/Output: [[-535 -999 34 -4 -600] [-999 -600 -535 -4 34]]
Train Case: 150 | Input/Output: [[631 402 883 400 -424 -230 324 86 702 441 938 207 824 89 525 403 598 221 566 500 -943 311 668 -318 -636 497 -699 -968 661 -662 467 -896 -211 -917 -78 677 291 -549 401 775 -832 940 422 546 922 -592 -645 -925 -187 935] [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]]
Train Case: 151 | Input/Output: [[127 -873 439 -50 -860 -623 -412 -810 -766 -16 -931 709 -47 -604 58 -874 -966 -801 -498 -17 -707 538 975 -521 885 482 241 -768 -359 -786 -632 768 455 471 137 945 -130 647 -696 634 -790 631 -679 650 -746 -523 -459 -905 832 -805] [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]]
Train Case: 152 | Input/Output: [[-861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431 -445] [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]]
Train Case: 153 | Input/Output: [[-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171] [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]]
Train Case: 154 | Input/Output: [[206 913 529 -902 -606 -896 898 475 -392 -480 753 869 -180 -779 634 850 261 -338 561 77 -737 -700 567 657 -891 -44 827 -782 -483 70 931 759 -470 274 490 -85 479 312 863 472 -218 723 -957 391 623 757 834 -432 -414 670] [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]]
Train Case: 155 | Input/Output: [[-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276] [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]]
Train Case: 156 | Input/Output: [[693 10 -868 -564 818 -367 737 -428 764 70 -286 -663 -386 -263 -725 -882 575 -680 341 -563 -445 494 -854 630 -98 -286 883 -555 -349 -693 876 -952] [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]]
Train Case: 157 | Input/Output: [[886 -234] [-234 886]]
Train Case: 158 | Input/Output: [[-961 -718 -140 957 56 -322 955 957 -423 622] [-961 -718 -423 -322 -140 56 622 955 957 957]]
Train Case: 159 | Input/Output: [[662 804 -242 92] [-242 92 662 804]]
Train Case: 160 | Input/Output: [[605 -974 286 -1000 314 -818 358 495 69 972 -121 -712 -920 -343 -390 -221 66 137 537 903 -574 -741 574 256 -867 975 979 938 -480 -154 -614 -738] [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]]
Train Case: 161 | Input/Output: [[-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694] [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]]
Train Case: 162 | Input/Output: [[-6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865 -33] [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]]
Train Case: 163 | Input/Output: [[-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56] [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]]
Train Case: 164 | Input/Output: [[-57 -14] [-57 -14]]
Train Case: 165 | Input/Output: [[-490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172 -167] [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]]
Train Case: 166 | Input/Output: [[-811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267 -123] [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]]
Train Case: 167 | Input/Output: [[-596 -409] [-596 -409]]
Train Case: 168 | Input/Output: [[145 480 607 -31 811 551 -241 468 594 -178] [-241 -178 -31 145 468 480 551 594 607 811]]
Train Case: 169 | Input/Output: [[-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383] [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]]
Train Case: 170 | Input/Output: [[749 -872 -294 367 -334 -705 156 -810 -392 -951 -156 -754 353 -677 146 -534 791 -724 -214 913 -809 -692 -18 -587 139 -119 -951 -732 -749 340 273 -791 -707 493 -189 410 58 -62 643 -569 -343 -391 247 -412 607] [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]]
Train Case: 171 | Input/Output: [[435 -619 540 575 -909 -854 153 934 -757 837 82 456 -243 360 -251 573 219 -672 262 -750] [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]]
Train Case: 172 | Input/Output: [[-682 -356 775 -217 20 47 692 -223 323 -767 -392] [-767 -682 -392 -356 -223 -217 20 47 323 692 775]]
Train Case: 173 | Input/Output: [[556 823 -181 985 -255 872 580 479] [-255 -181 479 556 580 823 872 985]]
Train Case: 174 | Input/Output: [[-784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33 -334] [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]]
Train Case: 175 | Input/Output: [[-940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999 -91] [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]]
Train Case: 176 | Input/Output: [[879 -377 -454 -6 418 -708 -935 -62 339 -916 -367 674 -183 -693 -255 142 -489 -489 -774 171 -957 -564 259 -634 749 -779 -818 -715 406 -688 -496 -384 560 -942 794 -874 120 16 -681 -751 -863 351 894 -166] [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]]
Train Case: 177 | Input/Output: [[-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933] [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]]
Train Case: 178 | Input/Output: [[860 -444 945 -236 -546 -398 -72 203 414 -730 -263 -348 736 788 298 -638 -759 -846 -20 327 598 -662 -864 370 204 -84 -794 -333 82 73 -605 -245 -882 672 -635 -393 -616 -524 258 300 487 429 787 -94 -593 636] [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]]
Train Case: 179 | Input/Output: [[924 209 -630 -70 -642 935 -235 628 878 -206 192 -995 720 -392 746 -32 732 15 131 959 -658 960 -561 -505 -324 851 -345 -15 241 -4 20 459 954 -352 128 -646 158 645 205 -926 -347 -653 538] [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]]
Train Case: 180 | Input/Output: [[22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975 -160] [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]]
Train Case: 181 | Input/Output: [[895 -558 -371 877 -958 995 993 717 473 973 830 19 462 -668 192 -962 11 -307 900 676 -447 514 897 183 212 226 -856 -630 92 545 -150 807 321 -440 -505 949 912 -295 450 547 904 -808 545 -754 -616] [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]]
Train Case: 182 | Input/Output: [[935 507 258 805 -121 934 310 -804 -646] [-804 -646 -121 258 310 507 805 934 935]]
Train Case: 183 | Input/Output: [[826 -593 727 826 980 -804 549 398 -664 -603 332 -748 -755 -700 949 -860 883 -23 258 654 -796 -82 530 -406] [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]]
Train Case: 184 | Input/Output: [[414 537 -889 142 491 92 123 -641 -379 487 214 -309 -176 -99 61 -366 -778 -45 97 910 -499 -488 -788 220 929 247 401 620 609] [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]]
Train Case: 185 | Input/Output: [[669 885 18 -162 954 302 -659 -758 176 770 151 283 343 201] [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]]
Train Case: 186 | Input/Output: [[83 -996 32 -432 487 916 -187 117 673 -309 -185 -209 714 995 -122 327 328 -922 761 -21 -979 644 -283 157 424 228 -576 622 -310 878 -273 -230 -275 -38 -113 -693 235 939 -537 575 859 -992] [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]]
Train Case: 187 | Input/Output: [[679 -823 279 -306 -631 349 -375 -542 651 -36 -393 893 -719 -261 -189 939 -338 722 -470 -625] [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]]
Train Case: 188 | Input/Output: [[709 -587 -643 890 1 -944 767 -935 -686 -794 -690 -939 -807 933 -683 -493 -165 -987 -27 193 -947] [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]]
Train Case: 189 | Input/Output: [[-62 -421 -293 557 230 471 258 -418] [-421 -418 -293 -62 230 258 471 557]]
Train Case: 190 | Input/Output: [[553 202 835 549 -105 279 21 532 896 -48 871] [-105 -48 21 202 279 532 549 553 835 871 896]]
Train Case: 191 | Input/Output: [[-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257] [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]]
Train Case: 192 | Input/Output: [[-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514] [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]]
Train Case: 193 | Input/Output: [[556 562 559 -411 412 84 682 865 783 452 -790 575 322 202 199 77] [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]]
Train Case: 194 | Input/Output: [[-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985] [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]]
Train Case: 195 | Input/Output: [[-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541] [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]]
Train Case: 196 | Input/Output: [[633 -352 925 -31 -649 603 -444 -195 906 -992 405 587 682 707 -710 -371 18 726] [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]]
Train Case: 197 | Input/Output: [[-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881] [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]]
Train Case: 198 | Input/Output: [[223 138 597] [138 223 597]]
Train Case: 199 | Input/Output: [[-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769] [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]]
Train Case: 200 | Input/Output: [[233 -494 959 -564 -658 -994 -407 -77 482 -256 -995 -347 963 -564 -857 -312 795 -919 949 -705 -738 -865 352 767 264 594 -653 -739 671 -560 277 -659 -952] [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]]
Train Case: 201 | Input/Output: [[-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505] [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]]
Train Case: 202 | Input/Output: [[259 287 -690 418 256 -218 -873 212 -8 -311 -103 -447 920 -171] [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]]
Train Case: 203 | Input/Output: [[113 664 -320 39 43 480 -858 -967 200 297 876 -297 -597 -788 826 389 731 -845 982 591 900 442 -825 -318 -931 154 844 -366 -857 -575 -766 -211 169 887 -482 -168 -217 978 -155] [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]]
Train Case: 204 | Input/Output: [[-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571] [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]]
Train Case: 205 | Input/Output: [[-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293] [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]]
Train Case: 206 | Input/Output: [[657 -569 88 401 451 -765 385 10 -343 394 537 54 -603 657 846 -906 -663 -532 80 -80 -307 -541 858 -554 819 74 723 588 186 890 -986 -930 -119 572 -648 721 859 -469 -696 623 -575 480 365 -527] [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]]
Train Case: 207 | Input/Output: [[383 -196 486] [-196 383 486]]
Train Case: 208 | Input/Output: [[-907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40 -883] [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]]
Train Case: 209 | Input/Output: [[795 969 -727 -754 713 -463 -410] [-754 -727 -463 -410 713 795 969]]
Train Case: 210 | Input/Output: [[146 133 -517 155 -207 -129 -529 939 63 -299 555 -139 -802 555 -286 -32 -556 930 119 -624 -647 642 929 -613 -622 -982] [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]]
Train Case: 211 | Input/Output: [[423 -763 914 -552 139 518 729 285 75 -152 -723 -737 -366 -16 -877 -299 -708 -902 -171 -553 -962 -124 781 -836 423 -169 921 -230 -19 -278 -66 55 -841 260 288 -341 924 -240 8 263 -231 -747 568 -927 974 412] [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]]
Train Case: 212 | Input/Output: [[250 918 448 -912 -269 816 -501 124 618] [-912 -501 -269 124 250 448 618 816 918]]
Train Case: 213 | Input/Output: [[-812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124 -741] [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]]
Train Case: 214 | Input/Output: [[-173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707 -758] [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]]
Train Case: 215 | Input/Output: [[-535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276 -85] [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]]
Train Case: 216 | Input/Output: [[-674 -11 -267] [-674 -267 -11]]
Train Case: 217 | Input/Output: [[132 37 -176 292 595 457 -329 185 -998 -536 -282 116 -665 -359 -12 360 652 340 -595 627 -692 -114 27 -469 -12 51 842 725 -378 726 658 408 -123 -511 -560] [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]]
Train Case: 218 | Input/Output: [[-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564] [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]]
Train Case: 219 | Input/Output: [[-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668] [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]]
Train Case: 220 | Input/Output: [[252 684 -911] [-911 252 684]]
Train Case: 221 | Input/Output: [[-75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955 -228] [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]]
Train Case: 222 | Input/Output: [[-30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685 -317] [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]]
Train Case: 223 | Input/Output: [[520 -542 -683 29 254 -501 547 -876 -657 -875 -851 -632 -381 835] [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]]
Train Case: 224 | Input/Output: [[-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246] [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]]
Train Case: 225 | Input/Output: [[811 931 -317 475 416] [-317 416 475 811 931]]
Train Case: 226 | Input/Output: [[-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278] [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]]
Train Case: 227 | Input/Output: [[-261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408 -302] [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]]
Train Case: 228 | Input/Output: [[-472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117 -59] [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]]
Train Case: 229 | Input/Output: [[929 62 75 741] [62 75 741 929]]
Train Case: 230 | Input/Output: [[-380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425 -378] [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]]
Train Case: 231 | Input/Output: [[748 508 -580 -48 149 -883 -590 -389 842 -651 366 -512 935 -714 47 773 592 -846 471 697 927 -678 -726 267 985 369 152 -946 904 905 -97 -721 395 -549 763 -662 -389 -668 -788 522 -540 288 249 -543 -170 787 -433 -760] [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]]
Train Case: 232 | Input/Output: [[589 245 -541 -275 619 252 34 -93 -950 423 -387 -413] [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]]
Train Case: 233 | Input/Output: [[56 -475 -614 -132 862 509 -898 -149 822 -4 -931 -886 -452 -239 -147 47 -545 902 -2 192 768 -289 244 972 -966 305 910 112 129 -916 -655 -366 326 -802 819 15 331 -302 -796 -364 -594 192 380 302] [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]]
Train Case: 234 | Input/Output: [[141 -329 666 974 971 372 607 -244 583 -409 514 878 -640 460 -653 481 338 -238 -36 -104 -194 -384 -977 528 -863 617 -619 -437 -649] [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]]
Train Case: 235 | Input/Output: [[-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714] [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]]
Train Case: 236 | Input/Output: [[-780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130 -810] [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]]
Train Case: 237 | Input/Output: [[-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450] [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]]
Train Case: 238 | Input/Output: [[-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133] [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]]
Train Case: 239 | Input/Output: [[929 -3 -518 56 -665 611 -307 574 73 72 421 214 -63 -304 972 879 -284 393 -71 -711 -803 217 -228 141 580 -974 391 539 -644 -880 691 564 -131 732 -890 726 299 314 438 -61 813 -412 -524 853 -280 -346 -184 -845 961 -223] [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]]
Train Case: 240 | Input/Output: [[-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101] [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]]
Train Case: 241 | Input/Output: [[-672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405 -489] [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]]
Train Case: 242 | Input/Output: [[-735 871 501 -869 938 2] [-869 -735 2 501 871 938]]
Train Case: 243 | Input/Output: [[719 -858 334 557 938 191 -283 -965 725 -230 -238 601 898 -150 -600 71 20 815 910 673 -568 292 622 -669 -931 -871 571] [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]]
Train Case: 244 | Input/Output: [[-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277] [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]]
Train Case: 245 | Input/Output: [[-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68] [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]]
Train Case: 246 | Input/Output: [[592 -83 -973 552 589 -944 -763 -111 -956 -186 0 -831 -85] [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]]
Train Case: 247 | Input/Output: [[865 -477 682 -911 -704 792 264 -157 1 490 765 -312 673 425 -911 498 313 534 -326 708 -69 -373 589 -432 -181 275 853 463 -428 -222 39 -407 297 -893 209 -996 -964 524 821 775 962 368 -80] [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]]
Train Case: 248 | Input/Output: [[-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346] [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]]
Train Case: 249 | Input/Output: [[-390 -497 -202 -605 -49 -86] [-605 -497 -390 -202 -86 -49]]
Test Case:   0 | Input/Output: [[-707] [-707]]
Test Case:   1 | Input/Output: [[-114] [-114]]
Test Case:   2 | Input/Output: [[-754] [-754]]
Test Case:   3 | Input/Output: [[648] [648]]
Test Case:   4 | Input/Output: [[153] [153]]
Test Case:   5 | Input/Output: [[-528] [-528]]
Test Case:   6 | Input/Output: [[685] [685]]
Test Case:   7 | Input/Output: [[-278] [-278]]
Test Case:   8 | Input/Output: [[659] [659]]
Test Case:   9 | Input/Output: [[263] [263]]
Test Case:  10 | Input/Output: [[70] [70]]
Test Case:  11 | Input/Output: [[843] [843]]
Test Case:  12 | Input/Output: [[-449] [-449]]
Test Case:  13 | Input/Output: [[43] [43]]
Test Case:  14 | Input/Output: [[261] [261]]
Test Case:  15 | Input/Output: [[-950] [-950]]
Test Case:  16 | Input/Output: [[789] [789]]
Test Case:  17 | Input/Output: [[-705] [-705]]
Test Case:  18 | Input/Output: [[-387] [-387]]
Test Case:  19 | Input/Output: [[655] [655]]
Test Case:  20 | Input/Output: [[-661] [-661]]
Test Case:  21 | Input/Output: [[557] [557]]
Test Case:  22 | Input/Output: [[209] [209]]
Test Case:  23 | Input/Output: [[-932] [-932]]
Test Case:  24 | Input/Output: [[301] [301]]
Test Case:  25 | Input/Output: [[107] [107]]
Test Case:  26 | Input/Output: [[-762] [-762]]
Test Case:  27 | Input/Output: [[896] [896]]
Test Case:  28 | Input/Output: [[95] [95]]
Test Case:  29 | Input/Output: [[-745] [-745]]
Test Case:  30 | Input/Output: [[-626] [-626]]
Test Case:  31 | Input/Output: [[837] [837]]
Test Case:  32 | Input/Output: [[717] [717]]
Test Case:  33 | Input/Output: [[311] [311]]
Test Case:  34 | Input/Output: [[-615] [-615]]
Test Case:  35 | Input/Output: [[-742] [-742]]
Test Case:  36 | Input/Output: [[-453] [-453]]
Test Case:  37 | Input/Output: [[-683] [-683]]
Test Case:  38 | Input/Output: [[187] [187]]
Test Case:  39 | Input/Output: [[-579] [-579]]
Test Case:  40 | Input/Output: [[937] [937]]
Test Case:  41 | Input/Output: [[-163] [-163]]
Test Case:  42 | Input/Output: [[55] [55]]
Test Case:  43 | Input/Output: [[-313] [-313]]
Test Case:  44 | Input/Output: [[866] [866]]
Test Case:  45 | Input/Output: [[-794] [-794]]
Test Case:  46 | Input/Output: [[-241] [-241]]
Test Case:  47 | Input/Output: [[213] [213]]
Test Case:  48 | Input/Output: [[-705] [-705]]
Test Case:  49 | Input/Output: [[-930] [-930]]
Test Case:  50 | Input/Output: [[304] [304]]
Test Case:  51 | Input/Output: [[570] [570]]
Test Case:  52 | Input/Output: [[-603] [-603]]
Test Case:  53 | Input/Output: [[-493] [-493]]
Test Case:  54 | Input/Output: [[-330] [-330]]
Test Case:  55 | Input/Output: [[553] [553]]
Test Case:  56 | Input/Output: [[-125] [-125]]
Test Case:  57 | Input/Output: [[-892] [-892]]
Test Case:  58 | Input/Output: [[239] [239]]
Test Case:  59 | Input/Output: [[558] [558]]
Test Case:  60 | Input/Output: [[3] [3]]
Test Case:  61 | Input/Output: [[649] [649]]
Test Case:  62 | Input/Output: [[-631] [-631]]
Test Case:  63 | Input/Output: [[-167] [-167]]
Test Case:  64 | Input/Output: [[-663] [-663]]
Test Case:  65 | Input/Output: [[-337] [-337]]
Test Case:  66 | Input/Output: [[-222] [-222]]
Test Case:  67 | Input/Output: [[-98] [-98]]
Test Case:  68 | Input/Output: [[-451] [-451]]
Test Case:  69 | Input/Output: [[184] [184]]
Test Case:  70 | Input/Output: [[841] [841]]
Test Case:  71 | Input/Output: [[915] [915]]
Test Case:  72 | Input/Output: [[951] [951]]
Test Case:  73 | Input/Output: [[-860] [-860]]
Test Case:  74 | Input/Output: [[720] [720]]
Test Case:  75 | Input/Output: [[-220] [-220]]
Test Case:  76 | Input/Output: [[745] [745]]
Test Case:  77 | Input/Output: [[-363] [-363]]
Test Case:  78 | Input/Output: [[-217] [-217]]
Test Case:  79 | Input/Output: [[292] [292]]
Test Case:  80 | Input/Output: [[-491] [-491]]
Test Case:  81 | Input/Output: [[16] [16]]
Test Case:  82 | Input/Output: [[-116] [-116]]
Test Case:  83 | Input/Output: [[-665] [-665]]
Test Case:  84 | Input/Output: [[-935] [-935]]
Test Case:  85 | Input/Output: [[582] [582]]
Test Case:  86 | Input/Output: [[-335] [-335]]
Test Case:  87 | Input/Output: [[831] [831]]
Test Case:  88 | Input/Output: [[-942] [-942]]
Test Case:  89 | Input/Output: [[499] [499]]
Test Case:  90 | Input/Output: [[-485] [-485]]
Test Case:  91 | Input/Output: [[-495] [-495]]
Test Case:  92 | Input/Output: [[-641] [-641]]
Test Case:  93 | Input/Output: [[536] [536]]
Test Case:  94 | Input/Output: [[-309] [-309]]
Test Case:  95 | Input/Output: [[-257] [-257]]
Test Case:  96 | Input/Output: [[-956] [-956]]
Test Case:  97 | Input/Output: [[-9] [-9]]
Test Case:  98 | Input/Output: [[-844] [-844]]
Test Case:  99 | Input/Output: [[498] [498]]
Test Case: 100 | Input/Output: [[-744] [-744]]
Test Case: 101 | Input/Output: [[117] [117]]
Test Case: 102 | Input/Output: [[795] [795]]
Test Case: 103 | Input/Output: [[-625] [-625]]
Test Case: 104 | Input/Output: [[118] [118]]
Test Case: 105 | Input/Output: [[-595] [-595]]
Test Case: 106 | Input/Output: [[662] [662]]
Test Case: 107 | Input/Output: [[-629] [-629]]
Test Case: 108 | Input/Output: [[-62] [-62]]
Test Case: 109 | Input/Output: [[633] [633]]
Test Case: 110 | Input/Output: [[816] [816]]
Test Case: 111 | Input/Output: [[931] [931]]
Test Case: 112 | Input/Output: [[-849] [-849]]
Test Case: 113 | Input/Output: [[-821] [-821]]
Test Case: 114 | Input/Output: [[-440] [-440]]
Test Case: 115 | Input/Output: [[966] [966]]
Test Case: 116 | Input/Output: [[-783] [-783]]
Test Case: 117 | Input/Output: [[691] [691]]
Test Case: 118 | Input/Output: [[875] [875]]
Test Case: 119 | Input/Output: [[276] [276]]
Test Case: 120 | Input/Output: [[-846] [-846]]
Test Case: 121 | Input/Output: [[201] [201]]
Test Case: 122 | Input/Output: [[617] [617]]
Test Case: 123 | Input/Output: [[-574] [-574]]
Test Case: 124 | Input/Output: [[-923] [-923]]
Test Case: 125 | Input/Output: [[-411] [-411]]
Test Case: 126 | Input/Output: [[-24] [-24]]
Test Case: 127 | Input/Output: [[450] [450]]
Test Case: 128 | Input/Output: [[400] [400]]
Test Case: 129 | Input/Output: [[438] [438]]
Test Case: 130 | Input/Output: [[-139] [-139]]
Test Case: 131 | Input/Output: [[-604] [-604]]
Test Case: 132 | Input/Output: [[-237] [-237]]
Test Case: 133 | Input/Output: [[-591] [-591]]
Test Case: 134 | Input/Output: [[-777] [-777]]
Test Case: 135 | Input/Output: [[813] [813]]
Test Case: 136 | Input/Output: [[-643] [-643]]
Test Case: 137 | Input/Output: [[-305] [-305]]
Test Case: 138 | Input/Output: [[54] [54]]
Test Case: 139 | Input/Output: [[53] [53]]
Test Case: 140 | Input/Output: [[403] [403]]
Test Case: 141 | Input/Output: [[458] [458]]
Test Case: 142 | Input/Output: [[606] [606]]
Test Case: 143 | Input/Output: [[964] [964]]
Test Case: 144 | Input/Output: [[523] [523]]
Test Case: 145 | Input/Output: [[-885] [-885]]
Test Case: 146 | Input/Output: [[-767] [-767]]
Test Case: 147 | Input/Output: [[-441] [-441]]
Test Case: 148 | Input/Output: [[274] [274]]
Test Case: 149 | Input/Output: [[-760] [-760]]
Test Case: 150 | Input/Output: [[508] [508]]
Test Case: 151 | Input/Output: [[-179] [-179]]
Test Case: 152 | Input/Output: [[84] [84]]
Test Case: 153 | Input/Output: [[887] [887]]
Test Case: 154 | Input/Output: [[911] [911]]
Test Case: 155 | Input/Output: [[318] [318]]
Test Case: 156 | Input/Output: [[44] [44]]
Test Case: 157 | Input/Output: [[649] [649]]
Test Case: 158 | Input/Output: [[786] [786]]
Test Case: 159 | Input/Output: [[348] [348]]
Test Case: 160 | Input/Output: [[838] [838]]
Test Case: 161 | Input/Output: [[296] [296]]
Test Case: 162 | Input/Output: [[-254] [-254]]
Test Case: 163 | Input/Output: [[940] [940]]
Test Case: 164 | Input/Output: [[938] [938]]
Test Case: 165 | Input/Output: [[656] [656]]
Test Case: 166 | Input/Output: [[954] [954]]
Test Case: 167 | Input/Output: [[-533] [-533]]
Test Case: 168 | Input/Output: [[-312] [-312]]
Test Case: 169 | Input/Output: [[-906] [-906]]
Test Case: 170 | Input/Output: [[-709] [-709]]
Test Case: 171 | Input/Output: [[-774] [-774]]
Test Case: 172 | Input/Output: [[-890] [-890]]
Test Case: 173 | Input/Output: [[704] [704]]
Test Case: 174 | Input/Output: [[348] [348]]
Test Case: 175 | Input/Output: [[132] [132]]
Test Case: 176 | Input/Output: [[934] [934]]
Test Case: 177 | Input/Output: [[-173] [-173]]
Test Case: 178 | Input/Output: [[97] [97]]
Test Case: 179 | Input/Output: [[-99] [-99]]
Test Case: 180 | Input/Output: [[-723] [-723]]
Test Case: 181 | Input/Output: [[970] [970]]
Test Case: 182 | Input/Output: [[639] [639]]
Test Case: 183 | Input/Output: [[709] [709]]
Test Case: 184 | Input/Output: [[-130] [-130]]
Test Case: 185 | Input/Output: [[-389] [-389]]
Test Case: 186 | Input/Output: [[497] [497]]
Test Case: 187 | Input/Output: [[-686] [-686]]
Test Case: 188 | Input/Output: [[-642] [-642]]
Test Case: 189 | Input/Output: [[-272] [-272]]
Test Case: 190 | Input/Output: [[-750] [-750]]
Test Case: 191 | Input/Output: [[-344] [-344]]
Test Case: 192 | Input/Output: [[-77] [-77]]
Test Case: 193 | Input/Output: [[-931] [-931]]
Test Case: 194 | Input/Output: [[476] [476]]
Test Case: 195 | Input/Output: [[-817] [-817]]
Test Case: 196 | Input/Output: [[-216] [-216]]
Test Case: 197 | Input/Output: [[-402] [-402]]
Test Case: 198 | Input/Output: [[-70] [-70]]
Test Case: 199 | Input/Output: [[-11] [-11]]
Test Case: 200 | Input/Output: [[724] [724]]
Test Case: 201 | Input/Output: [[-626] [-626]]
Test Case: 202 | Input/Output: [[-797] [-797]]
Test Case: 203 | Input/Output: [[692] [692]]
Test Case: 204 | Input/Output: [[-929] [-929]]
Test Case: 205 | Input/Output: [[-251] [-251]]
Test Case: 206 | Input/Output: [[869] [869]]
Test Case: 207 | Input/Output: [[104] [104]]
Test Case: 208 | Input/Output: [[-268] [-268]]
Test Case: 209 | Input/Output: [[967] [967]]
Test Case: 210 | Input/Output: [[929] [929]]
Test Case: 211 | Input/Output: [[190] [190]]
Test Case: 212 | Input/Output: [[211] [211]]
Test Case: 213 | Input/Output: [[-923] [-923]]
Test Case: 214 | Input/Output: [[-577] [-577]]
Test Case: 215 | Input/Output: [[690] [690]]
Test Case: 216 | Input/Output: [[348] [348]]
Test Case: 217 | Input/Output: [[-315] [-315]]
Test Case: 218 | Input/Output: [[-485] [-485]]
Test Case: 219 | Input/Output: [[-432] [-432]]
Test Case: 220 | Input/Output: [[643] [643]]
Test Case: 221 | Input/Output: [[25] [25]]
Test Case: 222 | Input/Output: [[404] [404]]
Test Case: 223 | Input/Output: [[596] [596]]
Test Case: 224 | Input/Output: [[633] [633]]
Test Case: 225 | Input/Output: [[524] [524]]
Test Case: 226 | Input/Output: [[-815] [-815]]
Test Case: 227 | Input/Output: [[260] [260]]
Test Case: 228 | Input/Output: [[-200] [-200]]
Test Case: 229 | Input/Output: [[-746] [-746]]
Test Case: 230 | Input/Output: [[56] [56]]
Test Case: 231 | Input/Output: [[-66] [-66]]
Test Case: 232 | Input/Output: [[524] [524]]
Test Case: 233 | Input/Output: [[913] [913]]
Test Case: 234 | Input/Output: [[717] [717]]
Test Case: 235 | Input/Output: [[197] [197]]
Test Case: 236 | Input/Output: [[-941] [-941]]
Test Case: 237 | Input/Output: [[-553] [-553]]
Test Case: 238 | Input/Output: [[927] [927]]
Test Case: 239 | Input/Output: [[-969] [-969]]
Test Case: 240 | Input/Output: [[836] [836]]
Test Case: 241 | Input/Output: [[-322] [-322]]
Test Case: 242 | Input/Output: [[-840] [-840]]
Test Case: 243 | Input/Output: [[-661] [-661]]
Test Case: 244 | Input/Output: [[612] [612]]
Test Case: 245 | Input/Output: [[564] [564]]
Test Case: 246 | Input/Output: [[-991] [-991]]
Test Case: 247 | Input/Output: [[980] [980]]
Test Case: 248 | Input/Output: [[887] [887]]
Test Case: 249 | Input/Output: [[-657] [-657]]
Test Case: 250 | Input/Output: [[455] [455]]
Test Case: 251 | Input/Output: [[-431] [-431]]
Test Case: 252 | Input/Output: [[578] [578]]
Test Case: 253 | Input/Output: [[-83] [-83]]
Test Case: 254 | Input/Output: [[-30] [-30]]
Test Case: 255 | Input/Output: [[-841] [-841]]
Test Case: 256 | Input/Output: [[502] [502]]
Test Case: 257 | Input/Output: [[769] [769]]
Test Case: 258 | Input/Output: [[664] [664]]
Test Case: 259 | Input/Output: [[-234] [-234]]
Test Case: 260 | Input/Output: [[100] [100]]
Test Case: 261 | Input/Output: [[-243] [-243]]
Test Case: 262 | Input/Output: [[-739] [-739]]
Test Case: 263 | Input/Output: [[420] [420]]
Test Case: 264 | Input/Output: [[-635] [-635]]
Test Case: 265 | Input/Output: [[953] [953]]
Test Case: 266 | Input/Output: [[123] [123]]
Test Case: 267 | Input/Output: [[-313] [-313]]
Test Case: 268 | Input/Output: [[-66] [-66]]
Test Case: 269 | Input/Output: [[715] [715]]
Test Case: 270 | Input/Output: [[-874] [-874]]
Test Case: 271 | Input/Output: [[-87] [-87]]
Test Case: 272 | Input/Output: [[556] [556]]
Test Case: 273 | Input/Output: [[-519] [-519]]
Test Case: 274 | Input/Output: [[-869] [-869]]
Test Case: 275 | Input/Output: [[-101] [-101]]
Test Case: 276 | Input/Output: [[629] [629]]
Test Case: 277 | Input/Output: [[640] [640]]
Test Case: 278 | Input/Output: [[879] [879]]
Test Case: 279 | Input/Output: [[-475] [-475]]
Test Case: 280 | Input/Output: [[316] [316]]
Test Case: 281 | Input/Output: [[-925] [-925]]
Test Case: 282 | Input/Output: [[677] [677]]
Test Case: 283 | Input/Output: [[172] [172]]
Test Case: 284 | Input/Output: [[595] [595]]
Test Case: 285 | Input/Output: [[44] [44]]
Test Case: 286 | Input/Output: [[306] [306]]
Test Case: 287 | Input/Output: [[-293] [-293]]
Test Case: 288 | Input/Output: [[6] [6]]
Test Case: 289 | Input/Output: [[-389] [-389]]
Test Case: 290 | Input/Output: [[544] [544]]
Test Case: 291 | Input/Output: [[-188] [-188]]
Test Case: 292 | Input/Output: [[-882] [-882]]
Test Case: 293 | Input/Output: [[978] [978]]
Test Case: 294 | Input/Output: [[-93] [-93]]
Test Case: 295 | Input/Output: [[-312] [-312]]
Test Case: 296 | Input/Output: [[359] [359]]
Test Case: 297 | Input/Output: [[-778] [-778]]
Test Case: 298 | Input/Output: [[703] [703]]
Test Case: 299 | Input/Output: [[-725] [-725]]
Test Case: 300 | Input/Output: [[918] [918]]
Test Case: 301 | Input/Output: [[785] [785]]
Test Case: 302 | Input/Output: [[-267] [-267]]
Test Case: 303 | Input/Output: [[634] [634]]
Test Case: 304 | Input/Output: [[225] [225]]
Test Case: 305 | Input/Output: [[533] [533]]
Test Case: 306 | Input/Output: [[657] [657]]
Test Case: 307 | Input/Output: [[932] [932]]
Test Case: 308 | Input/Output: [[7] [7]]
Test Case: 309 | Input/Output: [[432] [432]]
Test Case: 310 | Input/Output: [[905] [905]]
Test Case: 311 | Input/Output: [[275] [275]]
Test Case: 312 | Input/Output: [[-417] [-417]]
Test Case: 313 | Input/Output: [[683] [683]]
Test Case: 314 | Input/Output: [[-892] [-892]]
Test Case: 315 | Input/Output: [[-779] [-779]]
Test Case: 316 | Input/Output: [[157] [157]]
Test Case: 317 | Input/Output: [[166] [166]]
Test Case: 318 | Input/Output: [[643] [643]]
Test Case: 319 | Input/Output: [[-271] [-271]]
Test Case: 320 | Input/Output: [[-970] [-970]]
Test Case: 321 | Input/Output: [[465] [465]]
Test Case: 322 | Input/Output: [[-59] [-59]]
Test Case: 323 | Input/Output: [[766] [766]]
Test Case: 324 | Input/Output: [[-567] [-567]]
Test Case: 325 | Input/Output: [[128] [128]]
Test Case: 326 | Input/Output: [[-955] [-955]]
Test Case: 327 | Input/Output: [[-839] [-839]]
Test Case: 328 | Input/Output: [[387] [387]]
Test Case: 329 | Input/Output: [[807] [807]]
Test Case: 330 | Input/Output: [[-238] [-238]]
Test Case: 331 | Input/Output: [[965] [965]]
Test Case: 332 | Input/Output: [[-997] [-997]]
Test Case: 333 | Input/Output: [[-994] [-994]]
Test Case: 334 | Input/Output: [[-54] [-54]]
Test Case: 335 | Input/Output: [[726] [726]]
Test Case: 336 | Input/Output: [[-449] [-449]]
Test Case: 337 | Input/Output: [[397] [397]]
Test Case: 338 | Input/Output: [[384] [384]]
Test Case: 339 | Input/Output: [[425] [425]]
Test Case: 340 | Input/Output: [[971] [971]]
Test Case: 341 | Input/Output: [[963] [963]]
Test Case: 342 | Input/Output: [[-48] [-48]]
Test Case: 343 | Input/Output: [[381] [381]]
Test Case: 344 | Input/Output: [[-380] [-380]]
Test Case: 345 | Input/Output: [[-185] [-185]]
Test Case: 346 | Input/Output: [[-245] [-245]]
Test Case: 347 | Input/Output: [[692] [692]]
Test Case: 348 | Input/Output: [[-623] [-623]]
Test Case: 349 | Input/Output: [[271] [271]]
Test Case: 350 | Input/Output: [[-620] [-620]]
Test Case: 351 | Input/Output: [[824] [824]]
Test Case: 352 | Input/Output: [[-760] [-760]]
Test Case: 353 | Input/Output: [[-69] [-69]]
Test Case: 354 | Input/Output: [[782] [782]]
Test Case: 355 | Input/Output: [[-633] [-633]]
Test Case: 356 | Input/Output: [[776] [776]]
Test Case: 357 | Input/Output: [[867] [867]]
Test Case: 358 | Input/Output: [[346] [346]]
Test Case: 359 | Input/Output: [[-39] [-39]]
Test Case: 360 | Input/Output: [[-108] [-108]]
Test Case: 361 | Input/Output: [[-681] [-681]]
Test Case: 362 | Input/Output: [[-444] [-444]]
Test Case: 363 | Input/Output: [[-183] [-183]]
Test Case: 364 | Input/Output: [[-755] [-755]]
Test Case: 365 | Input/Output: [[919] [919]]
Test Case: 366 | Input/Output: [[756] [756]]
Test Case: 367 | Input/Output: [[353] [353]]
Test Case: 368 | Input/Output: [[671] [671]]
Test Case: 369 | Input/Output: [[406] [406]]
Test Case: 370 | Input/Output: [[838] [838]]
Test Case: 371 | Input/Output: [[-328] [-328]]
Test Case: 372 | Input/Output: [[-368] [-368]]
Test Case: 373 | Input/Output: [[-25] [-25]]
Test Case: 374 | Input/Output: [[724] [724]]
Test Case: 375 | Input/Output: [[774] [774]]
Test Case: 376 | Input/Output: [[-837] [-837]]
Test Case: 377 | Input/Output: [[373] [373]]
Test Case: 378 | Input/Output: [[411] [411]]
Test Case: 379 | Input/Output: [[980] [980]]
Test Case: 380 | Input/Output: [[915] [915]]
Test Case: 381 | Input/Output: [[592] [592]]
Test Case: 382 | Input/Output: [[-837] [-837]]
Test Case: 383 | Input/Output: [[754] [754]]
Test Case: 384 | Input/Output: [[-949] [-949]]
Test Case: 385 | Input/Output: [[-461] [-461]]
Test Case: 386 | Input/Output: [[537] [537]]
Test Case: 387 | Input/Output: [[-92] [-92]]
Test Case: 388 | Input/Output: [[-267] [-267]]
Test Case: 389 | Input/Output: [[606] [606]]
Test Case: 390 | Input/Output: [[-913] [-913]]
Test Case: 391 | Input/Output: [[-448] [-448]]
Test Case: 392 | Input/Output: [[-576] [-576]]
Test Case: 393 | Input/Output: [[-648] [-648]]
Test Case: 394 | Input/Output: [[308] [308]]
Test Case: 395 | Input/Output: [[-559] [-559]]
Test Case: 396 | Input/Output: [[-162] [-162]]
Test Case: 397 | Input/Output: [[138] [138]]
Test Case: 398 | Input/Output: [[453] [453]]
Test Case: 399 | Input/Output: [[276] [276]]
Test Case: 400 | Input/Output: [[-464] [-464]]
Test Case: 401 | Input/Output: [[-704] [-704]]
Test Case: 402 | Input/Output: [[629] [629]]
Test Case: 403 | Input/Output: [[-317] [-317]]
Test Case: 404 | Input/Output: [[75] [75]]
Test Case: 405 | Input/Output: [[471] [471]]
Test Case: 406 | Input/Output: [[-632] [-632]]
Test Case: 407 | Input/Output: [[750] [750]]
Test Case: 408 | Input/Output: [[-576] [-576]]
Test Case: 409 | Input/Output: [[934] [934]]
Test Case: 410 | Input/Output: [[-578] [-578]]
Test Case: 411 | Input/Output: [[-936] [-936]]
Test Case: 412 | Input/Output: [[-190] [-190]]
Test Case: 413 | Input/Output: [[-556] [-556]]
Test Case: 414 | Input/Output: [[-426] [-426]]
Test Case: 415 | Input/Output: [[626] [626]]
Test Case: 416 | Input/Output: [[-353] [-353]]
Test Case: 417 | Input/Output: [[17] [17]]
Test Case: 418 | Input/Output: [[60] [60]]
Test Case: 419 | Input/Output: [[-914] [-914]]
Test Case: 420 | Input/Output: [[820] [820]]
Test Case: 421 | Input/Output: [[-659] [-659]]
Test Case: 422 | Input/Output: [[142] [142]]
Test Case: 423 | Input/Output: [[-680] [-680]]
Test Case: 424 | Input/Output: [[-615] [-615]]
Test Case: 425 | Input/Output: [[-790] [-790]]
Test Case: 426 | Input/Output: [[3] [3]]
Test Case: 427 | Input/Output: [[-485] [-485]]
Test Case: 428 | Input/Output: [[392] [392]]
Test Case: 429 | Input/Output: [[527] [527]]
Test Case: 430 | Input/Output: [[474] [474]]
Test Case: 431 | Input/Output: [[-96] [-96]]
Test Case: 432 | Input/Output: [[-165] [-165]]
Test Case: 433 | Input/Output: [[433] [433]]
Test Case: 434 | Input/Output: [[650] [650]]
Test Case: 435 | Input/Output: [[-168] [-168]]
Test Case: 436 | Input/Output: [[-963] [-963]]
Test Case: 437 | Input/Output: [[879] [879]]
Test Case: 438 | Input/Output: [[-957] [-957]]
Test Case: 439 | Input/Output: [[-677] [-677]]
Test Case: 440 | Input/Output: [[-964] [-964]]
Test Case: 441 | Input/Output: [[831] [831]]
Test Case: 442 | Input/Output: [[-576] [-576]]
Test Case: 443 | Input/Output: [[-738] [-738]]
Test Case: 444 | Input/Output: [[671] [671]]
Test Case: 445 | Input/Output: [[-794] [-794]]
Test Case: 446 | Input/Output: [[559] [559]]
Test Case: 447 | Input/Output: [[114] [114]]
Test Case: 448 | Input/Output: [[552] [552]]
Test Case: 449 | Input/Output: [[51] [51]]
Test Case: 450 | Input/Output: [[-578] [-578]]
Test Case: 451 | Input/Output: [[937] [937]]
Test Case: 452 | Input/Output: [[-169] [-169]]
Test Case: 453 | Input/Output: [[-690] [-690]]
Test Case: 454 | Input/Output: [[-568] [-568]]
Test Case: 455 | Input/Output: [[123] [123]]
Test Case: 456 | Input/Output: [[-963] [-963]]
Test Case: 457 | Input/Output: [[-148] [-148]]
Test Case: 458 | Input/Output: [[-822] [-822]]
Test Case: 459 | Input/Output: [[952] [952]]
Test Case: 460 | Input/Output: [[-485] [-485]]
Test Case: 461 | Input/Output: [[661] [661]]
Test Case: 462 | Input/Output: [[-406] [-406]]
Test Case: 463 | Input/Output: [[437] [437]]
Test Case: 464 | Input/Output: [[744] [744]]
Test Case: 465 | Input/Output: [[-197] [-197]]
Test Case: 466 | Input/Output: [[-513] [-513]]
Test Case: 467 | Input/Output: [[920] [920]]
Test Case: 468 | Input/Output: [[-480] [-480]]
Test Case: 469 | Input/Output: [[877] [877]]
Test Case: 470 | Input/Output: [[-306] [-306]]
Test Case: 471 | Input/Output: [[558] [558]]
Test Case: 472 | Input/Output: [[-829] [-829]]
Test Case: 473 | Input/Output: [[-632] [-632]]
Test Case: 474 | Input/Output: [[465] [465]]
Test Case: 475 | Input/Output: [[-596] [-596]]
Test Case: 476 | Input/Output: [[-679] [-679]]
Test Case: 477 | Input/Output: [[298] [298]]
Test Case: 478 | Input/Output: [[-18] [-18]]
Test Case: 479 | Input/Output: [[-89] [-89]]
Test Case: 480 | Input/Output: [[-994] [-994]]
Test Case: 481 | Input/Output: [[-911] [-911]]
Test Case: 482 | Input/Output: [[587] [587]]
Test Case: 483 | Input/Output: [[879] [879]]
Test Case: 484 | Input/Output: [[-803] [-803]]
Test Case: 485 | Input/Output: [[264] [264]]
Test Case: 486 | Input/Output: [[192] [192]]
Test Case: 487 | Input/Output: [[292] [292]]
Test Case: 488 | Input/Output: [[-534] [-534]]
Test Case: 489 | Input/Output: [[-117] [-117]]
Test Case: 490 | Input/Output: [[8] [8]]
Test Case: 491 | Input/Output: [[-83] [-83]]
Test Case: 492 | Input/Output: [[-659] [-659]]
Test Case: 493 | Input/Output: [[698] [698]]
Test Case: 494 | Input/Output: [[-486] [-486]]
Test Case: 495 | Input/Output: [[-47] [-47]]
Test Case: 496 | Input/Output: [[253] [253]]
Test Case: 497 | Input/Output: [[-226] [-226]]
Test Case: 498 | Input/Output: [[-370] [-370]]
Test Case: 499 | Input/Output: [[-476] [-476]]
Test Case: 500 | Input/Output: [[-151 -495] [-495 -151]]
Test Case: 501 | Input/Output: [[-672 243] [-672 243]]
Test Case: 502 | Input/Output: [[-675 889] [-675 889]]
Test Case: 503 | Input/Output: [[648 73] [73 648]]
Test Case: 504 | Input/Output: [[471 735] [471 735]]
Test Case: 505 | Input/Output: [[-534 -513] [-534 -513]]
Test Case: 506 | Input/Output: [[-730 -226] [-730 -226]]
Test Case: 507 | Input/Output: [[-801 -612] [-801 -612]]
Test Case: 508 | Input/Output: [[-642 95] [-642 95]]
Test Case: 509 | Input/Output: [[-204 -981] [-981 -204]]
Test Case: 510 | Input/Output: [[274 428] [274 428]]
Test Case: 511 | Input/Output: [[461 211] [211 461]]
Test Case: 512 | Input/Output: [[797 573] [573 797]]
Test Case: 513 | Input/Output: [[-817 753] [-817 753]]
Test Case: 514 | Input/Output: [[-54 -656] [-656 -54]]
Test Case: 515 | Input/Output: [[65 15] [15 65]]
Test Case: 516 | Input/Output: [[892 674] [674 892]]
Test Case: 517 | Input/Output: [[589 -351] [-351 589]]
Test Case: 518 | Input/Output: [[246 -735] [-735 246]]
Test Case: 519 | Input/Output: [[-28 -928] [-928 -28]]
Test Case: 520 | Input/Output: [[-891 -529] [-891 -529]]
Test Case: 521 | Input/Output: [[906 -365] [-365 906]]
Test Case: 522 | Input/Output: [[-587 -184] [-587 -184]]
Test Case: 523 | Input/Output: [[198 150] [150 198]]
Test Case: 524 | Input/Output: [[726 -525] [-525 726]]
Test Case: 525 | Input/Output: [[-84 73] [-84 73]]
Test Case: 526 | Input/Output: [[-679 443] [-679 443]]
Test Case: 527 | Input/Output: [[158 303] [158 303]]
Test Case: 528 | Input/Output: [[197 639] [197 639]]
Test Case: 529 | Input/Output: [[842 432] [432 842]]
Test Case: 530 | Input/Output: [[225 195] [195 225]]
Test Case: 531 | Input/Output: [[-666 -627] [-666 -627]]
Test Case: 532 | Input/Output: [[-748 492] [-748 492]]
Test Case: 533 | Input/Output: [[-356 -849] [-849 -356]]
Test Case: 534 | Input/Output: [[-695 478] [-695 478]]
Test Case: 535 | Input/Output: [[813 900] [813 900]]
Test Case: 536 | Input/Output: [[-70 400] [-70 400]]
Test Case: 537 | Input/Output: [[-579 1000] [-579 1000]]
Test Case: 538 | Input/Output: [[380 904] [380 904]]
Test Case: 539 | Input/Output: [[554 543] [543 554]]
Test Case: 540 | Input/Output: [[599 -209] [-209 599]]
Test Case: 541 | Input/Output: [[-624 -594] [-624 -594]]
Test Case: 542 | Input/Output: [[248 -826] [-826 248]]
Test Case: 543 | Input/Output: [[185 -664] [-664 185]]
Test Case: 544 | Input/Output: [[-758 -722] [-758 -722]]
Test Case: 545 | Input/Output: [[298 -976] [-976 298]]
Test Case: 546 | Input/Output: [[537 -210] [-210 537]]
Test Case: 547 | Input/Output: [[679 -974] [-974 679]]
Test Case: 548 | Input/Output: [[-630 -612] [-630 -612]]
Test Case: 549 | Input/Output: [[-425 25] [-425 25]]
Test Case: 550 | Input/Output: [[-904 -29] [-904 -29]]
Test Case: 551 | Input/Output: [[301 -612] [-612 301]]
Test Case: 552 | Input/Output: [[847 173] [173 847]]
Test Case: 553 | Input/Output: [[760 963] [760 963]]
Test Case: 554 | Input/Output: [[815 -632] [-632 815]]
Test Case: 555 | Input/Output: [[-970 897] [-970 897]]
Test Case: 556 | Input/Output: [[545 -92] [-92 545]]
Test Case: 557 | Input/Output: [[-356 884] [-356 884]]
Test Case: 558 | Input/Output: [[-246 -315] [-315 -246]]
Test Case: 559 | Input/Output: [[554 -696] [-696 554]]
Test Case: 560 | Input/Output: [[-857 100] [-857 100]]
Test Case: 561 | Input/Output: [[-259 -564] [-564 -259]]
Test Case: 562 | Input/Output: [[-340 -877] [-877 -340]]
Test Case: 563 | Input/Output: [[-110 269] [-110 269]]
Test Case: 564 | Input/Output: [[-476 -90] [-476 -90]]
Test Case: 565 | Input/Output: [[-672 582] [-672 582]]
Test Case: 566 | Input/Output: [[-433 215] [-433 215]]
Test Case: 567 | Input/Output: [[309 -433] [-433 309]]
Test Case: 568 | Input/Output: [[-770 40] [-770 40]]
Test Case: 569 | Input/Output: [[348 -345] [-345 348]]
Test Case: 570 | Input/Output: [[-378 -695] [-695 -378]]
Test Case: 571 | Input/Output: [[314 -64] [-64 314]]
Test Case: 572 | Input/Output: [[-13 571] [-13 571]]
Test Case: 573 | Input/Output: [[-989 48] [-989 48]]
Test Case: 574 | Input/Output: [[-498 524] [-498 524]]
Test Case: 575 | Input/Output: [[464 -829] [-829 464]]
Test Case: 576 | Input/Output: [[-715 154] [-715 154]]
Test Case: 577 | Input/Output: [[562 354] [354 562]]
Test Case: 578 | Input/Output: [[-748 -234] [-748 -234]]
Test Case: 579 | Input/Output: [[738 554] [554 738]]
Test Case: 580 | Input/Output: [[685 448] [448 685]]
Test Case: 581 | Input/Output: [[-349 78] [-349 78]]
Test Case: 582 | Input/Output: [[-475 120] [-475 120]]
Test Case: 583 | Input/Output: [[321 -886] [-886 321]]
Test Case: 584 | Input/Output: [[790 192] [192 790]]
Test Case: 585 | Input/Output: [[199 -662] [-662 199]]
Test Case: 586 | Input/Output: [[138 36] [36 138]]
Test Case: 587 | Input/Output: [[578 -962] [-962 578]]
Test Case: 588 | Input/Output: [[-805 -562] [-805 -562]]
Test Case: 589 | Input/Output: [[555 -242] [-242 555]]
Test Case: 590 | Input/Output: [[806 542] [542 806]]
Test Case: 591 | Input/Output: [[-269 303] [-269 303]]
Test Case: 592 | Input/Output: [[554 233] [233 554]]
Test Case: 593 | Input/Output: [[-951 -533] [-951 -533]]
Test Case: 594 | Input/Output: [[-602 -859] [-859 -602]]
Test Case: 595 | Input/Output: [[603 -725] [-725 603]]
Test Case: 596 | Input/Output: [[253 -345] [-345 253]]
Test Case: 597 | Input/Output: [[643 573] [573 643]]
Test Case: 598 | Input/Output: [[436 -482] [-482 436]]
Test Case: 599 | Input/Output: [[-871 -100] [-871 -100]]
Test Case: 600 | Input/Output: [[468 -728] [-728 468]]
Test Case: 601 | Input/Output: [[-96 800] [-96 800]]
Test Case: 602 | Input/Output: [[568 -657] [-657 568]]
Test Case: 603 | Input/Output: [[910 -243] [-243 910]]
Test Case: 604 | Input/Output: [[192 696] [192 696]]
Test Case: 605 | Input/Output: [[422 -279] [-279 422]]
Test Case: 606 | Input/Output: [[502 447] [447 502]]
Test Case: 607 | Input/Output: [[659 622] [622 659]]
Test Case: 608 | Input/Output: [[874 -69] [-69 874]]
Test Case: 609 | Input/Output: [[-307 -375] [-375 -307]]
Test Case: 610 | Input/Output: [[-857 -469] [-857 -469]]
Test Case: 611 | Input/Output: [[-111 509] [-111 509]]
Test Case: 612 | Input/Output: [[240 -222] [-222 240]]
Test Case: 613 | Input/Output: [[345 606] [345 606]]
Test Case: 614 | Input/Output: [[-658 431] [-658 431]]
Test Case: 615 | Input/Output: [[756 -977] [-977 756]]
Test Case: 616 | Input/Output: [[-991 396] [-991 396]]
Test Case: 617 | Input/Output: [[479 924] [479 924]]
Test Case: 618 | Input/Output: [[432 179] [179 432]]
Test Case: 619 | Input/Output: [[-672 693] [-672 693]]
Test Case: 620 | Input/Output: [[24 287] [24 287]]
Test Case: 621 | Input/Output: [[-349 599] [-349 599]]
Test Case: 622 | Input/Output: [[-448 -891] [-891 -448]]
Test Case: 623 | Input/Output: [[-189 -353] [-353 -189]]
Test Case: 624 | Input/Output: [[-381 601] [-381 601]]
Test Case: 625 | Input/Output: [[-953 -330] [-953 -330]]
Test Case: 626 | Input/Output: [[259 772] [259 772]]
Test Case: 627 | Input/Output: [[-683 987] [-683 987]]
Test Case: 628 | Input/Output: [[939 -551] [-551 939]]
Test Case: 629 | Input/Output: [[845 -112] [-112 845]]
Test Case: 630 | Input/Output: [[61 -400] [-400 61]]
Test Case: 631 | Input/Output: [[553 417] [417 553]]
Test Case: 632 | Input/Output: [[-445 -396] [-445 -396]]
Test Case: 633 | Input/Output: [[637 172] [172 637]]
Test Case: 634 | Input/Output: [[-121 929] [-121 929]]
Test Case: 635 | Input/Output: [[-738 -258] [-738 -258]]
Test Case: 636 | Input/Output: [[685 -441] [-441 685]]
Test Case: 637 | Input/Output: [[72 908] [72 908]]
Test Case: 638 | Input/Output: [[636 974] [636 974]]
Test Case: 639 | Input/Output: [[-732 390] [-732 390]]
Test Case: 640 | Input/Output: [[-551 -189] [-551 -189]]
Test Case: 641 | Input/Output: [[-396 147] [-396 147]]
Test Case: 642 | Input/Output: [[934 261] [261 934]]
Test Case: 643 | Input/Output: [[984 887] [887 984]]
Test Case: 644 | Input/Output: [[436 484] [436 484]]
Test Case: 645 | Input/Output: [[-680 794] [-680 794]]
Test Case: 646 | Input/Output: [[170 -871] [-871 170]]
Test Case: 647 | Input/Output: [[906 933] [906 933]]
Test Case: 648 | Input/Output: [[47 -393] [-393 47]]
Test Case: 649 | Input/Output: [[27 50] [27 50]]
Test Case: 650 | Input/Output: [[-672 -918] [-918 -672]]
Test Case: 651 | Input/Output: [[-227 599] [-227 599]]
Test Case: 652 | Input/Output: [[-967 786] [-967 786]]
Test Case: 653 | Input/Output: [[430 828] [430 828]]
Test Case: 654 | Input/Output: [[43 280] [43 280]]
Test Case: 655 | Input/Output: [[-17 775] [-17 775]]
Test Case: 656 | Input/Output: [[775 -701] [-701 775]]
Test Case: 657 | Input/Output: [[513 -748] [-748 513]]
Test Case: 658 | Input/Output: [[-915 775] [-915 775]]
Test Case: 659 | Input/Output: [[736 -495] [-495 736]]
Test Case: 660 | Input/Output: [[-543 -11] [-543 -11]]
Test Case: 661 | Input/Output: [[335 -872] [-872 335]]
Test Case: 662 | Input/Output: [[391 331] [331 391]]
Test Case: 663 | Input/Output: [[975 615] [615 975]]
Test Case: 664 | Input/Output: [[-248 203] [-248 203]]
Test Case: 665 | Input/Output: [[-276 419] [-276 419]]
Test Case: 666 | Input/Output: [[-670 846] [-670 846]]
Test Case: 667 | Input/Output: [[292 -896] [-896 292]]
Test Case: 668 | Input/Output: [[-281 307] [-281 307]]
Test Case: 669 | Input/Output: [[188 982] [188 982]]
Test Case: 670 | Input/Output: [[879 732] [732 879]]
Test Case: 671 | Input/Output: [[-211 -352] [-352 -211]]
Test Case: 672 | Input/Output: [[210 -501] [-501 210]]
Test Case: 673 | Input/Output: [[-34 -731] [-731 -34]]
Test Case: 674 | Input/Output: [[-716 -890] [-890 -716]]
Test Case: 675 | Input/Output: [[-841 866] [-841 866]]
Test Case: 676 | Input/Output: [[688 301] [301 688]]
Test Case: 677 | Input/Output: [[829 24] [24 829]]
Test Case: 678 | Input/Output: [[816 -678] [-678 816]]
Test Case: 679 | Input/Output: [[-79 -524] [-524 -79]]
Test Case: 680 | Input/Output: [[924 837] [837 924]]
Test Case: 681 | Input/Output: [[-447 67] [-447 67]]
Test Case: 682 | Input/Output: [[-157 95] [-157 95]]
Test Case: 683 | Input/Output: [[861 79] [79 861]]
Test Case: 684 | Input/Output: [[-895 -100] [-895 -100]]
Test Case: 685 | Input/Output: [[-453 563] [-453 563]]
Test Case: 686 | Input/Output: [[-841 471] [-841 471]]
Test Case: 687 | Input/Output: [[400 610] [400 610]]
Test Case: 688 | Input/Output: [[-794 333] [-794 333]]
Test Case: 689 | Input/Output: [[-888 -414] [-888 -414]]
Test Case: 690 | Input/Output: [[-169 847] [-169 847]]
Test Case: 691 | Input/Output: [[370 531] [370 531]]
Test Case: 692 | Input/Output: [[-568 -156] [-568 -156]]
Test Case: 693 | Input/Output: [[-362 -881] [-881 -362]]
Test Case: 694 | Input/Output: [[-597 -81] [-597 -81]]
Test Case: 695 | Input/Output: [[-764 -781] [-781 -764]]
Test Case: 696 | Input/Output: [[-688 -954] [-954 -688]]
Test Case: 697 | Input/Output: [[310 662] [310 662]]
Test Case: 698 | Input/Output: [[105 -269] [-269 105]]
Test Case: 699 | Input/Output: [[-794 -643] [-794 -643]]
Test Case: 700 | Input/Output: [[-691 -5] [-691 -5]]
Test Case: 701 | Input/Output: [[866 997] [866 997]]
Test Case: 702 | Input/Output: [[-54 203] [-54 203]]
Test Case: 703 | Input/Output: [[870 -43] [-43 870]]
Test Case: 704 | Input/Output: [[637 854] [637 854]]
Test Case: 705 | Input/Output: [[-342 -625] [-625 -342]]
Test Case: 706 | Input/Output: [[-544 451] [-544 451]]
Test Case: 707 | Input/Output: [[999 292] [292 999]]
Test Case: 708 | Input/Output: [[806 -463] [-463 806]]
Test Case: 709 | Input/Output: [[945 -708] [-708 945]]
Test Case: 710 | Input/Output: [[935 848] [848 935]]
Test Case: 711 | Input/Output: [[200 575] [200 575]]
Test Case: 712 | Input/Output: [[-610 -353] [-610 -353]]
Test Case: 713 | Input/Output: [[-733 -598] [-733 -598]]
Test Case: 714 | Input/Output: [[490 66] [66 490]]
Test Case: 715 | Input/Output: [[862 866] [862 866]]
Test Case: 716 | Input/Output: [[-748 112] [-748 112]]
Test Case: 717 | Input/Output: [[23 -241] [-241 23]]
Test Case: 718 | Input/Output: [[757 966] [757 966]]
Test Case: 719 | Input/Output: [[735 -419] [-419 735]]
Test Case: 720 | Input/Output: [[338 -256] [-256 338]]
Test Case: 721 | Input/Output: [[-36 -342] [-342 -36]]
Test Case: 722 | Input/Output: [[281 142] [142 281]]
Test Case: 723 | Input/Output: [[-717 907] [-717 907]]
Test Case: 724 | Input/Output: [[796 969] [796 969]]
Test Case: 725 | Input/Output: [[285 435] [285 435]]
Test Case: 726 | Input/Output: [[497 -505] [-505 497]]
Test Case: 727 | Input/Output: [[-315 -123] [-315 -123]]
Test Case: 728 | Input/Output: [[550 531] [531 550]]
Test Case: 729 | Input/Output: [[-822 969] [-822 969]]
Test Case: 730 | Input/Output: [[-830 -275] [-830 -275]]
Test Case: 731 | Input/Output: [[-267 -315] [-315 -267]]
Test Case: 732 | Input/Output: [[-451 -766] [-766 -451]]
Test Case: 733 | Input/Output: [[-997 -483] [-997 -483]]
Test Case: 734 | Input/Output: [[529 -17] [-17 529]]
Test Case: 735 | Input/Output: [[-105 -247] [-247 -105]]
Test Case: 736 | Input/Output: [[982 912] [912 982]]
Test Case: 737 | Input/Output: [[388 183] [183 388]]
Test Case: 738 | Input/Output: [[-268 797] [-268 797]]
Test Case: 739 | Input/Output: [[-891 -319] [-891 -319]]
Test Case: 740 | Input/Output: [[-972 -463] [-972 -463]]
Test Case: 741 | Input/Output: [[871 948] [871 948]]
Test Case: 742 | Input/Output: [[612 898] [612 898]]
Test Case: 743 | Input/Output: [[218 245] [218 245]]
Test Case: 744 | Input/Output: [[797 -427] [-427 797]]
Test Case: 745 | Input/Output: [[-626 -256] [-626 -256]]
Test Case: 746 | Input/Output: [[685 835] [685 835]]
Test Case: 747 | Input/Output: [[161 -881] [-881 161]]
Test Case: 748 | Input/Output: [[-680 804] [-680 804]]
Test Case: 749 | Input/Output: [[471 -479] [-479 471]]
Test Case: 750 | Input/Output: [[-880 410] [-880 410]]
Test Case: 751 | Input/Output: [[-511 872] [-511 872]]
Test Case: 752 | Input/Output: [[-954 -880] [-954 -880]]
Test Case: 753 | Input/Output: [[725 306] [306 725]]
Test Case: 754 | Input/Output: [[377 -453] [-453 377]]
Test Case: 755 | Input/Output: [[66 -165] [-165 66]]
Test Case: 756 | Input/Output: [[377 -7] [-7 377]]
Test Case: 757 | Input/Output: [[-806 -508] [-806 -508]]
Test Case: 758 | Input/Output: [[-295 25] [-295 25]]
Test Case: 759 | Input/Output: [[37 162] [37 162]]
Test Case: 760 | Input/Output: [[151 959] [151 959]]
Test Case: 761 | Input/Output: [[95 987] [95 987]]
Test Case: 762 | Input/Output: [[276 16] [16 276]]
Test Case: 763 | Input/Output: [[-497 -56] [-497 -56]]
Test Case: 764 | Input/Output: [[-109 -201] [-201 -109]]
Test Case: 765 | Input/Output: [[555 427] [427 555]]
Test Case: 766 | Input/Output: [[874 434] [434 874]]
Test Case: 767 | Input/Output: [[423 588] [423 588]]
Test Case: 768 | Input/Output: [[736 -596] [-596 736]]
Test Case: 769 | Input/Output: [[913 893] [893 913]]
Test Case: 770 | Input/Output: [[440 -108] [-108 440]]
Test Case: 771 | Input/Output: [[-370 -918] [-918 -370]]
Test Case: 772 | Input/Output: [[62 439] [62 439]]
Test Case: 773 | Input/Output: [[40 344] [40 344]]
Test Case: 774 | Input/Output: [[112 -460] [-460 112]]
Test Case: 775 | Input/Output: [[-640 -698] [-698 -640]]
Test Case: 776 | Input/Output: [[-130 -896] [-896 -130]]
Test Case: 777 | Input/Output: [[-756 543] [-756 543]]
Test Case: 778 | Input/Output: [[-80 -14] [-80 -14]]
Test Case: 779 | Input/Output: [[715 -853] [-853 715]]
Test Case: 780 | Input/Output: [[-999 3] [-999 3]]
Test Case: 781 | Input/Output: [[476 629] [476 629]]
Test Case: 782 | Input/Output: [[357 638] [357 638]]
Test Case: 783 | Input/Output: [[465 -376] [-376 465]]
Test Case: 784 | Input/Output: [[598 -7] [-7 598]]
Test Case: 785 | Input/Output: [[557 -880] [-880 557]]
Test Case: 786 | Input/Output: [[-313 863] [-313 863]]
Test Case: 787 | Input/Output: [[-116 610] [-116 610]]
Test Case: 788 | Input/Output: [[309 842] [309 842]]
Test Case: 789 | Input/Output: [[-34 -959] [-959 -34]]
Test Case: 790 | Input/Output: [[508 -473] [-473 508]]
Test Case: 791 | Input/Output: [[-664 676] [-664 676]]
Test Case: 792 | Input/Output: [[-46 -788] [-788 -46]]
Test Case: 793 | Input/Output: [[-290 862] [-290 862]]
Test Case: 794 | Input/Output: [[-913 780] [-913 780]]
Test Case: 795 | Input/Output: [[47 711] [47 711]]
Test Case: 796 | Input/Output: [[-506 620] [-506 620]]
Test Case: 797 | Input/Output: [[-43 980] [-43 980]]
Test Case: 798 | Input/Output: [[-176 467] [-176 467]]
Test Case: 799 | Input/Output: [[471 315] [315 471]]
Test Case: 800 | Input/Output: [[581 -847] [-847 581]]
Test Case: 801 | Input/Output: [[588 -863] [-863 588]]
Test Case: 802 | Input/Output: [[836 737] [737 836]]
Test Case: 803 | Input/Output: [[-65 744] [-65 744]]
Test Case: 804 | Input/Output: [[-841 -174] [-841 -174]]
Test Case: 805 | Input/Output: [[-152 -935] [-935 -152]]
Test Case: 806 | Input/Output: [[564 715] [564 715]]
Test Case: 807 | Input/Output: [[140 -445] [-445 140]]
Test Case: 808 | Input/Output: [[286 -828] [-828 286]]
Test Case: 809 | Input/Output: [[-897 -465] [-897 -465]]
Test Case: 810 | Input/Output: [[699 -380] [-380 699]]
Test Case: 811 | Input/Output: [[-645 142] [-645 142]]
Test Case: 812 | Input/Output: [[432 -605] [-605 432]]
Test Case: 813 | Input/Output: [[-177 -832] [-832 -177]]
Test Case: 814 | Input/Output: [[640 958] [640 958]]
Test Case: 815 | Input/Output: [[665 509] [509 665]]
Test Case: 816 | Input/Output: [[21 -130] [-130 21]]
Test Case: 817 | Input/Output: [[208 -415] [-415 208]]
Test Case: 818 | Input/Output: [[701 353] [353 701]]
Test Case: 819 | Input/Output: [[107 -748] [-748 107]]
Test Case: 820 | Input/Output: [[-679 -7] [-679 -7]]
Test Case: 821 | Input/Output: [[589 -333] [-333 589]]
Test Case: 822 | Input/Output: [[208 131] [131 208]]
Test Case: 823 | Input/Output: [[333 -256] [-256 333]]
Test Case: 824 | Input/Output: [[897 643] [643 897]]
Test Case: 825 | Input/Output: [[-677 213] [-677 213]]
Test Case: 826 | Input/Output: [[-413 -665] [-665 -413]]
Test Case: 827 | Input/Output: [[-122 -427] [-427 -122]]
Test Case: 828 | Input/Output: [[896 920] [896 920]]
Test Case: 829 | Input/Output: [[-634 104] [-634 104]]
Test Case: 830 | Input/Output: [[794 477] [477 794]]
Test Case: 831 | Input/Output: [[108 324] [108 324]]
Test Case: 832 | Input/Output: [[-198 -22] [-198 -22]]
Test Case: 833 | Input/Output: [[284 -374] [-374 284]]
Test Case: 834 | Input/Output: [[882 289] [289 882]]
Test Case: 835 | Input/Output: [[350 869] [350 869]]
Test Case: 836 | Input/Output: [[-925 404] [-925 404]]
Test Case: 837 | Input/Output: [[-254 -183] [-254 -183]]
Test Case: 838 | Input/Output: [[-516 -159] [-516 -159]]
Test Case: 839 | Input/Output: [[-803 -969] [-969 -803]]
Test Case: 840 | Input/Output: [[130 -356] [-356 130]]
Test Case: 841 | Input/Output: [[-911 443] [-911 443]]
Test Case: 842 | Input/Output: [[-779 -536] [-779 -536]]
Test Case: 843 | Input/Output: [[687 545] [545 687]]
Test Case: 844 | Input/Output: [[379 -231] [-231 379]]
Test Case: 845 | Input/Output: [[136 -956] [-956 136]]
Test Case: 846 | Input/Output: [[877 649] [649 877]]
Test Case: 847 | Input/Output: [[-62 534] [-62 534]]
Test Case: 848 | Input/Output: [[-216 -530] [-530 -216]]
Test Case: 849 | Input/Output: [[-253 -117] [-253 -117]]
Test Case: 850 | Input/Output: [[732 -421] [-421 732]]
Test Case: 851 | Input/Output: [[0 911] [0 911]]
Test Case: 852 | Input/Output: [[-5 -50] [-50 -5]]
Test Case: 853 | Input/Output: [[913 -130] [-130 913]]
Test Case: 854 | Input/Output: [[-103 -28] [-103 -28]]
Test Case: 855 | Input/Output: [[-630 -694] [-694 -630]]
Test Case: 856 | Input/Output: [[287 405] [287 405]]
Test Case: 857 | Input/Output: [[-657 131] [-657 131]]
Test Case: 858 | Input/Output: [[554 361] [361 554]]
Test Case: 859 | Input/Output: [[629 849] [629 849]]
Test Case: 860 | Input/Output: [[669 -402] [-402 669]]
Test Case: 861 | Input/Output: [[748 956] [748 956]]
Test Case: 862 | Input/Output: [[399 605] [399 605]]
Test Case: 863 | Input/Output: [[513 34] [34 513]]
Test Case: 864 | Input/Output: [[196 970] [196 970]]
Test Case: 865 | Input/Output: [[903 -274] [-274 903]]
Test Case: 866 | Input/Output: [[-847 705] [-847 705]]
Test Case: 867 | Input/Output: [[107 -969] [-969 107]]
Test Case: 868 | Input/Output: [[993 263] [263 993]]
Test Case: 869 | Input/Output: [[-512 -636] [-636 -512]]
Test Case: 870 | Input/Output: [[-339 482] [-339 482]]
Test Case: 871 | Input/Output: [[-584 -332] [-584 -332]]
Test Case: 872 | Input/Output: [[-424 -385] [-424 -385]]
Test Case: 873 | Input/Output: [[969 -321] [-321 969]]
Test Case: 874 | Input/Output: [[649 823] [649 823]]
Test Case: 875 | Input/Output: [[-55 -716] [-716 -55]]
Test Case: 876 | Input/Output: [[529 -554] [-554 529]]
Test Case: 877 | Input/Output: [[-474 -979] [-979 -474]]
Test Case: 878 | Input/Output: [[791 -841] [-841 791]]
Test Case: 879 | Input/Output: [[163 993] [163 993]]
Test Case: 880 | Input/Output: [[-75 -708] [-708 -75]]
Test Case: 881 | Input/Output: [[-696 654] [-696 654]]
Test Case: 882 | Input/Output: [[551 -840] [-840 551]]
Test Case: 883 | Input/Output: [[-619 -690] [-690 -619]]
Test Case: 884 | Input/Output: [[796 -550] [-550 796]]
Test Case: 885 | Input/Output: [[-173 185] [-173 185]]
Test Case: 886 | Input/Output: [[-990 -370] [-990 -370]]
Test Case: 887 | Input/Output: [[717 -495] [-495 717]]
Test Case: 888 | Input/Output: [[857 62] [62 857]]
Test Case: 889 | Input/Output: [[917 989] [917 989]]
Test Case: 890 | Input/Output: [[-236 652] [-236 652]]
Test Case: 891 | Input/Output: [[-874 -14] [-874 -14]]
Test Case: 892 | Input/Output: [[-465 -528] [-528 -465]]
Test Case: 893 | Input/Output: [[-624 567] [-624 567]]
Test Case: 894 | Input/Output: [[414 516] [414 516]]
Test Case: 895 | Input/Output: [[-444 96] [-444 96]]
Test Case: 896 | Input/Output: [[423 -974] [-974 423]]
Test Case: 897 | Input/Output: [[325 511] [325 511]]
Test Case: 898 | Input/Output: [[383 393] [383 393]]
Test Case: 899 | Input/Output: [[377 276] [276 377]]
Test Case: 900 | Input/Output: [[845 6] [6 845]]
Test Case: 901 | Input/Output: [[-215 373] [-215 373]]
Test Case: 902 | Input/Output: [[860 623] [623 860]]
Test Case: 903 | Input/Output: [[846 989] [846 989]]
Test Case: 904 | Input/Output: [[-746 -25] [-746 -25]]
Test Case: 905 | Input/Output: [[-302 351] [-302 351]]
Test Case: 906 | Input/Output: [[-503 943] [-503 943]]
Test Case: 907 | Input/Output: [[356 -418] [-418 356]]
Test Case: 908 | Input/Output: [[-588 106] [-588 106]]
Test Case: 909 | Input/Output: [[-102 827] [-102 827]]
Test Case: 910 | Input/Output: [[-659 56] [-659 56]]
Test Case: 911 | Input/Output: [[551 245] [245 551]]
Test Case: 912 | Input/Output: [[-909 375] [-909 375]]
Test Case: 913 | Input/Output: [[78 3] [3 78]]
Test Case: 914 | Input/Output: [[-866 129] [-866 129]]
Test Case: 915 | Input/Output: [[664 215] [215 664]]
Test Case: 916 | Input/Output: [[-543 939] [-543 939]]
Test Case: 917 | Input/Output: [[-771 -834] [-834 -771]]
Test Case: 918 | Input/Output: [[-743 -352] [-743 -352]]
Test Case: 919 | Input/Output: [[-285 -118] [-285 -118]]
Test Case: 920 | Input/Output: [[-107 78] [-107 78]]
Test Case: 921 | Input/Output: [[628 392] [392 628]]
Test Case: 922 | Input/Output: [[868 -999] [-999 868]]
Test Case: 923 | Input/Output: [[-229 970] [-229 970]]
Test Case: 924 | Input/Output: [[231 625] [231 625]]
Test Case: 925 | Input/Output: [[933 314] [314 933]]
Test Case: 926 | Input/Output: [[-507 774] [-507 774]]
Test Case: 927 | Input/Output: [[743 -796] [-796 743]]
Test Case: 928 | Input/Output: [[752 938] [752 938]]
Test Case: 929 | Input/Output: [[364 -774] [-774 364]]
Test Case: 930 | Input/Output: [[846 -863] [-863 846]]
Test Case: 931 | Input/Output: [[144 -822] [-822 144]]
Test Case: 932 | Input/Output: [[-367 -759] [-759 -367]]
Test Case: 933 | Input/Output: [[562 787] [562 787]]
Test Case: 934 | Input/Output: [[-245 -113] [-245 -113]]
Test Case: 935 | Input/Output: [[-480 -599] [-599 -480]]
Test Case: 936 | Input/Output: [[-167 -374] [-374 -167]]
Test Case: 937 | Input/Output: [[5 -21] [-21 5]]
Test Case: 938 | Input/Output: [[-192 -89] [-192 -89]]
Test Case: 939 | Input/Output: [[126 505] [126 505]]
Test Case: 940 | Input/Output: [[-295 164] [-295 164]]
Test Case: 941 | Input/Output: [[-984 733] [-984 733]]
Test Case: 942 | Input/Output: [[184 136] [136 184]]
Test Case: 943 | Input/Output: [[-451 -420] [-451 -420]]
Test Case: 944 | Input/Output: [[657 501] [501 657]]
Test Case: 945 | Input/Output: [[-563 -400] [-563 -400]]
Test Case: 946 | Input/Output: [[-49 -913] [-913 -49]]
Test Case: 947 | Input/Output: [[296 -202] [-202 296]]
Test Case: 948 | Input/Output: [[-144 -476] [-476 -144]]
Test Case: 949 | Input/Output: [[-505 -614] [-614 -505]]
Test Case: 950 | Input/Output: [[-733 301] [-733 301]]
Test Case: 951 | Input/Output: [[-128 39] [-128 39]]
Test Case: 952 | Input/Output: [[-919 -634] [-919 -634]]
Test Case: 953 | Input/Output: [[745 614] [614 745]]
Test Case: 954 | Input/Output: [[-998 878] [-998 878]]
Test Case: 955 | Input/Output: [[952 -832] [-832 952]]
Test Case: 956 | Input/Output: [[-779 -45] [-779 -45]]
Test Case: 957 | Input/Output: [[-907 517] [-907 517]]
Test Case: 958 | Input/Output: [[-301 -38] [-301 -38]]
Test Case: 959 | Input/Output: [[-150 -382] [-382 -150]]
Test Case: 960 | Input/Output: [[-307 -316] [-316 -307]]
Test Case: 961 | Input/Output: [[410 909] [410 909]]
Test Case: 962 | Input/Output: [[-970 271] [-970 271]]
Test Case: 963 | Input/Output: [[-49 -312] [-312 -49]]
Test Case: 964 | Input/Output: [[-31 70] [-31 70]]
Test Case: 965 | Input/Output: [[-997 -483] [-997 -483]]
Test Case: 966 | Input/Output: [[-670 584] [-670 584]]
Test Case: 967 | Input/Output: [[160 225] [160 225]]
Test Case: 968 | Input/Output: [[-439 804] [-439 804]]
Test Case: 969 | Input/Output: [[-50 109] [-50 109]]
Test Case: 970 | Input/Output: [[-959 -512] [-959 -512]]
Test Case: 971 | Input/Output: [[121 -753] [-753 121]]
Test Case: 972 | Input/Output: [[-391 320] [-391 320]]
Test Case: 973 | Input/Output: [[877 432] [432 877]]
Test Case: 974 | Input/Output: [[730 -216] [-216 730]]
Test Case: 975 | Input/Output: [[305 750] [305 750]]
Test Case: 976 | Input/Output: [[-784 654] [-784 654]]
Test Case: 977 | Input/Output: [[-997 -748] [-997 -748]]
Test Case: 978 | Input/Output: [[-635 -572] [-635 -572]]
Test Case: 979 | Input/Output: [[300 -719] [-719 300]]
Test Case: 980 | Input/Output: [[-659 23] [-659 23]]
Test Case: 981 | Input/Output: [[924 318] [318 924]]
Test Case: 982 | Input/Output: [[-440 -200] [-440 -200]]
Test Case: 983 | Input/Output: [[162 -998] [-998 162]]
Test Case: 984 | Input/Output: [[553 362] [362 553]]
Test Case: 985 | Input/Output: [[374 -217] [-217 374]]
Test Case: 986 | Input/Output: [[-635 -466] [-635 -466]]
Test Case: 987 | Input/Output: [[-407 39] [-407 39]]
Test Case: 988 | Input/Output: [[-43 61] [-43 61]]
Test Case: 989 | Input/Output: [[-135 201] [-135 201]]
Test Case: 990 | Input/Output: [[-480 240] [-480 240]]
Test Case: 991 | Input/Output: [[-577 -197] [-577 -197]]
Test Case: 992 | Input/Output: [[762 -260] [-260 762]]
Test Case: 993 | Input/Output: [[304 -573] [-573 304]]
Test Case: 994 | Input/Output: [[-84 5] [-84 5]]
Test Case: 995 | Input/Output: [[-933 8] [-933 8]]
Test Case: 996 | Input/Output: [[-371 862] [-371 862]]
Test Case: 997 | Input/Output: [[130 413] [130 413]]
Test Case: 998 | Input/Output: [[930 -391] [-391 930]]
Test Case: 999 | Input/Output: [[-803 582] [-803 582]]
Test Case: 1000 | Input/Output: [[995 -295 -185 -53 95] [-295 -185 -53 95 995]]
Test Case: 1001 | Input/Output: [[168 -612 922] [-612 168 922]]
Test Case: 1002 | Input/Output: [[-103 473 -933 -166] [-933 -166 -103 473]]
Test Case: 1003 | Input/Output: [[-440 264 -791] [-791 -440 264]]
Test Case: 1004 | Input/Output: [[-956 748 332] [-956 332 748]]
Test Case: 1005 | Input/Output: [[728 -177 -23 295] [-177 -23 295 728]]
Test Case: 1006 | Input/Output: [[618 682 -909 -915] [-915 -909 618 682]]
Test Case: 1007 | Input/Output: [[-757 -549 -415 -295 531] [-757 -549 -415 -295 531]]
Test Case: 1008 | Input/Output: [[248 233 760] [233 248 760]]
Test Case: 1009 | Input/Output: [[-61 474 -651 -60 -802] [-802 -651 -61 -60 474]]
Test Case: 1010 | Input/Output: [[584 -760 -868] [-868 -760 584]]
Test Case: 1011 | Input/Output: [[654 -747 765] [-747 654 765]]
Test Case: 1012 | Input/Output: [[-994 657 109] [-994 109 657]]
Test Case: 1013 | Input/Output: [[-610 -929 618] [-929 -610 618]]
Test Case: 1014 | Input/Output: [[-440 269 360 415 902] [-440 269 360 415 902]]
Test Case: 1015 | Input/Output: [[863 -179 859 -654] [-654 -179 859 863]]
Test Case: 1016 | Input/Output: [[-46 -222 -229] [-229 -222 -46]]
Test Case: 1017 | Input/Output: [[12 -269 469 -60 231] [-269 -60 12 231 469]]
Test Case: 1018 | Input/Output: [[15 488 -808] [-808 15 488]]
Test Case: 1019 | Input/Output: [[-161 708 -578 -542 788] [-578 -542 -161 708 788]]
Test Case: 1020 | Input/Output: [[957 904 476 -280] [-280 476 904 957]]
Test Case: 1021 | Input/Output: [[183 -430 -516] [-516 -430 183]]
Test Case: 1022 | Input/Output: [[-361 345 55 -600] [-600 -361 55 345]]
Test Case: 1023 | Input/Output: [[-259 807 -572 -683 -137] [-683 -572 -259 -137 807]]
Test Case: 1024 | Input/Output: [[736 70 -183] [-183 70 736]]
Test Case: 1025 | Input/Output: [[-129 -681 648] [-681 -129 648]]
Test Case: 1026 | Input/Output: [[138 -777 737] [-777 138 737]]
Test Case: 1027 | Input/Output: [[-19 -466 -857 595] [-857 -466 -19 595]]
Test Case: 1028 | Input/Output: [[-921 915 38] [-921 38 915]]
Test Case: 1029 | Input/Output: [[-912 394 -349] [-912 -349 394]]
Test Case: 1030 | Input/Output: [[-533 572 -328] [-533 -328 572]]
Test Case: 1031 | Input/Output: [[-788 -443 -573 188 581] [-788 -573 -443 188 581]]
Test Case: 1032 | Input/Output: [[91 327 407 -568] [-568 91 327 407]]
Test Case: 1033 | Input/Output: [[825 -525 -510] [-525 -510 825]]
Test Case: 1034 | Input/Output: [[-653 626 -856 874] [-856 -653 626 874]]
Test Case: 1035 | Input/Output: [[-145 -669 294] [-669 -145 294]]
Test Case: 1036 | Input/Output: [[120 505 -306 756] [-306 120 505 756]]
Test Case: 1037 | Input/Output: [[-292 -380 815 -274] [-380 -292 -274 815]]
Test Case: 1038 | Input/Output: [[-194 341 259 161] [-194 161 259 341]]
Test Case: 1039 | Input/Output: [[-536 -947 242] [-947 -536 242]]
Test Case: 1040 | Input/Output: [[459 3 -601 930] [-601 3 459 930]]
Test Case: 1041 | Input/Output: [[-318 270 869 902] [-318 270 869 902]]
Test Case: 1042 | Input/Output: [[-497 401 13] [-497 13 401]]
Test Case: 1043 | Input/Output: [[-125 896 641 308 671] [-125 308 641 671 896]]
Test Case: 1044 | Input/Output: [[-303 283 236 -823] [-823 -303 236 283]]
Test Case: 1045 | Input/Output: [[327 283 715 -235] [-235 283 327 715]]
Test Case: 1046 | Input/Output: [[352 717 -323 616] [-323 352 616 717]]
Test Case: 1047 | Input/Output: [[431 -768 958] [-768 431 958]]
Test Case: 1048 | Input/Output: [[921 161 -572 -717 447] [-717 -572 161 447 921]]
Test Case: 1049 | Input/Output: [[825 442 904] [442 825 904]]
Test Case: 1050 | Input/Output: [[-995 189 200 -845] [-995 -845 189 200]]
Test Case: 1051 | Input/Output: [[814 -797 -260] [-797 -260 814]]
Test Case: 1052 | Input/Output: [[195 -670 985 -974 468] [-974 -670 195 468 985]]
Test Case: 1053 | Input/Output: [[-783 -497 -758 325] [-783 -758 -497 325]]
Test Case: 1054 | Input/Output: [[-504 250 415 -728] [-728 -504 250 415]]
Test Case: 1055 | Input/Output: [[-571 -321 -637] [-637 -571 -321]]
Test Case: 1056 | Input/Output: [[473 -331 -854] [-854 -331 473]]
Test Case: 1057 | Input/Output: [[594 669 -544 264] [-544 264 594 669]]
Test Case: 1058 | Input/Output: [[-672 173 579] [-672 173 579]]
Test Case: 1059 | Input/Output: [[-38 801 -164] [-164 -38 801]]
Test Case: 1060 | Input/Output: [[-42 -964 845 135] [-964 -42 135 845]]
Test Case: 1061 | Input/Output: [[372 -362 -491 -962 968] [-962 -491 -362 372 968]]
Test Case: 1062 | Input/Output: [[814 -907 -839] [-907 -839 814]]
Test Case: 1063 | Input/Output: [[-948 -171 -201 -690] [-948 -690 -201 -171]]
Test Case: 1064 | Input/Output: [[-475 685 -5] [-475 -5 685]]
Test Case: 1065 | Input/Output: [[295 -234 521 890 702] [-234 295 521 702 890]]
Test Case: 1066 | Input/Output: [[-556 614 462 -305] [-556 -305 462 614]]
Test Case: 1067 | Input/Output: [[511 148 375 263] [148 263 375 511]]
Test Case: 1068 | Input/Output: [[901 -735 340 -459] [-735 -459 340 901]]
Test Case: 1069 | Input/Output: [[606 187 -118 -10] [-118 -10 187 606]]
Test Case: 1070 | Input/Output: [[-404 863 -508 -114] [-508 -404 -114 863]]
Test Case: 1071 | Input/Output: [[504 -351 -959] [-959 -351 504]]
Test Case: 1072 | Input/Output: [[946 -513 -201] [-513 -201 946]]
Test Case: 1073 | Input/Output: [[437 803 -553] [-553 437 803]]
Test Case: 1074 | Input/Output: [[502 -353 -838 -615 -693] [-838 -693 -615 -353 502]]
Test Case: 1075 | Input/Output: [[341 -701 556] [-701 341 556]]
Test Case: 1076 | Input/Output: [[525 78 -520 -369 111] [-520 -369 78 111 525]]
Test Case: 1077 | Input/Output: [[875 -347 108 32 -684] [-684 -347 32 108 875]]
Test Case: 1078 | Input/Output: [[977 -268 642 147] [-268 147 642 977]]
Test Case: 1079 | Input/Output: [[963 7 780 -555] [-555 7 780 963]]
Test Case: 1080 | Input/Output: [[-528 991 640] [-528 640 991]]
Test Case: 1081 | Input/Output: [[167 -784 187 -139] [-784 -139 167 187]]
Test Case: 1082 | Input/Output: [[997 940 861 -968 116] [-968 116 861 940 997]]
Test Case: 1083 | Input/Output: [[-802 78 703 602] [-802 78 602 703]]
Test Case: 1084 | Input/Output: [[260 785 -862] [-862 260 785]]
Test Case: 1085 | Input/Output: [[-675 -171 -153 873] [-675 -171 -153 873]]
Test Case: 1086 | Input/Output: [[-883 -439 -927] [-927 -883 -439]]
Test Case: 1087 | Input/Output: [[-44 50 -722] [-722 -44 50]]
Test Case: 1088 | Input/Output: [[-740 -83 -364 -425 336] [-740 -425 -364 -83 336]]
Test Case: 1089 | Input/Output: [[769 859 -425] [-425 769 859]]
Test Case: 1090 | Input/Output: [[-886 877 607 67 335] [-886 67 335 607 877]]
Test Case: 1091 | Input/Output: [[678 -294 -419] [-419 -294 678]]
Test Case: 1092 | Input/Output: [[-512 -502 764] [-512 -502 764]]
Test Case: 1093 | Input/Output: [[-589 -601 -144 -886] [-886 -601 -589 -144]]
Test Case: 1094 | Input/Output: [[-700 -128 -576] [-700 -576 -128]]
Test Case: 1095 | Input/Output: [[-792 505 983 202] [-792 202 505 983]]
Test Case: 1096 | Input/Output: [[899 -885 466] [-885 466 899]]
Test Case: 1097 | Input/Output: [[-166 -542 -492 834 259] [-542 -492 -166 259 834]]
Test Case: 1098 | Input/Output: [[-820 -133 571] [-820 -133 571]]
Test Case: 1099 | Input/Output: [[-658 -601 -546] [-658 -601 -546]]
Test Case: 1100 | Input/Output: [[-51 -570 974] [-570 -51 974]]
Test Case: 1101 | Input/Output: [[698 -861 834] [-861 698 834]]
Test Case: 1102 | Input/Output: [[-847 -382 518 578 719] [-847 -382 518 578 719]]
Test Case: 1103 | Input/Output: [[277 122 -736 -414 139] [-736 -414 122 139 277]]
Test Case: 1104 | Input/Output: [[159 499 158] [158 159 499]]
Test Case: 1105 | Input/Output: [[465 -846 900 -502] [-846 -502 465 900]]
Test Case: 1106 | Input/Output: [[-816 616 -988 -239] [-988 -816 -239 616]]
Test Case: 1107 | Input/Output: [[542 -262 -661 484] [-661 -262 484 542]]
Test Case: 1108 | Input/Output: [[154 -170 939] [-170 154 939]]
Test Case: 1109 | Input/Output: [[873 -471 -978 219] [-978 -471 219 873]]
Test Case: 1110 | Input/Output: [[-851 745 -370] [-851 -370 745]]
Test Case: 1111 | Input/Output: [[370 -696 944 937] [-696 370 937 944]]
Test Case: 1112 | Input/Output: [[223 380 -735 -22] [-735 -22 223 380]]
Test Case: 1113 | Input/Output: [[-651 525 145 -817] [-817 -651 145 525]]
Test Case: 1114 | Input/Output: [[330 -966 -858 -208] [-966 -858 -208 330]]
Test Case: 1115 | Input/Output: [[703 -862 385 997] [-862 385 703 997]]
Test Case: 1116 | Input/Output: [[-897 495 7 761 333] [-897 7 333 495 761]]
Test Case: 1117 | Input/Output: [[821 -993 -612] [-993 -612 821]]
Test Case: 1118 | Input/Output: [[820 -973 325] [-973 325 820]]
Test Case: 1119 | Input/Output: [[-732 -956 -411] [-956 -732 -411]]
Test Case: 1120 | Input/Output: [[-814 -593 893 278 354] [-814 -593 278 354 893]]
Test Case: 1121 | Input/Output: [[47 9 -164 -242] [-242 -164 9 47]]
Test Case: 1122 | Input/Output: [[495 752 64 -384 -606] [-606 -384 64 495 752]]
Test Case: 1123 | Input/Output: [[267 -423 952 -277 -703] [-703 -423 -277 267 952]]
Test Case: 1124 | Input/Output: [[-331 804 -742] [-742 -331 804]]
Test Case: 1125 | Input/Output: [[927 -894 -315 45] [-894 -315 45 927]]
Test Case: 1126 | Input/Output: [[147 182 3] [3 147 182]]
Test Case: 1127 | Input/Output: [[706 -441 117 -117 614] [-441 -117 117 614 706]]
Test Case: 1128 | Input/Output: [[-559 -543 409 -150 376] [-559 -543 -150 376 409]]
Test Case: 1129 | Input/Output: [[929 890 -809 -674] [-809 -674 890 929]]
Test Case: 1130 | Input/Output: [[372 -260 -417 769] [-417 -260 372 769]]
Test Case: 1131 | Input/Output: [[-569 353 579] [-569 353 579]]
Test Case: 1132 | Input/Output: [[349 157 501] [157 349 501]]
Test Case: 1133 | Input/Output: [[-882 581 -790 460] [-882 -790 460 581]]
Test Case: 1134 | Input/Output: [[-228 855 795 -906 -182] [-906 -228 -182 795 855]]
Test Case: 1135 | Input/Output: [[184 -798 -670] [-798 -670 184]]
Test Case: 1136 | Input/Output: [[741 -548 326 -117 -912] [-912 -548 -117 326 741]]
Test Case: 1137 | Input/Output: [[-129 -981 968] [-981 -129 968]]
Test Case: 1138 | Input/Output: [[494 599 864 -325] [-325 494 599 864]]
Test Case: 1139 | Input/Output: [[-468 870 723 -108] [-468 -108 723 870]]
Test Case: 1140 | Input/Output: [[854 373 -123] [-123 373 854]]
Test Case: 1141 | Input/Output: [[200 -457 826] [-457 200 826]]
Test Case: 1142 | Input/Output: [[-123 631 100 631 -46] [-123 -46 100 631 631]]
Test Case: 1143 | Input/Output: [[-219 6 -701 68 608] [-701 -219 6 68 608]]
Test Case: 1144 | Input/Output: [[-626 71 309 -139 89] [-626 -139 71 89 309]]
Test Case: 1145 | Input/Output: [[-223 -934 100 218] [-934 -223 100 218]]
Test Case: 1146 | Input/Output: [[617 -976 78] [-976 78 617]]
Test Case: 1147 | Input/Output: [[-356 967 892 -978] [-978 -356 892 967]]
Test Case: 1148 | Input/Output: [[-119 661 -159 289] [-159 -119 289 661]]
Test Case: 1149 | Input/Output: [[619 744 389] [389 619 744]]
Test Case: 1150 | Input/Output: [[620 -327 -739] [-739 -327 620]]
Test Case: 1151 | Input/Output: [[921 680 -722 867] [-722 680 867 921]]
Test Case: 1152 | Input/Output: [[-903 309 28 269] [-903 28 269 309]]
Test Case: 1153 | Input/Output: [[583 699 0 662] [0 583 662 699]]
Test Case: 1154 | Input/Output: [[97 234 -847 -503] [-847 -503 97 234]]
Test Case: 1155 | Input/Output: [[-586 500 -427 746] [-586 -427 500 746]]
Test Case: 1156 | Input/Output: [[669 784 372] [372 669 784]]
Test Case: 1157 | Input/Output: [[-663 -8 568 -260] [-663 -260 -8 568]]
Test Case: 1158 | Input/Output: [[710 543 879 618 970] [543 618 710 879 970]]
Test Case: 1159 | Input/Output: [[765 -135 634] [-135 634 765]]
Test Case: 1160 | Input/Output: [[-219 -737 -209 -609] [-737 -609 -219 -209]]
Test Case: 1161 | Input/Output: [[244 53 155] [53 155 244]]
Test Case: 1162 | Input/Output: [[445 181 -192 -93] [-192 -93 181 445]]
Test Case: 1163 | Input/Output: [[24 -890 94 696 -913] [-913 -890 24 94 696]]
Test Case: 1164 | Input/Output: [[561 -761 -368 -541] [-761 -541 -368 561]]
Test Case: 1165 | Input/Output: [[665 493 -480 -597 510] [-597 -480 493 510 665]]
Test Case: 1166 | Input/Output: [[-663 232 -456] [-663 -456 232]]
Test Case: 1167 | Input/Output: [[-807 -145 -860] [-860 -807 -145]]
Test Case: 1168 | Input/Output: [[-984 -429 -867 799 750] [-984 -867 -429 750 799]]
Test Case: 1169 | Input/Output: [[-952 655 -441] [-952 -441 655]]
Test Case: 1170 | Input/Output: [[594 -367 -165 -409 962] [-409 -367 -165 594 962]]
Test Case: 1171 | Input/Output: [[-601 -133 -789] [-789 -601 -133]]
Test Case: 1172 | Input/Output: [[930 941 117] [117 930 941]]
Test Case: 1173 | Input/Output: [[-559 631 793] [-559 631 793]]
Test Case: 1174 | Input/Output: [[995 997 -232 -322 163] [-322 -232 163 995 997]]
Test Case: 1175 | Input/Output: [[47 -984 813 -169] [-984 -169 47 813]]
Test Case: 1176 | Input/Output: [[471 871 -125 842] [-125 471 842 871]]
Test Case: 1177 | Input/Output: [[520 -429 50 -649] [-649 -429 50 520]]
Test Case: 1178 | Input/Output: [[-896 -635 115 913 12] [-896 -635 12 115 913]]
Test Case: 1179 | Input/Output: [[-668 370 66 12 -567] [-668 -567 12 66 370]]
Test Case: 1180 | Input/Output: [[106 -747 -935 930 -683] [-935 -747 -683 106 930]]
Test Case: 1181 | Input/Output: [[314 -496 -818 -454 -183] [-818 -496 -454 -183 314]]
Test Case: 1182 | Input/Output: [[-700 -661 73] [-700 -661 73]]
Test Case: 1183 | Input/Output: [[309 822 472 805 -320] [-320 309 472 805 822]]
Test Case: 1184 | Input/Output: [[-327 297 -778] [-778 -327 297]]
Test Case: 1185 | Input/Output: [[-180 -319 950 -60] [-319 -180 -60 950]]
Test Case: 1186 | Input/Output: [[1000 -784 749] [-784 749 1000]]
Test Case: 1187 | Input/Output: [[201 -255 856 379 -254] [-255 -254 201 379 856]]
Test Case: 1188 | Input/Output: [[856 -817 861 339 -145] [-817 -145 339 856 861]]
Test Case: 1189 | Input/Output: [[655 -550 119 -664] [-664 -550 119 655]]
Test Case: 1190 | Input/Output: [[-449 734 666 -353 323] [-449 -353 323 666 734]]
Test Case: 1191 | Input/Output: [[831 27 -589 442] [-589 27 442 831]]
Test Case: 1192 | Input/Output: [[544 825 87 -782 300] [-782 87 300 544 825]]
Test Case: 1193 | Input/Output: [[-771 131 466] [-771 131 466]]
Test Case: 1194 | Input/Output: [[321 106 229 99] [99 106 229 321]]
Test Case: 1195 | Input/Output: [[-582 15 -700] [-700 -582 15]]
Test Case: 1196 | Input/Output: [[-734 -600 160] [-734 -600 160]]
Test Case: 1197 | Input/Output: [[-156 140 -610 650] [-610 -156 140 650]]
Test Case: 1198 | Input/Output: [[-539 -625 -32] [-625 -539 -32]]
Test Case: 1199 | Input/Output: [[147 -958 -222 -194 188] [-958 -222 -194 147 188]]
Test Case: 1200 | Input/Output: [[5 413 -142] [-142 5 413]]
Test Case: 1201 | Input/Output: [[935 646 355] [355 646 935]]
Test Case: 1202 | Input/Output: [[102 -6 287 -741] [-741 -6 102 287]]
Test Case: 1203 | Input/Output: [[-106 -987 -99] [-987 -106 -99]]
Test Case: 1204 | Input/Output: [[600 845 776 482 -923] [-923 482 600 776 845]]
Test Case: 1205 | Input/Output: [[-607 766 467] [-607 467 766]]
Test Case: 1206 | Input/Output: [[640 -558 -577 583 -610] [-610 -577 -558 583 640]]
Test Case: 1207 | Input/Output: [[38 224 159 952 333] [38 159 224 333 952]]
Test Case: 1208 | Input/Output: [[29 308 439] [29 308 439]]
Test Case: 1209 | Input/Output: [[524 928 -238 996 141] [-238 141 524 928 996]]
Test Case: 1210 | Input/Output: [[-671 360 196 943 -561] [-671 -561 196 360 943]]
Test Case: 1211 | Input/Output: [[-156 685 -895 -862] [-895 -862 -156 685]]
Test Case: 1212 | Input/Output: [[992 748 653 -186 -220] [-220 -186 653 748 992]]
Test Case: 1213 | Input/Output: [[-777 -128 774] [-777 -128 774]]
Test Case: 1214 | Input/Output: [[955 -568 -326 973 369] [-568 -326 369 955 973]]
Test Case: 1215 | Input/Output: [[572 842 -283] [-283 572 842]]
Test Case: 1216 | Input/Output: [[-201 -167 -573] [-573 -201 -167]]
Test Case: 1217 | Input/Output: [[499 -964 389] [-964 389 499]]
Test Case: 1218 | Input/Output: [[-641 820 177 622] [-641 177 622 820]]
Test Case: 1219 | Input/Output: [[-411 -149 988] [-411 -149 988]]
Test Case: 1220 | Input/Output: [[313 72 715 37 -600] [-600 37 72 313 715]]
Test Case: 1221 | Input/Output: [[-501 -701 147 -375 237] [-701 -501 -375 147 237]]
Test Case: 1222 | Input/Output: [[800 -598 -167 406 -98] [-598 -167 -98 406 800]]
Test Case: 1223 | Input/Output: [[-175 269 172 331 -24] [-175 -24 172 269 331]]
Test Case: 1224 | Input/Output: [[-910 388 323] [-910 323 388]]
Test Case: 1225 | Input/Output: [[-735 -694 236 236] [-735 -694 236 236]]
Test Case: 1226 | Input/Output: [[430 -516 -257 -214 324] [-516 -257 -214 324 430]]
Test Case: 1227 | Input/Output: [[-748 501 -525 320 -905] [-905 -748 -525 320 501]]
Test Case: 1228 | Input/Output: [[-895 -934 901 -155] [-934 -895 -155 901]]
Test Case: 1229 | Input/Output: [[-126 -952 -829] [-952 -829 -126]]
Test Case: 1230 | Input/Output: [[148 614 881 -645 801] [-645 148 614 801 881]]
Test Case: 1231 | Input/Output: [[-253 -217 -807] [-807 -253 -217]]
Test Case: 1232 | Input/Output: [[-954 -529 14 -946 757] [-954 -946 -529 14 757]]
Test Case: 1233 | Input/Output: [[-514 566 262 179] [-514 179 262 566]]
Test Case: 1234 | Input/Output: [[-757 351 -18 601 -277] [-757 -277 -18 351 601]]
Test Case: 1235 | Input/Output: [[782 986 499 -555 -137] [-555 -137 499 782 986]]
Test Case: 1236 | Input/Output: [[-650 707 713 63] [-650 63 707 713]]
Test Case: 1237 | Input/Output: [[870 -957 430 -644] [-957 -644 430 870]]
Test Case: 1238 | Input/Output: [[-281 89 -23] [-281 -23 89]]
Test Case: 1239 | Input/Output: [[-213 360 4 442] [-213 4 360 442]]
Test Case: 1240 | Input/Output: [[-199 -658 -579 556 172] [-658 -579 -199 172 556]]
Test Case: 1241 | Input/Output: [[-223 -811 -924 973 680] [-924 -811 -223 680 973]]
Test Case: 1242 | Input/Output: [[289 -178 112] [-178 112 289]]
Test Case: 1243 | Input/Output: [[-236 -74 729 685 734] [-236 -74 685 729 734]]
Test Case: 1244 | Input/Output: [[476 -4 -384 -602] [-602 -384 -4 476]]
Test Case: 1245 | Input/Output: [[391 87 813 526] [87 391 526 813]]
Test Case: 1246 | Input/Output: [[-946 -511 -336 225] [-946 -511 -336 225]]
Test Case: 1247 | Input/Output: [[783 -12 -144 807] [-144 -12 783 807]]
Test Case: 1248 | Input/Output: [[629 278 916] [278 629 916]]
Test Case: 1249 | Input/Output: [[360 -624 -889 586 911] [-889 -624 360 586 911]]
Test Case: 1250 | Input/Output: [[-217 982 30] [-217 30 982]]
Test Case: 1251 | Input/Output: [[-972 905 449 -193 -959] [-972 -959 -193 449 905]]
Test Case: 1252 | Input/Output: [[296 241 47] [47 241 296]]
Test Case: 1253 | Input/Output: [[-982 -651 -411 -447 -938] [-982 -938 -651 -447 -411]]
Test Case: 1254 | Input/Output: [[394 -861 -282 632 -388] [-861 -388 -282 394 632]]
Test Case: 1255 | Input/Output: [[-882 -322 619] [-882 -322 619]]
Test Case: 1256 | Input/Output: [[915 226 908 982] [226 908 915 982]]
Test Case: 1257 | Input/Output: [[460 581 692] [460 581 692]]
Test Case: 1258 | Input/Output: [[797 21 -488] [-488 21 797]]
Test Case: 1259 | Input/Output: [[294 83 -890 -294] [-890 -294 83 294]]
Test Case: 1260 | Input/Output: [[-286 297 -371 135 -329] [-371 -329 -286 135 297]]
Test Case: 1261 | Input/Output: [[885 681 854 389] [389 681 854 885]]
Test Case: 1262 | Input/Output: [[814 -273 -31 -691] [-691 -273 -31 814]]
Test Case: 1263 | Input/Output: [[549 942 688] [549 688 942]]
Test Case: 1264 | Input/Output: [[764 -788 640 -343] [-788 -343 640 764]]
Test Case: 1265 | Input/Output: [[-314 648 -194] [-314 -194 648]]
Test Case: 1266 | Input/Output: [[872 185 686 923] [185 686 872 923]]
Test Case: 1267 | Input/Output: [[788 609 -595 -585 452] [-595 -585 452 609 788]]
Test Case: 1268 | Input/Output: [[-622 627 790 846] [-622 627 790 846]]
Test Case: 1269 | Input/Output: [[63 787 -548 -544 -259] [-548 -544 -259 63 787]]
Test Case: 1270 | Input/Output: [[-954 142 -227 -76] [-954 -227 -76 142]]
Test Case: 1271 | Input/Output: [[876 849 941] [849 876 941]]
Test Case: 1272 | Input/Output: [[371 -84 -790 324 486] [-790 -84 324 371 486]]
Test Case: 1273 | Input/Output: [[-101 465 941 -135] [-135 -101 465 941]]
Test Case: 1274 | Input/Output: [[933 -791 762 -525] [-791 -525 762 933]]
Test Case: 1275 | Input/Output: [[813 -656 11] [-656 11 813]]
Test Case: 1276 | Input/Output: [[866 -520 -209 -580] [-580 -520 -209 866]]
Test Case: 1277 | Input/Output: [[624 76 582 -290 314] [-290 76 314 582 624]]
Test Case: 1278 | Input/Output: [[783 -407 157] [-407 157 783]]
Test Case: 1279 | Input/Output: [[136 568 973 -742 -301] [-742 -301 136 568 973]]
Test Case: 1280 | Input/Output: [[-200 7 3] [-200 3 7]]
Test Case: 1281 | Input/Output: [[-845 -668 -886 -762] [-886 -845 -762 -668]]
Test Case: 1282 | Input/Output: [[649 615 329 -424 908] [-424 329 615 649 908]]
Test Case: 1283 | Input/Output: [[777 951 -40 -628] [-628 -40 777 951]]
Test Case: 1284 | Input/Output: [[886 -94 -924] [-924 -94 886]]
Test Case: 1285 | Input/Output: [[-617 -795 349] [-795 -617 349]]
Test Case: 1286 | Input/Output: [[380 765 727 649 360] [360 380 649 727 765]]
Test Case: 1287 | Input/Output: [[-971 -453 532 -727] [-971 -727 -453 532]]
Test Case: 1288 | Input/Output: [[829 -201 261 -955] [-955 -201 261 829]]
Test Case: 1289 | Input/Output: [[-920 -464 352] [-920 -464 352]]
Test Case: 1290 | Input/Output: [[-707 303 -335] [-707 -335 303]]
Test Case: 1291 | Input/Output: [[-961 984 626] [-961 626 984]]
Test Case: 1292 | Input/Output: [[51 -705 20 -421] [-705 -421 20 51]]
Test Case: 1293 | Input/Output: [[-204 506 -747 632 -33] [-747 -204 -33 506 632]]
Test Case: 1294 | Input/Output: [[-654 830 -154 775 -354] [-654 -354 -154 775 830]]
Test Case: 1295 | Input/Output: [[-359 798 789 -601 -578] [-601 -578 -359 789 798]]
Test Case: 1296 | Input/Output: [[947 -6 414] [-6 414 947]]
Test Case: 1297 | Input/Output: [[152 66 -128] [-128 66 152]]
Test Case: 1298 | Input/Output: [[-119 943 515 731] [-119 515 731 943]]
Test Case: 1299 | Input/Output: [[520 2 -711 394 -465] [-711 -465 2 394 520]]
Test Case: 1300 | Input/Output: [[-591 121 718 961 -287] [-591 -287 121 718 961]]
Test Case: 1301 | Input/Output: [[88 787 797 -909 -965] [-965 -909 88 787 797]]
Test Case: 1302 | Input/Output: [[-616 -145 -61 102 -880] [-880 -616 -145 -61 102]]
Test Case: 1303 | Input/Output: [[544 246 365 -32 29] [-32 29 246 365 544]]
Test Case: 1304 | Input/Output: [[568 -402 394 669] [-402 394 568 669]]
Test Case: 1305 | Input/Output: [[-950 771 460 598] [-950 460 598 771]]
Test Case: 1306 | Input/Output: [[-895 -432 684 187 -524] [-895 -524 -432 187 684]]
Test Case: 1307 | Input/Output: [[-8 -593 569] [-593 -8 569]]
Test Case: 1308 | Input/Output: [[-516 -294 -533 -243] [-533 -516 -294 -243]]
Test Case: 1309 | Input/Output: [[-314 472 -381] [-381 -314 472]]
Test Case: 1310 | Input/Output: [[-136 -731 -530 -994 432] [-994 -731 -530 -136 432]]
Test Case: 1311 | Input/Output: [[-670 -552 711 424 -922] [-922 -670 -552 424 711]]
Test Case: 1312 | Input/Output: [[10 588 532 179 893] [10 179 532 588 893]]
Test Case: 1313 | Input/Output: [[449 -754 279 700 -393] [-754 -393 279 449 700]]
Test Case: 1314 | Input/Output: [[-568 -784 -235] [-784 -568 -235]]
Test Case: 1315 | Input/Output: [[439 750 -394] [-394 439 750]]
Test Case: 1316 | Input/Output: [[-615 360 604 497] [-615 360 497 604]]
Test Case: 1317 | Input/Output: [[-866 -84 291] [-866 -84 291]]
Test Case: 1318 | Input/Output: [[224 318 215] [215 224 318]]
Test Case: 1319 | Input/Output: [[492 571 -24 -490 -246] [-490 -246 -24 492 571]]
Test Case: 1320 | Input/Output: [[-961 452 796] [-961 452 796]]
Test Case: 1321 | Input/Output: [[-698 -316 35 274] [-698 -316 35 274]]
Test Case: 1322 | Input/Output: [[-728 494 699 -810] [-810 -728 494 699]]
Test Case: 1323 | Input/Output: [[749 -253 731 595 411] [-253 411 595 731 749]]
Test Case: 1324 | Input/Output: [[402 -213 -399 118 -996] [-996 -399 -213 118 402]]
Test Case: 1325 | Input/Output: [[625 361 -446] [-446 361 625]]
Test Case: 1326 | Input/Output: [[-165 -588 54 941] [-588 -165 54 941]]
Test Case: 1327 | Input/Output: [[331 -507 -704 -22 606] [-704 -507 -22 331 606]]
Test Case: 1328 | Input/Output: [[-409 -192 818] [-409 -192 818]]
Test Case: 1329 | Input/Output: [[-737 163 -441 658 -126] [-737 -441 -126 163 658]]
Test Case: 1330 | Input/Output: [[938 740 -803 -436] [-803 -436 740 938]]
Test Case: 1331 | Input/Output: [[-136 858 -139 -488] [-488 -139 -136 858]]
Test Case: 1332 | Input/Output: [[-788 172 470] [-788 172 470]]
Test Case: 1333 | Input/Output: [[672 331 135] [135 331 672]]
Test Case: 1334 | Input/Output: [[-574 -106 -872 -977 609] [-977 -872 -574 -106 609]]
Test Case: 1335 | Input/Output: [[-58 -814 10 234] [-814 -58 10 234]]
Test Case: 1336 | Input/Output: [[-396 621 539 155] [-396 155 539 621]]
Test Case: 1337 | Input/Output: [[-49 73 -596] [-596 -49 73]]
Test Case: 1338 | Input/Output: [[788 -809 397 -445] [-809 -445 397 788]]
Test Case: 1339 | Input/Output: [[438 -700 -389] [-700 -389 438]]
Test Case: 1340 | Input/Output: [[-231 -984 -341 -628 -954] [-984 -954 -628 -341 -231]]
Test Case: 1341 | Input/Output: [[276 235 -403 -969] [-969 -403 235 276]]
Test Case: 1342 | Input/Output: [[808 728 464] [464 728 808]]
Test Case: 1343 | Input/Output: [[821 -188 228] [-188 228 821]]
Test Case: 1344 | Input/Output: [[-294 -848 -303 -218] [-848 -303 -294 -218]]
Test Case: 1345 | Input/Output: [[-751 -302 -63 433 915] [-751 -302 -63 433 915]]
Test Case: 1346 | Input/Output: [[-17 -974 -813 396] [-974 -813 -17 396]]
Test Case: 1347 | Input/Output: [[-290 -973 -456] [-973 -456 -290]]
Test Case: 1348 | Input/Output: [[849 67 -291] [-291 67 849]]
Test Case: 1349 | Input/Output: [[-223 -279 -646] [-646 -279 -223]]
Test Case: 1350 | Input/Output: [[831 -183 669] [-183 669 831]]
Test Case: 1351 | Input/Output: [[-735 727 912 -509] [-735 -509 727 912]]
Test Case: 1352 | Input/Output: [[239 232 283 220] [220 232 239 283]]
Test Case: 1353 | Input/Output: [[-534 -257 -913 840] [-913 -534 -257 840]]
Test Case: 1354 | Input/Output: [[-789 726 -891 -975] [-975 -891 -789 726]]
Test Case: 1355 | Input/Output: [[13 354 901] [13 354 901]]
Test Case: 1356 | Input/Output: [[-416 447 -449 75 652] [-449 -416 75 447 652]]
Test Case: 1357 | Input/Output: [[-189 137 -475] [-475 -189 137]]
Test Case: 1358 | Input/Output: [[167 51 -662 -804 776] [-804 -662 51 167 776]]
Test Case: 1359 | Input/Output: [[-505 -58 686 990] [-505 -58 686 990]]
Test Case: 1360 | Input/Output: [[-484 -706 -644 -227 912] [-706 -644 -484 -227 912]]
Test Case: 1361 | Input/Output: [[188 867 -702 734] [-702 188 734 867]]
Test Case: 1362 | Input/Output: [[-620 471 309 -607 -313] [-620 -607 -313 309 471]]
Test Case: 1363 | Input/Output: [[-278 669 87 300 -25] [-278 -25 87 300 669]]
Test Case: 1364 | Input/Output: [[-853 472 508] [-853 472 508]]
Test Case: 1365 | Input/Output: [[832 -643 277 -253 338] [-643 -253 277 338 832]]
Test Case: 1366 | Input/Output: [[747 808 839 558] [558 747 808 839]]
Test Case: 1367 | Input/Output: [[-148 -94 -137 635 -177] [-177 -148 -137 -94 635]]
Test Case: 1368 | Input/Output: [[341 -480 -772 -346] [-772 -480 -346 341]]
Test Case: 1369 | Input/Output: [[-173 -531 405] [-531 -173 405]]
Test Case: 1370 | Input/Output: [[964 -810 -463 920 964] [-810 -463 920 964 964]]
Test Case: 1371 | Input/Output: [[781 487 250 -112] [-112 250 487 781]]
Test Case: 1372 | Input/Output: [[-425 -973 171] [-973 -425 171]]
Test Case: 1373 | Input/Output: [[51 -583 -675 679 -36] [-675 -583 -36 51 679]]
Test Case: 1374 | Input/Output: [[-770 22 -763 961 867] [-770 -763 22 867 961]]
Test Case: 1375 | Input/Output: [[574 -590 -540 -145 -106] [-590 -540 -145 -106 574]]
Test Case: 1376 | Input/Output: [[-703 -48 -489] [-703 -489 -48]]
Test Case: 1377 | Input/Output: [[-535 -206 740] [-535 -206 740]]
Test Case: 1378 | Input/Output: [[106 -63 791] [-63 106 791]]
Test Case: 1379 | Input/Output: [[-625 797 205 377 894] [-625 205 377 797 894]]
Test Case: 1380 | Input/Output: [[585 -53 744 -555] [-555 -53 585 744]]
Test Case: 1381 | Input/Output: [[46 -492 133] [-492 46 133]]
Test Case: 1382 | Input/Output: [[695 710 -420 -499 969] [-499 -420 695 710 969]]
Test Case: 1383 | Input/Output: [[528 -806 615] [-806 528 615]]
Test Case: 1384 | Input/Output: [[942 -821 631] [-821 631 942]]
Test Case: 1385 | Input/Output: [[700 663 -858] [-858 663 700]]
Test Case: 1386 | Input/Output: [[186 -249 32 -688] [-688 -249 32 186]]
Test Case: 1387 | Input/Output: [[296 380 261] [261 296 380]]
Test Case: 1388 | Input/Output: [[506 -947 -479 -936 167] [-947 -936 -479 167 506]]
Test Case: 1389 | Input/Output: [[-338 79 874] [-338 79 874]]
Test Case: 1390 | Input/Output: [[731 602 -323 -279 -269] [-323 -279 -269 602 731]]
Test Case: 1391 | Input/Output: [[-801 651 838] [-801 651 838]]
Test Case: 1392 | Input/Output: [[607 -657 833] [-657 607 833]]
Test Case: 1393 | Input/Output: [[939 -16 -327] [-327 -16 939]]
Test Case: 1394 | Input/Output: [[-522 179 -956] [-956 -522 179]]
Test Case: 1395 | Input/Output: [[-292 482 -574 -366 243] [-574 -366 -292 243 482]]
Test Case: 1396 | Input/Output: [[-253 884 -208] [-253 -208 884]]
Test Case: 1397 | Input/Output: [[-785 -828 -43] [-828 -785 -43]]
Test Case: 1398 | Input/Output: [[-47 968 -471 199 656] [-471 -47 199 656 968]]
Test Case: 1399 | Input/Output: [[-255 655 -349 -424] [-424 -349 -255 655]]
Test Case: 1400 | Input/Output: [[230 686 -651 -32 395] [-651 -32 230 395 686]]
Test Case: 1401 | Input/Output: [[414 -131 301 67 -854] [-854 -131 67 301 414]]
Test Case: 1402 | Input/Output: [[-199 511 -982 226] [-982 -199 226 511]]
Test Case: 1403 | Input/Output: [[-377 26 425 23 151] [-377 23 26 151 425]]
Test Case: 1404 | Input/Output: [[895 -433 -32 -207 -75] [-433 -207 -75 -32 895]]
Test Case: 1405 | Input/Output: [[926 -984 -988 772 -163] [-988 -984 -163 772 926]]
Test Case: 1406 | Input/Output: [[-228 534 566 -803] [-803 -228 534 566]]
Test Case: 1407 | Input/Output: [[-981 -806 -525 -144 -346] [-981 -806 -525 -346 -144]]
Test Case: 1408 | Input/Output: [[531 -854 -941 534] [-941 -854 531 534]]
Test Case: 1409 | Input/Output: [[-867 -193 101 138 283] [-867 -193 101 138 283]]
Test Case: 1410 | Input/Output: [[451 -632 -337 551] [-632 -337 451 551]]
Test Case: 1411 | Input/Output: [[-41 -483 -477 967] [-483 -477 -41 967]]
Test Case: 1412 | Input/Output: [[-356 384 635 225 64] [-356 64 225 384 635]]
Test Case: 1413 | Input/Output: [[-407 10 -596] [-596 -407 10]]
Test Case: 1414 | Input/Output: [[-122 -755 176] [-755 -122 176]]
Test Case: 1415 | Input/Output: [[529 -35 -746] [-746 -35 529]]
Test Case: 1416 | Input/Output: [[-278 65 227 572] [-278 65 227 572]]
Test Case: 1417 | Input/Output: [[-222 364 -625 -30 357] [-625 -222 -30 357 364]]
Test Case: 1418 | Input/Output: [[-224 -246 884] [-246 -224 884]]
Test Case: 1419 | Input/Output: [[-884 353 576 679 478] [-884 353 478 576 679]]
Test Case: 1420 | Input/Output: [[-266 526 -511] [-511 -266 526]]
Test Case: 1421 | Input/Output: [[-236 -218 -340] [-340 -236 -218]]
Test Case: 1422 | Input/Output: [[942 -577 -208 939] [-577 -208 939 942]]
Test Case: 1423 | Input/Output: [[799 212 -205 926 -626] [-626 -205 212 799 926]]
Test Case: 1424 | Input/Output: [[-729 -108 155 185 -205] [-729 -205 -108 155 185]]
Test Case: 1425 | Input/Output: [[43 217 -626] [-626 43 217]]
Test Case: 1426 | Input/Output: [[-289 449 -240 -653 760] [-653 -289 -240 449 760]]
Test Case: 1427 | Input/Output: [[-184 -582 751 114 -955] [-955 -582 -184 114 751]]
Test Case: 1428 | Input/Output: [[-440 -897 295 728 470] [-897 -440 295 470 728]]
Test Case: 1429 | Input/Output: [[-184 331 911 860 196] [-184 196 331 860 911]]
Test Case: 1430 | Input/Output: [[122 -771 -185] [-771 -185 122]]
Test Case: 1431 | Input/Output: [[-477 647 -191 -447] [-477 -447 -191 647]]
Test Case: 1432 | Input/Output: [[681 710 -165] [-165 681 710]]
Test Case: 1433 | Input/Output: [[-987 -241 139 432 -443] [-987 -443 -241 139 432]]
Test Case: 1434 | Input/Output: [[341 -27 -224 -200 640] [-224 -200 -27 341 640]]
Test Case: 1435 | Input/Output: [[608 34 186 747] [34 186 608 747]]
Test Case: 1436 | Input/Output: [[-657 270 918 497] [-657 270 497 918]]
Test Case: 1437 | Input/Output: [[709 -641 159 197] [-641 159 197 709]]
Test Case: 1438 | Input/Output: [[417 -582 30 316 132] [-582 30 132 316 417]]
Test Case: 1439 | Input/Output: [[705 517 -203] [-203 517 705]]
Test Case: 1440 | Input/Output: [[971 881 941 -739 -103] [-739 -103 881 941 971]]
Test Case: 1441 | Input/Output: [[335 -40 -48] [-48 -40 335]]
Test Case: 1442 | Input/Output: [[-327 -511 0 -605 444] [-605 -511 -327 0 444]]
Test Case: 1443 | Input/Output: [[224 -883 98 -142 939] [-883 -142 98 224 939]]
Test Case: 1444 | Input/Output: [[14 112 177 343 -673] [-673 14 112 177 343]]
Test Case: 1445 | Input/Output: [[-541 158 106 338 268] [-541 106 158 268 338]]
Test Case: 1446 | Input/Output: [[-50 535 25 609] [-50 25 535 609]]
Test Case: 1447 | Input/Output: [[652 -241 616 213] [-241 213 616 652]]
Test Case: 1448 | Input/Output: [[30 -971 -229 187] [-971 -229 30 187]]
Test Case: 1449 | Input/Output: [[-35 -701 973] [-701 -35 973]]
Test Case: 1450 | Input/Output: [[-426 167 -710] [-710 -426 167]]
Test Case: 1451 | Input/Output: [[-201 -14 974 -645] [-645 -201 -14 974]]
Test Case: 1452 | Input/Output: [[-334 902 -798] [-798 -334 902]]
Test Case: 1453 | Input/Output: [[475 717 949 653 -803] [-803 475 653 717 949]]
Test Case: 1454 | Input/Output: [[-918 743 -149] [-918 -149 743]]
Test Case: 1455 | Input/Output: [[-18 749 915] [-18 749 915]]
Test Case: 1456 | Input/Output: [[-553 715 -828 -11 758] [-828 -553 -11 715 758]]
Test Case: 1457 | Input/Output: [[980 576 841 -632] [-632 576 841 980]]
Test Case: 1458 | Input/Output: [[-992 -249 497 -896] [-992 -896 -249 497]]
Test Case: 1459 | Input/Output: [[327 -312 998 -835] [-835 -312 327 998]]
Test Case: 1460 | Input/Output: [[-563 141 666 556 339] [-563 141 339 556 666]]
Test Case: 1461 | Input/Output: [[336 495 -306] [-306 336 495]]
Test Case: 1462 | Input/Output: [[542 -332 -122] [-332 -122 542]]
Test Case: 1463 | Input/Output: [[-791 285 671 -424] [-791 -424 285 671]]
Test Case: 1464 | Input/Output: [[923 461 -48 112] [-48 112 461 923]]
Test Case: 1465 | Input/Output: [[264 -284 -749 -385] [-749 -385 -284 264]]
Test Case: 1466 | Input/Output: [[29 527 778] [29 527 778]]
Test Case: 1467 | Input/Output: [[-969 505 -496 211] [-969 -496 211 505]]
Test Case: 1468 | Input/Output: [[-389 254 -227 -7 -601] [-601 -389 -227 -7 254]]
Test Case: 1469 | Input/Output: [[569 545 836] [545 569 836]]
Test Case: 1470 | Input/Output: [[183 605 47 714 364] [47 183 364 605 714]]
Test Case: 1471 | Input/Output: [[-767 -169 103 -825 988] [-825 -767 -169 103 988]]
Test Case: 1472 | Input/Output: [[-691 -523 189] [-691 -523 189]]
Test Case: 1473 | Input/Output: [[55 722 948 -682] [-682 55 722 948]]
Test Case: 1474 | Input/Output: [[-877 119 -427 267] [-877 -427 119 267]]
Test Case: 1475 | Input/Output: [[-744 608 -813] [-813 -744 608]]
Test Case: 1476 | Input/Output: [[4 -85 -192] [-192 -85 4]]
Test Case: 1477 | Input/Output: [[154 721 685 734] [154 685 721 734]]
Test Case: 1478 | Input/Output: [[-6 103 -598] [-598 -6 103]]
Test Case: 1479 | Input/Output: [[417 -927 486 -170 10] [-927 -170 10 417 486]]
Test Case: 1480 | Input/Output: [[-801 -11 -467 -370] [-801 -467 -370 -11]]
Test Case: 1481 | Input/Output: [[31 931 67 999] [31 67 931 999]]
Test Case: 1482 | Input/Output: [[948 974 -769 396] [-769 396 948 974]]
Test Case: 1483 | Input/Output: [[-652 -188 787 741] [-652 -188 741 787]]
Test Case: 1484 | Input/Output: [[-755 -730 -822 130] [-822 -755 -730 130]]
Test Case: 1485 | Input/Output: [[873 859 -688 530 -515] [-688 -515 530 859 873]]
Test Case: 1486 | Input/Output: [[552 770 -629 637 540] [-629 540 552 637 770]]
Test Case: 1487 | Input/Output: [[-856 -992 932 -752 -171] [-992 -856 -752 -171 932]]
Test Case: 1488 | Input/Output: [[-450 -851 424 215] [-851 -450 215 424]]
Test Case: 1489 | Input/Output: [[537 -651 422] [-651 422 537]]
Test Case: 1490 | Input/Output: [[-164 27 -223 3] [-223 -164 3 27]]
Test Case: 1491 | Input/Output: [[586 -593 -610] [-610 -593 586]]
Test Case: 1492 | Input/Output: [[117 199 417 -415] [-415 117 199 417]]
Test Case: 1493 | Input/Output: [[-999 -18 699 -478 -535] [-999 -535 -478 -18 699]]
Test Case: 1494 | Input/Output: [[550 -48 -189] [-189 -48 550]]
Test Case: 1495 | Input/Output: [[787 -737 358] [-737 358 787]]
Test Case: 1496 | Input/Output: [[-762 -432 -798 797 -308] [-798 -762 -432 -308 797]]
Test Case: 1497 | Input/Output: [[954 669 -337 -361 421] [-361 -337 421 669 954]]
Test Case: 1498 | Input/Output: [[-335 222 -675 -667] [-675 -667 -335 222]]
Test Case: 1499 | Input/Output: [[-845 234 127] [-845 127 234]]
Test Case: 1500 | Input/Output: [[-522 -110 956 -198 285 412 915 679 164 -263 460 -787 474 302 372 926 815 -451 590 -213 649 -244 -35 -32 275 -496 732 -671 266 237 -773 497 322 -646 704 689 -570 183 -994 -289 580 -52 -734 412 872 -171 -365 647 -733 553] [-994 -787 -773 -734 -733 -671 -646 -570 -522 -496 -451 -365 -289 -263 -244 -213 -198 -171 -110 -52 -35 -32 164 183 237 266 275 285 302 322 372 412 412 460 474 497 553 580 590 647 649 679 689 704 732 815 872 915 926 956]]
Test Case: 1501 | Input/Output: [[656 -349 -606 -373 -592 483 416 81 -67 -892 -645 220 -390 554 -108 317 -445 104 84 -397 721 335 -806 497 711 133 -175 -938 -335 320 537 323 955 -582 850 571 -389 -569 248 -907 -467 651 -450 98 484 -985 326 500 -752 -41] [-985 -938 -907 -892 -806 -752 -645 -606 -592 -582 -569 -467 -450 -445 -397 -390 -389 -373 -349 -335 -175 -108 -67 -41 81 84 98 104 133 220 248 317 320 323 326 335 416 483 484 497 500 537 554 571 651 656 711 721 850 955]]
Test Case: 1502 | Input/Output: [[247 -901 -740 67 929 223 -960 163 321 880 -131 729 -783 296 367 570 791 99 600 879 -88 -355 -999 -946 -814 359 233 -686 98 -674 991 -680 -164 -693 -643 860 78 -379 845 -925 -13 214 -665 -769 149 895 -496 -127 310 516] [-999 -960 -946 -925 -901 -814 -783 -769 -740 -693 -686 -680 -674 -665 -643 -496 -379 -355 -164 -131 -127 -88 -13 67 78 98 99 149 163 214 223 233 247 296 310 321 359 367 516 570 600 729 791 845 860 879 880 895 929 991]]
Test Case: 1503 | Input/Output: [[-238 197 -541 -984 719 -699 938 -772 800 269 -254 -833 215 -962 -477 390 -600 521 -429 -696 843 -147 -443 142 302 844 815 -704 391 -993 836 -60 -511 -415 709 293 409 762 -222 477 -943 616 -53 573 60 -724 938 153 232 -959] [-993 -984 -962 -959 -943 -833 -772 -724 -704 -699 -696 -600 -541 -511 -477 -443 -429 -415 -254 -238 -222 -147 -60 -53 60 142 153 197 215 232 269 293 302 390 391 409 477 521 573 616 709 719 762 800 815 836 843 844 938 938]]
Test Case: 1504 | Input/Output: [[-73 -488 -421 -349 278 -458 -554 160 963 425 -493 832 -765 -489 197 -779 -760 900 -989 -747 -775 -736 266 -647 -491 -353 205 -111 746 -611 996 -933 511 -901 -768 100 269 145 485 981 282 68 -226 -135 639 -996 746 220 -217 -306] [-996 -989 -933 -901 -779 -775 -768 -765 -760 -747 -736 -647 -611 -554 -493 -491 -489 -488 -458 -421 -353 -349 -306 -226 -217 -135 -111 -73 68 100 145 160 197 205 220 266 269 278 282 425 485 511 639 746 746 832 900 963 981 996]]
Test Case: 1505 | Input/Output: [[524 166 -460 -482 -798 -790 757 730 -327 562 -963 361 306 -204 693 -905 -237 291 754 353 211 -6 -630 -566 233 -214 214 -438 189 82 -564 26 830 240 117 361 648 -147 757 949 78 432 927 -505 544 227 614 794 -216 -749] [-963 -905 -798 -790 -749 -630 -566 -564 -505 -482 -460 -438 -327 -237 -216 -214 -204 -147 -6 26 78 82 117 166 189 211 214 227 233 240 291 306 353 361 361 432 524 544 562 614 648 693 730 754 757 757 794 830 927 949]]
Test Case: 1506 | Input/Output: [[-959 202 -309 651 416 203 652 -804 -469 -683 447 -180 -762 790 -485 902 -340 -631 528 625 75 320 209 424 -67 -815 507 -816 135 350 962 -963 -409 507 -187 -637 -618 -548 -864 -133 48 622 -372 -21 -403 756 -185 255 337 847] [-963 -959 -864 -816 -815 -804 -762 -683 -637 -631 -618 -548 -485 -469 -409 -403 -372 -340 -309 -187 -185 -180 -133 -67 -21 48 75 135 202 203 209 255 320 337 350 416 424 447 507 507 528 622 625 651 652 756 790 847 902 962]]
Test Case: 1507 | Input/Output: [[-971 791 -449 -756 666 -368 583 159 -870 442 636 12 -925 -965 -523 84 -725 955 315 657 164 413 -515 748 -523 831 -686 -353 958 505 21 352 290 -890 760 -462 -400 -216 989 -592 -612 370 59 938 -857 -893 548 920 -994 -998] [-998 -994 -971 -965 -925 -893 -890 -870 -857 -756 -725 -686 -612 -592 -523 -523 -515 -462 -449 -400 -368 -353 -216 12 21 59 84 159 164 290 315 352 370 413 442 505 548 583 636 657 666 748 760 791 831 920 938 955 958 989]]
Test Case: 1508 | Input/Output: [[111 942 365 -442 674 65 205 -786 382 553 -161 -468 -718 907 -767 -131 -169 -258 -267 -976 896 -856 168 -945 683 50 -185 200 -303 -541 27 -580 403 -830 -890 255 -618 -866 460 509 8 -194 857 -153 -653 523 -937 412 -205 -998] [-998 -976 -945 -937 -890 -866 -856 -830 -786 -767 -718 -653 -618 -580 -541 -468 -442 -303 -267 -258 -205 -194 -185 -169 -161 -153 -131 8 27 50 65 111 168 200 205 255 365 382 403 412 460 509 523 553 674 683 857 896 907 942]]
Test Case: 1509 | Input/Output: [[870 573 818 574 631 -451 -923 181 -856 -440 877 725 -451 875 346 110 -984 -186 -479 327 471 615 490 27 -414 -685 -467 -98 -69 263 -518 60 -930 -715 -395 698 235 -999 174 -146 -371 748 672 740 45 90 390 -559 449 -755] [-999 -984 -930 -923 -856 -755 -715 -685 -559 -518 -479 -467 -451 -451 -440 -414 -395 -371 -186 -146 -98 -69 27 45 60 90 110 174 181 235 263 327 346 390 449 471 490 573 574 615 631 672 698 725 740 748 818 870 875 877]]
Test Case: 1510 | Input/Output: [[778 -805 -182 -356 187 87 -702 782 773 -773 390 235 -559 938 -65 796 -880 -245 635 -219 -331 -101 805 363 665 788 891 997 -891 -559 88 190 470 272 927 -23 -517 244 516 212 -208 -222 -116 927 172 358 9 -157 338 712] [-891 -880 -805 -773 -702 -559 -559 -517 -356 -331 -245 -222 -219 -208 -182 -157 -116 -101 -65 -23 9 87 88 172 187 190 212 235 244 272 338 358 363 390 470 516 635 665 712 773 778 782 788 796 805 891 927 927 938 997]]
Test Case: 1511 | Input/Output: [[715 869 -316 689 581 -470 -867 103 -214 692 -873 -145 -290 741 967 435 -62 654 647 -77 -295 -568 655 -542 -861 -896 -994 -78 -397 280 -7 -417 264 114 -913 866 -899 -713 139 63 -452 -847 -452 134 -693 564 206 611 639 659] [-994 -913 -899 -896 -873 -867 -861 -847 -713 -693 -568 -542 -470 -452 -452 -417 -397 -316 -295 -290 -214 -145 -78 -77 -62 -7 63 103 114 134 139 206 264 280 435 564 581 611 639 647 654 655 659 689 692 715 741 866 869 967]]
Test Case: 1512 | Input/Output: [[-5 -487 -475 -794 -350 921 725 120 -699 -163 615 688 771 -767 -819 -790 622 -617 -396 227 88 -460 -203 -260 -692 904 658 -109 -298 -292 -85 726 360 670 -347 3 -720 -440 732 -185 -320 953 970 -930 -825 822 336 -65 -909 525] [-930 -909 -825 -819 -794 -790 -767 -720 -699 -692 -617 -487 -475 -460 -440 -396 -350 -347 -320 -298 -292 -260 -203 -185 -163 -109 -85 -65 -5 3 88 120 227 336 360 525 615 622 658 670 688 725 726 732 771 822 904 921 953 970]]
Test Case: 1513 | Input/Output: [[880 69 -562 -954 -408 281 194 619 702 424 -818 -745 464 -947 731 882 -528 837 -538 304 -679 -560 -642 -539 557 -490 941 -660 -558 -613 -273 -732 413 -408 340 211 -59 441 313 103 -780 166 622 -108 -558 898 820 867 268 -910] [-954 -947 -910 -818 -780 -745 -732 -679 -660 -642 -613 -562 -560 -558 -558 -539 -538 -528 -490 -408 -408 -273 -108 -59 69 103 166 194 211 268 281 304 313 340 413 424 441 464 557 619 622 702 731 820 837 867 880 882 898 941]]
Test Case: 1514 | Input/Output: [[-593 -538 -737 -835 -102 891 -752 18 548 406 -455 523 -257 414 -335 -951 -918 508 -2 189 -268 -979 -980 441 612 -690 -727 201 -424 -943 -641 971 41 656 -24 399 976 -165 747 -957 -990 592 591 311 986 -331 -435 209 670 -843] [-990 -980 -979 -957 -951 -943 -918 -843 -835 -752 -737 -727 -690 -641 -593 -538 -455 -435 -424 -335 -331 -268 -257 -165 -102 -24 -2 18 41 189 201 209 311 399 406 414 441 508 523 548 591 592 612 656 670 747 891 971 976 986]]
Test Case: 1515 | Input/Output: [[-102 -735 187 841 831 703 71 -717 -821 -861 -99 315 348 -683 436 119 148 -281 -408 677 -970 282 862 -700 -549 498 317 672 -112 -385 63 -120 325 137 -831 -755 -833 -271 -80 503 -162 -872 -290 176 154 519 -233 836 -219 -263] [-970 -872 -861 -833 -831 -821 -755 -735 -717 -700 -683 -549 -408 -385 -290 -281 -271 -263 -233 -219 -162 -120 -112 -102 -99 -80 63 71 119 137 148 154 176 187 282 315 317 325 348 436 498 503 519 672 677 703 831 836 841 862]]
Test Case: 1516 | Input/Output: [[970 866 232 636 197 -407 337 -74 38 -531 -400 -655 599 753 -604 52 -2 512 356 -433 806 -532 604 -184 -875 478 880 383 -179 -543 713 204 -425 -316 -731 -865 991 674 -366 -328 486 719 687 -927 538 911 705 774 253 -424] [-927 -875 -865 -731 -655 -604 -543 -532 -531 -433 -425 -424 -407 -400 -366 -328 -316 -184 -179 -74 -2 38 52 197 204 232 253 337 356 383 478 486 512 538 599 604 636 674 687 705 713 719 753 774 806 866 880 911 970 991]]
Test Case: 1517 | Input/Output: [[641 93 -833 385 -853 539 472 -11 121 950 52 -455 -674 977 380 882 56 873 911 -701 -641 118 -923 70 -434 267 280 471 700 -481 547 -663 -199 -989 -28 -92 -128 578 -15 338 -73 -480 -755 552 582 159 721 663 223 955] [-989 -923 -853 -833 -755 -701 -674 -663 -641 -481 -480 -455 -434 -199 -128 -92 -73 -28 -15 -11 52 56 70 93 118 121 159 223 267 280 338 380 385 471 472 539 547 552 578 582 641 663 700 721 873 882 911 950 955 977]]
Test Case: 1518 | Input/Output: [[-598 -603 549 434 533 -291 217 287 -385 -9 233 226 -429 -667 889 -514 774 167 -770 -106 633 -418 400 686 -103 264 -670 981 764 -141 543 136 -846 -907 168 278 945 974 -462 57 571 577 762 -420 853 338 -870 917 -36 -564] [-907 -870 -846 -770 -670 -667 -603 -598 -564 -514 -462 -429 -420 -418 -385 -291 -141 -106 -103 -36 -9 57 136 167 168 217 226 233 264 278 287 338 400 434 533 543 549 571 577 633 686 762 764 774 853 889 917 945 974 981]]
Test Case: 1519 | Input/Output: [[677 664 354 -936 764 460 -200 -266 -960 814 319 199 -6 225 540 987 44 -10 -132 206 762 -169 570 212 558 -494 788 810 -932 418 -533 -570 -896 734 449 117 574 25 -109 430 -281 46 5 619 -710 -12 29 705 681 909] [-960 -936 -932 -896 -710 -570 -533 -494 -281 -266 -200 -169 -132 -109 -12 -10 -6 5 25 29 44 46 117 199 206 212 225 319 354 418 430 449 460 540 558 570 574 619 664 677 681 705 734 762 764 788 810 814 909 987]]
Test Case: 1520 | Input/Output: [[-785 -718 -434 995 542 934 29 553 210 -942 -245 854 -191 -401 808 -581 729 -867 948 -883 -123 616 746 152 -878 -408 550 -647 -437 -428 -504 565 404 -649 -869 -828 -824 -725 -995 651 648 703 -821 -615 996 -869 852 -875 869 523] [-995 -942 -883 -878 -875 -869 -869 -867 -828 -824 -821 -785 -725 -718 -649 -647 -615 -581 -504 -437 -434 -428 -408 -401 -245 -191 -123 29 152 210 404 523 542 550 553 565 616 648 651 703 729 746 808 852 854 869 934 948 995 996]]
Test Case: 1521 | Input/Output: [[397 -417 -132 74 -727 -421 -638 633 -316 447 -655 -671 -884 873 181 -285 592 540 -456 -255 -989 -477 -783 113 -398 499 -158 -820 733 -747 -119 -101 -856 799 543 -603 -662 -385 -180 -494 127 104 971 -827 -234 95 -828 -86 -578 -610] [-989 -884 -856 -828 -827 -820 -783 -747 -727 -671 -662 -655 -638 -610 -603 -578 -494 -477 -456 -421 -417 -398 -385 -316 -285 -255 -234 -180 -158 -132 -119 -101 -86 74 95 104 113 127 181 397 447 499 540 543 592 633 733 799 873 971]]
Test Case: 1522 | Input/Output: [[203 720 -616 -242 -22 -848 -451 -619 -31 -114 -329 689 207 312 69 -541 -780 547 -383 446 -752 -420 151 70 -576 -329 -676 953 283 893 -841 -438 -259 -834 305 -172 -4 171 -34 -943 -588 520 -853 -67 540 848 -98 213 486 499] [-943 -853 -848 -841 -834 -780 -752 -676 -619 -616 -588 -576 -541 -451 -438 -420 -383 -329 -329 -259 -242 -172 -114 -98 -67 -34 -31 -22 -4 69 70 151 171 203 207 213 283 305 312 446 486 499 520 540 547 689 720 848 893 953]]
Test Case: 1523 | Input/Output: [[268 -290 275 386 -330 -287 918 -488 795 838 -513 331 396 47 -436 -869 -763 450 -596 67 420 -86 -121 -735 997 -105 -35 -295 -207 -979 491 915 -598 -558 978 296 -413 774 -559 139 -331 -175 -193 819 634 -540 504 -532 -984 -316] [-984 -979 -869 -763 -735 -598 -596 -559 -558 -540 -532 -513 -488 -436 -413 -331 -330 -316 -295 -290 -287 -207 -193 -175 -121 -105 -86 -35 47 67 139 268 275 296 331 386 396 420 450 491 504 634 774 795 819 838 915 918 978 997]]
Test Case: 1524 | Input/Output: [[-456 -116 -467 -175 713 9 139 470 779 299 607 399 328 -450 244 -926 223 -589 398 835 -504 -227 -939 778 386 -241 258 -315 800 -116 -17 488 554 556 649 952 -755 -297 787 168 425 280 14 -595 -568 -61 272 559 869 852] [-939 -926 -755 -595 -589 -568 -504 -467 -456 -450 -315 -297 -241 -227 -175 -116 -116 -61 -17 9 14 139 168 223 244 258 272 280 299 328 386 398 399 425 470 488 554 556 559 607 649 713 778 779 787 800 835 852 869 952]]
Test Case: 1525 | Input/Output: [[-797 -101 -334 714 682 204 -770 -292 -500 959 -20 -376 707 -228 -735 -264 79 58 -891 -624 -512 -64 151 -367 -432 -608 917 41 -718 -645 2 -674 -22 158 -792 880 -558 198 378 -71 267 -723 -40 495 -673 -87 -318 -135 -219 160] [-891 -797 -792 -770 -735 -723 -718 -674 -673 -645 -624 -608 -558 -512 -500 -432 -376 -367 -334 -318 -292 -264 -228 -219 -135 -101 -87 -71 -64 -40 -22 -20 2 41 58 79 151 158 160 198 204 267 378 495 682 707 714 880 917 959]]
Test Case: 1526 | Input/Output: [[201 129 -106 147 469 232 -520 -920 -272 -828 -877 -294 465 636 -264 161 -592 -988 512 -238 789 -930 706 619 988 -233 100 -396 667 -133 762 330 -192 855 -123 -191 768 -871 224 -331 -839 -283 585 -627 -495 -419 -959 -272 284 -248] [-988 -959 -930 -920 -877 -871 -839 -828 -627 -592 -520 -495 -419 -396 -331 -294 -283 -272 -272 -264 -248 -238 -233 -192 -191 -133 -123 -106 100 129 147 161 201 224 232 284 330 465 469 512 585 619 636 667 706 762 768 789 855 988]]
Test Case: 1527 | Input/Output: [[-902 209 -727 -888 -67 957 -242 -228 -965 386 182 979 300 -29 516 191 -170 159 -389 94 -543 158 -846 182 -652 442 -717 -45 54 104 903 924 -71 -648 596 -874 806 -665 864 -606 421 993 530 -85 -371 -90 -514 472 280 197] [-965 -902 -888 -874 -846 -727 -717 -665 -652 -648 -606 -543 -514 -389 -371 -242 -228 -170 -90 -85 -71 -67 -45 -29 54 94 104 158 159 182 182 191 197 209 280 300 386 421 442 472 516 530 596 806 864 903 924 957 979 993]]
Test Case: 1528 | Input/Output: [[-966 -135 -148 -991 -794 981 -307 603 -496 433 550 -972 -166 825 -479 -831 -781 737 -398 1000 739 962 409 -208 914 -455 497 706 -926 -327 628 732 -187 484 890 -659 946 978 -273 812 -754 -293 529 -824 -208 -992 596 -319 831 757] [-992 -991 -972 -966 -926 -831 -824 -794 -781 -754 -659 -496 -479 -455 -398 -327 -319 -307 -293 -273 -208 -208 -187 -166 -148 -135 409 433 484 497 529 550 596 603 628 706 732 737 739 757 812 825 831 890 914 946 962 978 981 1000]]
Test Case: 1529 | Input/Output: [[766 394 138 -766 225 -503 949 -295 685 -372 -314 -690 777 15 286 -433 432 -737 -519 114 -376 866 -790 -404 614 -469 110 -521 670 -263 -887 -89 -200 104 -504 435 -160 181 444 19 -812 -410 207 766 696 -998 -549 414 -444 -719] [-998 -887 -812 -790 -766 -737 -719 -690 -549 -521 -519 -504 -503 -469 -444 -433 -410 -404 -376 -372 -314 -295 -263 -200 -160 -89 15 19 104 110 114 138 181 207 225 286 394 414 432 435 444 614 670 685 696 766 766 777 866 949]]
Test Case: 1530 | Input/Output: [[635 -54 689 89 -552 479 -962 -653 59 167 -166 917 -652 -621 693 128 45 -690 -146 192 -767 -183 706 -185 -391 586 -101 -161 792 899 436 -3 685 83 404 -807 631 293 -687 -984 463 -790 -949 -239 -708 -273 -766 -684 -400 944] [-984 -962 -949 -807 -790 -767 -766 -708 -690 -687 -684 -653 -652 -621 -552 -400 -391 -273 -239 -185 -183 -166 -161 -146 -101 -54 -3 45 59 83 89 128 167 192 293 404 436 463 479 586 631 635 685 689 693 706 792 899 917 944]]
Test Case: 1531 | Input/Output: [[888 -172 934 82 159 703 -274 -495 294 711 -29 -619 616 484 974 -238 -99 -206 9 -12 -748 -219 466 36 710 256 -527 317 -493 620 -118 -961 916 -70 -983 178 -702 623 593 -722 -843 -902 322 585 189 220 -837 -856 80 -93] [-983 -961 -902 -856 -843 -837 -748 -722 -702 -619 -527 -495 -493 -274 -238 -219 -206 -172 -118 -99 -93 -70 -29 -12 9 36 80 82 159 178 189 220 256 294 317 322 466 484 585 593 616 620 623 703 710 711 888 916 934 974]]
Test Case: 1532 | Input/Output: [[881 901 161 478 432 596 320 -443 275 -218 -371 -9 907 406 250 -217 -198 -289 -648 813 381 -847 824 -837 85 -465 666 10 -440 -29 -343 392 42 488 -52 -882 612 995 126 636 447 292 -313 -764 -999 229 231 -443 254 105] [-999 -882 -847 -837 -764 -648 -465 -443 -443 -440 -371 -343 -313 -289 -218 -217 -198 -52 -29 -9 10 42 85 105 126 161 229 231 250 254 275 292 320 381 392 406 432 447 478 488 596 612 636 666 813 824 881 901 907 995]]
Test Case: 1533 | Input/Output: [[995 -423 756 -371 863 -505 368 -308 -125 134 506 -120 -758 858 493 775 232 -526 -346 -486 -180 -997 480 425 251 -769 -974 432 -155 543 -749 182 742 184 -825 434 -322 -28 -991 680 -283 459 -709 -832 -600 850 -24 5 -631 -920] [-997 -991 -974 -920 -832 -825 -769 -758 -749 -709 -631 -600 -526 -505 -486 -423 -371 -346 -322 -308 -283 -180 -155 -125 -120 -28 -24 5 134 182 184 232 251 368 425 432 434 459 480 493 506 543 680 742 756 775 850 858 863 995]]
Test Case: 1534 | Input/Output: [[-163 23 -800 961 220 -602 844 -699 -912 898 -67 752 926 139 -576 -816 955 -626 -263 -350 776 -714 684 884 -533 -754 -562 531 343 -316 129 -331 997 -768 -17 874 -135 312 -562 225 708 716 876 -366 75 214 -854 -568 964 -762] [-912 -854 -816 -800 -768 -762 -754 -714 -699 -626 -602 -576 -568 -562 -562 -533 -366 -350 -331 -316 -263 -163 -135 -67 -17 23 75 129 139 214 220 225 312 343 531 684 708 716 752 776 844 874 876 884 898 926 955 961 964 997]]
Test Case: 1535 | Input/Output: [[-561 503 -655 -556 154 899 -941 -615 -591 873 366 556 348 277 854 -696 155 -514 -774 890 -599 847 -613 -610 -108 -836 36 -658 -229 -672 -658 -679 680 904 910 488 360 728 -375 -365 -769 409 424 117 986 -863 355 -146 614 972] [-941 -863 -836 -774 -769 -696 -679 -672 -658 -658 -655 -615 -613 -610 -599 -591 -561 -556 -514 -375 -365 -229 -146 -108 36 117 154 155 277 348 355 360 366 409 424 488 503 556 614 680 728 847 854 873 890 899 904 910 972 986]]
Test Case: 1536 | Input/Output: [[-65 856 432 212 -346 -981 502 749 -57 882 784 -519 -890 -244 148 161 -487 921 741 -845 -95 -414 995 783 -609 614 92 -373 221 172 351 -46 -949 -236 -293 -656 -675 -449 78 234 598 941 -205 -358 583 466 811 -893 -94 690] [-981 -949 -893 -890 -845 -675 -656 -609 -519 -487 -449 -414 -373 -358 -346 -293 -244 -236 -205 -95 -94 -65 -57 -46 78 92 148 161 172 212 221 234 351 432 466 502 583 598 614 690 741 749 783 784 811 856 882 921 941 995]]
Test Case: 1537 | Input/Output: [[-832 920 -894 806 41 -228 739 91 -28 -556 898 335 -94 -119 896 139 812 46 76 1 -980 481 -788 -521 -178 -278 438 319 -315 -164 909 -478 -322 -249 870 -794 -569 367 892 441 46 207 475 -654 25 384 -909 -329 936 181] [-980 -909 -894 -832 -794 -788 -654 -569 -556 -521 -478 -329 -322 -315 -278 -249 -228 -178 -164 -119 -94 -28 1 25 41 46 46 76 91 139 181 207 319 335 367 384 438 441 475 481 739 806 812 870 892 896 898 909 920 936]]
Test Case: 1538 | Input/Output: [[623 8 926 -727 784 199 746 915 935 182 877 -967 -76 -772 -162 -230 295 694 458 -616 -483 174 -485 -7 -925 761 774 -558 -953 -816 -997 -882 495 976 99 -662 95 -243 -924 -53 -855 -710 916 98 -913 491 879 -983 888 399] [-997 -983 -967 -953 -925 -924 -913 -882 -855 -816 -772 -727 -710 -662 -616 -558 -485 -483 -243 -230 -162 -76 -53 -7 8 95 98 99 174 182 199 295 399 458 491 495 623 694 746 761 774 784 877 879 888 915 916 926 935 976]]
Test Case: 1539 | Input/Output: [[234 872 -916 -211 -468 -885 532 624 550 -874 597 337 -954 19 -49 938 -418 711 733 -742 -368 179 -344 -619 213 195 767 -990 280 857 -46 -766 -501 -568 -483 -362 339 -3 -847 -97 241 -704 -411 -170 971 -915 56 870 -938 -389] [-990 -954 -938 -916 -915 -885 -874 -847 -766 -742 -704 -619 -568 -501 -483 -468 -418 -411 -389 -368 -362 -344 -211 -170 -97 -49 -46 -3 19 56 179 195 213 234 241 280 337 339 532 550 597 624 711 733 767 857 870 872 938 971]]
Test Case: 1540 | Input/Output: [[42 -620 -929 -746 -413 -533 -815 184 -902 98 17 112 -971 -722 593 22 -616 994 177 467 330 -506 -122 -685 730 -659 -396 -727 -683 -939 -580 -462 -103 -492 -692 -478 377 448 -84 802 713 -970 868 -795 233 293 733 -144 866 -981] [-981 -971 -970 -939 -929 -902 -815 -795 -746 -727 -722 -692 -685 -683 -659 -620 -616 -580 -533 -506 -492 -478 -462 -413 -396 -144 -122 -103 -84 17 22 42 98 112 177 184 233 293 330 377 448 467 593 713 730 733 802 866 868 994]]
Test Case: 1541 | Input/Output: [[10 -841 -636 585 -629 659 40 -186 498 935 849 -797 823 766 394 -476 811 725 521 582 -444 -671 -197 483 823 409 254 973 270 239 -256 877 -393 794 -868 -609 -831 244 490 855 -970 -4 -816 -756 -877 -150 740 -648 -839 -139] [-970 -877 -868 -841 -839 -831 -816 -797 -756 -671 -648 -636 -629 -609 -476 -444 -393 -256 -197 -186 -150 -139 -4 10 40 239 244 254 270 394 409 483 490 498 521 582 585 659 725 740 766 794 811 823 823 849 855 877 935 973]]
Test Case: 1542 | Input/Output: [[-513 671 -36 450 -113 -929 -354 324 774 808 -695 627 -682 -81 916 -452 515 944 310 -617 274 907 -450 464 -800 -839 -881 271 -49 614 -690 294 -789 -161 -326 -999 -806 -934 544 655 -280 -66 -168 133 -714 532 -125 -758 -4 -78] [-999 -934 -929 -881 -839 -806 -800 -789 -758 -714 -695 -690 -682 -617 -513 -452 -450 -354 -326 -280 -168 -161 -125 -113 -81 -78 -66 -49 -36 -4 133 271 274 294 310 324 450 464 515 532 544 614 627 655 671 774 808 907 916 944]]
Test Case: 1543 | Input/Output: [[55 -632 -821 -381 -75 -194 -998 -330 861 -752 872 -747 -776 -966 -618 114 211 -398 -696 -258 -741 891 934 683 -897 940 -441 279 -457 -118 -779 -196 483 -519 81 -129 162 -719 327 -245 -946 921 -485 -436 947 -170 -539 569 -825 10] [-998 -966 -946 -897 -825 -821 -779 -776 -752 -747 -741 -719 -696 -632 -618 -539 -519 -485 -457 -441 -436 -398 -381 -330 -258 -245 -196 -194 -170 -129 -118 -75 10 55 81 114 162 211 279 327 483 569 683 861 872 891 921 934 940 947]]
Test Case: 1544 | Input/Output: [[151 908 -52 385 35 376 -194 151 512 951 451 663 -698 -104 807 220 -501 -621 935 -809 392 -942 -747 129 500 832 246 -252 26 -957 291 417 81 -964 946 252 336 -462 -743 245 -490 839 370 -59 -699 -779 -784 -86 723 -996] [-996 -964 -957 -942 -809 -784 -779 -747 -743 -699 -698 -621 -501 -490 -462 -252 -194 -104 -86 -59 -52 26 35 81 129 151 151 220 245 246 252 291 336 370 376 385 392 417 451 500 512 663 723 807 832 839 908 935 946 951]]
Test Case: 1545 | Input/Output: [[230 -357 -863 -296 747 892 -213 429 428 544 969 759 -269 -137 230 354 931 -422 -395 -152 399 -306 893 -848 887 -197 141 -445 161 975 -484 -382 -396 -115 -644 999 129 -739 -759 981 -606 -357 164 -35 116 -237 -726 -646 -496 -432] [-863 -848 -759 -739 -726 -646 -644 -606 -496 -484 -445 -432 -422 -396 -395 -382 -357 -357 -306 -296 -269 -237 -213 -197 -152 -137 -115 -35 116 129 141 161 164 230 230 354 399 428 429 544 747 759 887 892 893 931 969 975 981 999]]
Test Case: 1546 | Input/Output: [[107 -720 -269 997 -726 -433 120 -896 422 -407 -293 -286 -561 740 -340 791 364 387 -995 -615 -841 430 36 778 -17 -665 181 -366 -730 -149 -404 37 -930 -524 -274 -959 -409 -898 426 661 -477 -206 179 927 109 -926 -906 638 315 80] [-995 -959 -930 -926 -906 -898 -896 -841 -730 -726 -720 -665 -615 -561 -524 -477 -433 -409 -407 -404 -366 -340 -293 -286 -274 -269 -206 -149 -17 36 37 80 107 109 120 179 181 315 364 387 422 426 430 638 661 740 778 791 927 997]]
Test Case: 1547 | Input/Output: [[272 136 723 -84 -340 -743 331 96 -806 -962 688 -132 -322 25 -217 -622 -917 831 85 564 -984 423 293 601 302 -617 -156 -397 1 236 574 -620 -702 -219 -628 669 -84 -494 431 -743 363 -637 -775 -749 -286 -47 287 79 610 445] [-984 -962 -917 -806 -775 -749 -743 -743 -702 -637 -628 -622 -620 -617 -494 -397 -340 -322 -286 -219 -217 -156 -132 -84 -84 -47 1 25 79 85 96 136 236 272 287 293 302 331 363 423 431 445 564 574 601 610 669 688 723 831]]
Test Case: 1548 | Input/Output: [[43 -685 -466 334 -687 -766 -865 -478 -42 -766 -99 -892 -667 -243 581 32 215 -831 -553 236 607 -485 -801 874 335 -533 582 -504 151 -31 -875 929 663 900 -241 399 186 840 -705 561 153 419 253 420 798 -351 137 -860 147 -663] [-892 -875 -865 -860 -831 -801 -766 -766 -705 -687 -685 -667 -663 -553 -533 -504 -485 -478 -466 -351 -243 -241 -99 -42 -31 32 43 137 147 151 153 186 215 236 253 334 335 399 419 420 561 581 582 607 663 798 840 874 900 929]]
Test Case: 1549 | Input/Output: [[-457 -186 -789 -681 732 899 -462 -98 -861 -442 34 29 839 747 112 966 332 747 -784 469 609 -666 -992 641 957 870 -447 -188 704 895 405 -596 734 772 553 -980 162 89 -667 890 380 48 -309 -885 756 -730 645 -595 -986 895] [-992 -986 -980 -885 -861 -789 -784 -730 -681 -667 -666 -596 -595 -462 -457 -447 -442 -309 -188 -186 -98 29 34 48 89 112 162 332 380 405 469 553 609 641 645 704 732 734 747 747 756 772 839 870 890 895 895 899 957 966]]
Test Case: 1550 | Input/Output: [[-21 -113 -203 -649 749 311 41 247 -432 438 -15 -159 -3 -354 -367 -612 -512 -235 332 285 49 896 -39 -899 -296 -267 268 -611 -762 -780 652 651 -91 -114 -584 395 -733 -346 -604 331 681 551 -488 59 -805 327 -773] [-899 -805 -780 -773 -762 -733 -649 -612 -611 -604 -584 -512 -488 -432 -367 -354 -346 -296 -267 -235 -203 -159 -114 -113 -91 -39 -21 -15 -3 41 49 59 247 268 285 311 327 331 332 395 438 551 651 652 681 749 896]]
Test Case: 1551 | Input/Output: [[640 915 -607] [-607 640 915]]
Test Case: 1552 | Input/Output: [[139 331 323 161 925 194 614 529 65 41 -923 947 838 429 -117 54 851 851 -629 -722 -845 -206 -774 76 552 -477 115 -645 -544] [-923 -845 -774 -722 -645 -629 -544 -477 -206 -117 41 54 65 76 115 139 161 194 323 331 429 529 552 614 838 851 851 925 947]]
Test Case: 1553 | Input/Output: [[-329 795 377 -422 -982 423 633 289 919 600 -992 -412 -458 917 753 432 530 -622 -361 953 28 -346 922 -543 907 -247 283 -691 836 -199 -121 936 763 -129 -914 858 -136 652] [-992 -982 -914 -691 -622 -543 -458 -422 -412 -361 -346 -329 -247 -199 -136 -129 -121 28 283 289 377 423 432 530 600 633 652 753 763 795 836 858 907 917 919 922 936 953]]
Test Case: 1554 | Input/Output: [[-812 -856 -658 232 677 886 -259 -501 -101 -893 -681 490 -641 -265 794 -364 697 -43 211 847 -827 -37 45 -539 770 736 -723 -36 -262 -233 49 -218 -317 -319 917 172 -661 726 -907 -978 -374 -500 -660 -232 -937 -874 743 595 -647 520] [-978 -937 -907 -893 -874 -856 -827 -812 -723 -681 -661 -660 -658 -647 -641 -539 -501 -500 -374 -364 -319 -317 -265 -262 -259 -233 -232 -218 -101 -43 -37 -36 45 49 172 211 232 490 520 595 677 697 726 736 743 770 794 847 886 917]]
Test Case: 1555 | Input/Output: [[-523 -391 -423 -263 -172 -894 947 -394 256 308 -720 350 -481 291 208 811 3 815 135 -967] [-967 -894 -720 -523 -481 -423 -394 -391 -263 -172 3 135 208 256 291 308 350 811 815 947]]
Test Case: 1556 | Input/Output: [[-347 -214] [-347 -214]]
Test Case: 1557 | Input/Output: [[-38 -647 -206 384 -832 -715 970 -45 732 -136 656 -525 522 423 -265 370 -862 485 362 -881 295 -13 -426 879 -470 -533 439 209 990 797 964 -616 672 -132 -176 -407 659 888 243 -525] [-881 -862 -832 -715 -647 -616 -533 -525 -525 -470 -426 -407 -265 -206 -176 -136 -132 -45 -38 -13 209 243 295 362 370 384 423 439 485 522 656 659 672 732 797 879 888 964 970 990]]
Test Case: 1558 | Input/Output: [[-942 379 -786 -567 -607 57 601 -753 -773 889 -424 142 617 169 137 614 -882 -66 791 192 -34 616 -414] [-942 -882 -786 -773 -753 -607 -567 -424 -414 -66 -34 57 137 142 169 192 379 601 614 616 617 791 889]]
Test Case: 1559 | Input/Output: [[-248 -327 -529 356 -62 -252 80 -739 -839 -491 465 42 36] [-839 -739 -529 -491 -327 -252 -248 -62 36 42 80 356 465]]
Test Case: 1560 | Input/Output: [[796 160 976 -806 103 962 -988 -728 690 440 967 -43 3 -705 -862 -974 568 255 -331 57 -931 153 463 246 -255 157 705] [-988 -974 -931 -862 -806 -728 -705 -331 -255 -43 3 57 103 153 157 160 246 255 440 463 568 690 705 796 962 967 976]]
Test Case: 1561 | Input/Output: [[-391 -579 -689 -406] [-689 -579 -406 -391]]
Test Case: 1562 | Input/Output: [[-280 -131 -479 -778 578 72 -907 -239 910 982 519 615 -567 924 449 327 347 -628] [-907 -778 -628 -567 -479 -280 -239 -131 72 327 347 449 519 578 615 910 924 982]]
Test Case: 1563 | Input/Output: [[591 -45 970 -80 261 -208 333 -72 519 953 -465 92 -432 -469 -844 -763 -381 915 -604 -12 -622 590 149] [-844 -763 -622 -604 -469 -465 -432 -381 -208 -80 -72 -45 -12 92 149 261 333 519 590 591 915 953 970]]
Test Case: 1564 | Input/Output: [[-60 246 -303 504 -853 177 -535 577 185 -174 -128 786 888 -898 -997 -699 996 -553 -550 -740 87 201 710 -897 969 -812 590 -51 -197 817 748 -714 146 -555 -436 3 -523 163 -696 -347] [-997 -898 -897 -853 -812 -740 -714 -699 -696 -555 -553 -550 -535 -523 -436 -347 -303 -197 -174 -128 -60 -51 3 87 146 163 177 185 201 246 504 577 590 710 748 786 817 888 969 996]]
Test Case: 1565 | Input/Output: [[236 -746 -109 181 -775 -925 -398 348 -816 826 -251 655 -395 -851 726 729 0 -827] [-925 -851 -827 -816 -775 -746 -398 -395 -251 -109 0 181 236 348 655 726 729 826]]
Test Case: 1566 | Input/Output: [[616 105 461 879 -591 -921 -888 680 -982 -964 144 768 -207 -695 -53 -767 964 -86 593] [-982 -964 -921 -888 -767 -695 -591 -207 -86 -53 105 144 461 593 616 680 768 879 964]]
Test Case: 1567 | Input/Output: [[-583 181 488 -107 749 546 -160 691 -24 103 -838 510 -770 -576 -298 -416 743 476 -914 375 -706 329 -116 502 295 3 428] [-914 -838 -770 -706 -583 -576 -416 -298 -160 -116 -107 -24 3 103 181 295 329 375 428 476 488 502 510 546 691 743 749]]
Test Case: 1568 | Input/Output: [[-191 599 -732 -394 -419 -887 128 646 -30 -66 -44 -62 -432 527 -828] [-887 -828 -732 -432 -419 -394 -191 -66 -62 -44 -30 128 527 599 646]]
Test Case: 1569 | Input/Output: [[-835 386 208 -26 521 24 943 857 -460 -814 262 319 -147] [-835 -814 -460 -147 -26 24 208 262 319 386 521 857 943]]
Test Case: 1570 | Input/Output: [[920 -265 696 -196 679 -594 -424 374 966 360 -224 -86 -426 635 -126 353 60 596 193 -41 686] [-594 -426 -424 -265 -224 -196 -126 -86 -41 60 193 353 360 374 596 635 679 686 696 920 966]]
Test Case: 1571 | Input/Output: [[809 128 468 761 -48 320 499 -465 420 -946 -802 -12 272 -279 -852 471] [-946 -852 -802 -465 -279 -48 -12 128 272 320 420 468 471 499 761 809]]
Test Case: 1572 | Input/Output: [[-371 609 -119 335 -883 -619 266 -478 32 -284 -862 -867 590 10 901 -950 -56 766 -473 -100 -667 -847 -756 599 192 -112 -443 -412 797 -358 -44 937 504 836 -533 -700 -234 75 -711] [-950 -883 -867 -862 -847 -756 -711 -700 -667 -619 -533 -478 -473 -443 -412 -371 -358 -284 -234 -119 -112 -100 -56 -44 10 32 75 192 266 335 504 590 599 609 766 797 836 901 937]]
Test Case: 1573 | Input/Output: [[-571 140 -565 398 -70 -957 -699 879] [-957 -699 -571 -565 -70 140 398 879]]
Test Case: 1574 | Input/Output: [[-38 592 99 433 -56 644 17 201 330 -584 -777 716 -354 333 -293 647 187 197 -951 563 -417 295 -952 -377] [-952 -951 -777 -584 -417 -377 -354 -293 -56 -38 17 99 187 197 201 295 330 333 433 563 592 644 647 716]]
Test Case: 1575 | Input/Output: [[-41 -635 652 -181 -864 -897 -19 397 -743 -485 4 783 377 -249] [-897 -864 -743 -635 -485 -249 -181 -41 -19 4 377 397 652 783]]
Test Case: 1576 | Input/Output: [[-356 17 940 697 883] [-356 17 697 883 940]]
Test Case: 1577 | Input/Output: [[617 218 -664 878 335 193 -807 381 -311 945 -468 955 693 667 456 846 770 275 999 -139 292 -640 589 -299 691] [-807 -664 -640 -468 -311 -299 -139 193 218 275 292 335 381 456 589 617 667 691 693 770 846 878 945 955 999]]
Test Case: 1578 | Input/Output: [[897 -193 940] [-193 897 940]]
Test Case: 1579 | Input/Output: [[659 293 962 329 -408 -498 -138 -746 -134 562 -832 -678 647 436 842 -299 -788 -181 487 -414 373 486 381 822 519 -920 760 257 862 -588] [-920 -832 -788 -746 -678 -588 -498 -414 -408 -299 -181 -138 -134 257 293 329 373 381 436 486 487 519 562 647 659 760 822 842 862 962]]
Test Case: 1580 | Input/Output: [[65 955 -265 -602 -497 876 752 -711] [-711 -602 -497 -265 65 752 876 955]]
Test Case: 1581 | Input/Output: [[-211 31 -613 186 -809 -886 799 374 -221 939 -267 -165 -665 -564 223 888 157 59 66 -198 -16 761 435 -767] [-886 -809 -767 -665 -613 -564 -267 -221 -211 -198 -165 -16 31 59 66 157 186 223 374 435 761 799 888 939]]
Test Case: 1582 | Input/Output: [[-891 435 464 -443 -122 -304 -148 -183 428 -209 718 694 242 16 202 -150 -392 -836 -578 919 -789 -995 -420 58 -742] [-995 -891 -836 -789 -742 -578 -443 -420 -392 -304 -209 -183 -150 -148 -122 16 58 202 242 428 435 464 694 718 919]]
Test Case: 1583 | Input/Output: [[-420 -711 907 331 -793 876 878 -753 -193 52] [-793 -753 -711 -420 -193 52 331 876 878 907]]
Test Case: 1584 | Input/Output: [[-952 284 378 -462 224 778 53 487 -535 332 872 521 -644 92 -892 -388 777 -627 -891 484 -646 -414 118 167 -291 35 -53 531 -546 48] [-952 -892 -891 -646 -644 -627 -546 -535 -462 -414 -388 -291 -53 35 48 53 92 118 167 224 284 332 378 484 487 521 531 777 778 872]]
Test Case: 1585 | Input/Output: [[975 -912 480 -892 289 -38 -63 -468 -471 451 468 416 -932 -283 -245 -555 524 481 -185 970 353 -495 -485 968 221 816 761 586 406 -92 -751 974 96 -555 -718 242 159 -633 896 -511 -799 790 120] [-932 -912 -892 -799 -751 -718 -633 -555 -555 -511 -495 -485 -471 -468 -283 -245 -185 -92 -63 -38 96 120 159 221 242 289 353 406 416 451 468 480 481 524 586 761 790 816 896 968 970 974 975]]
Test Case: 1586 | Input/Output: [[-233 -750 295 151 -267 -938 845 592 520 861 -974 -770 939 -887 356 135 -756 -23 -386 240 32 -305 147 370 863 943 689 -546] [-974 -938 -887 -770 -756 -750 -546 -386 -305 -267 -233 -23 32 135 147 151 240 295 356 370 520 592 689 845 861 863 939 943]]
Test Case: 1587 | Input/Output: [[-327 688 -199 677 -264 414 -524 -60 -127 470 750 -774 365 -663 -388 208 -941 -811 559 -333 -72 926 -495 -607 -721 120 -888 -732 841 -936 -116 956 463 569 -170 -141 223 282 155 -356 -19 766] [-941 -936 -888 -811 -774 -732 -721 -663 -607 -524 -495 -388 -356 -333 -327 -264 -199 -170 -141 -127 -116 -72 -60 -19 120 155 208 223 282 365 414 463 470 559 569 677 688 750 766 841 926 956]]
Test Case: 1588 | Input/Output: [[938 969 -416 453 -664 606 372 257 362 -54 -836 -456 804] [-836 -664 -456 -416 -54 257 362 372 453 606 804 938 969]]
Test Case: 1589 | Input/Output: [[884 691 445 -518 936 -12 -313 -280 576 -599 -452 598 -900 -61 47 -141 161 -361 981 -953 -851 960 357 -142 -646 -814 -930 -859 -825 100 -406 -576 709 785 76 -770 679 -160 -261 98 -329 217 600 -455 527 282 99 423 940] [-953 -930 -900 -859 -851 -825 -814 -770 -646 -599 -576 -518 -455 -452 -406 -361 -329 -313 -280 -261 -160 -142 -141 -61 -12 47 76 98 99 100 161 217 282 357 423 445 527 576 598 600 679 691 709 785 884 936 940 960 981]]
Test Case: 1590 | Input/Output: [[-442 719 978 473 -473 878 -51 142 455 -630 420 -536 -155 -64 -572 796 -22 181 -316 -314 984 -252 -995 211 360 843 -307 -374 792 275 -610 -400 624 834 -93 -637 878 -568 -674 175 838 203 360 -743 238 -595 -591] [-995 -743 -674 -637 -630 -610 -595 -591 -572 -568 -536 -473 -442 -400 -374 -316 -314 -307 -252 -155 -93 -64 -51 -22 142 175 181 203 211 238 275 360 360 420 455 473 624 719 792 796 834 838 843 878 878 978 984]]
Test Case: 1591 | Input/Output: [[668 -890 488 -377 -935 335 -148 -782 -356 670 849 -235 276 505 286 943 991 -510 -632 -426 -153 -904 819] [-935 -904 -890 -782 -632 -510 -426 -377 -356 -235 -153 -148 276 286 335 488 505 668 670 819 849 943 991]]
Test Case: 1592 | Input/Output: [[-62 542 -142 633 465 -339 245 133 132 875 791 -949 -14 -5 282 -141 849 -563 -546 -500 -811 -686] [-949 -811 -686 -563 -546 -500 -339 -142 -141 -62 -14 -5 132 133 245 282 465 542 633 791 849 875]]
Test Case: 1593 | Input/Output: [[748 -825 239 176 -145 899 611 -641 800 -331 239 -584 -716 -816 -966 -133 -228 411 -561 771 -38 -257 208 -669 -928 599] [-966 -928 -825 -816 -716 -669 -641 -584 -561 -331 -257 -228 -145 -133 -38 176 208 239 239 411 599 611 748 771 800 899]]
Test Case: 1594 | Input/Output: [[402 724 340 543 891 957 -466 826 -584 -217 842 -648 -525 -161] [-648 -584 -525 -466 -217 -161 340 402 543 724 826 842 891 957]]
Test Case: 1595 | Input/Output: [[-258 -529 -677 -442 -854 -630 479 367 -323 -974 619 902 -549 -615 425 863 -151 678 290 -454] [-974 -854 -677 -630 -615 -549 -529 -454 -442 -323 -258 -151 290 367 425 479 619 678 863 902]]
Test Case: 1596 | Input/Output: [[128 -773 721 -645 -958 -305 -983 -600 153 -549 148 -298 333 -854 -53 -692 -458 -954 -466 330 -802 -50 375 479 133 -772 905 -429 -831 -460 -654 -652 -893 196 -967 -258 74 351 373 489 726 -325 312 729 703 -391 -125 -306 -627] [-983 -967 -958 -954 -893 -854 -831 -802 -773 -772 -692 -654 -652 -645 -627 -600 -549 -466 -460 -458 -429 -391 -325 -306 -305 -298 -258 -125 -53 -50 74 128 133 148 153 196 312 330 333 351 373 375 479 489 703 721 726 729 905]]
Test Case: 1597 | Input/Output: [[-544 329 -5 370 -203 129 -618 64 527 762 883 200 -567 574 -299 -720 -551 444 638 -650 734 -829 -245 -158 -627 433 340 698 942] [-829 -720 -650 -627 -618 -567 -551 -544 -299 -245 -203 -158 -5 64 129 200 329 340 370 433 444 527 574 638 698 734 762 883 942]]
Test Case: 1598 | Input/Output: [[308 423 311 -573 289 -430 -536 -44 118 -323 492 -733 -795 -428 -639 165 811 414 677 602 294 926 549 412 -270 307 359 -122 -38 -798 157 -925 -9 -643 468 44 906 746 972 265 -271 719 -266 -91 -533 -254 -42 851] [-925 -798 -795 -733 -643 -639 -573 -536 -533 -430 -428 -323 -271 -270 -266 -254 -122 -91 -44 -42 -38 -9 44 118 157 165 265 289 294 307 308 311 359 412 414 423 468 492 549 602 677 719 746 811 851 906 926 972]]
Test Case: 1599 | Input/Output: [[170 310 -498 240 -216 -125 -185 821 902 -243 757 -202 -555 789 748 862 -669 -632 -207 628 -40 -447 907 611 419 773 -365 -930 -395 -126 -983 -41 550 -891 -126 130 922 873 735 548] [-983 -930 -891 -669 -632 -555 -498 -447 -395 -365 -243 -216 -207 -202 -185 -126 -126 -125 -41 -40 130 170 240 310 419 548 550 611 628 735 748 757 773 789 821 862 873 902 907 922]]
Test Case: 1600 | Input/Output: [[-627 701 118 -514 -724 -675 -643 609 229 -531 902 -913 884 801 -568 -863 459 413 563 -567 -460 388 -831 -910 764 -245 785 1000 -289 295 871 312 -165 -749 -662 -329 494 623 236 742 817 730 -796 635] [-913 -910 -863 -831 -796 -749 -724 -675 -662 -643 -627 -568 -567 -531 -514 -460 -329 -289 -245 -165 118 229 236 295 312 388 413 459 494 563 609 623 635 701 730 742 764 785 801 817 871 884 902 1000]]
Test Case: 1601 | Input/Output: [[-612 416 -445 926 -751 797 693 193 586 743 867 -627 -751 -179 -789 -209 819 -387 647 774 -799 -214 439 -553 -679 822 151 -636 -845 -742 87 -410] [-845 -799 -789 -751 -751 -742 -679 -636 -627 -612 -553 -445 -410 -387 -214 -209 -179 87 151 193 416 439 586 647 693 743 774 797 819 822 867 926]]
Test Case: 1602 | Input/Output: [[-21 -216 942 -491 -931 -806] [-931 -806 -491 -216 -21 942]]
Test Case: 1603 | Input/Output: [[648 923 765 -811 -107 610 552 999 -261 126 -48 -700 -953 -219 -650 43 484 -834 -546 -249 255 -274 574 543 763 -984 -892 -168 -209 -358 -993 -283 -390 10] [-993 -984 -953 -892 -834 -811 -700 -650 -546 -390 -358 -283 -274 -261 -249 -219 -209 -168 -107 -48 10 43 126 255 484 543 552 574 610 648 763 765 923 999]]
Test Case: 1604 | Input/Output: [[223 -213 -834 -938 -742 -528 540 -463 48 -129 181 735 943 595 -757 -177 -428 -75 191 -292 569 -812 -933 208 383 -469 -385 -675 -218 -944 -523 661 406 713 918 92 -729 -403 393 -366 93 649 -238] [-944 -938 -933 -834 -812 -757 -742 -729 -675 -528 -523 -469 -463 -428 -403 -385 -366 -292 -238 -218 -213 -177 -129 -75 48 92 93 181 191 208 223 383 393 406 540 569 595 649 661 713 735 918 943]]
Test Case: 1605 | Input/Output: [[168 853 834 941 -761 -536 -407 -988 -631 -844 530 -458 -193 940 -768 776 811 164 405 866 -108 515 -896 -141 708 -790 -221 268 -625 934 557 -86 154 674 -301 -195 488 294 553 -722 439 -593 -939 -646] [-988 -939 -896 -844 -790 -768 -761 -722 -646 -631 -625 -593 -536 -458 -407 -301 -221 -195 -193 -141 -108 -86 154 164 168 268 294 405 439 488 515 530 553 557 674 708 776 811 834 853 866 934 940 941]]
Test Case: 1606 | Input/Output: [[-982 280 -189 221 -832 937 869 942 423] [-982 -832 -189 221 280 423 869 937 942]]
Test Case: 1607 | Input/Output: [[590 176 315 800 -217 671 -145 346 677 276 -794 -997 -969 846 242 -92 760 -581 540 157 -293 -641 -493 -713 -634 -166 573 -383 -842 443 493 756 966 955 -285 228 784 755 -32 951 -609 375 -232 91] [-997 -969 -842 -794 -713 -641 -634 -609 -581 -493 -383 -293 -285 -232 -217 -166 -145 -92 -32 91 157 176 228 242 276 315 346 375 443 493 540 573 590 671 677 755 756 760 784 800 846 951 955 966]]
Test Case: 1608 | Input/Output: [[874 383 -346 -265 721 313 -39 -82 -223 90 882 -286 -32 720 -928 -3 706 -211] [-928 -346 -286 -265 -223 -211 -82 -39 -32 -3 90 313 383 706 720 721 874 882]]
Test Case: 1609 | Input/Output: [[-343 87 668 764 -604 293 -329 993 982 -476 -806 497 195 582 946 -554 966 652 -577 -170 537 149 -125 553 -724 -357 -513 -891 513 -74 806 398 -725 267 490 -138] [-891 -806 -725 -724 -604 -577 -554 -513 -476 -357 -343 -329 -170 -138 -125 -74 87 149 195 267 293 398 490 497 513 537 553 582 652 668 764 806 946 966 982 993]]
Test Case: 1610 | Input/Output: [[217 -144 -292 -463 -606] [-606 -463 -292 -144 217]]
Test Case: 1611 | Input/Output: [[923 -82 -812 430 536 967 -24 -266 -349 -796 864 954 -198 -835 -795] [-835 -812 -796 -795 -349 -266 -198 -82 -24 430 536 864 923 954 967]]
Test Case: 1612 | Input/Output: [[-535 361 357 -261 -19 644 -736 -68 -176 -275 495 -579 -355 964 107 -456 295 -640 647 949 -479 -286 -509 -948 -535 -947 667 -860 -251 739 -63 -910] [-948 -947 -910 -860 -736 -640 -579 -535 -535 -509 -479 -456 -355 -286 -275 -261 -251 -176 -68 -63 -19 107 295 357 361 495 644 647 667 739 949 964]]
Test Case: 1613 | Input/Output: [[25 -696 983 308 -712 -706 258 -171 -773 -652 375 92] [-773 -712 -706 -696 -652 -171 25 92 258 308 375 983]]
Test Case: 1614 | Input/Output: [[-929 -990 -423 558 940 584 334 354 169 -529 -171 332 303 378 341 -649 350 261 -999 583 -34 186 -730 644 172 -220 -648 -825 597 954 894 -809 904 204 -195 170 130] [-999 -990 -929 -825 -809 -730 -649 -648 -529 -423 -220 -195 -171 -34 130 169 170 172 186 204 261 303 332 334 341 350 354 378 558 583 584 597 644 894 904 940 954]]
Test Case: 1615 | Input/Output: [[741 -532 -447 -187 396 -699 -449 -509 801 -448 -937 390 808 -519 -848 -372 931 -805 -581 646 -381 62 987 694 -824 507 713 662 527 69 -236 822 311 232 83 374 470 -318 376 -132 176 694 -25 111] [-937 -848 -824 -805 -699 -581 -532 -519 -509 -449 -448 -447 -381 -372 -318 -236 -187 -132 -25 62 69 83 111 176 232 311 374 376 390 396 470 507 527 646 662 694 694 713 741 801 808 822 931 987]]
Test Case: 1616 | Input/Output: [[-179 -75 -853 470 -628 301 -107 -748 7 -884 27 158 -715 -289 -976 802 320 -472 952 395 -974 -486 551 112] [-976 -974 -884 -853 -748 -715 -628 -486 -472 -289 -179 -107 -75 7 27 112 158 301 320 395 470 551 802 952]]
Test Case: 1617 | Input/Output: [[-496 -438 507 -854 42 537 -789 -402 742 928 -720 366 -482 -561 117 -964 -760 502 213 -439 -231 -354 706 -360 184 300 -166 734 -610 123] [-964 -854 -789 -760 -720 -610 -561 -496 -482 -439 -438 -402 -360 -354 -231 -166 42 117 123 184 213 300 366 502 507 537 706 734 742 928]]
Test Case: 1618 | Input/Output: [[460 -297 112 -867 -557 232 -352 -887 -537 671 215 793 840 -356 279 12 -573 743 472 509 -140 -678 -245 825 -463 486 -394 -419 -63 -618 413 -389 498 903 379 -676 -790 -227 997 447 503 -459 530 470 -594 -391 -412] [-887 -867 -790 -678 -676 -618 -594 -573 -557 -537 -463 -459 -419 -412 -394 -391 -389 -356 -352 -297 -245 -227 -140 -63 12 112 215 232 279 379 413 447 460 470 472 486 498 503 509 530 671 743 793 825 840 903 997]]
Test Case: 1619 | Input/Output: [[-856 818 -52 56 -235 -795 139 -312 -40 721 281 859] [-856 -795 -312 -235 -52 -40 56 139 281 721 818 859]]
Test Case: 1620 | Input/Output: [[901 -206 -628 112 -608 -136 -864 -60 -680 586 521 36 -975 447 358 404 628 -921 684 450 588 513 866 -118 -132 455 -384] [-975 -921 -864 -680 -628 -608 -384 -206 -136 -132 -118 -60 36 112 358 404 447 450 455 513 521 586 588 628 684 866 901]]
Test Case: 1621 | Input/Output: [[-228 -586 -585 134 954 578 -140 81 -113 137 314 -66 325 498 -977 404 -173 11 540 -246 427 -423 887 -950 700 -8 600 588 875 -878 -765 776 -692 -901 262 -996] [-996 -977 -950 -901 -878 -765 -692 -586 -585 -423 -246 -228 -173 -140 -113 -66 -8 11 81 134 137 262 314 325 404 427 498 540 578 588 600 700 776 875 887 954]]
Test Case: 1622 | Input/Output: [[-569 -122] [-569 -122]]
Test Case: 1623 | Input/Output: [[-340 -243 165 -903 606 49 539 -576 792 898 -984 19 681 -958 -305 526 19 716 567 875 -523 336 272 -965 804 90 -196 948 35 843 -742 -862 -777 426 753 -681 89 861 -706 774 -995 -828 -450] [-995 -984 -965 -958 -903 -862 -828 -777 -742 -706 -681 -576 -523 -450 -340 -305 -243 -196 19 19 35 49 89 90 165 272 336 426 526 539 567 606 681 716 753 774 792 804 843 861 875 898 948]]
Test Case: 1624 | Input/Output: [[-768 -828 -935 399 913 825 -449 238 771 407 -231 759 -244 930 33] [-935 -828 -768 -449 -244 -231 33 238 399 407 759 771 825 913 930]]
Test Case: 1625 | Input/Output: [[-924 -420 -715 458 749 456 518 939 859 -770 290 107 -293 55 -733 -390 -584 444 550 -803 -693 -825 166 -296 28 -624 617 -810 -491 112 488 -441 -820 399 155 315 -894 479 998 11 484 207 -471 -214 924] [-924 -894 -825 -820 -810 -803 -770 -733 -715 -693 -624 -584 -491 -471 -441 -420 -390 -296 -293 -214 11 28 55 107 112 155 166 207 290 315 399 444 456 458 479 484 488 518 550 617 749 859 924 939 998]]
Test Case: 1626 | Input/Output: [[646 498 -292 642 907 322 -610 234 343 -551 -506 421 -955 315 524 914 -666 580 -678 -133 377 90 237 -823 -498 158 -369 -409 -17 708 732 -68 52 -871 978] [-955 -871 -823 -678 -666 -610 -551 -506 -498 -409 -369 -292 -133 -68 -17 52 90 158 234 237 315 322 343 377 421 498 524 580 642 646 708 732 907 914 978]]
Test Case: 1627 | Input/Output: [[-897 -810 149 771 212 -116 966 16 290 -342 -851 -764 725 -545 -763] [-897 -851 -810 -764 -763 -545 -342 -116 16 149 212 290 725 771 966]]
Test Case: 1628 | Input/Output: [[-251 229 707 -965 -578 479 -809 -147 142 133 -222 -138] [-965 -809 -578 -251 -222 -147 -138 133 142 229 479 707]]
Test Case: 1629 | Input/Output: [[947 -362 320 795 -361 540 -648 -712 332 -749 837 -900 -793 465 162 371 55 -394 395 -534 -784 -773] [-900 -793 -784 -773 -749 -712 -648 -534 -394 -362 -361 55 162 320 332 371 395 465 540 795 837 947]]
Test Case: 1630 | Input/Output: [[-880 192 -437 722 244 -461 -234 926 268 -674 986 889 407 -837 745 998 -885 -607 -294 945 407 -763 -384 -380 284 -857 -705 -263 54 881 616 -149 -428 804 10 -389 784 -577 -528 -846 -406 87 985 82 552 229 599 597 381 -544] [-885 -880 -857 -846 -837 -763 -705 -674 -607 -577 -544 -528 -461 -437 -428 -406 -389 -384 -380 -294 -263 -234 -149 10 54 82 87 192 229 244 268 284 381 407 407 552 597 599 616 722 745 784 804 881 889 926 945 985 986 998]]
Test Case: 1631 | Input/Output: [[151 -227 -123 -40 -162 -28] [-227 -162 -123 -40 -28 151]]
Test Case: 1632 | Input/Output: [[115 725 677 -824 155 -485 909 -505 -757 -373 -456 -37 -55 148 472 -951 115 -525 231 -100 402 998 -795 928 635 -566 -43 112 614 211 834 -154 462 -611 -713 14 -855 -399 -695 -652 395 -299] [-951 -855 -824 -795 -757 -713 -695 -652 -611 -566 -525 -505 -485 -456 -399 -373 -299 -154 -100 -55 -43 -37 14 112 115 115 148 155 211 231 395 402 462 472 614 635 677 725 834 909 928 998]]
Test Case: 1633 | Input/Output: [[-299 298 -38 -100 -263 733 801 -160 290] [-299 -263 -160 -100 -38 290 298 733 801]]
Test Case: 1634 | Input/Output: [[-12 -401 -381 -541 -73 -882 566 -516 822 208 964 171 301 -851 -528 400 -66 -490 833 870 -810 -731 660 -114 -614] [-882 -851 -810 -731 -614 -541 -528 -516 -490 -401 -381 -114 -73 -66 -12 171 208 301 400 566 660 822 833 870 964]]
Test Case: 1635 | Input/Output: [[-587 136 -578 -695 433 -410 -463] [-695 -587 -578 -463 -410 136 433]]
Test Case: 1636 | Input/Output: [[410 -252 818 -438 402 -605 -334 -425 190 711 -236 450 -884 -125 -493 -937 -743 -39 182 -555 -459 879 -206 535 -872 -174 390 172 -410 258 -175 -860 -796] [-937 -884 -872 -860 -796 -743 -605 -555 -493 -459 -438 -425 -410 -334 -252 -236 -206 -175 -174 -125 -39 172 182 190 258 390 402 410 450 535 711 818 879]]
Test Case: 1637 | Input/Output: [[173 -318 -861 -349 -308 -907 546 -978 -521 -6 832 996 -768 -571 403 716 438 -222 -199 -155 -207 60 21 -120 -852 -665 -960 930 -349 277 -400 -954 685 -356 -148 394 39 -428 -35 574] [-978 -960 -954 -907 -861 -852 -768 -665 -571 -521 -428 -400 -356 -349 -349 -318 -308 -222 -207 -199 -155 -148 -120 -35 -6 21 39 60 173 277 394 403 438 546 574 685 716 832 930 996]]
Test Case: 1638 | Input/Output: [[-945 -11 -588 -419 471 -990 817 705 345 -865 355 -535 -492 -217 -784 5 -293 371 293 762 199 197 911 429 658 -978 689 -29 -822 94 411 421 48 -595 317 -558 -878 404 486 450 908 -938 615 -892 158 -566 375 -899] [-990 -978 -945 -938 -899 -892 -878 -865 -822 -784 -595 -588 -566 -558 -535 -492 -419 -293 -217 -29 -11 5 48 94 158 197 199 293 317 345 355 371 375 404 411 421 429 450 471 486 615 658 689 705 762 817 908 911]]
Test Case: 1639 | Input/Output: [[-345 631 250 -155 -9 222 656 -117 881 -400 -437 189 527 -328 -884 -374 -800 -553 -55 389 -569 -912 -133 -56] [-912 -884 -800 -569 -553 -437 -400 -374 -345 -328 -155 -133 -117 -56 -55 -9 189 222 250 389 527 631 656 881]]
Test Case: 1640 | Input/Output: [[-101 -914 918 726 440 849 511 -34 -526 -746 214 -119 -730 -388 580 -211 946 -53 -998 -932 -801 512] [-998 -932 -914 -801 -746 -730 -526 -388 -211 -119 -101 -53 -34 214 440 511 512 580 726 849 918 946]]
Test Case: 1641 | Input/Output: [[713 -643 -222 -686 -813 -421 -603 490 -375 329 258 197 270 -686 -143 469 -673 314 886 -911 -105 334 306 877 58 -207 514 473 392 -974 330 162 431 -542 -575 -528 691 422 -705 862 -358 -940 745 378 607 -643 -42 -57 -585] [-974 -940 -911 -813 -705 -686 -686 -673 -643 -643 -603 -585 -575 -542 -528 -421 -375 -358 -222 -207 -143 -105 -57 -42 58 162 197 258 270 306 314 329 330 334 378 392 422 431 469 473 490 514 607 691 713 745 862 877 886]]
Test Case: 1642 | Input/Output: [[-201 -160 251 -970 373 -957 -538 445 308 -368 890 -40 405 166 316 820 227 757 -584 884 -701 548 479 -375 -808 -392 854 -84 291 753 413 666 449] [-970 -957 -808 -701 -584 -538 -392 -375 -368 -201 -160 -84 -40 166 227 251 291 308 316 373 405 413 445 449 479 548 666 753 757 820 854 884 890]]
Test Case: 1643 | Input/Output: [[-15 -291 -528 609 41 -250 -6 437 61 906 907 765 -50 -729 858 325 860 -374 956 -910 211 908 -694] [-910 -729 -694 -528 -374 -291 -250 -50 -15 -6 41 61 211 325 437 609 765 858 860 906 907 908 956]]
Test Case: 1644 | Input/Output: [[-378 -691 871 -656 -133 -423 3 -20 -428 -382 510 -36 -27 -296 528 -16 -119 248 862 -1 -900 -619 847 -891 -724 374 -483 485 -750 -988 863 796 -811 900 -874 541] [-988 -900 -891 -874 -811 -750 -724 -691 -656 -619 -483 -428 -423 -382 -378 -296 -133 -119 -36 -27 -20 -16 -1 3 248 374 485 510 528 541 796 847 862 863 871 900]]
Test Case: 1645 | Input/Output: [[124 740 418 -603 158 614 -872 249 -339 -934 767 -491 -560 271 -171 -560 -93 -422 -308 816 565 781 256 -487 332] [-934 -872 -603 -560 -560 -491 -487 -422 -339 -308 -171 -93 124 158 249 256 271 332 418 565 614 740 767 781 816]]
Test Case: 1646 | Input/Output: [[-808 212 805 329 68 84 -714 665 -213 -970 -235 978 966 808 267 -410 -901 -592 700 528 -290 437 -870 -980 388] [-980 -970 -901 -870 -808 -714 -592 -410 -290 -235 -213 68 84 212 267 329 388 437 528 665 700 805 808 966 978]]
Test Case: 1647 | Input/Output: [[956 -933 430 -944 -662 836 -100 -239 989 -585 -70 650 458 -383 -217 772 582 -308 804 708 455 -304] [-944 -933 -662 -585 -383 -308 -304 -239 -217 -100 -70 430 455 458 582 650 708 772 804 836 956 989]]
Test Case: 1648 | Input/Output: [[-167 148 -925 185 -622 960 -54 -400 -180 -999 -329 -819 965 -733 -453 121 211 509 -773 41 224 -749 236 723 -615 -85 -593 870 882 763 473 7 300 769 -528] [-999 -925 -819 -773 -749 -733 -622 -615 -593 -528 -453 -400 -329 -180 -167 -85 -54 7 41 121 148 185 211 224 236 300 473 509 723 763 769 870 882 960 965]]
Test Case: 1649 | Input/Output: [[-790 -469 339 200 861 668 -519 -141 -927 666 328 5 368 -975 -764 20 463 -601 188 231 -511 732 -502 414 419 -711 -509 224 -627 727 743 570 113 570] [-975 -927 -790 -764 -711 -627 -601 -519 -511 -509 -502 -469 -141 5 20 113 188 200 224 231 328 339 368 414 419 463 570 570 666 668 727 732 743 861]]
Test Case: 1650 | Input/Output: [[234 -973 54 -285 -876 297 826 -777 692 136 -581 -159 -372 962 325 -575 -68 453 825 -933 -637 636] [-973 -933 -876 -777 -637 -581 -575 -372 -285 -159 -68 54 136 234 297 325 453 636 692 825 826 962]]
Test Case: 1651 | Input/Output: [[-480 -19 877 -109 177] [-480 -109 -19 177 877]]
Test Case: 1652 | Input/Output: [[534 -617 774 510 854 924 -613 -859 -161 -943 18 -273 224 -567 524 84 -616 -88 141 -905 123 15 -511 -873 -23 276] [-943 -905 -873 -859 -617 -616 -613 -567 -511 -273 -161 -88 -23 15 18 84 123 141 224 276 510 524 534 774 854 924]]
Test Case: 1653 | Input/Output: [[76 290 450 908 801 -826 993 -81 451 914 815 909 975] [-826 -81 76 290 450 451 801 815 908 909 914 975 993]]
Test Case: 1654 | Input/Output: [[251] [251]]
Test Case: 1655 | Input/Output: [[622 829 426 855 835 -238 -480 -946 -604 882 743 738 129 373 150 547 -50 -960 684 -16 114 -515 -80 468 605 -848 -883 -775 -36 -34 -771 841 827 467 -86] [-960 -946 -883 -848 -775 -771 -604 -515 -480 -238 -86 -80 -50 -36 -34 -16 114 129 150 373 426 467 468 547 605 622 684 738 743 827 829 835 841 855 882]]
Test Case: 1656 | Input/Output: [[666 -185 686 -810 1000 973 755 915 769 263 559 676 -808 234 56 -181] [-810 -808 -185 -181 56 234 263 559 666 676 686 755 769 915 973 1000]]
Test Case: 1657 | Input/Output: [[-829 465 -633 -648 -376 23 -305 193 389 -882 744 219 -33 773 -146 338 108 -245 983 -854 924 985 820 924 273 -150 -185 -901 -590 726 -525 909 -39 -295 -828 -469 -140 -477 -147 194 810 293 -663 55 -415 -345 427 -567] [-901 -882 -854 -829 -828 -663 -648 -633 -590 -567 -525 -477 -469 -415 -376 -345 -305 -295 -245 -185 -150 -147 -146 -140 -39 -33 23 55 108 193 194 219 273 293 338 389 427 465 726 744 773 810 820 909 924 924 983 985]]
Test Case: 1658 | Input/Output: [[-290 649 703 268 -303 -139 -508 -432 939 334 840 576 872 -134 -51 171 -925 -760 -39 -349 70 1000 346 289 -4 858 615 350 -622 265 -372 178 -790 263 -427 255] [-925 -790 -760 -622 -508 -432 -427 -372 -349 -303 -290 -139 -134 -51 -39 -4 70 171 178 255 263 265 268 289 334 346 350 576 615 649 703 840 858 872 939 1000]]
Test Case: 1659 | Input/Output: [[-136 843 193 -125 429 938 685 -167 235 493 633 423 716 -948 -3 -590 606 -625 -179 862 -278 -369 -924 835 -552 -642 828 683 582 3 -777 -228 635 -705 999 -331 190 232 -616 945 -9 -842 237] [-948 -924 -842 -777 -705 -642 -625 -616 -590 -552 -369 -331 -278 -228 -179 -167 -136 -125 -9 -3 3 190 193 232 235 237 423 429 493 582 606 633 635 683 685 716 828 835 843 862 938 945 999]]
Test Case: 1660 | Input/Output: [[598] [598]]
Test Case: 1661 | Input/Output: [[-774 -830 -949 705 -398 -897 -215 -929 289 -990 -140 386 408 98 -317 -1 334 -559 289 317 547 697 808 -533 -975 -580] [-990 -975 -949 -929 -897 -830 -774 -580 -559 -533 -398 -317 -215 -140 -1 98 289 289 317 334 386 408 547 697 705 808]]
Test Case: 1662 | Input/Output: [[-935 432 862 147 856 -427 982 -734 732 3 -559 -110 -623 -756 -162 -363 508 -705 -501 -227 392 354 517 -325 566 660 92 760 -880 -568 -21 336 976 -250 109 -351 -928 802 800 -727 -621 63 -659 -110 583 -321] [-935 -928 -880 -756 -734 -727 -705 -659 -623 -621 -568 -559 -501 -427 -363 -351 -325 -321 -250 -227 -162 -110 -110 -21 3 63 92 109 147 336 354 392 432 508 517 566 583 660 732 760 800 802 856 862 976 982]]
Test Case: 1663 | Input/Output: [[26 -715 -707 -516 983 702 596 -752 -36 -158 -154 768 -791 -623 -438 257 283 52 -209 366 -590 -738 -314 -525 -262 -875 60 -734 -940 375 175 -339 -639 -782 -772 -258] [-940 -875 -791 -782 -772 -752 -738 -734 -715 -707 -639 -623 -590 -525 -516 -438 -339 -314 -262 -258 -209 -158 -154 -36 26 52 60 175 257 283 366 375 596 702 768 983]]
Test Case: 1664 | Input/Output: [[48 -229 -570 -305 -449 -570 -69 74 -377 953 935 939 -621 -988 160 -709 988 -603 -674 545 939 -550 -820 -285 854 -222] [-988 -820 -709 -674 -621 -603 -570 -570 -550 -449 -377 -305 -285 -229 -222 -69 48 74 160 545 854 935 939 939 953 988]]
Test Case: 1665 | Input/Output: [[34 642 -259 695 460 -842 992 830 958 219 -762 -231 412 68 -510 -407 940 -7 -569 150 607 191 -851 797 -341 -558 -65 -983 651 581 -222 987 -758 648 -553 -324 330 -387 -68 412 979 -760 703] [-983 -851 -842 -762 -760 -758 -569 -558 -553 -510 -407 -387 -341 -324 -259 -231 -222 -68 -65 -7 34 68 150 191 219 330 412 412 460 581 607 642 648 651 695 703 797 830 940 958 979 987 992]]
Test Case: 1666 | Input/Output: [[-340 355 -820 -209 -741 -458 115 -858 -152 -279 978 -611 367 -968 -124 -44 -606] [-968 -858 -820 -741 -611 -606 -458 -340 -279 -209 -152 -124 -44 115 355 367 978]]
Test Case: 1667 | Input/Output: [[-883 520 634] [-883 520 634]]
Test Case: 1668 | Input/Output: [[820 503 464 -896 -719 743 -48 118 -51 -543 -431 -766 609 261 926 0 -593 734 -661 -567 737 770 -175] [-896 -766 -719 -661 -593 -567 -543 -431 -175 -51 -48 0 118 261 464 503 609 734 737 743 770 820 926]]
Test Case: 1669 | Input/Output: [[986 -260] [-260 986]]
Test Case: 1670 | Input/Output: [[-448 -808 -426 -549 -644 500 -539 605] [-808 -644 -549 -539 -448 -426 500 605]]
Test Case: 1671 | Input/Output: [[738 -419 -826 -531 -286 648 -211 807 847 -667 -913 109 514 -903 -716 712 257 239 -770 -602 -688 736 879 565 375] [-913 -903 -826 -770 -716 -688 -667 -602 -531 -419 -286 -211 109 239 257 375 514 565 648 712 736 738 807 847 879]]
Test Case: 1672 | Input/Output: [[-56 650 221] [-56 221 650]]
Test Case: 1673 | Input/Output: [[-185 -930 637 -737 -339 -290 166 808 724 -211 904 -354 750 -712 128 -534 -728 -947 -599 295 -407 -666 392 941] [-947 -930 -737 -728 -712 -666 -599 -534 -407 -354 -339 -290 -211 -185 128 166 295 392 637 724 750 808 904 941]]
Test Case: 1674 | Input/Output: [[766 173 -997 -853 308 117 -597 -53 421 -240 330] [-997 -853 -597 -240 -53 117 173 308 330 421 766]]
Test Case: 1675 | Input/Output: [[-715 -382 -695 -858 382 739 -306 935 -932 -385 250 -764 379 860 366 124 503 -822 540 -835 -971 -123 -846 497 474 -542 51 -376 -714 769 289 682 624 -225 993] [-971 -932 -858 -846 -835 -822 -764 -715 -714 -695 -542 -385 -382 -376 -306 -225 -123 51 124 250 289 366 379 382 474 497 503 540 624 682 739 769 860 935 993]]
Test Case: 1676 | Input/Output: [[270 225 -387 -56 633 898 422 -129 65 -213 772 -813 -262 875 379 -654 788 -59 -294 83] [-813 -654 -387 -294 -262 -213 -129 -59 -56 65 83 225 270 379 422 633 772 788 875 898]]
Test Case: 1677 | Input/Output: [[-920 838 -648 466 -254 -427 -815 575 -314 939 -733 -939 -625 -629 57 -512 32 -966 -121 -129 -480 -961 -535 -769 770 -59 897 731 -654 815 -64 -131 -253] [-966 -961 -939 -920 -815 -769 -733 -654 -648 -629 -625 -535 -512 -480 -427 -314 -254 -253 -131 -129 -121 -64 -59 32 57 466 575 731 770 815 838 897 939]]
Test Case: 1678 | Input/Output: [[462 244 -733 -373 -994 -808 -427 -909 288 -973 -242 484 -744 269 968 619 -164 -593 167 -563 -884 -236 -204 586 799 596 653] [-994 -973 -909 -884 -808 -744 -733 -593 -563 -427 -373 -242 -236 -204 -164 167 244 269 288 462 484 586 596 619 653 799 968]]
Test Case: 1679 | Input/Output: [[-319 573 277 -206 -435 -134 -84 640 -565 15 -152 391 -929 -276 -469 113 349 461 -736 -490 517 636 -732 -44 273 594 -662 397 -197 516 90 921 256 -416] [-929 -736 -732 -662 -565 -490 -469 -435 -416 -319 -276 -206 -197 -152 -134 -84 -44 15 90 113 256 273 277 349 391 397 461 516 517 573 594 636 640 921]]
Test Case: 1680 | Input/Output: [[663 -83 220 -301 -972 714 -990] [-990 -972 -301 -83 220 663 714]]
Test Case: 1681 | Input/Output: [[497 -834 -885 -790 762 6 -952 -906 -153 461 553 25 853 -118 947 557 -924 -132 -317 915 -451 -279 378 -233 -368 -879 -38 -96 632 -110 -59 -373 -457 76 306 -202 -926 -96 778 -78 -315 362 -13 -214 -315] [-952 -926 -924 -906 -885 -879 -834 -790 -457 -451 -373 -368 -317 -315 -315 -279 -233 -214 -202 -153 -132 -118 -110 -96 -96 -78 -59 -38 -13 6 25 76 306 362 378 461 497 553 557 632 762 778 853 915 947]]
Test Case: 1682 | Input/Output: [[470 -729 -303 425 167 7 727 335 817 -397] [-729 -397 -303 7 167 335 425 470 727 817]]
Test Case: 1683 | Input/Output: [[122 -554 410 -100 552 -458 -337 -499 526 872 -517 -924 -127 227 -986 -67] [-986 -924 -554 -517 -499 -458 -337 -127 -100 -67 122 227 410 526 552 872]]
Test Case: 1684 | Input/Output: [[716 243 -490 355 -14 204 875 856 -329 -338 -575 -563 205 -604 -87 -871 -947 -832 -417 88 -41 805 305 407 -97 744 872 37 81 757 450 -406 266 -756 -194 857 -869 -229 -305 60 851 -362 -307 -838 768 37 -176] [-947 -871 -869 -838 -832 -756 -604 -575 -563 -490 -417 -406 -362 -338 -329 -307 -305 -229 -194 -176 -97 -87 -41 -14 37 37 60 81 88 204 205 243 266 305 355 407 450 716 744 757 768 805 851 856 857 872 875]]
Test Case: 1685 | Input/Output: [[586 -155 -124 -395 843 -331 946 784 634 -823 140 593 -808 -17 521 171 -3 158 -117 763 709 -739 -381 342 -463 167 -825 815 -62 -608 448 71 413 -782 988 848 -193 141 -701 -441 38 270 83 509 -236 794 -701 875] [-825 -823 -808 -782 -739 -701 -701 -608 -463 -441 -395 -381 -331 -236 -193 -155 -124 -117 -62 -17 -3 38 71 83 140 141 158 167 171 270 342 413 448 509 521 586 593 634 709 763 784 794 815 843 848 875 946 988]]
Test Case: 1686 | Input/Output: [[-365 -466 -246 -597 266 -385 -518 -744 881 254 203 282 -472 237 -547 412 -268 255 -375 50 -690 813 -373 -872 413 -713 691 -817 -165 638 24 513 114 -616 753 947 -261 438] [-872 -817 -744 -713 -690 -616 -597 -547 -518 -472 -466 -385 -375 -373 -365 -268 -261 -246 -165 24 50 114 203 237 254 255 266 282 412 413 438 513 638 691 753 813 881 947]]
Test Case: 1687 | Input/Output: [[-101 813 120] [-101 120 813]]
Test Case: 1688 | Input/Output: [[202 605 -929 -461 255 803 -455 -514 566 -829 652 252 -705 391 -930 462 -86 574 -780 158 -719 -689 -995 623 -809 -706 772 -112 -735 34 85 -144 710 922 153 -390 227 -376 -280 -80 -857 32 982 -368] [-995 -930 -929 -857 -829 -809 -780 -735 -719 -706 -705 -689 -514 -461 -455 -390 -376 -368 -280 -144 -112 -86 -80 32 34 85 153 158 202 227 252 255 391 462 566 574 605 623 652 710 772 803 922 982]]
Test Case: 1689 | Input/Output: [[-547 -713 119 870 -284 -425 615 -807 774 -316 -933 53 501 -439 997 351 -67 762 -214 -826 806 161 -159 -855 -61 -865 -161 -840 46 243 992 338 395 536 -514 28 745 895 691 731 329 -643 -955 -500 -5 -957 312 -164 -351] [-957 -955 -933 -865 -855 -840 -826 -807 -713 -643 -547 -514 -500 -439 -425 -351 -316 -284 -214 -164 -161 -159 -67 -61 -5 28 46 53 119 161 243 312 329 338 351 395 501 536 615 691 731 745 762 774 806 870 895 992 997]]
Test Case: 1690 | Input/Output: [[122 -990 146 282 -472 -638 483 39 292 -539 434 588] [-990 -638 -539 -472 39 122 146 282 292 434 483 588]]
Test Case: 1691 | Input/Output: [[-488 -909 413 -102 -14 913 416 -541 547 986 -584 -734] [-909 -734 -584 -541 -488 -102 -14 413 416 547 913 986]]
Test Case: 1692 | Input/Output: [[392 -106 -495 665 713 606 681 353 958 -797 16 471 -176 214 -423 -691 -288 640 300 72 574 -779 708 -785 -638 837 -807 864 172 849 -859 628 723 -819 -713 402 246 452 506 -650 -151 10 -92] [-859 -819 -807 -797 -785 -779 -713 -691 -650 -638 -495 -423 -288 -176 -151 -106 -92 10 16 72 172 214 246 300 353 392 402 452 471 506 574 606 628 640 665 681 708 713 723 837 849 864 958]]
Test Case: 1693 | Input/Output: [[139 -427 679 -204 244 560 927 -7 693 -211 467 -837 -760 121 -231 643 -131 863 913 631 198 -706 -126 933 -316 679 -13 -576 409 756 -297 -787 -277 318 598 -503 648 -664 -981 326 -322 -318 -981] [-981 -981 -837 -787 -760 -706 -664 -576 -503 -427 -322 -318 -316 -297 -277 -231 -211 -204 -131 -126 -13 -7 121 139 198 244 318 326 409 467 560 598 631 643 648 679 679 693 756 863 913 927 933]]
Test Case: 1694 | Input/Output: [[552 540 -603 30 233 -291 327 -227 830 -259 -142 75 545 -665 656 464 371 -601 -878 609 -434 481 17 273 612 -446 -927 189 -535 -722 -807 -212 504 396 853 318 465 -26 -358 -851 89 -819 642 614 -223 846 402] [-927 -878 -851 -819 -807 -722 -665 -603 -601 -535 -446 -434 -358 -291 -259 -227 -223 -212 -142 -26 17 30 75 89 189 233 273 318 327 371 396 402 464 465 481 504 540 545 552 609 612 614 642 656 830 846 853]]
Test Case: 1695 | Input/Output: [[378 459 181 -669 499 -990 -16 465 647 -657 -153 -313 370 920 -250 383 951 798 -203 -572 850 22 -2 240 747 925 24 365 -805 -422 610 51 901] [-990 -805 -669 -657 -572 -422 -313 -250 -203 -153 -16 -2 22 24 51 181 240 365 370 378 383 459 465 499 610 647 747 798 850 901 920 925 951]]
Test Case: 1696 | Input/Output: [[825 447 900 -986 -898 861 643 -694 -561 360 -647 886 -746 679 566 450 575 359 -979 -33 -44 -480 -152 -925 -843 774 802 -222 890 -929 -728 972 -714 184 985 -240 478 96] [-986 -979 -929 -925 -898 -843 -746 -728 -714 -694 -647 -561 -480 -240 -222 -152 -44 -33 96 184 359 360 447 450 478 566 575 643 679 774 802 825 861 886 890 900 972 985]]
Test Case: 1697 | Input/Output: [[202 798 614 -10] [-10 202 614 798]]
Test Case: 1698 | Input/Output: [[270 -312 255 980 299 -510 97 -852 153 383 745] [-852 -510 -312 97 153 255 270 299 383 745 980]]
Test Case: 1699 | Input/Output: [[731 -355 159] [-355 159 731]]
Test Case: 1700 | Input/Output: [[-27 340 211 -857 920 359 -58 918 -725 477 174 -964 870 79 642 -761 560 653 126 -333 -390 773 -441 823 485] [-964 -857 -761 -725 -441 -390 -333 -58 -27 79 126 174 211 340 359 477 485 560 642 653 773 823 870 918 920]]
Test Case: 1701 | Input/Output: [[-53 569 -18 -624 -270 -827 -832 658 492 -870 608 308 -427 -350 -134 -950 -2 -560 464 766 92 24 77 589 -574 840 829 317 -24 833 -319 384 -402 -970 980 620 -349 932 -902 -268 -720 -200 -132 -565 -782 -655 735 -990] [-990 -970 -950 -902 -870 -832 -827 -782 -720 -655 -624 -574 -565 -560 -427 -402 -350 -349 -319 -270 -268 -200 -134 -132 -53 -24 -18 -2 24 77 92 308 317 384 464 492 569 589 608 620 658 735 766 829 833 840 932 980]]
Test Case: 1702 | Input/Output: [[51 -359 578 -556 98 79 206 -327 614 191 -417 -18 455 -37 460 976 32 889 201 193 -866 -966 -148 822 985 604 800 690 517 92 -367 -597 773 28 20 112 152 170 397 -405 91 284 -985 -698 917 179 693 944 -379] [-985 -966 -866 -698 -597 -556 -417 -405 -379 -367 -359 -327 -148 -37 -18 20 28 32 51 79 91 92 98 112 152 170 179 191 193 201 206 284 397 455 460 517 578 604 614 690 693 773 800 822 889 917 944 976 985]]
Test Case: 1703 | Input/Output: [[-599 -751 -53 40 132 -922 347 447 -877 672 -996 440 -75 -512 408 -153 150 749 -766 -460] [-996 -922 -877 -766 -751 -599 -512 -460 -153 -75 -53 40 132 150 347 408 440 447 672 749]]
Test Case: 1704 | Input/Output: [[769 341 244 -966 -20 -626 60 384 -483 460 -681 743 -552 351 337 279 271 -519 -400 456 -292 974 -819 -665 -56 -830 -558] [-966 -830 -819 -681 -665 -626 -558 -552 -519 -483 -400 -292 -56 -20 60 244 271 279 337 341 351 384 456 460 743 769 974]]
Test Case: 1705 | Input/Output: [[349 795 -812 -469 -205 272 -1000 -705 -425 -3 -822 840 118 -260 858 564 -982 211 -880 439 553 407 45 -163 776 191 622 248] [-1000 -982 -880 -822 -812 -705 -469 -425 -260 -205 -163 -3 45 118 191 211 248 272 349 407 439 553 564 622 776 795 840 858]]
Test Case: 1706 | Input/Output: [[279 -831 -816 -895 485 223 -611 531 -833 626 183 565 -764 614 254 674 556 -647 -821 -36 787 15 -451 427 -209 -138 -869 -265 -506 495 -38 99 113 -91] [-895 -869 -833 -831 -821 -816 -764 -647 -611 -506 -451 -265 -209 -138 -91 -38 -36 15 99 113 183 223 254 279 427 485 495 531 556 565 614 626 674 787]]
Test Case: 1707 | Input/Output: [[326 541 115 -32 -1000 -118 -769 951 847 963 -244 -709 -641 -228 833 -417 -781] [-1000 -781 -769 -709 -641 -417 -244 -228 -118 -32 115 326 541 833 847 951 963]]
Test Case: 1708 | Input/Output: [[406 452 735 788 313 617 679 -828 -746 657 540 619 155 541 -804 632 -329 -19 202 -482 -325 -26 148 -229 731 -154 801 364 1 954 -664 -214 183 -655 -249 301 -214 289 -371 869 989 621 -188 -80 -7 -540 -83 -61] [-828 -804 -746 -664 -655 -540 -482 -371 -329 -325 -249 -229 -214 -214 -188 -154 -83 -80 -61 -26 -19 -7 1 148 155 183 202 289 301 313 364 406 452 540 541 617 619 621 632 657 679 731 735 788 801 869 954 989]]
Test Case: 1709 | Input/Output: [[802 -270 -533 916 986 811 -189 -188 936 -535 9 815 909 -376 -740 -719 91 -136 -467 335 721 -980 -497 -532 846 756 872 -706 -237 -406 -777 905 -105 -734 -252 982 147 190 -915 634 -802 -731 486] [-980 -915 -802 -777 -740 -734 -731 -719 -706 -535 -533 -532 -497 -467 -406 -376 -270 -252 -237 -189 -188 -136 -105 9 91 147 190 335 486 634 721 756 802 811 815 846 872 905 909 916 936 982 986]]
Test Case: 1710 | Input/Output: [[269] [269]]
Test Case: 1711 | Input/Output: [[-694 561 704 274 -136 -641 -848 1000 669 -648 -284 -756 -20 -49 -469 -532 -489 996 -535 208 -748 958 -684 232 -801 -28 -163 985 -929 -530 383 -167 816 742 -385 -782 -442 -940 -234 405 533 -132] [-940 -929 -848 -801 -782 -756 -748 -694 -684 -648 -641 -535 -532 -530 -489 -469 -442 -385 -284 -234 -167 -163 -136 -132 -49 -28 -20 208 232 274 383 405 533 561 669 704 742 816 958 985 996 1000]]
Test Case: 1712 | Input/Output: [[555 925 -925 72 162 -599 890 399] [-925 -599 72 162 399 555 890 925]]
Test Case: 1713 | Input/Output: [[828 794 -192 -988 -860 654 -408 -1000 -238 -245 -474 826 559 166 608 896 -676 -739 -103 -955] [-1000 -988 -955 -860 -739 -676 -474 -408 -245 -238 -192 -103 166 559 608 654 794 826 828 896]]
Test Case: 1714 | Input/Output: [[979 -463 -827 450 -522 50 -204 834 -648 -381 64 864 756 -47 -720 979 -645 601 -51 -799] [-827 -799 -720 -648 -645 -522 -463 -381 -204 -51 -47 50 64 450 601 756 834 864 979 979]]
Test Case: 1715 | Input/Output: [[-129 -285 -53 701 865 597 -620 -505 -221 24 479 -194 -56 359 944 -622 651 -208 -401 484 -770 -712 125 -579 -885 -175 -302 257 110 -959 -886 306 -513 871 964 371 -35 808 405 -118 268 213 490 753 -439 -862 470 661] [-959 -886 -885 -862 -770 -712 -622 -620 -579 -513 -505 -439 -401 -302 -285 -221 -208 -194 -175 -129 -118 -56 -53 -35 24 110 125 213 257 268 306 359 371 405 470 479 484 490 597 651 661 701 753 808 865 871 944 964]]
Test Case: 1716 | Input/Output: [[145 790 -242 -835 -441 -587 439 -232 706 198 988 554 -649 785 828 -367 -838 605 284 431 839 -407 946 -895 -33 -86 -575 -516 952 72 851 -2 635 701 -596 -848 349 111 -430 -48] [-895 -848 -838 -835 -649 -596 -587 -575 -516 -441 -430 -407 -367 -242 -232 -86 -48 -33 -2 72 111 145 198 284 349 431 439 554 605 635 701 706 785 790 828 839 851 946 952 988]]
Test Case: 1717 | Input/Output: [[-909 -191 -398 353 -753 -630 -167 -633 837 -369 1000 -558] [-909 -753 -633 -630 -558 -398 -369 -191 -167 353 837 1000]]
Test Case: 1718 | Input/Output: [[362 1000 623 -675 722 494 -929 890 128 735 -988 -313 308 -629 -292 38 -369 347 -20 -287 190 366 764 -71 -352 -778 -629 304 799 -530 -526 616 -768 60 -417 -620 -657 -102] [-988 -929 -778 -768 -675 -657 -629 -629 -620 -530 -526 -417 -369 -352 -313 -292 -287 -102 -71 -20 38 60 128 190 304 308 347 362 366 494 616 623 722 735 764 799 890 1000]]
Test Case: 1719 | Input/Output: [[553 -954 486 -105 -692 966 -749 587 -830] [-954 -830 -749 -692 -105 486 553 587 966]]
Test Case: 1720 | Input/Output: [[729 -7 -356 -851 671 -165 -198 504 352] [-851 -356 -198 -165 -7 352 504 671 729]]
Test Case: 1721 | Input/Output: [[-754 761 -133 -785 -146 -998 -656 79 -856 -283 -244 412 844 -762 959 852 636 372 99 -123 874 -164 -581 611 179 -94 901 -931 635 -342 -289 707 288 878 -12 778 -722 -535 82 -379 182 -111 85 -421 318 943 -30] [-998 -931 -856 -785 -762 -754 -722 -656 -581 -535 -421 -379 -342 -289 -283 -244 -164 -146 -133 -123 -111 -94 -30 -12 79 82 85 99 179 182 288 318 372 412 611 635 636 707 761 778 844 852 874 878 901 943 959]]
Test Case: 1722 | Input/Output: [[-552] [-552]]
Test Case: 1723 | Input/Output: [[-864 810 -326 -873 323 162 -870 373 419 145 906 432 519 555 740 843 -850 602] [-873 -870 -864 -850 -326 145 162 323 373 419 432 519 555 602 740 810 843 906]]
Test Case: 1724 | Input/Output: [[-911 515 828 -647 863 23 -221 -696 217 -614 -276 -785 549 768 928 547 -862 188 -302 -441 665 -180 319 -794 -447 -676 -106] [-911 -862 -794 -785 -696 -676 -647 -614 -447 -441 -302 -276 -221 -180 -106 23 188 217 319 515 547 549 665 768 828 863 928]]
Test Case: 1725 | Input/Output: [[821 -243 -226 1000 -147 -927 433 -897 -526 493 -902 -721 -787 906 -945 -282 -889 21 593 287 -405 -816 -480 -240 202 -799 -299 921 27 -713 -345 286 419 661 927] [-945 -927 -902 -897 -889 -816 -799 -787 -721 -713 -526 -480 -405 -345 -299 -282 -243 -240 -226 -147 21 27 202 286 287 419 433 493 593 661 821 906 921 927 1000]]
Test Case: 1726 | Input/Output: [[-403 704 -442 -460 -323 111 -887 -743 698 -292 57 -165 -782 -912 -909 874 -810 -717 -270 -837 -163 74 94 -419 925 -554 -823 965 -293 846 554 -173 631 -432 49 766 810 -847 -751 589 -722 -208 -276 -808 24 355] [-912 -909 -887 -847 -837 -823 -810 -808 -782 -751 -743 -722 -717 -554 -460 -442 -432 -419 -403 -323 -293 -292 -276 -270 -208 -173 -165 -163 24 49 57 74 94 111 355 554 589 631 698 704 766 810 846 874 925 965]]
Test Case: 1727 | Input/Output: [[-422 46 -918 619 -554 111 -304 551 -227 75 -373 452 -173 -318 232 -234 653 429 -918 -850 378 361 -136 810 288 434 64 -933 -446 -199 56 841] [-933 -918 -918 -850 -554 -446 -422 -373 -318 -304 -234 -227 -199 -173 -136 46 56 64 75 111 232 288 361 378 429 434 452 551 619 653 810 841]]
Test Case: 1728 | Input/Output: [[176 -927 671 -845 673 -262 613 986 664 15 -385 -77 61 -25 423 412 131 848 114 658 432 -954 6 535 -133 -718 337 135 -82 -846 -12 -448 -104 -553 269 -329 -138] [-954 -927 -846 -845 -718 -553 -448 -385 -329 -262 -138 -133 -104 -82 -77 -25 -12 6 15 61 114 131 135 176 269 337 412 423 432 535 613 658 664 671 673 848 986]]
Test Case: 1729 | Input/Output: [[-105 -58 -85 -93 807 473 -265 70 -603 -724 -580 -901 93 204 807 157 284 -978 669 901 348 706 -102 -760 201 -316 -880 -498 -554 722] [-978 -901 -880 -760 -724 -603 -580 -554 -498 -316 -265 -105 -102 -93 -85 -58 70 93 157 201 204 284 348 473 669 706 722 807 807 901]]
Test Case: 1730 | Input/Output: [[302 240 150 -787 402 -461 246 -993 606 545 -370 -660 284 700 638 525 430 -308 415 -973 637 456 -790 782 -882 -869 -672 775 696 361 -503 565 308 114 262 284 -991 658 434 -191 -568 -869 -683 397 -549] [-993 -991 -973 -882 -869 -869 -790 -787 -683 -672 -660 -568 -549 -503 -461 -370 -308 -191 114 150 240 246 262 284 284 302 308 361 397 402 415 430 434 456 525 545 565 606 637 638 658 696 700 775 782]]
Test Case: 1731 | Input/Output: [[-388 -551 -701 -603 806 -859 515 -625 381 -167 -967 899 830 -764 -932 -597 -619 568 787 696 234 -438 -763 115 930 704 -115 -922 730 992 780 -540 462 984 -618 -399 -246 -739 146 107 264 -772 331 -977 -662 -24 -583 -699 698] [-977 -967 -932 -922 -859 -772 -764 -763 -739 -701 -699 -662 -625 -619 -618 -603 -597 -583 -551 -540 -438 -399 -388 -246 -167 -115 -24 107 115 146 234 264 331 381 462 515 568 696 698 704 730 780 787 806 830 899 930 984 992]]
Test Case: 1732 | Input/Output: [[-782 -303 -93 -305 914 -764 -588 -3 824 -968 661 -950 972] [-968 -950 -782 -764 -588 -305 -303 -93 -3 661 824 914 972]]
Test Case: 1733 | Input/Output: [[-678 531 18 206 151 496 361 -274 -942 -645 130 147 -682 -807 -576 576 24] [-942 -807 -682 -678 -645 -576 -274 18 24 130 147 151 206 361 496 531 576]]
Test Case: 1734 | Input/Output: [[430 -289 -232] [-289 -232 430]]
Test Case: 1735 | Input/Output: [[-169 -909 603 694 -695 -518 947 460 494 563 889 -935 -664 560 260 542 -836 501 -999] [-999 -935 -909 -836 -695 -664 -518 -169 260 460 494 501 542 560 563 603 694 889 947]]
Test Case: 1736 | Input/Output: [[175 -397 -756 -243 235 -331 -423 810 810 638 96 331 631 -112 243 -346 -722 825 725 -466 -303 -372 -125 408 -539 184 658 -668 954 -274 -670 -487 -505 -575 -97 928 696 483 496 -960 -477 990 -457 611] [-960 -756 -722 -670 -668 -575 -539 -505 -487 -477 -466 -457 -423 -397 -372 -346 -331 -303 -274 -243 -125 -112 -97 96 175 184 235 243 331 408 483 496 611 631 638 658 696 725 810 810 825 928 954 990]]
Test Case: 1737 | Input/Output: [[-485 -166 -615 605 -227 -797 143 -577 109 66 73 709 701 -225 129 375 -911 48 900 152 -155 -57 702 -449 758 -57 -188 811 793 80 161 -251 300 -191 524 -539 635 -914 837 -107 812 -581 495 524 -660 -749 988 -362 -126 -737] [-914 -911 -797 -749 -737 -660 -615 -581 -577 -539 -485 -449 -362 -251 -227 -225 -191 -188 -166 -155 -126 -107 -57 -57 48 66 73 80 109 129 143 152 161 300 375 495 524 524 605 635 701 702 709 758 793 811 812 837 900 988]]
Test Case: 1738 | Input/Output: [[-888 -407 499 -229 -425 -835 248 -638 -429 48 109 -328 795 -984 -357 969 -676 151 829 -848 324 -546 -34 669 -126 -984 396 981 279 -982 222 156 -301 261 402 -878 -639] [-984 -984 -982 -888 -878 -848 -835 -676 -639 -638 -546 -429 -425 -407 -357 -328 -301 -229 -126 -34 48 109 151 156 222 248 261 279 324 396 402 499 669 795 829 969 981]]
Test Case: 1739 | Input/Output: [[-312 957 -607 -183 -499 101 -40 -314 990 -994 -396 961 -592 115 204 411 681 377 -332 -577 -466 -773 -984 -244 -272] [-994 -984 -773 -607 -592 -577 -499 -466 -396 -332 -314 -312 -272 -244 -183 -40 101 115 204 377 411 681 957 961 990]]
Test Case: 1740 | Input/Output: [[788 -475 306 89 978 450 -51 -533 395 -866 -487 290 -492 -245 45 -112 12 273 482 -26 565 -524 159 914 -486 -39 835 -292 568 -78 470 -433 -170 607 -405 853 232] [-866 -533 -524 -492 -487 -486 -475 -433 -405 -292 -245 -170 -112 -78 -51 -39 -26 12 45 89 159 232 273 290 306 395 450 470 482 565 568 607 788 835 853 914 978]]
Test Case: 1741 | Input/Output: [[-448 -265] [-448 -265]]
Test Case: 1742 | Input/Output: [[310 583 -679 -729 -735 -519 884 507 -764 -638 -984 -574 868 427 -518 393 337 -449 208 449 -460 -274 -364 -41 -921 -596 -249 -116 398 -327 825 483 572 -902 -294 -366 198 -618 575 862 -191 275 -490 -704 -112 414 -664 -53 491 -413] [-984 -921 -902 -764 -735 -729 -704 -679 -664 -638 -618 -596 -574 -519 -518 -490 -460 -449 -413 -366 -364 -327 -294 -274 -249 -191 -116 -112 -53 -41 198 208 275 310 337 393 398 414 427 449 483 491 507 572 575 583 825 862 868 884]]
Test Case: 1743 | Input/Output: [[436 664 -979 767 119 -183 759 840 371 -126 -41 -955 -87 -350 -642 72 360 119 -246 -123 -334 -262 258 -249 827 -185 213 -135 -970 487 265 921 -816 423] [-979 -970 -955 -816 -642 -350 -334 -262 -249 -246 -185 -183 -135 -126 -123 -87 -41 72 119 119 213 258 265 360 371 423 436 487 664 759 767 827 840 921]]
Test Case: 1744 | Input/Output: [[267 444 16 -328 -132 -478 115 -210 -183 827 -816 -382 606 445 325 -952 -474 -926 935 -531 -760 -330 -641 -228 511 -558 -889 118 760 -502 -814 474 259 14 57 711 787 998 225 -366 -754 -838 864 574 -5 1000 -257] [-952 -926 -889 -838 -816 -814 -760 -754 -641 -558 -531 -502 -478 -474 -382 -366 -330 -328 -257 -228 -210 -183 -132 -5 14 16 57 115 118 225 259 267 325 444 445 474 511 574 606 711 760 787 827 864 935 998 1000]]
Test Case: 1745 | Input/Output: [[406 612 -929 -410 691 -803 950 629 449 518 -269 890 -507 -173 -123 876 -714 -788 92 -80 -972 695 -433 -637 791 -279 854 873 -694 -36 -61 -902 781 451 503 -880 603 359 -339 795 924 -828 673 -756 -427 -215 338 -146] [-972 -929 -902 -880 -828 -803 -788 -756 -714 -694 -637 -507 -433 -427 -410 -339 -279 -269 -215 -173 -146 -123 -80 -61 -36 92 338 359 406 449 451 503 518 603 612 629 673 691 695 781 791 795 854 873 876 890 924 950]]
Test Case: 1746 | Input/Output: [[825 -796 420 -440 -844 -884 -693 -381 -816 845 -652 331 99 332 -410 -535 -969 278 936 -528 -632 481] [-969 -884 -844 -816 -796 -693 -652 -632 -535 -528 -440 -410 -381 99 278 331 332 420 481 825 845 936]]
Test Case: 1747 | Input/Output: [[-117 377 -198 -240 888] [-240 -198 -117 377 888]]
Test Case: 1748 | Input/Output: [[-643] [-643]]
Test Case: 1749 | Input/Output: [[-79 -508 -628 284 518 -149 967 -216 -386 -228 519 272 31 575 418 -709 297 -260 661 966 -161 -617 -399 275 -465 -872 -591 174 -49 454 712 -486 -917 20 -968 941 -755 438 -623 -752] [-968 -917 -872 -755 -752 -709 -628 -623 -617 -591 -508 -486 -465 -399 -386 -260 -228 -216 -161 -149 -79 -49 20 31 174 272 275 284 297 418 438 454 518 519 575 661 712 941 966 967]]
Test Case: 1750 | Input/Output: [[-116 861 -766 811 448 -458 774 -358 130 -68 124 34 -99 -358 -686 605 -160 -700 -2 479 43 -639 -642 935 856 764 427 -555 -469 -989 557 -983 -843 -324 -838 800 -18 348 568 662 51 -889 66] [-989 -983 -889 -843 -838 -766 -700 -686 -642 -639 -555 -469 -458 -358 -358 -324 -160 -116 -99 -68 -18 -2 34 43 51 66 124 130 348 427 448 479 557 568 605 662 764 774 800 811 856 861 935]]
Test Case: 1751 | Input/Output: [[823 -139 544 -185 407 -257 -399 364 -631 -842 -636 -908 355 594 219 132 962 537 954 269 -719 980 -684 701 234 469 -772 -674 -383 871 -647 -249 -805 -920 77 -652 -188 -368 886 -914 460 631 -792 968 812 454 899 736 126] [-920 -914 -908 -842 -805 -792 -772 -719 -684 -674 -652 -647 -636 -631 -399 -383 -368 -257 -249 -188 -185 -139 77 126 132 219 234 269 355 364 407 454 460 469 537 544 594 631 701 736 812 823 871 886 899 954 962 968 980]]
Test Case: 1752 | Input/Output: [[-840 -314 465 956 813 414 253 -38 798 323 215 807 39 -430 -772 -224 -62 -478 -869 703 -95 -321 -685 -43 578 -158 -973 52 -351 915 -181 -501 -840 943 199 -907 -443] [-973 -907 -869 -840 -840 -772 -685 -501 -478 -443 -430 -351 -321 -314 -224 -181 -158 -95 -62 -43 -38 39 52 199 215 253 323 414 465 578 703 798 807 813 915 943 956]]
Test Case: 1753 | Input/Output: [[987 -143 512 -54 -598 -345 272 -147 -739 -413 -69 246 693 -772 25 -564 54 -99 538 271 -72 -599 952 241 -744 -452 269 490 747 3 917] [-772 -744 -739 -599 -598 -564 -452 -413 -345 -147 -143 -99 -72 -69 -54 3 25 54 241 246 269 271 272 490 512 538 693 747 917 952 987]]
Test Case: 1754 | Input/Output: [[-960 282 -576 -582 -825 869 514 372 574 275 736 -647 -845 993 105 -208 699 -684 -168 493 -525 -552 831 -137 -969 926 143] [-969 -960 -845 -825 -684 -647 -582 -576 -552 -525 -208 -168 -137 105 143 275 282 372 493 514 574 699 736 831 869 926 993]]
Test Case: 1755 | Input/Output: [[761 401 -480 -467 -385 -482 -977 29 8 -990 -954 472 486 694 -224 88 -69 11 998 775 -767 559 541] [-990 -977 -954 -767 -482 -480 -467 -385 -224 -69 8 11 29 88 401 472 486 541 559 694 761 775 998]]
Test Case: 1756 | Input/Output: [[225 -946 730 -884 -751 -788] [-946 -884 -788 -751 225 730]]
Test Case: 1757 | Input/Output: [[498 890 188 817 -785 -818 660 -178 91 777 313 233] [-818 -785 -178 91 188 233 313 498 660 777 817 890]]
Test Case: 1758 | Input/Output: [[-634 -839 496 378 -964 401 -631 -561 -920 131 127 -60 -903 59 670] [-964 -920 -903 -839 -634 -631 -561 -60 59 127 131 378 401 496 670]]
Test Case: 1759 | Input/Output: [[-574 982 -40 -665 21 -622 302 -565 -452 -709 895 258 155 325 994] [-709 -665 -622 -574 -565 -452 -40 21 155 258 302 325 895 982 994]]
Test Case: 1760 | Input/Output: [[426 673 -515] [-515 426 673]]
Test Case: 1761 | Input/Output: [[-79 -832 -509 -518 987 -940 925 265 -137] [-940 -832 -518 -509 -137 -79 265 925 987]]
Test Case: 1762 | Input/Output: [[141 -902 -766 560 -78 896 949 -489 884 752 -187 860 841 -711 623 559 375 941 -813 -612 956 741 224 248 -161 -596 23 300 -33 825 -736 754 -946 150 87 126 -703 -573 -779 218 690 557 -199] [-946 -902 -813 -779 -766 -736 -711 -703 -612 -596 -573 -489 -199 -187 -161 -78 -33 23 87 126 141 150 218 224 248 300 375 557 559 560 623 690 741 752 754 825 841 860 884 896 941 949 956]]
Test Case: 1763 | Input/Output: [[-265 -75 -95 -447 -40 -601 780 -351 889 -84 -746 446 526 -881 -326 -541 130 672 298 997 371] [-881 -746 -601 -541 -447 -351 -326 -265 -95 -84 -75 -40 130 298 371 446 526 672 780 889 997]]
Test Case: 1764 | Input/Output: [[689 88 -365 311 313 -877 555 -672 753 209 819 -106 -892 217 367] [-892 -877 -672 -365 -106 88 209 217 311 313 367 555 689 753 819]]
Test Case: 1765 | Input/Output: [[904 -430 -227 122 -813 310 417 185 -856 -467 -34 -709 710 -786 710 -606 -649 -398 -315 894 797] [-856 -813 -786 -709 -649 -606 -467 -430 -398 -315 -227 -34 122 185 310 417 710 710 797 894 904]]
Test Case: 1766 | Input/Output: [[656 -75 -264 887 -131 -552 619 -904 869 -439 39 -887 120 -520 -44 -279 -984 787 533 376 187 -240 -499 -899 160 857 432 316 -735 -305 322 756 219 -267 672 827 -823 146 246 953 -858 -59 -963 -6 300 -407 -413 -292] [-984 -963 -904 -899 -887 -858 -823 -735 -552 -520 -499 -439 -413 -407 -305 -292 -279 -267 -264 -240 -131 -75 -59 -44 -6 39 120 146 160 187 219 246 300 316 322 376 432 533 619 656 672 756 787 827 857 869 887 953]]
Test Case: 1767 | Input/Output: [[591 -185 16 -620 176 -452 457 362 352 244 -395 840 647 -600 442 383 -488 27 84 -753 874 761] [-753 -620 -600 -488 -452 -395 -185 16 27 84 176 244 352 362 383 442 457 591 647 761 840 874]]
Test Case: 1768 | Input/Output: [[-849 -548 455 -728 952 -395 -348 -670 144 -154 -646 -941 -959 -774 -98 -390 912 -683] [-959 -941 -849 -774 -728 -683 -670 -646 -548 -395 -390 -348 -154 -98 144 455 912 952]]
Test Case: 1769 | Input/Output: [[92 939 -178 -872 690 211 -364 -583 974 68 -747 49 235 -705 283 643 -684 -536 315 -921 518 -799 -704 -559 798 -423 964 833 607 -870 934 -99 713 322 566 -664 207 675 -108 -641 -171 805 -594 812 -330] [-921 -872 -870 -799 -747 -705 -704 -684 -664 -641 -594 -583 -559 -536 -423 -364 -330 -178 -171 -108 -99 49 68 92 207 211 235 283 315 322 518 566 607 643 675 690 713 798 805 812 833 934 939 964 974]]
Test Case: 1770 | Input/Output: [[-183 427 397 987 -470 71 826 363 -438 593 291 882 -807 -648 -381 844 300 138 531 -195 -497 885 -957 929 -933 8 -788 233 -478 -312 786 -913 -32 -503 602 50 -516 -29 997 361 -760 34 450 687 883 -250 199] [-957 -933 -913 -807 -788 -760 -648 -516 -503 -497 -478 -470 -438 -381 -312 -250 -195 -183 -32 -29 8 34 50 71 138 199 233 291 300 361 363 397 427 450 531 593 602 687 786 826 844 882 883 885 929 987 997]]
Test Case: 1771 | Input/Output: [[-482 -2 946 -437 562 -488 540 -644 290 48 622 -13 48 855 -350 -133 555 -290 882 -227 -471 30 776 860 756 978 -645 444 -185 578 925 -586 118 -234 -795 175 75 -910 -50 634] [-910 -795 -645 -644 -586 -488 -482 -471 -437 -350 -290 -234 -227 -185 -133 -50 -13 -2 30 48 48 75 118 175 290 444 540 555 562 578 622 634 756 776 855 860 882 925 946 978]]
Test Case: 1772 | Input/Output: [[-915 -368 -922 -506 -161 -28 196 -746 -25 -969 518 279 932 -577 64 -605 394 -961 -173 -42 -733 861] [-969 -961 -922 -915 -746 -733 -605 -577 -506 -368 -173 -161 -42 -28 -25 64 196 279 394 518 861 932]]
Test Case: 1773 | Input/Output: [[885 540 -230 -564 705 -806 246 -66 486 84 -629 -921 341 967 346 439 -799 540 857 797 -313 978 34 496 -168 -483 -553 -151 -600 555 686 -57 949 -644 824 -790 -136 313 -21 -162 341 -163 -250 -286 898 295 396 82] [-921 -806 -799 -790 -644 -629 -600 -564 -553 -483 -313 -286 -250 -230 -168 -163 -162 -151 -136 -66 -57 -21 34 82 84 246 295 313 341 341 346 396 439 486 496 540 540 555 686 705 797 824 857 885 898 949 967 978]]
Test Case: 1774 | Input/Output: [[769 -435 -610 853] [-610 -435 769 853]]
Test Case: 1775 | Input/Output: [[-194 -64 378 -174 -754 997 -367 574 -193 -195 -424 -65 -200 400 796 136 659 819 -368 -321 -351 39 584 120 489] [-754 -424 -368 -367 -351 -321 -200 -195 -194 -193 -174 -65 -64 39 120 136 378 400 489 574 584 659 796 819 997]]
Test Case: 1776 | Input/Output: [[630 805 -919 -683 825 77 -974 347 495 -488 551 594 821 250 -785 204 691 743 217 -600 79 -605 -351 811 381 -261 489 293 -139 -54 -93 644 240 411 -574] [-974 -919 -785 -683 -605 -600 -574 -488 -351 -261 -139 -93 -54 77 79 204 217 240 250 293 347 381 411 489 495 551 594 630 644 691 743 805 811 821 825]]
Test Case: 1777 | Input/Output: [[-553 -175 167 444 -391 -965 873 874 333 -867 366 -396 -892 356 371 361 -595 951 796 190 395 -751 883 -693 -666 -106 -829 -95 -431 387 -284 -480 -644 -293 795 386 -755 -559 -189 670 -516 -934] [-965 -934 -892 -867 -829 -755 -751 -693 -666 -644 -595 -559 -553 -516 -480 -431 -396 -391 -293 -284 -189 -175 -106 -95 167 190 333 356 361 366 371 386 387 395 444 670 795 796 873 874 883 951]]
Test Case: 1778 | Input/Output: [[134 648 607 -764 630 438 98] [-764 98 134 438 607 630 648]]
Test Case: 1779 | Input/Output: [[-793 -357 964 -378 748 -165 250 705 -982 710 -156 -38 73 794 308 75 988 90 -862 -798 788 178 223 -259 87 150 -884 -631 -315 -90 -804 144 583 -99 328 487 -84 -392 234 -202 427 -349 295 64 1000] [-982 -884 -862 -804 -798 -793 -631 -392 -378 -357 -349 -315 -259 -202 -165 -156 -99 -90 -84 -38 64 73 75 87 90 144 150 178 223 234 250 295 308 328 427 487 583 705 710 748 788 794 964 988 1000]]
Test Case: 1780 | Input/Output: [[103 -671 407 -378 -800 -154 -457 741 19 826 952 -857 332 -931 -591 -349 -947 413 965 274 613 427 -540 -803 20 340 -142 698 -693 -233 769 -635 -671 -112 -536 838 -610 -605 -862 -76] [-947 -931 -862 -857 -803 -800 -693 -671 -671 -635 -610 -605 -591 -540 -536 -457 -378 -349 -233 -154 -142 -112 -76 19 20 103 274 332 340 407 413 427 613 698 741 769 826 838 952 965]]
Test Case: 1781 | Input/Output: [[-843 31 589 779 891 -825 304 179 128 -879 765 159 -708 787 -909 -183 714 382 -247 657 -479 -615 76 571 -726 330 -237 43 630] [-909 -879 -843 -825 -726 -708 -615 -479 -247 -237 -183 31 43 76 128 159 179 304 330 382 571 589 630 657 714 765 779 787 891]]
Test Case: 1782 | Input/Output: [[-324 -872 -596 -149 -534 750 383 443 977 -302 -85 -170 -852 129 423 727 272 219 -788 -514 551 415 211 57 22 -771 910 330 -291 231 -432 934 231 422 -38 -547 -785 -371] [-872 -852 -788 -785 -771 -596 -547 -534 -514 -432 -371 -324 -302 -291 -170 -149 -85 -38 22 57 129 211 219 231 231 272 330 383 415 422 423 443 551 727 750 910 934 977]]
Test Case: 1783 | Input/Output: [[-611 794] [-611 794]]
Test Case: 1784 | Input/Output: [[-187 -155 705 -379 922 -581 22 543 -7 -450 98 600 577 -365 -536 -949 -973 -231 165 204 16] [-973 -949 -581 -536 -450 -379 -365 -231 -187 -155 -7 16 22 98 165 204 543 577 600 705 922]]
Test Case: 1785 | Input/Output: [[-78] [-78]]
Test Case: 1786 | Input/Output: [[693 -48 -627 -520 -14 892 425 -223 397 -456 280 -400 -592 -756 -834 -897 834 -484] [-897 -834 -756 -627 -592 -520 -484 -456 -400 -223 -48 -14 280 397 425 693 834 892]]
Test Case: 1787 | Input/Output: [[-208 811 156 -618 -14 617 640 -744 -939 179 -137 603 28 888 916 38 995 -6 -714 -922 428 -201 741 -791 -252 246 42 149 566 213 -994 -873 -240 360 -283 -589] [-994 -939 -922 -873 -791 -744 -714 -618 -589 -283 -252 -240 -208 -201 -137 -14 -6 28 38 42 149 156 179 213 246 360 428 566 603 617 640 741 811 888 916 995]]
Test Case: 1788 | Input/Output: [[-475 -606 878 -817 -811 -790 791 -497 -926 633 381 -738 -176 -842 -269 427 -278 125 -838 429 -345 -332 530 73 -27 977 -799 711 589 35 464 -376 -836 -478 -870 906] [-926 -870 -842 -838 -836 -817 -811 -799 -790 -738 -606 -497 -478 -475 -376 -345 -332 -278 -269 -176 -27 35 73 125 381 427 429 464 530 589 633 711 791 878 906 977]]
Test Case: 1789 | Input/Output: [[-360 658 863 -620 -651 -804 -600 -917 -480 -559 -135 139 -682 89 991 -277 -275 937 -897 -232 -686 517 870 -715 -476 441 307 -271 -515 -773 981 435 153 167 -566 286 275 301 -62 -452 420 -969] [-969 -917 -897 -804 -773 -715 -686 -682 -651 -620 -600 -566 -559 -515 -480 -476 -452 -360 -277 -275 -271 -232 -135 -62 89 139 153 167 275 286 301 307 420 435 441 517 658 863 870 937 981 991]]
Test Case: 1790 | Input/Output: [[662 -139 576 771 -529 -537 -443 -777 52 -102 638 299 957 -650 748 0 -117 550 -962 -309 402 -913 -668 -447 -471 -521 840 615 490 25 252 -444 501 -538 811 -366 183 173 445 262 -154 -624 -630 -666 -458 256 -446 846 -733] [-962 -913 -777 -733 -668 -666 -650 -630 -624 -538 -537 -529 -521 -471 -458 -447 -446 -444 -443 -366 -309 -154 -139 -117 -102 0 25 52 173 183 252 256 262 299 402 445 490 501 550 576 615 638 662 748 771 811 840 846 957]]
Test Case: 1791 | Input/Output: [[-276 -835 -140 257 -81 621 -203 -634] [-835 -634 -276 -203 -140 -81 257 621]]
Test Case: 1792 | Input/Output: [[-776] [-776]]
Test Case: 1793 | Input/Output: [[-292 835 -190 -445 621 -984 -575 559 845 -437 -505 127 -520 708 -569 -147 812 960 -733 52 470 589 594 -834 -372 -927 -177 -58 942 37 -226 593 877 -270 123 885 -223 231 290 -449 -603] [-984 -927 -834 -733 -603 -575 -569 -520 -505 -449 -445 -437 -372 -292 -270 -226 -223 -190 -177 -147 -58 37 52 123 127 231 290 470 559 589 593 594 621 708 812 835 845 877 885 942 960]]
Test Case: 1794 | Input/Output: [[340] [340]]
Test Case: 1795 | Input/Output: [[570 -99 259 537 623 756 -327 954 537 -275 489 -524 892 -475 169 -235 170 842 400 -315 441 394 384 752 249 -185 -582 -189 -851 -934 -273 -964 407] [-964 -934 -851 -582 -524 -475 -327 -315 -275 -273 -235 -189 -185 -99 169 170 249 259 384 394 400 407 441 489 537 537 570 623 752 756 842 892 954]]
Test Case: 1796 | Input/Output: [[-673 194 207 -61 206 31 84 730 -750 -984 6 980 -833 -238 -697 451 109 -693 -582 928 -762 -334 -675 581 964 251 786 778 662 -939 382 -887 -360 -541 -843 -536 -898 -437 -424 -861 -246 -384 858 -854 493 -844 703 -238 -279 -212] [-984 -939 -898 -887 -861 -854 -844 -843 -833 -762 -750 -697 -693 -675 -673 -582 -541 -536 -437 -424 -384 -360 -334 -279 -246 -238 -238 -212 -61 6 31 84 109 194 206 207 251 382 451 493 581 662 703 730 778 786 858 928 964 980]]
Test Case: 1797 | Input/Output: [[-581 404 -233 747 125 -811 -610 132 -429 -796 600 -580 101 -610] [-811 -796 -610 -610 -581 -580 -429 -233 101 125 132 404 600 747]]
Test Case: 1798 | Input/Output: [[542 84 574 21 -766 766 930 -535 88 -372 778 -622 721 860 928 0 -146 905 30 572 -329 487 -358 -225 -984 476 -826 753] [-984 -826 -766 -622 -535 -372 -358 -329 -225 -146 0 21 30 84 88 476 487 542 572 574 721 753 766 778 860 905 928 930]]
Test Case: 1799 | Input/Output: [[887 883 -454 99 531] [-454 99 531 883 887]]
Test Case: 1800 | Input/Output: [[-51 341 378 -147 -557 -967 -124 -728 636 -271 -285 -450 680] [-967 -728 -557 -450 -285 -271 -147 -124 -51 341 378 636 680]]
Test Case: 1801 | Input/Output: [[-519 84 -390 -239 471 334 581 -524 121 -828 862 -420 841 -760 -811 770 -542 603 -709 -671 -573 412 743 861 -825 -388 -550 32 -450 -834 627 -742 991 -950 -441 51] [-950 -834 -828 -825 -811 -760 -742 -709 -671 -573 -550 -542 -524 -519 -450 -441 -420 -390 -388 -239 32 51 84 121 334 412 471 581 603 627 743 770 841 861 862 991]]
Test Case: 1802 | Input/Output: [[-658 -818 824 -852 -260 378 403 350 -170 626 716 445 547 -471 323 970 -780 577 570 -595 657 -673 43 655 -134 -614 327 -812 -837 423 590 -828 -65 821 377 5 85 781 -962 -464 339 212 126 -251] [-962 -852 -837 -828 -818 -812 -780 -673 -658 -614 -595 -471 -464 -260 -251 -170 -134 -65 5 43 85 126 212 323 327 339 350 377 378 403 423 445 547 570 577 590 626 655 657 716 781 821 824 970]]
Test Case: 1803 | Input/Output: [[348 584 298 -243 -996 345 -577 -674 776 948 577 142 130 -173 -893 -147 183 615 -170 -203 413 -696 -972 -241 -145 -432 107 -44 813 245 -409 -668] [-996 -972 -893 -696 -674 -668 -577 -432 -409 -243 -241 -203 -173 -170 -147 -145 -44 107 130 142 183 245 298 345 348 413 577 584 615 776 813 948]]
Test Case: 1804 | Input/Output: [[446 -224 -414 490 -864 -435 55 -518 -948 217 -355 -298 -421 630 -350 -525 287 197 579 602 524 141 570 360 -963 -632 -308 -555 941 -605 -124 171 443 328] [-963 -948 -864 -632 -605 -555 -525 -518 -435 -421 -414 -355 -350 -308 -298 -224 -124 55 141 171 197 217 287 328 360 443 446 490 524 570 579 602 630 941]]
Test Case: 1805 | Input/Output: [[-684 257 -620 -299 39 435 736 -220 121 10 945 425 808 -617 -617 642 721 -716 746 -603 682 -866 70 -512 878 85 405 260 801 224 -476 339 -300 279 -334 361 -538 777 -633 -198 -993 772 -103 623] [-993 -866 -716 -684 -633 -620 -617 -617 -603 -538 -512 -476 -334 -300 -299 -220 -198 -103 10 39 70 85 121 224 257 260 279 339 361 405 425 435 623 642 682 721 736 746 772 777 801 808 878 945]]
Test Case: 1806 | Input/Output: [[-335 -80 -371 -29 -923 48 -734 902 253 -605 -728 119 698 88 -443 -434 661 -999] [-999 -923 -734 -728 -605 -443 -434 -371 -335 -80 -29 48 88 119 253 661 698 902]]
Test Case: 1807 | Input/Output: [[646] [646]]
Test Case: 1808 | Input/Output: [[533 -861 -823 128 681 308 941 -371 773 -782 500 545 917 938 202 206 -474 677 -456 -411 -252 306 666] [-861 -823 -782 -474 -456 -411 -371 -252 128 202 206 306 308 500 533 545 666 677 681 773 917 938 941]]
Test Case: 1809 | Input/Output: [[226 -582 -744 155 807 -906 -905 427 -276 -888 -454 257 110 -39 483 921 406 -897 329 985 -818 -505 549 401 550 951 87 786 -453 10 -457 738] [-906 -905 -897 -888 -818 -744 -582 -505 -457 -454 -453 -276 -39 10 87 110 155 226 257 329 401 406 427 483 549 550 738 786 807 921 951 985]]
Test Case: 1810 | Input/Output: [[461 786 103 -161 652 360 -761 57 -391 -246 -14 -276 632 707 -304 727 483 314 -3] [-761 -391 -304 -276 -246 -161 -14 -3 57 103 314 360 461 483 632 652 707 727 786]]
Test Case: 1811 | Input/Output: [[798 716 -727 135 405 567 -679 504 888 -456 -465] [-727 -679 -465 -456 135 405 504 567 716 798 888]]
Test Case: 1812 | Input/Output: [[-388 -996 260 -892 -272 20 -872 199 539 -219 -31 -810 -333 -500 878 -18 231 -390 -548 -897 267 851 879 -585 798 -537 285 -383 616 271 439 -763 686 -144 -654 259 -404 322 100 -913] [-996 -913 -897 -892 -872 -810 -763 -654 -585 -548 -537 -500 -404 -390 -388 -383 -333 -272 -219 -144 -31 -18 20 100 199 231 259 260 267 271 285 322 439 539 616 686 798 851 878 879]]
Test Case: 1813 | Input/Output: [[693 -122 156 453 874 -732 561 133 718 -734 -204 813 -72 -529 476 181 397 848] [-734 -732 -529 -204 -122 -72 133 156 181 397 453 476 561 693 718 813 848 874]]
Test Case: 1814 | Input/Output: [[-249 58 773 -465 264 -866 745 -602 958 324 950] [-866 -602 -465 -249 58 264 324 745 773 950 958]]
Test Case: 1815 | Input/Output: [[430 383 -26 222 -999 235 69 902 373 958 -392 -356 94 -436 589 -753 557 -16 -855 -961 -278 -77 -543 -236] [-999 -961 -855 -753 -543 -436 -392 -356 -278 -236 -77 -26 -16 69 94 222 235 373 383 430 557 589 902 958]]
Test Case: 1816 | Input/Output: [[254 -882 334 306 243 612 708 439 -393 -372 -979 847 -476 -195 682 610 958 188 -551 -123 104 -35 -741 669 885 65 -801 -511 -266] [-979 -882 -801 -741 -551 -511 -476 -393 -372 -266 -195 -123 -35 65 104 188 243 254 306 334 439 610 612 669 682 708 847 885 958]]
Test Case: 1817 | Input/Output: [[-983 -296 472 534 -353 -132 -542 -205 294 -615 257 -636 360 8 583 969 920 469 -285 586 -288] [-983 -636 -615 -542 -353 -296 -288 -285 -205 -132 8 257 294 360 469 472 534 583 586 920 969]]
Test Case: 1818 | Input/Output: [[-63 -56 949 675 367 190 -603 -643 8 581 -977 850 248 113 -444 -654 -203 280 367 -909] [-977 -909 -654 -643 -603 -444 -203 -63 -56 8 113 190 248 280 367 367 581 675 850 949]]
Test Case: 1819 | Input/Output: [[-719 251 630 696 11 125 -703 -775 -138 314 185 396 358 562 418 42 852 -266 -770 -968 -657 76 427 -173 165 -704 917 -438 -179 -722 -427 -41 -642 101 189 -885 573] [-968 -885 -775 -770 -722 -719 -704 -703 -657 -642 -438 -427 -266 -179 -173 -138 -41 11 42 76 101 125 165 185 189 251 314 358 396 418 427 562 573 630 696 852 917]]
Test Case: 1820 | Input/Output: [[-147 737 494 407 -761] [-761 -147 407 494 737]]
Test Case: 1821 | Input/Output: [[877 -405 797 536 -34 -908 -470 525 185 210 212 -305 -128 598 692 1000 258 73 -693 510 462 -423 925 -69] [-908 -693 -470 -423 -405 -305 -128 -69 -34 73 185 210 212 258 462 510 525 536 598 692 797 877 925 1000]]
Test Case: 1822 | Input/Output: [[-423 843 512 609 -175 22 741 -355 -152 960 -521 197 -393 447 -98 299 -70 -313 174 -634] [-634 -521 -423 -393 -355 -313 -175 -152 -98 -70 22 174 197 299 447 512 609 741 843 960]]
Test Case: 1823 | Input/Output: [[-753 397 702 686 -65 -853 -781 329 162 460 -318 -148 47 63 590 -236 322 -344 739 -468 -645 -951 769 139 98 -25 -960 -669 401 -360 -713 -306 105 -161 -637 96 -855 -648 945 975 -716 866 -127 -390 169 -972 3 -854 -117] [-972 -960 -951 -855 -854 -853 -781 -753 -716 -713 -669 -648 -645 -637 -468 -390 -360 -344 -318 -306 -236 -161 -148 -127 -117 -65 -25 3 47 63 96 98 105 139 162 169 322 329 397 401 460 590 686 702 739 769 866 945 975]]
Test Case: 1824 | Input/Output: [[830 -650 -577 -189 802 125 653 -343 364 868 -220 -57 38 -252 745 -41 755 860 566 -598 559 -67 354 639 -49 826 384 -228 -503 131 518] [-650 -598 -577 -503 -343 -252 -228 -220 -189 -67 -57 -49 -41 38 125 131 354 364 384 518 559 566 639 653 745 755 802 826 830 860 868]]
Test Case: 1825 | Input/Output: [[324 410 -189 -529 -769] [-769 -529 -189 324 410]]
Test Case: 1826 | Input/Output: [[-744 -294 759 -805 -270 564 -875 202 776 411 880 -153 -438 566 -351 475 -97 -458 -772 546 475 -431 658 214 87 -971 -52 -543 986 -891 59] [-971 -891 -875 -805 -772 -744 -543 -458 -438 -431 -351 -294 -270 -153 -97 -52 59 87 202 214 411 475 475 546 564 566 658 759 776 880 986]]
Test Case: 1827 | Input/Output: [[-293 278] [-293 278]]
Test Case: 1828 | Input/Output: [[424 709 -262 -917 378 -912 265 -1 933 266 686 41 117 -594 -292 -922 231 -776 286 -84 339 -416 659 687] [-922 -917 -912 -776 -594 -416 -292 -262 -84 -1 41 117 231 265 266 286 339 378 424 659 686 687 709 933]]
Test Case: 1829 | Input/Output: [[453 -567 760 945 -975 -33 -965 436 -1 665 -681 -340 413 -931 301 -423 -213 569 -984 578 -464 134 545 42 998 -33 575 399 -734 719 -709 -1000 -564] [-1000 -984 -975 -965 -931 -734 -709 -681 -567 -564 -464 -423 -340 -213 -33 -33 -1 42 134 301 399 413 436 453 545 569 575 578 665 719 760 945 998]]
Test Case: 1830 | Input/Output: [[85 294 755 822 -59 32 -285 684 -971 454] [-971 -285 -59 32 85 294 454 684 755 822]]
Test Case: 1831 | Input/Output: [[-628 -778 -808 279 -38 200 970 996 894 379 -805 930 378 -154 945] [-808 -805 -778 -628 -154 -38 200 279 378 379 894 930 945 970 996]]
Test Case: 1832 | Input/Output: [[191 -896 -739 29 -425 852 261 -636 799 -5 311 -657 757 -653 949 276 739 977 381 -350 637 712 -672 -203 521 225 -357 199 -482 -928 295 665 -609 788 6 -795 967 588 -451] [-928 -896 -795 -739 -672 -657 -653 -636 -609 -482 -451 -425 -357 -350 -203 -5 6 29 191 199 225 261 276 295 311 381 521 588 637 665 712 739 757 788 799 852 949 967 977]]
Test Case: 1833 | Input/Output: [[860 257 -677 -210 -416 -624 899 -454 -752 -542 672 -123 906 915 -519 -603 572 -521 -165 456 485 676 55 -477 -132 773 -809] [-809 -752 -677 -624 -603 -542 -521 -519 -477 -454 -416 -210 -165 -132 -123 55 257 456 485 572 672 676 773 860 899 906 915]]
Test Case: 1834 | Input/Output: [[599 785 -867 -880 948 -153 858 781 -234 635 687 -733 -518 469 -295 -608 440 647 308 -542 -249 -716 401 666 895 702 148 183 40 261 125 182 589 -424 432] [-880 -867 -733 -716 -608 -542 -518 -424 -295 -249 -234 -153 40 125 148 182 183 261 308 401 432 440 469 589 599 635 647 666 687 702 781 785 858 895 948]]
Test Case: 1835 | Input/Output: [[-114 -88 -147 -288 225 487 642 47 403 960 -851 -15 -487 -425 -257 -538 -285 584 208 -955 -109 177 270 -828 291 799 -714 635 465 -988 -257 -787 343 -932 496 -493 120 221 456 -614] [-988 -955 -932 -851 -828 -787 -714 -614 -538 -493 -487 -425 -288 -285 -257 -257 -147 -114 -109 -88 -15 47 120 177 208 221 225 270 291 343 403 456 465 487 496 584 635 642 799 960]]
Test Case: 1836 | Input/Output: [[492 222 -184 53 651 94 -546 706 467] [-546 -184 53 94 222 467 492 651 706]]
Test Case: 1837 | Input/Output: [[138 -944 757 469 774 -914 107 -525 214 71 -289 -554 466 346 969 860 847 -263 227 -698 724 -527 -914 532 -882 624 -728 -909 50 725 811 -1000 30 67 792 -693 896 -905 -481 946 -494 -566 360 923 -226] [-1000 -944 -914 -914 -909 -905 -882 -728 -698 -693 -566 -554 -527 -525 -494 -481 -289 -263 -226 30 50 67 71 107 138 214 227 346 360 466 469 532 624 724 725 757 774 792 811 847 860 896 923 946 969]]
Test Case: 1838 | Input/Output: [[-694 355 130 -807 -613 18 975 800 -571 152 108 -816 180 -936 48 89 251 -766 995 164 706 -349 -658 -549 -542] [-936 -816 -807 -766 -694 -658 -613 -571 -549 -542 -349 18 48 89 108 130 152 164 180 251 355 706 800 975 995]]
Test Case: 1839 | Input/Output: [[-991 835 439] [-991 439 835]]
Test Case: 1840 | Input/Output: [[-341 -344 -45 604 -750 829 -927 -881 559 418 -714 956 725 768 521 290 -929 968 -335 178 916 591 410 485 -180 -653 -608 152 -388 844 694 311 -330 636 919 17 718 -930 263 -546] [-930 -929 -927 -881 -750 -714 -653 -608 -546 -388 -344 -341 -335 -330 -180 -45 17 152 178 263 290 311 410 418 485 521 559 591 604 636 694 718 725 768 829 844 916 919 956 968]]
Test Case: 1841 | Input/Output: [[998 -423 53 -207 -733 -917 -769 166 -697 596 -19] [-917 -769 -733 -697 -423 -207 -19 53 166 596 998]]
Test Case: 1842 | Input/Output: [[732 -417 -488 250 -409 650 619 -736 -474 144 662 767 -498 380 -419 -27 242 472 692 -264 -250 -947] [-947 -736 -498 -488 -474 -419 -417 -409 -264 -250 -27 144 242 250 380 472 619 650 662 692 732 767]]
Test Case: 1843 | Input/Output: [[-205 82 815 148 501 68 -708 495 56 993 643 487 -510 251 -487 -454 -461] [-708 -510 -487 -461 -454 -205 56 68 82 148 251 487 495 501 643 815 993]]
Test Case: 1844 | Input/Output: [[-697 -398 -684 -631 -34 210 747 656 842 -394 -562 421 -983 918 -749 571 729 811 439 143 866 290 478 -709 -590 12 -165 -61 -292 -281 -598 -753 394 719 -34 674 213 735 608 814 -721 -505 832 -239 -854] [-983 -854 -753 -749 -721 -709 -697 -684 -631 -598 -590 -562 -505 -398 -394 -292 -281 -239 -165 -61 -34 -34 12 143 210 213 290 394 421 439 478 571 608 656 674 719 729 735 747 811 814 832 842 866 918]]
Test Case: 1845 | Input/Output: [[415 451 276 735 661 643 -279 -589 364 265 -866 -261 846 140 -936 -518 -615 -901 27 -410 -792] [-936 -901 -866 -792 -615 -589 -518 -410 -279 -261 27 140 265 276 364 415 451 643 661 735 846]]
Test Case: 1846 | Input/Output: [[-576 692 -624] [-624 -576 692]]
Test Case: 1847 | Input/Output: [[376 517 -208 -45 -456 -553 266 460 995 604 155 700 457 921 156 508 -648 107 -38 365 -637 -612 273 -154 606 687 -670 476 -551 453 -115 429 -338 -524 -115 495 -263 -13 745 506 -51 854 544 758 -387 236 178] [-670 -648 -637 -612 -553 -551 -524 -456 -387 -338 -263 -208 -154 -115 -115 -51 -45 -38 -13 107 155 156 178 236 266 273 365 376 429 453 457 460 476 495 506 508 517 544 604 606 687 700 745 758 854 921 995]]
Test Case: 1848 | Input/Output: [[742 343 -172 45 -357 711 653 -887 -572 806 -540 216 -578 822 298 -501 562 186 -884 348 794 -90 -426 347 822 5 807 -399] [-887 -884 -578 -572 -540 -501 -426 -399 -357 -172 -90 5 45 186 216 298 343 347 348 562 653 711 742 794 806 807 822 822]]
Test Case: 1849 | Input/Output: [[769 -368 901 -196 592 -199 345 297 435 -493 796 816 -631 296 -385 525 787 730 -346 -73 -104 -291 930 475 -722 935 201 -807 -381 166 -885 -364 998 799 -934 -518 628] [-934 -885 -807 -722 -631 -518 -493 -385 -381 -368 -364 -346 -291 -199 -196 -104 -73 166 201 296 297 345 435 475 525 592 628 730 769 787 796 799 816 901 930 935 998]]
Test Case: 1850 | Input/Output: [[776 235 674 226 -591 -945 -619 -930 428 330 653 414 -696 117 -188 50 -394 -297] [-945 -930 -696 -619 -591 -394 -297 -188 50 117 226 235 330 414 428 653 674 776]]
Test Case: 1851 | Input/Output: [[526 -951 924 692 -923 -553 612 -897 -437 193 -440 673 822 194 665 931 -239 -469 -761 -40 -412 498 -515 172 802 -685 -798 499 -37 74 712 696 988 263 500 695 -933 705 -636 -922 934 630 -680 -311 -375 -861 361 761 487 -732] [-951 -933 -923 -922 -897 -861 -798 -761 -732 -685 -680 -636 -553 -515 -469 -440 -437 -412 -375 -311 -239 -40 -37 74 172 193 194 263 361 487 498 499 500 526 612 630 665 673 692 695 696 705 712 761 802 822 924 931 934 988]]
Test Case: 1852 | Input/Output: [[-559 640 93 198 616 860 46 -347 -971 426 971 -670 105 -320 -827 189 -69 -973 -562 194 -834] [-973 -971 -834 -827 -670 -562 -559 -347 -320 -69 46 93 105 189 194 198 426 616 640 860 971]]
Test Case: 1853 | Input/Output: [[295 -844 388 832 -6 -849 475 -260 -644 952 806 633 818 -689 430 -363 840 -126] [-849 -844 -689 -644 -363 -260 -126 -6 295 388 430 475 633 806 818 832 840 952]]
Test Case: 1854 | Input/Output: [[-118 179 -875 -289 159 -347 139 799 822 456 196 324 -383 631 488 47 -938 608 -967 895 419 -903 35 -619 248 -64 -656 -938 -390 79 231 -667 -983 806 -858 474 -166 835 -809 -619 -926 239 -368 -696 -669 957] [-983 -967 -938 -938 -926 -903 -875 -858 -809 -696 -669 -667 -656 -619 -619 -390 -383 -368 -347 -289 -166 -118 -64 35 47 79 139 159 179 196 231 239 248 324 419 456 474 488 608 631 799 806 822 835 895 957]]
Test Case: 1855 | Input/Output: [[-829 955 -61 -586 740 -415 164 -79 710 -790 -555 546 -872 578 -133 773 551 -996] [-996 -872 -829 -790 -586 -555 -415 -133 -79 -61 164 546 551 578 710 740 773 955]]
Test Case: 1856 | Input/Output: [[431 392 -770 171 -918 2 230 -811 -581 -33 -870 -777 97 -189 -354 369 -323 -995 377 920 277 -583 395 379 -185 534 830 -89 630 867 -536 805 894 926 273 457 527 604 476 418 -14 374 165 785 -836 -930 520 371] [-995 -930 -918 -870 -836 -811 -777 -770 -583 -581 -536 -354 -323 -189 -185 -89 -33 -14 2 97 165 171 230 273 277 369 371 374 377 379 392 395 418 431 457 476 520 527 534 604 630 785 805 830 867 894 920 926]]
Test Case: 1857 | Input/Output: [[567 590 577 -965 865 -810 -80 -19 109 -984] [-984 -965 -810 -80 -19 109 567 577 590 865]]
Test Case: 1858 | Input/Output: [[61 -93 245 -443 -665 -156 424 -187 908 -994 94 -19 450 -836 -188 -252 -159 -11 -949 161 460 -256 -553 -291 386 -734 -825 -704 147 -177 371 -586 -826 811 397 -691 383 -582 -223 -419 492 601 -159 287 473] [-994 -949 -836 -826 -825 -734 -704 -691 -665 -586 -582 -553 -443 -419 -291 -256 -252 -223 -188 -187 -177 -159 -159 -156 -93 -19 -11 61 94 147 161 245 287 371 383 386 397 424 450 460 473 492 601 811 908]]
Test Case: 1859 | Input/Output: [[-749 -496 418 -521 328 -691 362 45 -286 -488 795 355 162 54 -69 766 833] [-749 -691 -521 -496 -488 -286 -69 45 54 162 328 355 362 418 766 795 833]]
Test Case: 1860 | Input/Output: [[859 108 -301 40 328 -637 -884 944 636 -351 282 -691 579 597 613 -545 -931 -613 -928 -215 560 -742 -895 -868 -985 740 -688 -735 -459 -268 -885 -233 280 -276 -65 -451 -283 -33 -809 -168 37 -643 765 158 241 944 -82 -543 139 -607] [-985 -931 -928 -895 -885 -884 -868 -809 -742 -735 -691 -688 -643 -637 -613 -607 -545 -543 -459 -451 -351 -301 -283 -276 -268 -233 -215 -168 -82 -65 -33 37 40 108 139 158 241 280 282 328 560 579 597 613 636 740 765 859 944 944]]
Test Case: 1861 | Input/Output: [[-432 -885 -760 493 -4 431 304 -441 -682 554 275 -881 -919 599 -993 -353 218 -953 -101 -708 -646 -265 213 92 -795 933 -124] [-993 -953 -919 -885 -881 -795 -760 -708 -682 -646 -441 -432 -353 -265 -124 -101 -4 92 213 218 275 304 431 493 554 599 933]]
Test Case: 1862 | Input/Output: [[-796 199 571 -663 -328 576 571 -845 837 794 705 -559 -129 329 87 502 523 -62 348 769 -998 263 47 -92 673 -842 254 422 51 -152 603 -570 276 -829] [-998 -845 -842 -829 -796 -663 -570 -559 -328 -152 -129 -92 -62 47 51 87 199 254 263 276 329 348 422 502 523 571 571 576 603 673 705 769 794 837]]
Test Case: 1863 | Input/Output: [[332 -83 164 -822 -439 786 207 870 -762 -836 -175 500 109 281 -719 -512 320 744 -4 665 -997] [-997 -836 -822 -762 -719 -512 -439 -175 -83 -4 109 164 207 281 320 332 500 665 744 786 870]]
Test Case: 1864 | Input/Output: [[753 930 646 -874 -816 325 231 -690 403 -601 39 -557 647 285 -117 634 -460 192 878 -754 501 -719 -159 490 -485 438 313 666 -710 -821 -145 -552 460 40 -966 -915 -440 -306 -493 -181 -916 -211 119 730 -772 -217 -877 -632 727 129] [-966 -916 -915 -877 -874 -821 -816 -772 -754 -719 -710 -690 -632 -601 -557 -552 -493 -485 -460 -440 -306 -217 -211 -181 -159 -145 -117 39 40 119 129 192 231 285 313 325 403 438 460 490 501 634 646 647 666 727 730 753 878 930]]
Test Case: 1865 | Input/Output: [[-943 165 -279 -880 -906 -830 -524 -63 148 549 831 -807 -392 757 188 570 -17 -222 -412 617 -778 174 940 721 498 786 849 680 252 715 -817 944 462 968 -105 322 -991 -582 326 -433 -855 -177 -308 -16 429 923 574 792] [-991 -943 -906 -880 -855 -830 -817 -807 -778 -582 -524 -433 -412 -392 -308 -279 -222 -177 -105 -63 -17 -16 148 165 174 188 252 322 326 429 462 498 549 570 574 617 680 715 721 757 786 792 831 849 923 940 944 968]]
Test Case: 1866 | Input/Output: [[-322 -371 198 571 235 -511 -772 22 843 236 923 125 -84 467 -456 -858 379 -812 847 738 -709 940 -15 218 -886 322 932 422 -988] [-988 -886 -858 -812 -772 -709 -511 -456 -371 -322 -84 -15 22 125 198 218 235 236 322 379 422 467 571 738 843 847 923 932 940]]
Test Case: 1867 | Input/Output: [[-835 -420 462 577 -39 572 740 -660 -982 814 608 -301 -358 -371 -414 962 -865 24 144 384 750 -838 632 -65 -271 473 -705 -784 -893 716 -746 718 -508 434 -89 677 241] [-982 -893 -865 -838 -835 -784 -746 -705 -660 -508 -420 -414 -371 -358 -301 -271 -89 -65 -39 24 144 241 384 434 462 473 572 577 608 632 677 716 718 740 750 814 962]]
Test Case: 1868 | Input/Output: [[490 -186 894 -167 609 829 389 317 -57 -785 710 -821 833 -724 806 191 311 566 230 531 168 325 281 -677 -152 -33 104 399 243 -463 207 171 942] [-821 -785 -724 -677 -463 -186 -167 -152 -57 -33 104 168 171 191 207 230 243 281 311 317 325 389 399 490 531 566 609 710 806 829 833 894 942]]
Test Case: 1869 | Input/Output: [[78 305 579 -245 -856 84 163 177 252 111 0 -910 246 -583 763 -519 -656 856 832 -100 -255 -761 -949 336 -584 588 -111 960 126 -560 447 117 -215 939 -746 -232 326 780 619 -18] [-949 -910 -856 -761 -746 -656 -584 -583 -560 -519 -255 -245 -232 -215 -111 -100 -18 0 78 84 111 117 126 163 177 246 252 305 326 336 447 579 588 619 763 780 832 856 939 960]]
Test Case: 1870 | Input/Output: [[851 -110 81 774 124 -196 954 189 661 176 -646 -525 295 640 744 634 -901 -428 -791 -881 361 286 462 -734 620 -331 -532 -204 -375 -361 699 221] [-901 -881 -791 -734 -646 -532 -525 -428 -375 -361 -331 -204 -196 -110 81 124 176 189 221 286 295 361 462 620 634 640 661 699 744 774 851 954]]
Test Case: 1871 | Input/Output: [[539 472 240 -703 -325 -10 519 -193 -892 -425 -895 -215 -727 376 -813 -677 273 919 456 230 -93 960 -806 -712 -549 571 -118 -713 14] [-895 -892 -813 -806 -727 -713 -712 -703 -677 -549 -425 -325 -215 -193 -118 -93 -10 14 230 240 273 376 456 472 519 539 571 919 960]]
Test Case: 1872 | Input/Output: [[-712 -434 782 -968 750 -498 165 -658 -742 -433 148 539 -262 -333 329 277 357 878 431 -409 999 -805 -315 -87 -146 908 -310 627 -337 287 100 194 98 -431 908 -365 159 380 -861 388 -225 441 -700 669 512 206 667 761 -15 -884] [-968 -884 -861 -805 -742 -712 -700 -658 -498 -434 -433 -431 -409 -365 -337 -333 -315 -310 -262 -225 -146 -87 -15 98 100 148 159 165 194 206 277 287 329 357 380 388 431 441 512 539 627 667 669 750 761 782 878 908 908 999]]
Test Case: 1873 | Input/Output: [[141 412 -222 -78 -671 442 236 501 -657 -927 -151 -373 -23 -851 -891 -543 850 149 602 855 191 270 -225 -720 -221 -738 496 412 -566 203 375 -792 519 536 -737 -505 -578 61 -265 -289 592 -546] [-927 -891 -851 -792 -738 -737 -720 -671 -657 -578 -566 -546 -543 -505 -373 -289 -265 -225 -222 -221 -151 -78 -23 61 141 149 191 203 236 270 375 412 412 442 496 501 519 536 592 602 850 855]]
Test Case: 1874 | Input/Output: [[-84 926 58 -551 -729 -84 109 -35 233 -836 -708 337 3 243 625 879 516 -787 44 -97 -949 970 -559 -936 93 -259 -454 193 318 134 217] [-949 -936 -836 -787 -729 -708 -559 -551 -454 -259 -97 -84 -84 -35 3 44 58 93 109 134 193 217 233 243 318 337 516 625 879 926 970]]
Test Case: 1875 | Input/Output: [[237 -867 -506 108 859 331 4 521 106 -865 67 -45 947 864 584 822 423 -546 751 -617 277 -80 9 -224 397 462 -438 544 791 644 852 -997 -137 -742 -261 -29 81 467 431 -528 706 797 -203 -971 375] [-997 -971 -867 -865 -742 -617 -546 -528 -506 -438 -261 -224 -203 -137 -80 -45 -29 4 9 67 81 106 108 237 277 331 375 397 423 431 462 467 521 544 584 644 706 751 791 797 822 852 859 864 947]]
Test Case: 1876 | Input/Output: [[-823 -991 -744 -242 -534 -379 -967 -912 -436 -265 -13 -829 -39 -483 180 753 -143 -582 -399 -378 -277 304 353 970 979 -236 -616 46 409 520 -440 448] [-991 -967 -912 -829 -823 -744 -616 -582 -534 -483 -440 -436 -399 -379 -378 -277 -265 -242 -236 -143 -39 -13 46 180 304 353 409 448 520 753 970 979]]
Test Case: 1877 | Input/Output: [[160 11 71 -330 980 94 -124 -388 586 -507 873 342 -429 994 922 956] [-507 -429 -388 -330 -124 11 71 94 160 342 586 873 922 956 980 994]]
Test Case: 1878 | Input/Output: [[629 -559 -806 -168 -545 25 -79 -286 83 -378 -705 824 -434 -267 916 -826 -292 614 276 -884 -199 978 871 912 845 -634 -36 -760 -947 997 206 -973 -148 -624 737 -525 -637 22 697 587 483 479 -939 -110 155 487 175] [-973 -947 -939 -884 -826 -806 -760 -705 -637 -634 -624 -559 -545 -525 -434 -378 -292 -286 -267 -199 -168 -148 -110 -79 -36 22 25 83 155 175 206 276 479 483 487 587 614 629 697 737 824 845 871 912 916 978 997]]
Test Case: 1879 | Input/Output: [[-325 118 272 -533 -512 98 -257 -205 617 -79 816 31 776 -964 -873 -969 610 805 358 37 -555 823 448 84 82 -430 -763 -213 641 -133 466 -969 -577 938 183 780] [-969 -969 -964 -873 -763 -577 -555 -533 -512 -430 -325 -257 -213 -205 -133 -79 31 37 82 84 98 118 183 272 358 448 466 610 617 641 776 780 805 816 823 938]]
Test Case: 1880 | Input/Output: [[963 -322 -123 -557 -502 -735 975 596 -321 895 648] [-735 -557 -502 -322 -321 -123 596 648 895 963 975]]
Test Case: 1881 | Input/Output: [[454 874 -34 461 467 -59 -564 533 -769 -693 -468 508 -126 -78 -624 -248 -777 292 172 171 -520 -651] [-777 -769 -693 -651 -624 -564 -520 -468 -248 -126 -78 -59 -34 171 172 292 454 461 467 508 533 874]]
Test Case: 1882 | Input/Output: [[677 -515 409 -971 89 -562 -655 -775 235 -382 44 600 982 -884 588 -868 -528 -116 -90 -328 667 126 533] [-971 -884 -868 -775 -655 -562 -528 -515 -382 -328 -116 -90 44 89 126 235 409 533 588 600 667 677 982]]
Test Case: 1883 | Input/Output: [[540 979 -59 893 -388] [-388 -59 540 893 979]]
Test Case: 1884 | Input/Output: [[312 -822 533 268 97 -243 132 319 682 -183 -283 489 -287 -589 559 -11 195 -665 141 815 -930 -783 365 -501 795 -54 777 236 -761 -969 -896 249 107 781 -98 755 -195 172 411 641 817] [-969 -930 -896 -822 -783 -761 -665 -589 -501 -287 -283 -243 -195 -183 -98 -54 -11 97 107 132 141 172 195 236 249 268 312 319 365 411 489 533 559 641 682 755 777 781 795 815 817]]
Test Case: 1885 | Input/Output: [[-7 702 477 422 -37 215 -535 -598 675 -693 763 593 108 661 -547 -528 36 -323 688 -888 -903 612 -796 -408 -65 -185 338 534 755 -710 -128 -96 -568 100 229 407 679 -573 877 198 -588 871 366 -406 -15 -102 678 474] [-903 -888 -796 -710 -693 -598 -588 -573 -568 -547 -535 -528 -408 -406 -323 -185 -128 -102 -96 -65 -37 -15 -7 36 100 108 198 215 229 338 366 407 422 474 477 534 593 612 661 675 678 679 688 702 755 763 871 877]]
Test Case: 1886 | Input/Output: [[-501 870 767 744 -483 -588 180 701 648 602] [-588 -501 -483 180 602 648 701 744 767 870]]
Test Case: 1887 | Input/Output: [[671 472 784 -104 426 -725 184 475 241 797 929 -96 -433 536 784 512 -476 -512 353 -846 -190 -11 393 -654 909 -82 -645 148 -421 365] [-846 -725 -654 -645 -512 -476 -433 -421 -190 -104 -96 -82 -11 148 184 241 353 365 393 426 472 475 512 536 671 784 784 797 909 929]]
Test Case: 1888 | Input/Output: [[17 345 -184 -856 130 -445 -502 748] [-856 -502 -445 -184 17 130 345 748]]
Test Case: 1889 | Input/Output: [[-859 -349 477 191 265 947 867 474 944 -677 -537 876 298 0 -991 -657 151 -929] [-991 -929 -859 -677 -657 -537 -349 0 151 191 265 298 474 477 867 876 944 947]]
Test Case: 1890 | Input/Output: [[-85 312 834 -69 -450 -475 983 -835 834 969 441 438 187 -954 810 445 -518 910 29 139 92 246 824 148 932 -608 -209 -788 -511 -567 374 -59 -500 154] [-954 -835 -788 -608 -567 -518 -511 -500 -475 -450 -209 -85 -69 -59 29 92 139 148 154 187 246 312 374 438 441 445 810 824 834 834 910 932 969 983]]
Test Case: 1891 | Input/Output: [[997 527 149 289 281 31 -657 219 -744 721 -956 -800 -819 694 668 749 963 -875 -523] [-956 -875 -819 -800 -744 -657 -523 31 149 219 281 289 527 668 694 721 749 963 997]]
Test Case: 1892 | Input/Output: [[777 -172 803 -991 725 830 937] [-991 -172 725 777 803 830 937]]
Test Case: 1893 | Input/Output: [[-227 171 784 341 -571 -840 -39 997 170 -570 -404 861 888 177 -782 -724 732 -941 85 9 376 757 -777 445 837 137 883 -395 -791 -954 -988 -483 -581 -132 475 729 739 -722 370 221 -438 -859 -279] [-988 -954 -941 -859 -840 -791 -782 -777 -724 -722 -581 -571 -570 -483 -438 -404 -395 -279 -227 -132 -39 9 85 137 170 171 177 221 341 370 376 445 475 729 732 739 757 784 837 861 883 888 997]]
Test Case: 1894 | Input/Output: [[-374 -359 -599 -800 -191 -752 -2 -551 -557 426 -874 966 864 -920] [-920 -874 -800 -752 -599 -557 -551 -374 -359 -191 -2 426 864 966]]
Test Case: 1895 | Input/Output: [[80 666 -779 -227 322 762] [-779 -227 80 322 666 762]]
Test Case: 1896 | Input/Output: [[708 923 923 624 381 436 -842 -132 -264 668 -787 194 -247 -645 881 -285 692 911 25 -183 61 287 -615 113 988 -480 530 975 217 -474 -915 -824] [-915 -842 -824 -787 -645 -615 -480 -474 -285 -264 -247 -183 -132 25 61 113 194 217 287 381 436 530 624 668 692 708 881 911 923 923 975 988]]
Test Case: 1897 | Input/Output: [[-748 547 127 -47 623 916 775 98 -504 -627 758 378 696 372 -227 725 554 -237 -459 942 -311 -395 464 330 852 -379 -503 132 961 -887] [-887 -748 -627 -504 -503 -459 -395 -379 -311 -237 -227 -47 98 127 132 330 372 378 464 547 554 623 696 725 758 775 852 916 942 961]]
Test Case: 1898 | Input/Output: [[518 709 846 166 578 -948 53 -928 -244 58 184 -854 -966 204 -658 550 64 527 -389 787 364 356 572 492 739 -155 790 508 -965 641 965 -938 30 -410 -562 573 -817 141 -984 -880] [-984 -966 -965 -948 -938 -928 -880 -854 -817 -658 -562 -410 -389 -244 -155 30 53 58 64 141 166 184 204 356 364 492 508 518 527 550 572 573 578 641 709 739 787 790 846 965]]
Test Case: 1899 | Input/Output: [[572 -876 249 -384 447 135 444 -496 -289 66 -506 839 354 -279 -465] [-876 -506 -496 -465 -384 -289 -279 66 135 249 354 444 447 572 839]]
Test Case: 1900 | Input/Output: [[622 -724 303 -275 -523 -791 307 490 901 -2 -105 884 405 626 580 -687 995 -868 -165 -951 -254 257 -22 308 865 696 -639 63 -689 -714 265 84 -7 -700 -300 491 120 833 -744 -442] [-951 -868 -791 -744 -724 -714 -700 -689 -687 -639 -523 -442 -300 -275 -254 -165 -105 -22 -7 -2 63 84 120 257 265 303 307 308 405 490 491 580 622 626 696 833 865 884 901 995]]
Test Case: 1901 | Input/Output: [[-913 -196 -403 649 223 -270 -499 800 968 -523 -840 908 -274 -896 -494 -149 445 605 11 393 357] [-913 -896 -840 -523 -499 -494 -403 -274 -270 -196 -149 11 223 357 393 445 605 649 800 908 968]]
Test Case: 1902 | Input/Output: [[-378 872 535 -50 -127 485 361 -734 -360 -467 781 -858 -195 -763 962 -667 588 -451 244 394 273 15 124 172 -374 -548 -266 139 -381] [-858 -763 -734 -667 -548 -467 -451 -381 -378 -374 -360 -266 -195 -127 -50 15 124 139 172 244 273 361 394 485 535 588 781 872 962]]
Test Case: 1903 | Input/Output: [[-998 -449 670 302 -361 -446 410 672 792 -455 -720 607 -786 -414 801 -911 -947 -799 -445 -414 -251 215 -590 -385 -495 795 -969 637 -219 -588 186 -63 1000 631 627 -790 -222 467 39 -25 428 530 657 714 842 -29 93 512 735 537] [-998 -969 -947 -911 -799 -790 -786 -720 -590 -588 -495 -455 -449 -446 -445 -414 -414 -385 -361 -251 -222 -219 -63 -29 -25 39 93 186 215 302 410 428 467 512 530 537 607 627 631 637 657 670 672 714 735 792 795 801 842 1000]]
Test Case: 1904 | Input/Output: [[394 954 -600 499 857 428 688 -528 -104 -487 406 259 -241 -308 328 -691 -612 -76 -141 72 60 924 -982 303 -905 -773 685 -509 -347 760 -953 -750 -896 382] [-982 -953 -905 -896 -773 -750 -691 -612 -600 -528 -509 -487 -347 -308 -241 -141 -104 -76 60 72 259 303 328 382 394 406 428 499 685 688 760 857 924 954]]
Test Case: 1905 | Input/Output: [[-640 -470 295 873 269 438 -261 809 248 728 634 -829 402 243 -140 363 -894 990 -909 260 -102 414 -322 487 759 -748 989 222 -195 363 -62 -579 -800 566 82 766 -287] [-909 -894 -829 -800 -748 -640 -579 -470 -322 -287 -261 -195 -140 -102 -62 82 222 243 248 260 269 295 363 363 402 414 438 487 566 634 728 759 766 809 873 989 990]]
Test Case: 1906 | Input/Output: [[-849 -92 274 -776 -67 730 110 157 -480 -943 487 -949 390 -876 -785 -874 747 894] [-949 -943 -876 -874 -849 -785 -776 -480 -92 -67 110 157 274 390 487 730 747 894]]
Test Case: 1907 | Input/Output: [[384 -280 478 -29 64 870 777 847 689 566 -928 141 -866 -413 453 -652 255 922 356 -499 519 -639 -986 -16 -510 -435 -343 821 -42 -178] [-986 -928 -866 -652 -639 -510 -499 -435 -413 -343 -280 -178 -42 -29 -16 64 141 255 356 384 453 478 519 566 689 777 821 847 870 922]]
Test Case: 1908 | Input/Output: [[620 121 635 683 47 266 -714 151 532 282 -64 655 100 -257 700 317 95 800 107] [-714 -257 -64 47 95 100 107 121 151 266 282 317 532 620 635 655 683 700 800]]
Test Case: 1909 | Input/Output: [[-116 362 -16 -700 -628 -830 152 -591 309 -857 485 358 -925 -534 831 -8 296 662 831 -434 -256 -294 -104 729 -503 586 -941 -805 81 -995 -550 878 -188 849 506 734 49 714 -348 148 243 -864 -443 390] [-995 -941 -925 -864 -857 -830 -805 -700 -628 -591 -550 -534 -503 -443 -434 -348 -294 -256 -188 -116 -104 -16 -8 49 81 148 152 243 296 309 358 362 390 485 506 586 662 714 729 734 831 831 849 878]]
Test Case: 1910 | Input/Output: [[-892 697 77 145 -107 708 -415 632 200 -677 977 686 693 685 -983 375 -75 -597 988 -288 -487 287 70 491 822 192 276 -731 576 87 992 997 -150 -194 16 224 -808 -704 -85 -138 -860] [-983 -892 -860 -808 -731 -704 -677 -597 -487 -415 -288 -194 -150 -138 -107 -85 -75 16 70 77 87 145 192 200 224 276 287 375 491 576 632 685 686 693 697 708 822 977 988 992 997]]
Test Case: 1911 | Input/Output: [[-505 -216 317 -109] [-505 -216 -109 317]]
Test Case: 1912 | Input/Output: [[124 211 -408 -152 163 -624 311 107 229 -859 -105 -189 216 120 -811 -790 -522 -736 -359 -461 443 742 580 884 538] [-859 -811 -790 -736 -624 -522 -461 -408 -359 -189 -152 -105 107 120 124 163 211 216 229 311 443 538 580 742 884]]
Test Case: 1913 | Input/Output: [[535 811 -636 643 -176 909 659 497 87 -253 330 606 -819 -511 -671 435 -97 157 -779 528 -62 568 -240 889 -969 -562 -697 254 -374 523 -838 961 327 -43 627 -801 921 -136 -899 725] [-969 -899 -838 -819 -801 -779 -697 -671 -636 -562 -511 -374 -253 -240 -176 -136 -97 -62 -43 87 157 254 327 330 435 497 523 528 535 568 606 627 643 659 725 811 889 909 921 961]]
Test Case: 1914 | Input/Output: [[-941 -500 258 -263 -464 -53 27 566 539 -371 148 192 -508 255 -24 -346 843 976 861 675 113 970 -760 340 424 -959 304 -505 -828] [-959 -941 -828 -760 -508 -505 -500 -464 -371 -346 -263 -53 -24 27 113 148 192 255 258 304 340 424 539 566 675 843 861 970 976]]
Test Case: 1915 | Input/Output: [[-882 497 258 981 -431 -14 383 952 -157 583 -924 -132 343 97 -462 -995 131 -60 -795 -1 -761] [-995 -924 -882 -795 -761 -462 -431 -157 -132 -60 -14 -1 97 131 258 343 383 497 583 952 981]]
Test Case: 1916 | Input/Output: [[-313 235 -221 -528 562 297 -711 -217 260 949 653 266 915 92 338 -623 739 -100 534 358 116 565 -62 728 189 246 132 -158 -138 464 30 -858 507 -207 981 10] [-858 -711 -623 -528 -313 -221 -217 -207 -158 -138 -100 -62 10 30 92 116 132 189 235 246 260 266 297 338 358 464 507 534 562 565 653 728 739 915 949 981]]
Test Case: 1917 | Input/Output: [[-310 849 768 686 437 -610 -865 159 -214 139 -708 896 501 33 243] [-865 -708 -610 -310 -214 33 139 159 243 437 501 686 768 849 896]]
Test Case: 1918 | Input/Output: [[-687 624 746 141 88 -252 -238 -478 374 -290 -927 282 687 429 -326 -79 -161 -976 824 -67 24 679 574 443 743 146 274 -121 503 -671 72 -587 -153 -8 94 675 -409 -481 765 -935 1 442 640 -343 142 -496 20 993 -26 -192] [-976 -935 -927 -687 -671 -587 -496 -481 -478 -409 -343 -326 -290 -252 -238 -192 -161 -153 -121 -79 -67 -26 -8 1 20 24 72 88 94 141 142 146 274 282 374 429 442 443 503 574 624 640 675 679 687 743 746 765 824 993]]
Test Case: 1919 | Input/Output: [[-60] [-60]]
Test Case: 1920 | Input/Output: [[-173 28 117 29 -221 513 423 -167 -399] [-399 -221 -173 -167 28 29 117 423 513]]
Test Case: 1921 | Input/Output: [[-313 -482 562 -265 -317 649 -771 359 -11 -339 264 589 61 -799 406 161 445 65 -984 -818 38 456 322 71 -539 -699 -43 791 523 812 -732 94 707 481] [-984 -818 -799 -771 -732 -699 -539 -482 -339 -317 -313 -265 -43 -11 38 61 65 71 94 161 264 322 359 406 445 456 481 523 562 589 649 707 791 812]]
Test Case: 1922 | Input/Output: [[745 270 -360 620] [-360 270 620 745]]
Test Case: 1923 | Input/Output: [[-997 544 678 -986 360 677 -465 12 933 -182 25 -933 -453 961 -640 772 661 550 -687 240 -998 945 789 -843 -119 510 -960 599 -339 -465 4 359 -497 -932 893 561 769 -238 -650 -152 -971 12 331 687 957 -556 636 799 -893 597] [-998 -997 -986 -971 -960 -933 -932 -893 -843 -687 -650 -640 -556 -497 -465 -465 -453 -339 -238 -182 -152 -119 4 12 12 25 240 331 359 360 510 544 550 561 597 599 636 661 677 678 687 769 772 789 799 893 933 945 957 961]]
Test Case: 1924 | Input/Output: [[585 157 -614 -798 377 400 -394 -117 -402 114 -342 -805 362 942 -569 -731 902 766 172 871 216 -138 -366 -650 -769 -585 647 119 -209 -577 780 129 338 -873 -435 324 31] [-873 -805 -798 -769 -731 -650 -614 -585 -577 -569 -435 -402 -394 -366 -342 -209 -138 -117 31 114 119 129 157 172 216 324 338 362 377 400 585 647 766 780 871 902 942]]
Test Case: 1925 | Input/Output: [[148 523 409 183 -114 794 751 236 691 906 118 170 611 295 119 455 473 -39 779 79 -243 775 -843 977 382] [-843 -243 -114 -39 79 118 119 148 170 183 236 295 382 409 455 473 523 611 691 751 775 779 794 906 977]]
Test Case: 1926 | Input/Output: [[410 885 -881 957 -109 -436 318 -366 -62 -124 963 658 -954 580 -797 -138 -510 -589 618 -780 -397 -929 -22 -137 44 -162 -513 -224 -401 698 -626 845 853] [-954 -929 -881 -797 -780 -626 -589 -513 -510 -436 -401 -397 -366 -224 -162 -138 -137 -124 -109 -62 -22 44 318 410 580 618 658 698 845 853 885 957 963]]
Test Case: 1927 | Input/Output: [[564 -868 456 -213 -698 752 120 453 46 324 915 566 184 -661 -137 -26 253 -618 -58 699 -96] [-868 -698 -661 -618 -213 -137 -96 -58 -26 46 120 184 253 324 453 456 564 566 699 752 915]]
Test Case: 1928 | Input/Output: [[148 669 -224 83 -342 730 304 -165 -12 808 -462 -103 -443 549 -86 73 177 -448 -840 -234 -614 153 431 -874 -168 438 -725 936 -519 -270 -42 -416 -743 -703 -995 215 219 -38 926 949 363 -320 -139 -708 -118] [-995 -874 -840 -743 -725 -708 -703 -614 -519 -462 -448 -443 -416 -342 -320 -270 -234 -224 -168 -165 -139 -118 -103 -86 -42 -38 -12 73 83 148 153 177 215 219 304 363 431 438 549 669 730 808 926 936 949]]
Test Case: 1929 | Input/Output: [[-189 -965 -521 -904 -224 793 -868 462 -41 858 917 599 -63 -610 778 376 -571 201 -700 55 271 -743 -702 26 266 -569 -870 1 -65 897 851 -769 -609 -610 943 406] [-965 -904 -870 -868 -769 -743 -702 -700 -610 -610 -609 -571 -569 -521 -224 -189 -65 -63 -41 1 26 55 201 266 271 376 406 462 599 778 793 851 858 897 917 943]]
Test Case: 1930 | Input/Output: [[-918 659 317 -291 -461 266 141] [-918 -461 -291 141 266 317 659]]
Test Case: 1931 | Input/Output: [[-959 -215 -541 719 616 -536 252 -136 452] [-959 -541 -536 -215 -136 252 452 616 719]]
Test Case: 1932 | Input/Output: [[575 -263 942 -609 676 -266 212 987 -722 -420 -759 -881 353 -211 -464 222 578 191 -136 590 -788 -827 945 -995 -974 167 -936 -421 467] [-995 -974 -936 -881 -827 -788 -759 -722 -609 -464 -421 -420 -266 -263 -211 -136 167 191 212 222 353 467 575 578 590 676 942 945 987]]
Test Case: 1933 | Input/Output: [[-761 -505 -64 -14 -883 -127 -670 -450 875 624 -970 9 -996 -767 -404] [-996 -970 -883 -767 -761 -670 -505 -450 -404 -127 -64 -14 9 624 875]]
Test Case: 1934 | Input/Output: [[-126 -841 -798 862 276 644 888 -446 -848 652 646 783 -2 851 994 349 456 917 -317 22 558 -473 837 -303 -491 -658 -895 742 -664 108 -614 -540 758 200 651 -574 490 149] [-895 -848 -841 -798 -664 -658 -614 -574 -540 -491 -473 -446 -317 -303 -126 -2 22 108 149 200 276 349 456 490 558 644 646 651 652 742 758 783 837 851 862 888 917 994]]
Test Case: 1935 | Input/Output: [[-857 643 415 20 193 -143 228 -247 332 344 722 -40 -183 -144 -136 533 699 -588 765 -679] [-857 -679 -588 -247 -183 -144 -143 -136 -40 20 193 228 332 344 415 533 643 699 722 765]]
Test Case: 1936 | Input/Output: [[-916 817 919 -732 552 362 -643 -985 889 -811 53 584 -985 -849 586 270 -79 162 920 521 438 247] [-985 -985 -916 -849 -811 -732 -643 -79 53 162 247 270 362 438 521 552 584 586 817 889 919 920]]
Test Case: 1937 | Input/Output: [[-961 -59 306 -686 -121 514 104 -343 566 931 209 -831 247 -946 -210 280 818 -239 882 -627 -752 -223 159 363 452 -992 -696 -881 824 -673 -769 -895 961 -728 -987 300 223 648 854 697 540 -111] [-992 -987 -961 -946 -895 -881 -831 -769 -752 -728 -696 -686 -673 -627 -343 -239 -223 -210 -121 -111 -59 104 159 209 223 247 280 300 306 363 452 514 540 566 648 697 818 824 854 882 931 961]]
Test Case: 1938 | Input/Output: [[554 -882 640 -240 -461 -280 -890 -537 -889 -118 -930 -903 783 -718 -443 768 -777 -114 -996 -777 741] [-996 -930 -903 -890 -889 -882 -777 -777 -718 -537 -461 -443 -280 -240 -118 -114 554 640 741 768 783]]
Test Case: 1939 | Input/Output: [[-871 -113 492 920 -354 960 396 530 -333 580 695 -908 -951 -975 -991 878 460 608 -736 -105 565 5 834 -696 -502 -628 747 -384 -597 227 255 -659 13 -4 -334 -730 -948 -297 949 -245 551 -23 -255 25] [-991 -975 -951 -948 -908 -871 -736 -730 -696 -659 -628 -597 -502 -384 -354 -334 -333 -297 -255 -245 -113 -105 -23 -4 5 13 25 227 255 396 460 492 530 551 565 580 608 695 747 834 878 920 949 960]]
Test Case: 1940 | Input/Output: [[903 -9 399 495 5 924 874 -489 -348 73 482 370] [-489 -348 -9 5 73 370 399 482 495 874 903 924]]
Test Case: 1941 | Input/Output: [[-636 -171 -487 344 -719 103 -444 906 -510 -875 -741 995 -825] [-875 -825 -741 -719 -636 -510 -487 -444 -171 103 344 906 995]]
Test Case: 1942 | Input/Output: [[-759 639 189 554 985 -796 -272 378 988 702 675 -50 -999 619 -371 -903 -218 861 -186 610 767 661 508 -873 -807 -992 651 -532 491 -997 -188 353 -58 927 529 42 -972 568 -404 -823 577 541 -128 -153 -316 -233 942 -710 -271] [-999 -997 -992 -972 -903 -873 -823 -807 -796 -759 -710 -532 -404 -371 -316 -272 -271 -233 -218 -188 -186 -153 -128 -58 -50 42 189 353 378 491 508 529 541 554 568 577 610 619 639 651 661 675 702 767 861 927 942 985 988]]
Test Case: 1943 | Input/Output: [[278 56 -951 185 -816 851 513 708 723 585 -595 106 -733 874 -658] [-951 -816 -733 -658 -595 56 106 185 278 513 585 708 723 851 874]]
Test Case: 1944 | Input/Output: [[-363 -124 425 990 579 746 471 -942 3 149 52 148 -612 -230 -405 -385 -434] [-942 -612 -434 -405 -385 -363 -230 -124 3 52 148 149 425 471 579 746 990]]
Test Case: 1945 | Input/Output: [[-587 -318 885 -743 439 -304 -730 -503 -479 631 19 192 -340 286 -66 -341 -763 797 268 -199 -693 260 580 587 -356 688 -193 201 -731 575 -330 96 609 501 659 -288 276 579 109 -134 -448 626 -292 585 297 -924 -777] [-924 -777 -763 -743 -731 -730 -693 -587 -503 -479 -448 -356 -341 -340 -330 -318 -304 -292 -288 -199 -193 -134 -66 19 96 109 192 201 260 268 276 286 297 439 501 575 579 580 585 587 609 626 631 659 688 797 885]]
Test Case: 1946 | Input/Output: [[698 -606 -945 -365 991 459 -398 817 -132 -627 994 206 178 -356 -743 -199 -142 788 -897 -164 -863 588 -291 420] [-945 -897 -863 -743 -627 -606 -398 -365 -356 -291 -199 -164 -142 -132 178 206 420 459 588 698 788 817 991 994]]
Test Case: 1947 | Input/Output: [[506 -1000 647 -284 -466 792 -625 569 167 -789 546 -111 -418 949 -428 663] [-1000 -789 -625 -466 -428 -418 -284 -111 167 506 546 569 647 663 792 949]]
Test Case: 1948 | Input/Output: [[26 130 -159 489 -639 -61 642 -717 -464 267 -840 -739 -599 808 -717 664 -156 -861 313 -640 -169 -70 -991 272 -584 -975 374 -113 499 305 328 188 -417 905 850 -480] [-991 -975 -861 -840 -739 -717 -717 -640 -639 -599 -584 -480 -464 -417 -169 -159 -156 -113 -70 -61 26 130 188 267 272 305 313 328 374 489 499 642 664 808 850 905]]
Test Case: 1949 | Input/Output: [[-415 695 733 131 -390 15 781 -329 539 -65 -359 -503 285 -670 826 -472 473 -370 -249 -574 -244 -320 -154 -29 52 587 76 527 838] [-670 -574 -503 -472 -415 -390 -370 -359 -329 -320 -249 -244 -154 -65 -29 15 52 76 131 285 473 527 539 587 695 733 781 826 838]]
Test Case: 1950 | Input/Output: [[439 81 785 -825 522 354 -751 -721 254 -95 -465 701 -271 -348 297 234 -268 144 447 -730 219 53 479 360 -744 725 -546 130 -231] [-825 -751 -744 -730 -721 -546 -465 -348 -271 -268 -231 -95 53 81 130 144 219 234 254 297 354 360 439 447 479 522 701 725 785]]
Test Case: 1951 | Input/Output: [[369 -415 -274 887 -788 -132 -538 497 636 295 19] [-788 -538 -415 -274 -132 19 295 369 497 636 887]]
Test Case: 1952 | Input/Output: [[-697 261 720 820 -159 348 859 -781 56 -578 307 918 -970 512 59 534 -545 -663 -959 -941 527 -717 -306 958 978 576 -681 37 117 653 453 -50 -547 426] [-970 -959 -941 -781 -717 -697 -681 -663 -578 -547 -545 -306 -159 -50 37 56 59 117 261 307 348 426 453 512 527 534 576 653 720 820 859 918 958 978]]
Test Case: 1953 | Input/Output: [[753 -481 757 -480 -554 -34 -786 238 207 109 -911 -629 -784 -425 -61] [-911 -786 -784 -629 -554 -481 -480 -425 -61 -34 109 207 238 753 757]]
Test Case: 1954 | Input/Output: [[-557 -622 -995 64 -318 -665 533 -198 -997 305 -30 814 114 82 941 -974 25 -808 140 -166 -101 -128 380 -942 59 177 -414 288 630 11 -662] [-997 -995 -974 -942 -808 -665 -662 -622 -557 -414 -318 -198 -166 -128 -101 -30 11 25 59 64 82 114 140 177 288 305 380 533 630 814 941]]
Test Case: 1955 | Input/Output: [[-746 503 -694] [-746 -694 503]]
Test Case: 1956 | Input/Output: [[460 -517 -540 935 -474 -521 736 331 -686 227 -560 -126 186 -567 -891 947 -167 -697 -956 884 -978 -560 775 -369 920 801 364 721 -459 -245 608 556 -680 967 546 -796 -808 -654 -653 304] [-978 -956 -891 -808 -796 -697 -686 -680 -654 -653 -567 -560 -560 -540 -521 -517 -474 -459 -369 -245 -167 -126 186 227 304 331 364 460 546 556 608 721 736 775 801 884 920 935 947 967]]
Test Case: 1957 | Input/Output: [[542 -698 429 -515 -523 27 926 -972 -749 688 76 -239 -971 -209 -396 623 -351 -582 126 -786 662 -584 375 -707 -577 590 459 -640 683 584 -640 -847 -966 -856 -707 -737 942 972 -166 -553 -769] [-972 -971 -966 -856 -847 -786 -769 -749 -737 -707 -707 -698 -640 -640 -584 -582 -577 -553 -523 -515 -396 -351 -239 -209 -166 27 76 126 375 429 459 542 584 590 623 662 683 688 926 942 972]]
Test Case: 1958 | Input/Output: [[-86 46 517 -591 235 12 54 -180 415 -998 -490 -483 -749 178 -1 -982 996 -77 779 -864 -99 633 621 -947 -877 730 906 353 483 335 456 -449 287 916 -682 -562 -253 591 251 134 -442 -408] [-998 -982 -947 -877 -864 -749 -682 -591 -562 -490 -483 -449 -442 -408 -253 -180 -99 -86 -77 -1 12 46 54 134 178 235 251 287 335 353 415 456 483 517 591 621 633 730 779 906 916 996]]
Test Case: 1959 | Input/Output: [[-666 792 -436 214 -962 -513 -271 -332 -140 -900 96 289 -700 -221 -192] [-962 -900 -700 -666 -513 -436 -332 -271 -221 -192 -140 96 214 289 792]]
Test Case: 1960 | Input/Output: [[-663 687 -915 -955 634 894 -44 927 -455 668 -272 -870 -511 620 -760 197 807 -780] [-955 -915 -870 -780 -760 -663 -511 -455 -272 -44 197 620 634 668 687 807 894 927]]
Test Case: 1961 | Input/Output: [[-316 -949 -339 -699 704 342 -328 900 -100 779 462 81 732 -664 -338 377 -291 -707 413 261 105 168 306 370 -722 -64 0 339 -393] [-949 -722 -707 -699 -664 -393 -339 -338 -328 -316 -291 -100 -64 0 81 105 168 261 306 339 342 370 377 413 462 704 732 779 900]]
Test Case: 1962 | Input/Output: [[822 793 374 -350 -238 -201 401 -945 591 -554 418 413 489 305 575 622 -299 897 -796 -941 -687 820] [-945 -941 -796 -687 -554 -350 -299 -238 -201 305 374 401 413 418 489 575 591 622 793 820 822 897]]
Test Case: 1963 | Input/Output: [[99 391 244 -350 666 -55 296 544 -898 -210 -568 -720 395 544 560 -680 -811 -416 -896] [-898 -896 -811 -720 -680 -568 -416 -350 -210 -55 99 244 296 391 395 544 544 560 666]]
Test Case: 1964 | Input/Output: [[410 612 -321 -979 -401 -301 -443 -762 -789 -236 265 -293 765 276 764 -778 -901 -848 -192 789 -831 665 -443 353 536 618 269 472 622 603 -525 954 -242 165 26 -934 177] [-979 -934 -901 -848 -831 -789 -778 -762 -525 -443 -443 -401 -321 -301 -293 -242 -236 -192 26 165 177 265 269 276 353 410 472 536 603 612 618 622 665 764 765 789 954]]
Test Case: 1965 | Input/Output: [[-507 31 -829 858 687 -577 303 752 467 -90 -819 -952 -956] [-956 -952 -829 -819 -577 -507 -90 31 303 467 687 752 858]]
Test Case: 1966 | Input/Output: [[-736 -588 -374 -570 907 -905 -708 -554 173 -258 159 -164 561 -821 -902 383 -97 -54 403 -408 -702 -817 -845 509 -697 -129 374 598 -75 -388 -473] [-905 -902 -845 -821 -817 -736 -708 -702 -697 -588 -570 -554 -473 -408 -388 -374 -258 -164 -129 -97 -75 -54 159 173 374 383 403 509 561 598 907]]
Test Case: 1967 | Input/Output: [[172 -218 -339 -56 -811 -143 692 -863 -69 197 938 -85 -165 -857 364 -828 -431 -272 103 -332 -256 349 -723 -440 419 -458 875 -619 -348 -8 -371 52 718 885 160 -283 -128 -695 271 -293 -242 -82 507 -911 -64 289 -555 -45 508 -896] [-911 -896 -863 -857 -828 -811 -723 -695 -619 -555 -458 -440 -431 -371 -348 -339 -332 -293 -283 -272 -256 -242 -218 -165 -143 -128 -85 -82 -69 -64 -56 -45 -8 52 103 160 172 197 271 289 349 364 419 507 508 692 718 875 885 938]]
Test Case: 1968 | Input/Output: [[303 -119 -972 225 -595 -691 -179 -102 136 -164 338 -705 549 -263 672 365 -895 764 247 -40 -467] [-972 -895 -705 -691 -595 -467 -263 -179 -164 -119 -102 -40 136 225 247 303 338 365 549 672 764]]
Test Case: 1969 | Input/Output: [[-862 -507 -735 618 818 955 594 251 -926 -487 -136 -167 -290 707 386 883 508 123 53 -201 -524 850 838 549] [-926 -862 -735 -524 -507 -487 -290 -201 -167 -136 53 123 251 386 508 549 594 618 707 818 838 850 883 955]]
Test Case: 1970 | Input/Output: [[243 -576 -19 624 322 642 -34 -827 789 -443 -317 -259 -639 716 907 -108 -192 904 206 568 716 527] [-827 -639 -576 -443 -317 -259 -192 -108 -34 -19 206 243 322 527 568 624 642 716 716 789 904 907]]
Test Case: 1971 | Input/Output: [[-667 -973 964 469 -925 686 302 -889 4 229 -963 -779 206 379 -252 -820 291 -895 205] [-973 -963 -925 -895 -889 -820 -779 -667 -252 4 205 206 229 291 302 379 469 686 964]]
Test Case: 1972 | Input/Output: [[160 458 718 -532 210 522] [-532 160 210 458 522 718]]
Test Case: 1973 | Input/Output: [[-446 -584 942 -293 882 335 586 -166 569 -738 -349 -325 841 618 416 -931 -994 -149 -253 -186 962 601 157 838 401 -668 -943 -585 -354 -510 867 662 982 -219 77 910 -303 230 416 270 584] [-994 -943 -931 -738 -668 -585 -584 -510 -446 -354 -349 -325 -303 -293 -253 -219 -186 -166 -149 77 157 230 270 335 401 416 416 569 584 586 601 618 662 838 841 867 882 910 942 962 982]]
Test Case: 1974 | Input/Output: [[506 24 183 119 -781 558 190 77 923 -292 576 -662 98 662 830 334 -38 -397 -694 34] [-781 -694 -662 -397 -292 -38 24 34 77 98 119 183 190 334 506 558 576 662 830 923]]
Test Case: 1975 | Input/Output: [[46 391 -996 269 65 -337 -734 -361 426 -773 688 654 -418 -552 291 425 742 -393 715 377 -40 92 245 -770 619 579 5 -287 319 -39 843 -183 878 -74] [-996 -773 -770 -734 -552 -418 -393 -361 -337 -287 -183 -74 -40 -39 5 46 65 92 245 269 291 319 377 391 425 426 579 619 654 688 715 742 843 878]]
Test Case: 1976 | Input/Output: [[-927 -356 -788 309 508 217 -471 40 868 -765 -565 184 694 852 -701 -113 -493 895 -574 -923 -369 818 -455 568 998 -520 -400 643] [-927 -923 -788 -765 -701 -574 -565 -520 -493 -471 -455 -400 -369 -356 -113 40 184 217 309 508 568 643 694 818 852 868 895 998]]
Test Case: 1977 | Input/Output: [[416 -537 454 -290 -728 -520 527 468 705 761 -198 987 664 -546 682 981 -888 -369 -395 -998 904 609 880 556 976 -627 489 -64 604 -960 109 -748 -436 -92 311 798 731 733 -238 983 981 -959 792 -939 -872 402 626 97] [-998 -960 -959 -939 -888 -872 -748 -728 -627 -546 -537 -520 -436 -395 -369 -290 -238 -198 -92 -64 97 109 311 402 416 454 468 489 527 556 604 609 626 664 682 705 731 733 761 792 798 880 904 976 981 981 983 987]]
Test Case: 1978 | Input/Output: [[14 161 367 -317 -410 202 -801 -856 -288 -973 608 930 -89 -166 363 -39 -501 -6 134 967 -545 -842 92 703 313 658 -439 31 -377 -795 -522 357 -531 -961 -600 -701 -599 515 118 -968 -245 -286 -666 678] [-973 -968 -961 -856 -842 -801 -795 -701 -666 -600 -599 -545 -531 -522 -501 -439 -410 -377 -317 -288 -286 -245 -166 -89 -39 -6 14 31 92 118 134 161 202 313 357 363 367 515 608 658 678 703 930 967]]
Test Case: 1979 | Input/Output: [[-563 263 511 -580 -178 827 849 -26 740 585 -361 583 13 -298 -645 -862 487 938 -92 -958 387 -91 145 974 -258 -42 -51 -788 271 -397 268 -650 -419 -505 -936 50 958 -78 369 -250 -269 -588 -438 105] [-958 -936 -862 -788 -650 -645 -588 -580 -563 -505 -438 -419 -397 -361 -298 -269 -258 -250 -178 -92 -91 -78 -51 -42 -26 13 50 105 145 263 268 271 369 387 487 511 583 585 740 827 849 938 958 974]]
Test Case: 1980 | Input/Output: [[-747 771 -290 583 458 110 809 324 735 135 551 -678 887 -397 814 -433 -461 223 970 505 -873 924 736 959 -90 481 -538 -475 327 657 -203 241 265 -542 -71 -611 746 -347 -381 -628 -842 -869 -637 -200] [-873 -869 -842 -747 -678 -637 -628 -611 -542 -538 -475 -461 -433 -397 -381 -347 -290 -203 -200 -90 -71 110 135 223 241 265 324 327 458 481 505 551 583 657 735 736 746 771 809 814 887 924 959 970]]
Test Case: 1981 | Input/Output: [[533 189 -735 831 -166 982 838 244 290 -33 -309 -422 -479 365 -724 -217 987 -803 543 951] [-803 -735 -724 -479 -422 -309 -217 -166 -33 189 244 290 365 533 543 831 838 951 982 987]]
Test Case: 1982 | Input/Output: [[462 966 -176 -826 783 688 -451 -787 -475 239 -123 -208 -338 -618 -563 -596 379 -79 22 641 -14 -133 366 -739 509 -61 423 528 -175 -418 192 403 -31 874 -531 -622 -897 -112 380] [-897 -826 -787 -739 -622 -618 -596 -563 -531 -475 -451 -418 -338 -208 -176 -175 -133 -123 -112 -79 -61 -31 -14 22 192 239 366 379 380 403 423 462 509 528 641 688 783 874 966]]
Test Case: 1983 | Input/Output: [[415 157 274 -191 -838 -299 522 432 -276 -304 947 -413 -436 669 -592 -785 205 -674 482] [-838 -785 -674 -592 -436 -413 -304 -299 -276 -191 157 205 274 415 432 482 522 669 947]]
Test Case: 1984 | Input/Output: [[595 882 -594 -982 848 -683 920 469 -403 825 52 -59 -852 -241 310 -467 -33 -79 675 530 471 40 -29 -20 -270 -525 -400 -302 -918 -704 610 -406 410 767 507 589 295 209 -285 150 729 146 111] [-982 -918 -852 -704 -683 -594 -525 -467 -406 -403 -400 -302 -285 -270 -241 -79 -59 -33 -29 -20 40 52 111 146 150 209 295 310 410 469 471 507 530 589 595 610 675 729 767 825 848 882 920]]
Test Case: 1985 | Input/Output: [[-132 653 314 908 747 -26 606 -1 761 558 812 967 -75 272 531 962 -311 -7 307 838 -608 645 -650 -459 -130 891 -512 -865 341 671 -841 -34 -835 -533 884 376 -367 989 -707 329] [-865 -841 -835 -707 -650 -608 -533 -512 -459 -367 -311 -132 -130 -75 -34 -26 -7 -1 272 307 314 329 341 376 531 558 606 645 653 671 747 761 812 838 884 891 908 962 967 989]]
Test Case: 1986 | Input/Output: [[921 18 -410 -396 874 495 -181 -670 -37 -962 -850 160 -461 -83 -483 222 -828 548 -383 -504 -918 534 505 -498 -737 192 589 267 -552 -185 475 800 -614 646 641 -987 424 -566] [-987 -962 -918 -850 -828 -737 -670 -614 -566 -552 -504 -498 -483 -461 -410 -396 -383 -185 -181 -83 -37 18 160 192 222 267 424 475 495 505 534 548 589 641 646 800 874 921]]
Test Case: 1987 | Input/Output: [[919 -825 674 -479 -515 -730 -597 -329 -562 652 -715 -836 -234 -183 -373 -842 -944 -172 933 99 -80 -964 249] [-964 -944 -842 -836 -825 -730 -715 -597 -562 -515 -479 -373 -329 -234 -183 -172 -80 99 249 652 674 919 933]]
Test Case: 1988 | Input/Output: [[-865 269 478 980 -232 240 224 667 -403] [-865 -403 -232 224 240 269 478 667 980]]
Test Case: 1989 | Input/Output: [[659 489 -543 -709 -612 747 940 79 49 117 -311 535 930 -674 192 583 894 -959 -144 -80 415 591 646 -68 -387 145 -423 -743 676 -559 363 819 185 558 -508 378] [-959 -743 -709 -674 -612 -559 -543 -508 -423 -387 -311 -144 -80 -68 49 79 117 145 185 192 363 378 415 489 535 558 583 591 646 659 676 747 819 894 930 940]]
Test Case: 1990 | Input/Output: [[-506 -784 -54 561 478 967 -829 -878 732 -467 -671 -228 -911 58 669 667 837 407 248 -738 -69 -887 448 -538 870 381] [-911 -887 -878 -829 -784 -738 -671 -538 -506 -467 -228 -69 -54 58 248 381 407 448 478 561 667 669 732 837 870 967]]
Test Case: 1991 | Input/Output: [[-143 -209 617] [-209 -143 617]]
Test Case: 1992 | Input/Output: [[508 -716 -774 116 -90 173 -463 -507 -72 937 186 -985 969 -820 981 470 843 -221 314 995 -857 416 466 -479 877 393 133 669 157 -172 906 62 -43 320] [-985 -857 -820 -774 -716 -507 -479 -463 -221 -172 -90 -72 -43 62 116 133 157 173 186 314 320 393 416 466 470 508 669 843 877 906 937 969 981 995]]
Test Case: 1993 | Input/Output: [[399 -584 -408 517 -608 860 -270 -403 502 309 -812 655] [-812 -608 -584 -408 -403 -270 309 399 502 517 655 860]]
Test Case: 1994 | Input/Output: [[-901 -815 132 -758 718 680 194 302 -102 -416 639 -4 -321 -690 285 953 694 -661 875 91 74 341 -935 -652 -276 -65 854 100 -98 -401 80 814 177 -984 726 272 824 355 584 248 -198 -915 -316] [-984 -935 -915 -901 -815 -758 -690 -661 -652 -416 -401 -321 -316 -276 -198 -102 -98 -65 -4 74 80 91 100 132 177 194 248 272 285 302 341 355 584 639 680 694 718 726 814 824 854 875 953]]
Test Case: 1995 | Input/Output: [[-740 353 434 -396 281 617 339 20 970 670 50 -609 -179 -243 53 -52 -598 -918 -535 -970 -872 163 -253 803 86 -454 565 664 -46 534 64 -208 -633 -487 487 802 130 -474 995 -215 177 998 -459 214 301] [-970 -918 -872 -740 -633 -609 -598 -535 -487 -474 -459 -454 -396 -253 -243 -215 -208 -179 -52 -46 20 50 53 64 86 130 163 177 214 281 301 339 353 434 487 534 565 617 664 670 802 803 970 995 998]]
Test Case: 1996 | Input/Output: [[-288 -121 -587 -996 687 598 838 -425 -58 -140 417 88 665 -55 -308 373 306 -860 -294 432 -367 -955 -557 854 574 -320 -555 -768] [-996 -955 -860 -768 -587 -557 -555 -425 -367 -320 -308 -294 -288 -140 -121 -58 -55 88 306 373 417 432 574 598 665 687 838 854]]
Test Case: 1997 | Input/Output: [[-494 -883 654 34 -160 689 840 48 -653 -481 285 -330 -173 894 -574 -501 58 248 157 894 146 -614 -403 122 -164 325 607 202 542 -372 235 -188 583 722 -500 147 -918 -266 -612 -351] [-918 -883 -653 -614 -612 -574 -501 -500 -494 -481 -403 -372 -351 -330 -266 -188 -173 -164 -160 34 48 58 122 146 147 157 202 235 248 285 325 542 583 607 654 689 722 840 894 894]]
Test Case: 1998 | Input/Output: [[-77 426 -772 387 789 -659 601 -594 404 479 -239 717 -656 -771 -948 -723 -334 964 -312 -471 365 -431 -464 -4 688 -179 -916 -891 -158 303 879 -831 -843 -596 -411 343 -449 423 -14 816 263 -509 385 -374 -821 152 531] [-948 -916 -891 -843 -831 -821 -772 -771 -723 -659 -656 -596 -594 -509 -471 -464 -449 -431 -411 -374 -334 -312 -239 -179 -158 -77 -14 -4 152 263 303 343 365 385 387 404 423 426 479 531 601 688 717 789 816 879 964]]
Test Case: 1999 | Input/Output: [[503 677 -78 407 -586 125 -232 933 -692 -607 -120 229 -525 980 -824 -152 -566 238 -343 -835 -750 -101 -520 537 -767 -667 -479 922 897 727 -394 797 -426 -28 -785 988 -765] [-835 -824 -785 -767 -765 -750 -692 -667 -607 -586 -566 -525 -520 -479 -426 -394 -343 -232 -152 -120 -101 -78 -28 125 229 238 407 503 537 677 727 797 897 922 933 980 988]]
Test Case: 2000 | Input/Output: [[459 -127 -377 211 -629 -563 36 818 973 -454 997 -174 455 -731 800 -242 -575 -84 -465 400 -494] [-731 -629 -575 -563 -494 -465 -454 -377 -242 -174 -127 -84 36 211 400 455 459 800 818 973 997]]
Test Case: 2001 | Input/Output: [[-195 364 -782 -117 97 -979 447 316 -990 -725 502 -516 780 -723 394 647 -544 -397] [-990 -979 -782 -725 -723 -544 -516 -397 -195 -117 97 316 364 394 447 502 647 780]]
Test Case: 2002 | Input/Output: [[852 921 -779 840 782 -485 654 51 351 -304 -403 -27 473] [-779 -485 -403 -304 -27 51 351 473 654 782 840 852 921]]
Test Case: 2003 | Input/Output: [[-696 -691 -347 -32 80 -565 766 449 -300 -829 31 992 808 523 237 -66 234 -811 -765 -581 422 -686 981 -161 609 -939 873 3 -509 455 -374 -496 -192 -500 719 280 786 -368 728 561 -583 -578] [-939 -829 -811 -765 -696 -691 -686 -583 -581 -578 -565 -509 -500 -496 -374 -368 -347 -300 -192 -161 -66 -32 3 31 80 234 237 280 422 449 455 523 561 609 719 728 766 786 808 873 981 992]]
Test Case: 2004 | Input/Output: [[-464 -716 -653 -107 -682 -55] [-716 -682 -653 -464 -107 -55]]
Test Case: 2005 | Input/Output: [[113 -328 111 392 508 -725 549 549 -553 -624] [-725 -624 -553 -328 111 113 392 508 549 549]]
Test Case: 2006 | Input/Output: [[-234 435 -475 -255 -114 781 -639 -288 -121 -940 830 904 312 701 532 -48 617 -511 314 57 675 -955 -866 -953 558 -971 5 673 189 -725 -640 300 -19 188 926 401 -330 -405 -229 -961 -802 -740 609 21 687 606 -732 708 -835 -185] [-971 -961 -955 -953 -940 -866 -835 -802 -740 -732 -725 -640 -639 -511 -475 -405 -330 -288 -255 -234 -229 -185 -121 -114 -48 -19 5 21 57 188 189 300 312 314 401 435 532 558 606 609 617 673 675 687 701 708 781 830 904 926]]
Test Case: 2007 | Input/Output: [[-525 -894] [-894 -525]]
Test Case: 2008 | Input/Output: [[505 -111 -132 155 -382 239 -690 771 442 278 -929 -591 -291 704 505 627 -708 -105 345 -953 -57 581 307 597 507 -755 138 -544 229 -219 161 -776 139 -23 487 -773 -500 -940 918 -532 725 158] [-953 -940 -929 -776 -773 -755 -708 -690 -591 -544 -532 -500 -382 -291 -219 -132 -111 -105 -57 -23 138 139 155 158 161 229 239 278 307 345 442 487 505 505 507 581 597 627 704 725 771 918]]
Test Case: 2009 | Input/Output: [[-239 -896 618 -82 140 900] [-896 -239 -82 140 618 900]]
Test Case: 2010 | Input/Output: [[67 -960 299 -349 495 -519 471 923 -508 751 312 -617 -52 -806 37 492 697 414 584 844 -564 327 -718 834 717 398 -591 -359 -630 -35 890 -736 -446 -292 287 593 607 958 737 -878 970 414] [-960 -878 -806 -736 -718 -630 -617 -591 -564 -519 -508 -446 -359 -349 -292 -52 -35 37 67 287 299 312 327 398 414 414 471 492 495 584 593 607 697 717 737 751 834 844 890 923 958 970]]
Test Case: 2011 | Input/Output: [[-173 670] [-173 670]]
Test Case: 2012 | Input/Output: [[709 254 -239 -767 -700 -725 -641 879 609 -729 359 960 -266 37 12 146 784 608 682 989 -926 -149 -964 89 429 -408 598 738 959 -904 669 -23 -448 36 -807 -632 -664 472] [-964 -926 -904 -807 -767 -729 -725 -700 -664 -641 -632 -448 -408 -266 -239 -149 -23 12 36 37 89 146 254 359 429 472 598 608 609 669 682 709 738 784 879 959 960 989]]
Test Case: 2013 | Input/Output: [[-704 -532 923 110 -975 753 277 759 -485 -757 534 -105 -775 635 -979 591 725 458 773 -652 792 884 -804 773 941 381 239 244 279 918 -966 416 275] [-979 -975 -966 -804 -775 -757 -704 -652 -532 -485 -105 110 239 244 275 277 279 381 416 458 534 591 635 725 753 759 773 773 792 884 918 923 941]]
Test Case: 2014 | Input/Output: [[954 30 -133 784 18 504 380 -793 -790 -626 351 -55 7 469 470 -254 421 -843 494 221 -194 -36 -676 -41] [-843 -793 -790 -676 -626 -254 -194 -133 -55 -41 -36 7 18 30 221 351 380 421 469 470 494 504 784 954]]
Test Case: 2015 | Input/Output: [[-520 858 -643 -430 -717 844 -997 -947 356 431 -28 -766 863 425 21 133 -630 -250 -330 516 -21 -610 -179 -470 426 805 154 -242 654 789 141 76 467 -784 406 -613 837 615 -697 -257 -821 201 943 359 361 -607 732 -38] [-997 -947 -821 -784 -766 -717 -697 -643 -630 -613 -610 -607 -520 -470 -430 -330 -257 -250 -242 -179 -38 -28 -21 21 76 133 141 154 201 356 359 361 406 425 426 431 467 516 615 654 732 789 805 837 844 858 863 943]]
Test Case: 2016 | Input/Output: [[-942 114 494 -289 -903 928 26 -457 -350 -915 -478 19 -570 206 -86 -886 -940 490 642 132 -4 418 -422 -927 688 117 -513 845 -684 -228 657 156 -96 801 434 445] [-942 -940 -927 -915 -903 -886 -684 -570 -513 -478 -457 -422 -350 -289 -228 -96 -86 -4 19 26 114 117 132 156 206 418 434 445 490 494 642 657 688 801 845 928]]
Test Case: 2017 | Input/Output: [[-841 121 -410 -153 687 -256 71 -244 475 834 -366 879 532 482 -783 599 313 -123 -323 -390 398 -614 639 -222 390 -628 383 500 -677 -245 -802 -250 35 -91 -932 -45 -465] [-932 -841 -802 -783 -677 -628 -614 -465 -410 -390 -366 -323 -256 -250 -245 -244 -222 -153 -123 -91 -45 35 71 121 313 383 390 398 475 482 500 532 599 639 687 834 879]]
Test Case: 2018 | Input/Output: [[428 554 -170 115 -581 335 -329 -865 932 396 -227 -950 -21 260 -610] [-950 -865 -610 -581 -329 -227 -170 -21 115 260 335 396 428 554 932]]
Test Case: 2019 | Input/Output: [[885 -659 738 -307 744 880 399 -583 -734 -581 27 -169 779 428 946 -847 -992] [-992 -847 -734 -659 -583 -581 -307 -169 27 399 428 738 744 779 880 885 946]]
Test Case: 2020 | Input/Output: [[811 -375 -524 -357 -731 -188 -316 818 -678 66 820 734 644 -81 515 -301 -154 109 711 169 635 -982 -804 780 -726 945 970 -586 -711 -324 822] [-982 -804 -731 -726 -711 -678 -586 -524 -375 -357 -324 -316 -301 -188 -154 -81 66 109 169 515 635 644 711 734 780 811 818 820 822 945 970]]
Test Case: 2021 | Input/Output: [[-116 -4 -425 -403 420 -574 -213 -567 103 611 -560 423 259 -203 -506 -589 -443 -420 -672 -825 -515 934 629 -569 437 -159 -837 858 -95 -378 -398 -972 481 -252 273 -26 -392 689] [-972 -837 -825 -672 -589 -574 -569 -567 -560 -515 -506 -443 -425 -420 -403 -398 -392 -378 -252 -213 -203 -159 -116 -95 -26 -4 103 259 273 420 423 437 481 611 629 689 858 934]]
Test Case: 2022 | Input/Output: [[-737 194 -611 206 -942 822 766 -608 78 -974 226 313 173] [-974 -942 -737 -611 -608 78 173 194 206 226 313 766 822]]
Test Case: 2023 | Input/Output: [[-740 856 -434 89 -92 221 -245 279 -457 358 -225 -578 -171 -495 -830 989 206] [-830 -740 -578 -495 -457 -434 -245 -225 -171 -92 89 206 221 279 358 856 989]]
Test Case: 2024 | Input/Output: [[-244 237 35] [-244 35 237]]
Test Case: 2025 | Input/Output: [[-892 -865 593 429 986 -451 399 -690 234 432 352 839 527 -245 474 -372 -361 950 -438 -433 -941 382 438 164 809 631] [-941 -892 -865 -690 -451 -438 -433 -372 -361 -245 164 234 352 382 399 429 432 438 474 527 593 631 809 839 950 986]]
Test Case: 2026 | Input/Output: [[78 548 570 916 522 633 628 496 658 -382 456 557 315 -188 443 -165 862 -825 906 926 -669 472 -879 -378 -594 -459 569 176 806 -526 276 850 -332 -282 -90 -650 945 446 836] [-879 -825 -669 -650 -594 -526 -459 -382 -378 -332 -282 -188 -165 -90 78 176 276 315 443 446 456 472 496 522 548 557 569 570 628 633 658 806 836 850 862 906 916 926 945]]
Test Case: 2027 | Input/Output: [[-517 -352 515 888 368 608 720 -865 229 693 162 -863 -962 712 -680 -271 833 -788 851] [-962 -865 -863 -788 -680 -517 -352 -271 162 229 368 515 608 693 712 720 833 851 888]]
Test Case: 2028 | Input/Output: [[-40 634 -649 544 -271 -661 576 783 119 979 -871 -173 -921 843] [-921 -871 -661 -649 -271 -173 -40 119 544 576 634 783 843 979]]
Test Case: 2029 | Input/Output: [[-106 877 517 171 -63 948 -22 -721 609] [-721 -106 -63 -22 171 517 609 877 948]]
Test Case: 2030 | Input/Output: [[-875 325 795 -94 373 -662 -63 974 -824 -190 654 20 -589 585 492 -323 -846 -95 -814 -716 777 -622 -279 271 -33 536 -992 -473] [-992 -875 -846 -824 -814 -716 -662 -622 -589 -473 -323 -279 -190 -95 -94 -63 -33 20 271 325 373 492 536 585 654 777 795 974]]
Test Case: 2031 | Input/Output: [[88 -419 669 -864 104 -392 -2 -177 -554 -460 757 -901 -106 4 -57 770 937 -441 815 -842] [-901 -864 -842 -554 -460 -441 -419 -392 -177 -106 -57 -2 4 88 104 669 757 770 815 937]]
Test Case: 2032 | Input/Output: [[-564 -752 -613 -97 -289 -381 622 989 -633 -447 172 539 508] [-752 -633 -613 -564 -447 -381 -289 -97 172 508 539 622 989]]
Test Case: 2033 | Input/Output: [[748 -989 557 -12 -630 378 711 885 -393 -701 -13 645 346 -973 582 16 56 246 347 -686 532 719 -741 531 106 592 -119 198 266 639 990 156 -885 753 736 349 64 779 728 -608 666] [-989 -973 -885 -741 -701 -686 -630 -608 -393 -119 -13 -12 16 56 64 106 156 198 246 266 346 347 349 378 531 532 557 582 592 639 645 666 711 719 728 736 748 753 779 885 990]]
Test Case: 2034 | Input/Output: [[-293 574 -196 -979 5 562 464 -448 -21 261 621 -259 595 450 292 -59 -981 162 129 -380 529 -676 -541] [-981 -979 -676 -541 -448 -380 -293 -259 -196 -59 -21 5 129 162 261 292 450 464 529 562 574 595 621]]
Test Case: 2035 | Input/Output: [[732 203 135 -104 534 -508 -593 343 187 137 -930 915 749 876 181 -698 -673 138 -462 943 947 -698 -393 -397 -839 480 -987 189 -516 167 281 -69 -263] [-987 -930 -839 -698 -698 -673 -593 -516 -508 -462 -397 -393 -263 -104 -69 135 137 138 167 181 187 189 203 281 343 480 534 732 749 876 915 943 947]]
Test Case: 2036 | Input/Output: [[431 834 -81 134 81 -499 535 182 -313 -686 793 -770 7 -553 491] [-770 -686 -553 -499 -313 -81 7 81 134 182 431 491 535 793 834]]
Test Case: 2037 | Input/Output: [[-587 287 -855 -196 -479 -378 -426 -949 110 -528 -176 -8 706 -243 368 239 -463 774 -338 650 -800 392 -361 10 -806 -929 -151] [-949 -929 -855 -806 -800 -587 -528 -479 -463 -426 -378 -361 -338 -243 -196 -176 -151 -8 10 110 239 287 368 392 650 706 774]]
Test Case: 2038 | Input/Output: [[786 960 -727 -285 -146 -685 610 -248 696 95 160 16 904] [-727 -685 -285 -248 -146 16 95 160 610 696 786 904 960]]
Test Case: 2039 | Input/Output: [[-573 -38 -235 -73 -654 -763 -652 264 20 -338 -249 845 -7 229 -952 196 -184 -321 942 -90 -968 -901 -247 -165 518 -767 30 -69 -717 486 -765 31 142 -862 577 262 -997 322 795 -630] [-997 -968 -952 -901 -862 -767 -765 -763 -717 -654 -652 -630 -573 -338 -321 -249 -247 -235 -184 -165 -90 -73 -69 -38 -7 20 30 31 142 196 229 262 264 322 486 518 577 795 845 942]]
Test Case: 2040 | Input/Output: [[563 -792 870 -965 309 552 577 -109 -476 276 -214 709 -233 -641 -496 355 -49 174 382 46 -899 -882 925 949 297 -291 295 -806 780 -397 579] [-965 -899 -882 -806 -792 -641 -496 -476 -397 -291 -233 -214 -109 -49 46 174 276 295 297 309 355 382 552 563 577 579 709 780 870 925 949]]
Test Case: 2041 | Input/Output: [[820 809 -294 951 -600 857 922 -162 392 -772 594 -367 -729 992 926 471 487 -97 -436] [-772 -729 -600 -436 -367 -294 -162 -97 392 471 487 594 809 820 857 922 926 951 992]]
Test Case: 2042 | Input/Output: [[374 -294 -956 -381 166 43 914 108 122 -933 604 -882 181 286 204 659 213 960 -725 -595 -132 132 -854 228 811 -557 -282 -224 -2 455 -588 690 -531 838 445] [-956 -933 -882 -854 -725 -595 -588 -557 -531 -381 -294 -282 -224 -132 -2 43 108 122 132 166 181 204 213 228 286 374 445 455 604 659 690 811 838 914 960]]
Test Case: 2043 | Input/Output: [[961 -706 325] [-706 325 961]]
Test Case: 2044 | Input/Output: [[4 -908 797 540 128 539 -507 -989 85 -860 -164 -476 -199 -220 -254 903 -151 35 549 50] [-989 -908 -860 -507 -476 -254 -220 -199 -164 -151 4 35 50 85 128 539 540 549 797 903]]
Test Case: 2045 | Input/Output: [[-244 -571 749 221 596 2 -562 737 -28 1 -830 190 -542 242 -326 726 -193 -108 301 -273 621] [-830 -571 -562 -542 -326 -273 -244 -193 -108 -28 1 2 190 221 242 301 596 621 726 737 749]]
Test Case: 2046 | Input/Output: [[-590 978 -691 238 70 719 5 -43 -415 263 -98 775 742 586 603 647 -896 -862 696 -124 543 -560 791 -244 -251 158 228 -633 -960 737 556 669 -979 827 -245 202 777 -975 467 403 659 -807 33 -153 -229 199 -469 -295] [-979 -975 -960 -896 -862 -807 -691 -633 -590 -560 -469 -415 -295 -251 -245 -244 -229 -153 -124 -98 -43 5 33 70 158 199 202 228 238 263 403 467 543 556 586 603 647 659 669 696 719 737 742 775 777 791 827 978]]
Test Case: 2047 | Input/Output: [[879 471 870 723 -972 471 1000 8 -834 -998 334 -748 -694 -6 -876 -974 -14 -356 -58 -268 143 -142 -245] [-998 -974 -972 -876 -834 -748 -694 -356 -268 -245 -142 -58 -14 -6 8 143 334 471 471 723 870 879 1000]]
Test Case: 2048 | Input/Output: [[932 -714 605 -380 921 668 -381 -691 42 -387 603 252 -745 -538 94 929 -956 634 346 -274 426 445 -553 471 582 -971 -363 -555] [-971 -956 -745 -714 -691 -555 -553 -538 -387 -381 -380 -363 -274 42 94 252 346 426 445 471 582 603 605 634 668 921 929 932]]
Test Case: 2049 | Input/Output: [[847 161 -351 641 560 142 531 -354 -704 -762 415] [-762 -704 -354 -351 142 161 415 531 560 641 847]]
Test Case: 2050 | Input/Output: [[853 -955 68 25 187 -969 -150 1000 296 542 -95 -615 678 -389 -843 -320 -177 235 -991 -673 682 -623 427 381 250 -47 131 214 889 -416 -220 -926 879 831 137] [-991 -969 -955 -926 -843 -673 -623 -615 -416 -389 -320 -220 -177 -150 -95 -47 25 68 131 137 187 214 235 250 296 381 427 542 678 682 831 853 879 889 1000]]
Test Case: 2051 | Input/Output: [[-945 249 -921] [-945 -921 249]]
Test Case: 2052 | Input/Output: [[-619 -386 617 541 235 797 803 617 -321 -929 898 -934 345 229 414 358 479 -453 831 -31 -228 -52 955 369 201 905 -728 -204 288 -425] [-934 -929 -728 -619 -453 -425 -386 -321 -228 -204 -52 -31 201 229 235 288 345 358 369 414 479 541 617 617 797 803 831 898 905 955]]
Test Case: 2053 | Input/Output: [[-314 -957 -853 976 -828 -487 -179 660 438 -295 216 984 178 638 -427 -190 -590 -354 34 725 640 -441 963 -124 516 84 619 143 150 312 735 -501 635 -9 -392 5 170 986 -38 607 735 10 865 788 537 791 157] [-957 -853 -828 -590 -501 -487 -441 -427 -392 -354 -314 -295 -190 -179 -124 -38 -9 5 10 34 84 143 150 157 170 178 216 312 438 516 537 607 619 635 638 640 660 725 735 735 788 791 865 963 976 984 986]]
Test Case: 2054 | Input/Output: [[-757 749 375 -715 248 19 947 -387 -783 -485 292 205 -847 479 -676 781 809 -187 -25 270 -53 435 552 -605 15 -279 955 -288 601 -837 931 -65 306 376 -726 537 -714] [-847 -837 -783 -757 -726 -715 -714 -676 -605 -485 -387 -288 -279 -187 -65 -53 -25 15 19 205 248 270 292 306 375 376 435 479 537 552 601 749 781 809 931 947 955]]
Test Case: 2055 | Input/Output: [[-828 -783 -618 89 7] [-828 -783 -618 7 89]]
Test Case: 2056 | Input/Output: [[-998 -994 549 -830 -564 -619 126 72 -478 -970 799 566 -442 -499 -99 369 891 293 285 -697 -211 794 -403 776 -226 735 -468 -686] [-998 -994 -970 -830 -697 -686 -619 -564 -499 -478 -468 -442 -403 -226 -211 -99 72 126 285 293 369 549 566 735 776 794 799 891]]
Test Case: 2057 | Input/Output: [[578 -970 473 410 -500 848 -432 4 616 218 439 843 -90 -638 -542 111 -437 -131 -402 4 589 -418 797 195 662 -190 -75 395 859 450 214 598 703 48 -836 610 -221 944 69 -511 -522 450] [-970 -836 -638 -542 -522 -511 -500 -437 -432 -418 -402 -221 -190 -131 -90 -75 4 4 48 69 111 195 214 218 395 410 439 450 450 473 578 589 598 610 616 662 703 797 843 848 859 944]]
Test Case: 2058 | Input/Output: [[92 -747 836 10 224 -362 916 209 -891 571 -375 492 -310 571 -190 -848 179 364 -924] [-924 -891 -848 -747 -375 -362 -310 -190 10 92 179 209 224 364 492 571 571 836 916]]
Test Case: 2059 | Input/Output: [[-389] [-389]]
Test Case: 2060 | Input/Output: [[-486 -779 363 -834 804 -876 509 -840 -421 241 807 268 -254 785 939 172 -891 -688 286 -923 290 -768 -842 810 903 733 0 183 764 -558] [-923 -891 -876 -842 -840 -834 -779 -768 -688 -558 -486 -421 -254 0 172 183 241 268 286 290 363 509 733 764 785 804 807 810 903 939]]
Test Case: 2061 | Input/Output: [[600 651 361 65 -833 -285 -245 -721 -863 -92 -79 -38 840 -132 -298 159 648 696 949 463 -45 50 82 -907 -797 460 748 -293 -421 576 712] [-907 -863 -833 -797 -721 -421 -298 -293 -285 -245 -132 -92 -79 -45 -38 50 65 82 159 361 460 463 576 600 648 651 696 712 748 840 949]]
Test Case: 2062 | Input/Output: [[243 616 809 -432 -776 873 219 -952 105 312 -478 469 243 504 -659 205 474 681 -615 346 -169] [-952 -776 -659 -615 -478 -432 -169 105 205 219 243 243 312 346 469 474 504 616 681 809 873]]
Test Case: 2063 | Input/Output: [[-663 -680 383 -80 -887 948 -819 -895 -474 106 466 701] [-895 -887 -819 -680 -663 -474 -80 106 383 466 701 948]]
Test Case: 2064 | Input/Output: [[223 245 915 156 -534 611 271 -247 -930 698 -90 -742 885 817 -43 572 172 -4 -973 -706 229 -153 -612 -887 -989 174 -984 -576 -911 290 -729 -102 -111 818 -406 -849 -364 -220 -775 -185 294 -363 -421 -905 -900 -951 728] [-989 -984 -973 -951 -930 -911 -905 -900 -887 -849 -775 -742 -729 -706 -612 -576 -534 -421 -406 -364 -363 -247 -220 -185 -153 -111 -102 -90 -43 -4 156 172 174 223 229 245 271 290 294 572 611 698 728 817 818 885 915]]
Test Case: 2065 | Input/Output: [[274 808 521 -779 -731 -78 87 641 920 351 -286 258 -299 14 264 894 -871 192 -612 840 -760 -320 -16 -129 443 -946 -791 402 -671 -759 -170 62 -54 429 139 -818 -894 -121 -929 138 -50 565 31 -525 204] [-946 -929 -894 -871 -818 -791 -779 -760 -759 -731 -671 -612 -525 -320 -299 -286 -170 -129 -121 -78 -54 -50 -16 14 31 62 87 138 139 192 204 258 264 274 351 402 429 443 521 565 641 808 840 894 920]]
Test Case: 2066 | Input/Output: [[-743 -800 -645 -596 136 -661 -574 305 155 171 834 -785 951 -629 578 -242 502 -77 -805 164 -212 957 -344 -690 95 92 889 586 323 -312 735 -634 189 899 -425 -118 -313 -30 40 -726 794] [-805 -800 -785 -743 -726 -690 -661 -645 -634 -629 -596 -574 -425 -344 -313 -312 -242 -212 -118 -77 -30 40 92 95 136 155 164 171 189 305 323 502 578 586 735 794 834 889 899 951 957]]
Test Case: 2067 | Input/Output: [[63 351 -732 -272 -363 140 596 -922 -497 -870 -828 -62 -166 -674 417 264 -19 -853 134 880 -981 -53 -555 -508] [-981 -922 -870 -853 -828 -732 -674 -555 -508 -497 -363 -272 -166 -62 -53 -19 63 134 140 264 351 417 596 880]]
Test Case: 2068 | Input/Output: [[-880 -265 -933 682 158 574 676] [-933 -880 -265 158 574 676 682]]
Test Case: 2069 | Input/Output: [[-984 370 805 950 -84 -638 396 -983 -964 -311 811 -468 -147 294 -819 224 -425 81 -414 427 -367 24 348 938 -640 -663 -295 -834 -921 -8 239 -917 -469 -218 -364 -374 808 -570 785 762 655 618] [-984 -983 -964 -921 -917 -834 -819 -663 -640 -638 -570 -469 -468 -425 -414 -374 -367 -364 -311 -295 -218 -147 -84 -8 24 81 224 239 294 348 370 396 427 618 655 762 785 805 808 811 938 950]]
Test Case: 2070 | Input/Output: [[-129 41 -469 -92 -366 -697 886 552 729 -335 969 -850 439 -247 991] [-850 -697 -469 -366 -335 -247 -129 -92 41 439 552 729 886 969 991]]
Test Case: 2071 | Input/Output: [[-166 501 843 358 -86 -188 -549 60 124 -692 842 636 287 -1000 -35 164 140] [-1000 -692 -549 -188 -166 -86 -35 60 124 140 164 287 358 501 636 842 843]]
Test Case: 2072 | Input/Output: [[-742 -789 470 402 -820 -528 -926 -21 -635 474 -125 551 -613 -696 680 -986 -432 131 972 -905 -903 296 895 -711 -486 890 -330 533 934 685 838 -362] [-986 -926 -905 -903 -820 -789 -742 -711 -696 -635 -613 -528 -486 -432 -362 -330 -125 -21 131 296 402 470 474 533 551 680 685 838 890 895 934 972]]
Test Case: 2073 | Input/Output: [[483 996 624 -273 292 458 -992 311 -316 -831 324 355 -493 413 746 920 108 10 -873 530 705 -666 713 243 855 258 66 314 -459 897 -223 -74 117 364 -828 843 -965 -239 668 187 312 -140 291 -255] [-992 -965 -873 -831 -828 -666 -493 -459 -316 -273 -255 -239 -223 -140 -74 10 66 108 117 187 243 258 291 292 311 312 314 324 355 364 413 458 483 530 624 668 705 713 746 843 855 897 920 996]]
Test Case: 2074 | Input/Output: [[-767 664 841 -600 86 814 279 -597 -341 -811 -818 -900 -521 471 -870 310 125 -905 -408 -846 260 780] [-905 -900 -870 -846 -818 -811 -767 -600 -597 -521 -408 -341 86 125 260 279 310 471 664 780 814 841]]
Test Case: 2075 | Input/Output: [[-859 781 937 -890 6 -808 995 615 709 321 837 -997 889 184 -412 -278 -919 -638 -777 983 -719 904 145 -34 812 -283 989 831 299 -746 365 -814 -949 691 176 189 558 586 -4 -810 -302 -918 -103 220 86 401 618 -367 -115] [-997 -949 -919 -918 -890 -859 -814 -810 -808 -777 -746 -719 -638 -412 -367 -302 -283 -278 -115 -103 -34 -4 6 86 145 176 184 189 220 299 321 365 401 558 586 615 618 691 709 781 812 831 837 889 904 937 983 989 995]]
Test Case: 2076 | Input/Output: [[653 544 -85 172 -740 -198 -570 388 278 -796 249 -101 278 -480 -245 -151 463 923 544 452 983 -194 392 -628 -697 622 -812 844 -930 779 -616 410 -594 671 731 -462 -451 -281 133 -982 382 739 20 -84 281 -908] [-982 -930 -908 -812 -796 -740 -697 -628 -616 -594 -570 -480 -462 -451 -281 -245 -198 -194 -151 -101 -85 -84 20 133 172 249 278 278 281 382 388 392 410 452 463 544 544 622 653 671 731 739 779 844 923 983]]
Test Case: 2077 | Input/Output: [[171 393 -322 -554 918 -380 -536 271 90 787 120 582 954 152 861 -710 570 -900 87 370 228 -27 272 -943 642 935 -282 776 -9 -466 -424 -328 -757 -695 228 204 860 809 -187 33 762 -389 -177 -448 -619 -480] [-943 -900 -757 -710 -695 -619 -554 -536 -480 -466 -448 -424 -389 -380 -328 -322 -282 -187 -177 -27 -9 33 87 90 120 152 171 204 228 228 271 272 370 393 570 582 642 762 776 787 809 860 861 918 935 954]]
Test Case: 2078 | Input/Output: [[-435 142 -343] [-435 -343 142]]
Test Case: 2079 | Input/Output: [[-738 393 -178 264 117 687 -988 -113 -191 179 -705 -236 -267 -130 -111 -915 -204] [-988 -915 -738 -705 -267 -236 -204 -191 -178 -130 -113 -111 117 179 264 393 687]]
Test Case: 2080 | Input/Output: [[194 -508 273 -103 834 674 826 908 603 -40 349 748 -76 -315 927 68 -774 -613 328 -880 -328 -896 -263 354 -907 794 -273 -877 21 -867] [-907 -896 -880 -877 -867 -774 -613 -508 -328 -315 -273 -263 -103 -76 -40 21 68 194 273 328 349 354 603 674 748 794 826 834 908 927]]
Test Case: 2081 | Input/Output: [[158 -716 -926 -733 -166 884] [-926 -733 -716 -166 158 884]]
Test Case: 2082 | Input/Output: [[200 260 -195 535 484 741 -515 -493 -485 -645 -974 717 -1 953 -87 496 -871 196 -238 -182 -864 44 -273 181 -160 -866 -241 222 46 -586 -843 654 917 906 357 234 -193 -6 276 194 -325 -252 505 -509 -627] [-974 -871 -866 -864 -843 -645 -627 -586 -515 -509 -493 -485 -325 -273 -252 -241 -238 -195 -193 -182 -160 -87 -6 -1 44 46 181 194 196 200 222 234 260 276 357 484 496 505 535 654 717 741 906 917 953]]
Test Case: 2083 | Input/Output: [[-498 -65 104 -414 -831 387 -921 -580 767 -195 -159 -497 961 -415 14 604 -540 -784 699 -886 236 51] [-921 -886 -831 -784 -580 -540 -498 -497 -415 -414 -195 -159 -65 14 51 104 236 387 604 699 767 961]]
Test Case: 2084 | Input/Output: [[-146 646 147 -90 971 -683 968 824 36 -814 -859 745 -85 -27 584 396 -328 -908 -495 42 -421 -661 371 640 921 -612 -587 514 -388 732 -895 -977 864 441 -531 101] [-977 -908 -895 -859 -814 -683 -661 -612 -587 -531 -495 -421 -388 -328 -146 -90 -85 -27 36 42 101 147 371 396 441 514 584 640 646 732 745 824 864 921 968 971]]
Test Case: 2085 | Input/Output: [[242 -529 -410 880 -964 930 -832 -250 -184 -207 507 -498 633 505 -968 -341 929 -181 485 -125 813 217 784 286 400 -743 968 -988 414 467 229 743 -363 508 -675 408 220 234 -736 938 -279 -289 -514] [-988 -968 -964 -832 -743 -736 -675 -529 -514 -498 -410 -363 -341 -289 -279 -250 -207 -184 -181 -125 217 220 229 234 242 286 400 408 414 467 485 505 507 508 633 743 784 813 880 929 930 938 968]]
Test Case: 2086 | Input/Output: [[-247 -901 78 478 872 -831 582 126 -142 -727 589 730 323 -28 360 153 215 253 -37 -265 -350 805 975 787 -459 -614] [-901 -831 -727 -614 -459 -350 -265 -247 -142 -37 -28 78 126 153 215 253 323 360 478 582 589 730 787 805 872 975]]
Test Case: 2087 | Input/Output: [[-635 -362 641 435 -654 949 777 811 -66] [-654 -635 -362 -66 435 641 777 811 949]]
Test Case: 2088 | Input/Output: [[88 -618 -817 161 -480 45 -122 -174 933 610 657 -839 -35 469 614 -715 -608] [-839 -817 -715 -618 -608 -480 -174 -122 -35 45 88 161 469 610 614 657 933]]
Test Case: 2089 | Input/Output: [[-320 -205 970 318 -779 -6] [-779 -320 -205 -6 318 970]]
Test Case: 2090 | Input/Output: [[-40 -61 -730 -515 -32 -900 -543 -232 -6 -295 666 924 -665 422 -706 -320 -296 872 -487 -634 -796 637 -193 586 161 -298 -275 -541 115 124 391 -911 742 -589 389 -278 -587 -558 980 190 463 -337 152 -611 620 -802 425 -843 -632 511] [-911 -900 -843 -802 -796 -730 -706 -665 -634 -632 -611 -589 -587 -558 -543 -541 -515 -487 -337 -320 -298 -296 -295 -278 -275 -232 -193 -61 -40 -32 -6 115 124 152 161 190 389 391 422 425 463 511 586 620 637 666 742 872 924 980]]
Test Case: 2091 | Input/Output: [[867 249 -3 710 -982 -813 -239 174 -307 826 -906 846 858 951 955 428 470 56 594 -432 -672 -858 -430 -86 990 -948 732 -153 -573 497 -976 -530 306 -11 10 754 -431 -669 -561 249 -673 -553 -572 632 128 -694 38 205] [-982 -976 -948 -906 -858 -813 -694 -673 -672 -669 -573 -572 -561 -553 -530 -432 -431 -430 -307 -239 -153 -86 -11 -3 10 38 56 128 174 205 249 249 306 428 470 497 594 632 710 732 754 826 846 858 867 951 955 990]]
Test Case: 2092 | Input/Output: [[233 -516 -820 138 -299 -845 -138 -626 -557] [-845 -820 -626 -557 -516 -299 -138 138 233]]
Test Case: 2093 | Input/Output: [[-951 -889 -901 176 -193 -422 -682 940 456 277 979 256 129 252 448 754 883 -17 -591 -196 -460 -938 -606] [-951 -938 -901 -889 -682 -606 -591 -460 -422 -196 -193 -17 129 176 252 256 277 448 456 754 883 940 979]]
Test Case: 2094 | Input/Output: [[193 296 -43 757 221 -21 651 1000 -957 -860 952 -771 -812 -530 200 391 -524 -236 -853 935 410 196 205 -350 -804 101] [-957 -860 -853 -812 -804 -771 -530 -524 -350 -236 -43 -21 101 193 196 200 205 221 296 391 410 651 757 935 952 1000]]
Test Case: 2095 | Input/Output: [[369 -606 -823 489 -649 -754 -725 890 281 -188 763 177 -437 775 254 -568 822 -563] [-823 -754 -725 -649 -606 -568 -563 -437 -188 177 254 281 369 489 763 775 822 890]]
Test Case: 2096 | Input/Output: [[-574 -969 39 -633 271 648 -715 -784 -715 -845 272 423 924 -278 -426 941 586] [-969 -845 -784 -715 -715 -633 -574 -426 -278 39 271 272 423 586 648 924 941]]
Test Case: 2097 | Input/Output: [[36 230 -942 565 -572 -301 -876 719 -528 865 151 -463 688 -855 -635 136 986 498 -570 -944 -817 69 -18 320 570] [-944 -942 -876 -855 -817 -635 -572 -570 -528 -463 -301 -18 36 69 136 151 230 320 498 565 570 688 719 865 986]]
Test Case: 2098 | Input/Output: [[519 501 -491 568 804 194 -77] [-491 -77 194 501 519 568 804]]
Test Case: 2099 | Input/Output: [[429 -440 299 -755 -709 634 397 743 -619 104 622 -369 -535 -360 -356 127 -633 -545] [-755 -709 -633 -619 -545 -535 -440 -369 -360 -356 104 127 299 397 429 622 634 743]]
Test Case: 2100 | Input/Output: [[508 963 -195 609 -934 -86 262 -971 585 395 -339 752 -473 -141 451 960 431 774 -16 686 215 -103 -571 769 -183 -891] [-971 -934 -891 -571 -473 -339 -195 -183 -141 -103 -86 -16 215 262 395 431 451 508 585 609 686 752 769 774 960 963]]
Test Case: 2101 | Input/Output: [[970 94 -142 -311 -451 -132 46 917 758 -189 -537 -530 343 836 -669 692 551 714 -838 275 952 155] [-838 -669 -537 -530 -451 -311 -189 -142 -132 46 94 155 275 343 551 692 714 758 836 917 952 970]]
Test Case: 2102 | Input/Output: [[-67 -995 -663 -819 -345 -413 168 204 430 830 -284 -851 -599 -312 227 774 31 948 980 889 -672 -892 -112 366 106 798 -389 -80 -572 817 27 -38 -150 -211 -504 230 427 -949 -694 465 -475 -775 -247 -727 -270 440 129 -510 -970 768] [-995 -970 -949 -892 -851 -819 -775 -727 -694 -672 -663 -599 -572 -510 -504 -475 -413 -389 -345 -312 -284 -270 -247 -211 -150 -112 -80 -67 -38 27 31 106 129 168 204 227 230 366 427 430 440 465 768 774 798 817 830 889 948 980]]
Test Case: 2103 | Input/Output: [[616 -736 -236 875 -591] [-736 -591 -236 616 875]]
Test Case: 2104 | Input/Output: [[-959 -737 -992 20 44] [-992 -959 -737 20 44]]
Test Case: 2105 | Input/Output: [[-151 -436 -492 -428 71 -725 753 -373 -537 -194 306 375 645 -701 -623 615 -872] [-872 -725 -701 -623 -537 -492 -436 -428 -373 -194 -151 71 306 375 615 645 753]]
Test Case: 2106 | Input/Output: [[582 -798 -983 42 -426 -137 -247 364 -737 510 879 473 -114 963 462 -609 906 -816 789 372 327 768 950 -513 -302 -924 444 -799 18 18 -107 -583 654 948 -380 988 571 -237 677 -627 24] [-983 -924 -816 -799 -798 -737 -627 -609 -583 -513 -426 -380 -302 -247 -237 -137 -114 -107 18 18 24 42 327 364 372 444 462 473 510 571 582 654 677 768 789 879 906 948 950 963 988]]
Test Case: 2107 | Input/Output: [[-5 596 -322 -489 -674 -666 -499 866 569 471 -881 54 -995 -325 920 108 -78 -720 465 -241 102 -17 265] [-995 -881 -720 -674 -666 -499 -489 -325 -322 -241 -78 -17 -5 54 102 108 265 465 471 569 596 866 920]]
Test Case: 2108 | Input/Output: [[157 -343 456 -126 -153 -288 918 794 202 234 629 947 178 -565 -752 123 135 31 -168 507 -8 -535 304 -127 -337 -765 -118 -971 899 -823 862 640 850 384 -678 -428 675 204] [-971 -823 -765 -752 -678 -565 -535 -428 -343 -337 -288 -168 -153 -127 -126 -118 -8 31 123 135 157 178 202 204 234 304 384 456 507 629 640 675 794 850 862 899 918 947]]
Test Case: 2109 | Input/Output: [[-349 -173 -183 834 -945 -903 -722 -606 438 223 826 334 -288 396 -539 446 -24 510 -940 -224 -926 -628 -62 -102 214 173 851 727 -267 -854 -783 -508 -163 -158 856 824 293 -290 210 -728 -526] [-945 -940 -926 -903 -854 -783 -728 -722 -628 -606 -539 -526 -508 -349 -290 -288 -267 -224 -183 -173 -163 -158 -102 -62 -24 173 210 214 223 293 334 396 438 446 510 727 824 826 834 851 856]]
Test Case: 2110 | Input/Output: [[-834 -870 674 -141 285 -175 418 -655 -882 513 -826 341 365 832 17 -59 -124 -274 732 -548 -905 -895 -231] [-905 -895 -882 -870 -834 -826 -655 -548 -274 -231 -175 -141 -124 -59 17 285 341 365 418 513 674 732 832]]
Test Case: 2111 | Input/Output: [[-64 -828 -201 614 535 617] [-828 -201 -64 535 614 617]]
Test Case: 2112 | Input/Output: [[-417 399 68 119 752 -567 -193 -39 -506] [-567 -506 -417 -193 -39 68 119 399 752]]
Test Case: 2113 | Input/Output: [[-21 121 -678 -825 218 -954 882] [-954 -825 -678 -21 121 218 882]]
Test Case: 2114 | Input/Output: [[363 -576 -719 813 -759 804 -914 -152 487 92 924 744 -655 332 -10 -648 -749 731 855 950 -76 -805 236 881 940 863 266 233 -712 189 -988 413 -529 -861 192 -748 555 -540 680 817 871 21 664 506 645 -907 -440 -103 -155] [-988 -914 -907 -861 -805 -759 -749 -748 -719 -712 -655 -648 -576 -540 -529 -440 -155 -152 -103 -76 -10 21 92 189 192 233 236 266 332 363 413 487 506 555 645 664 680 731 744 804 813 817 855 863 871 881 924 940 950]]
Test Case: 2115 | Input/Output: [[894 -707 654 821 506 495 -620 -181 -297 675 -826 929 484 -182 510 726 -649 -363 -691 -740 939 779 283 -499 7] [-826 -740 -707 -691 -649 -620 -499 -363 -297 -182 -181 7 283 484 495 506 510 654 675 726 779 821 894 929 939]]
Test Case: 2116 | Input/Output: [[-627 917 -493 -891 584 95 637 197 -11 392 -294 -201 -421 692 773 -222 179 955 117] [-891 -627 -493 -421 -294 -222 -201 -11 95 117 179 197 392 584 637 692 773 917 955]]
Test Case: 2117 | Input/Output: [[484] [484]]
Test Case: 2118 | Input/Output: [[-431 -666 -226 -550 -869 -157 81 42 -538 -218 -920 -626 138 -521 582 -493 -760 -394 523 591 900 -777 -793 558 -804 143 702 -845 -722 758 -438 -326 -419 818 910 25 176 34 -487 -543 -236 -184 910 115 -116 964] [-920 -869 -845 -804 -793 -777 -760 -722 -666 -626 -550 -543 -538 -521 -493 -487 -438 -431 -419 -394 -326 -236 -226 -218 -184 -157 -116 25 34 42 81 115 138 143 176 523 558 582 591 702 758 818 900 910 910 964]]
Test Case: 2119 | Input/Output: [[245 -382 -380 -759 -686 -263 329 25 587 -506 -265 -648] [-759 -686 -648 -506 -382 -380 -265 -263 25 245 329 587]]
Test Case: 2120 | Input/Output: [[962 -656 -8 666 739 559 -37 -382 900 -830 -773 -742 580 -507 55 -781 -2 -620 -7 -260 -800 -979 -839 327 -317 -883 692 936 722 -77 153 440 626 535 -361 -571 -37 141 -340 -513 794 319 482 -863] [-979 -883 -863 -839 -830 -800 -781 -773 -742 -656 -620 -571 -513 -507 -382 -361 -340 -317 -260 -77 -37 -37 -8 -7 -2 55 141 153 319 327 440 482 535 559 580 626 666 692 722 739 794 900 936 962]]
Test Case: 2121 | Input/Output: [[-465 -490 -741 -729 738 -439 -64 274 310 -609 -300 -852 373 816 -945 300 911 -943 239 -851 407 -155 -629 -918 -970 -573 -307 860 -411 649 960 -459 -196 -430] [-970 -945 -943 -918 -852 -851 -741 -729 -629 -609 -573 -490 -465 -459 -439 -430 -411 -307 -300 -196 -155 -64 239 274 300 310 373 407 649 738 816 860 911 960]]
Test Case: 2122 | Input/Output: [[510 128 146 -233 -133 217 -774 -20 -95 602 547 -775 681] [-775 -774 -233 -133 -95 -20 128 146 217 510 547 602 681]]
Test Case: 2123 | Input/Output: [[-495 -353 -831 480 -294 -542 -112 -168 -308 -861 -214 -779 -561 511 322 483 925 -36 -393 -525 -814 -217 573 436 -937 -478 -271 -558] [-937 -861 -831 -814 -779 -561 -558 -542 -525 -495 -478 -393 -353 -308 -294 -271 -217 -214 -168 -112 -36 322 436 480 483 511 573 925]]
Test Case: 2124 | Input/Output: [[-296 241 -604 -43 -682 -907 103 -615 194 -226 -924 399 -988 -765 -955 -926 -248 314 404 -82 -928 864 -526 310 537 442 782 -338 -119 -620 -670 -654 -345 -527 -303 925 -830 61 237 587 707] [-988 -955 -928 -926 -924 -907 -830 -765 -682 -670 -654 -620 -615 -604 -527 -526 -345 -338 -303 -296 -248 -226 -119 -82 -43 61 103 194 237 241 310 314 399 404 442 537 587 707 782 864 925]]
Test Case: 2125 | Input/Output: [[219 197 -740 -147 -129 149 -807 -471 567 -504 843 -79 708 680 -161 -805 518] [-807 -805 -740 -504 -471 -161 -147 -129 -79 149 197 219 518 567 680 708 843]]
Test Case: 2126 | Input/Output: [[-770 -668 -364 171 287 839 -382 184 973 -627 -348] [-770 -668 -627 -382 -364 -348 171 184 287 839 973]]
Test Case: 2127 | Input/Output: [[-464 -464 -291 -810 574 17 520 -508 -875 -720 470 888 -882 61 405 -227 665 -831 -673 -798 291] [-882 -875 -831 -810 -798 -720 -673 -508 -464 -464 -291 -227 17 61 291 405 470 520 574 665 888]]
Test Case: 2128 | Input/Output: [[669 978 -81 902 -853 -61 309 -874 990 -857 -881 653 -901 682 -896 -694 -541 722 -636 -773 866 167 782 625 34 -492 797 -160 353 -24 -290] [-901 -896 -881 -874 -857 -853 -773 -694 -636 -541 -492 -290 -160 -81 -61 -24 34 167 309 353 625 653 669 682 722 782 797 866 902 978 990]]
Test Case: 2129 | Input/Output: [[-517 184 17] [-517 17 184]]
Test Case: 2130 | Input/Output: [[-932 653 -79 531 364 -760 -700 -926 725 -577 578 -992 790 -610 200 582 -168 -911 730 -519 211 -208 168 878 -849 408 902 -519 -372 739 411 -659 231 -34 873 336 899 -459 -451 -186 653 -95 18 -225 755] [-992 -932 -926 -911 -849 -760 -700 -659 -610 -577 -519 -519 -459 -451 -372 -225 -208 -186 -168 -95 -79 -34 18 168 200 211 231 336 364 408 411 531 578 582 653 653 725 730 739 755 790 873 878 899 902]]
Test Case: 2131 | Input/Output: [[261 943 -69 -346 865] [-346 -69 261 865 943]]
Test Case: 2132 | Input/Output: [[-301 -696 -337 -84 617 428 -130 -893 -496 321 593 -660 65 134 -11 -541 -180 108 276 -522 513 732 65 884 -511 -979 182 -373 883 -752 549 220 -564 996 -341 43 864 -1 -307 -39 483 71] [-979 -893 -752 -696 -660 -564 -541 -522 -511 -496 -373 -341 -337 -307 -301 -180 -130 -84 -39 -11 -1 43 65 65 71 108 134 182 220 276 321 428 483 513 549 593 617 732 864 883 884 996]]
Test Case: 2133 | Input/Output: [[985 -894] [-894 985]]
Test Case: 2134 | Input/Output: [[-200 -487 645 -756 -940 -434 -864 -673 703 -982 -36 625 -856 346 666 -698 -40 -691 958 204 482 -190 -279 544 -70 590 -116 121 -45 -277 966 934 -502 962 -798 -562 302] [-982 -940 -864 -856 -798 -756 -698 -691 -673 -562 -502 -487 -434 -279 -277 -200 -190 -116 -70 -45 -40 -36 121 204 302 346 482 544 590 625 645 666 703 934 958 962 966]]
Test Case: 2135 | Input/Output: [[96 714 335 756 174] [96 174 335 714 756]]
Test Case: 2136 | Input/Output: [[90 -292 591 45 -28 -658 858 -697 -798 798 864 -531 -231 -159 77 990 -619 712 -851 750 239 -661 355 159 -261 -968 -682 -857 -682 -626] [-968 -857 -851 -798 -697 -682 -682 -661 -658 -626 -619 -531 -292 -261 -231 -159 -28 45 77 90 159 239 355 591 712 750 798 858 864 990]]
Test Case: 2137 | Input/Output: [[-55 204 -413 907 710 708] [-413 -55 204 708 710 907]]
Test Case: 2138 | Input/Output: [[-724 204 361 -396 -854 386 887 812 -542 -13 745] [-854 -724 -542 -396 -13 204 361 386 745 812 887]]
Test Case: 2139 | Input/Output: [[768 -687 -321 -482 317 -117 -2 -183 -726 600 -319 151 238 -688 -598 952 -152 943 535 -425 261 909 591 694 -793 114 -819 925] [-819 -793 -726 -688 -687 -598 -482 -425 -321 -319 -183 -152 -117 -2 114 151 238 261 317 535 591 600 694 768 909 925 943 952]]
Test Case: 2140 | Input/Output: [[-266 971 -72 -782 -769 642 74 -785 223 -713 355 491 788 103 171 937 864 -781 757 25 -742 59 490 16 -329] [-785 -782 -781 -769 -742 -713 -329 -266 -72 16 25 59 74 103 171 223 355 490 491 642 757 788 864 937 971]]
Test Case: 2141 | Input/Output: [[-766 804 -817 -276 -59 -758 -699 304 694 -959 -465 386 -84 -436 -653 779 68] [-959 -817 -766 -758 -699 -653 -465 -436 -276 -84 -59 68 304 386 694 779 804]]
Test Case: 2142 | Input/Output: [[-831 610 -113 -84 157 -596 -659 888 -173 -904 -656 -194 -936 -246 -949 659] [-949 -936 -904 -831 -659 -656 -596 -246 -194 -173 -113 -84 157 610 659 888]]
Test Case: 2143 | Input/Output: [[86 33 26 -963 -312] [-963 -312 26 33 86]]
Test Case: 2144 | Input/Output: [[34 -792 -784 -900 -745 -315 -587 486 -987 742 -729 66 -462 892 941 245 531 225 -804 860 337 408 286 -759 -336 498 531 243 385 848 -981 -368 -469 -203 419 -802 -514 694 -215 -309 -378 -456 -579 803 543] [-987 -981 -900 -804 -802 -792 -784 -759 -745 -729 -587 -579 -514 -469 -462 -456 -378 -368 -336 -315 -309 -215 -203 34 66 225 243 245 286 337 385 408 419 486 498 531 531 543 694 742 803 848 860 892 941]]
Test Case: 2145 | Input/Output: [[-727 -916 -73 -657 -557 -795 -685 438 -876 136 -1 -82 -877 543 -715 285 -90 971 -558 -262 52 959 106 -103 -317 -292 276 742 345 -550 243 209 -251 987] [-916 -877 -876 -795 -727 -715 -685 -657 -558 -557 -550 -317 -292 -262 -251 -103 -90 -82 -73 -1 52 106 136 209 243 276 285 345 438 543 742 959 971 987]]
Test Case: 2146 | Input/Output: [[-682 2 31 674 241 278 -239 -734 -420 -900 -815 641 561 -581 -972 251 589 -13 -896 -326 -262 -197 147 -360 -524 -470 -127 654 320 777 -244 -594 952 198 179 -509 -129 -869 -755] [-972 -900 -896 -869 -815 -755 -734 -682 -594 -581 -524 -509 -470 -420 -360 -326 -262 -244 -239 -197 -129 -127 -13 2 31 147 179 198 241 251 278 320 561 589 641 654 674 777 952]]
Test Case: 2147 | Input/Output: [[-343 -885 144] [-885 -343 144]]
Test Case: 2148 | Input/Output: [[912 208 979 930 -277 756 76 -466 -996 358 557 432 -180 73 869 -478 -527 -852 -740 750 -740 -696 -718 688 487 -502 252 212 -83 736 -843 202 -201] [-996 -852 -843 -740 -740 -718 -696 -527 -502 -478 -466 -277 -201 -180 -83 73 76 202 208 212 252 358 432 487 557 688 736 750 756 869 912 930 979]]
Test Case: 2149 | Input/Output: [[927 305 -984 447 740 -715 -886 -690 -803 904 881 -615 178 -658 -415 772 -720 954 -547 -164 600 -700 11 -290 414 919 -641 -339 320 300 -226 -340 846 26 -751] [-984 -886 -803 -751 -720 -715 -700 -690 -658 -641 -615 -547 -415 -340 -339 -290 -226 -164 11 26 178 300 305 320 414 447 600 740 772 846 881 904 919 927 954]]
Test Case: 2150 | Input/Output: [[-262 -239 -483 -95 415 465 170 730 -615 295 335 -173 90 -208 252 332 -73 -956 483 -87 -304 966 55 289 -762 -985 -502 -645] [-985 -956 -762 -645 -615 -502 -483 -304 -262 -239 -208 -173 -95 -87 -73 55 90 170 252 289 295 332 335 415 465 483 730 966]]
Test Case: 2151 | Input/Output: [[69 543 678 -445 362 444 -323 180 -760 28 -528 -606 -77 60 -642 -147 -609 -380 773 -231 -776 992 790 -236 -140 -263 -979 -417 660] [-979 -776 -760 -642 -609 -606 -528 -445 -417 -380 -323 -263 -236 -231 -147 -140 -77 28 60 69 180 362 444 543 660 678 773 790 992]]
Test Case: 2152 | Input/Output: [[795 -448 315 450 263 -885 134 -15 -220 -30 817 -927 -470 -621 -317 -904 -19 990 984 -861 273 818 -959 -595 476 920 993 561 -94 -839] [-959 -927 -904 -885 -861 -839 -621 -595 -470 -448 -317 -220 -94 -30 -19 -15 134 263 273 315 450 476 561 795 817 818 920 984 990 993]]
Test Case: 2153 | Input/Output: [[444 194 138 688 270 590 -853 719 -896 694 -832 552 345 218 -481 510 -749 72 676 -86 -543 -376 -680 -818 20 -158 160 -520 420 -742 183 -627 876 149 233 692] [-896 -853 -832 -818 -749 -742 -680 -627 -543 -520 -481 -376 -158 -86 20 72 138 149 160 183 194 218 233 270 345 420 444 510 552 590 676 688 692 694 719 876]]
Test Case: 2154 | Input/Output: [[-511 -235 -20 -122 291 830 583 994 -239 -392 284 586 285 -306 -760 956 53 412 629 33 -117 -222 -138 389 691 931 902 -550 448 244 -626 287 -216 427 -994 763 794 226 -665 819 -812] [-994 -812 -760 -665 -626 -550 -511 -392 -306 -239 -235 -222 -216 -138 -122 -117 -20 33 53 226 244 284 285 287 291 389 412 427 448 583 586 629 691 763 794 819 830 902 931 956 994]]
Test Case: 2155 | Input/Output: [[608 457 -142 963 -938 -380 -91 -736 768 968 605 839 290 859 746 803] [-938 -736 -380 -142 -91 290 457 605 608 746 768 803 839 859 963 968]]
Test Case: 2156 | Input/Output: [[444 452 -51 590 -968 822] [-968 -51 444 452 590 822]]
Test Case: 2157 | Input/Output: [[-591 849 878 -357 316 -862 -678 -287 458 -404 -166 -45 -204 -514 -248 66 314 149 920 517 -685 257 -273 -128 -3 293 575 -975 83 674 -320] [-975 -862 -685 -678 -591 -514 -404 -357 -320 -287 -273 -248 -204 -166 -128 -45 -3 66 83 149 257 293 314 316 458 517 575 674 849 878 920]]
Test Case: 2158 | Input/Output: [[228 49 -9 816 -802 -725 -323 451 -15 -425 -155 -839 22] [-839 -802 -725 -425 -323 -155 -15 -9 22 49 228 451 816]]
Test Case: 2159 | Input/Output: [[160 -232 -914 -634 148 -607 894 83 -100 511 669 160 -693 184 4 -215 -851 -27 607 325 947 -355 989 561 -852 565 722 -438 601 835 -514 758 988 -401 -619 107 462 207 859 -935 -774 -715 364 -876 779 -371 -828 732 -983 973] [-983 -935 -914 -876 -852 -851 -828 -774 -715 -693 -634 -619 -607 -514 -438 -401 -371 -355 -232 -215 -100 -27 4 83 107 148 160 160 184 207 325 364 462 511 561 565 601 607 669 722 732 758 779 835 859 894 947 973 988 989]]
Test Case: 2160 | Input/Output: [[-783 210 948 -231 -92 -110 -117 669 -135 -709 693 -983 212 143 487 394 -612 -1 225 601 -576 -903 273 -567 -43 158 219 -906 987 -36 999 715 -844 519 475 -901 640] [-983 -906 -903 -901 -844 -783 -709 -612 -576 -567 -231 -135 -117 -110 -92 -43 -36 -1 143 158 210 212 219 225 273 394 475 487 519 601 640 669 693 715 948 987 999]]
Test Case: 2161 | Input/Output: [[-917 699 -496 983 -674 -54 -960 -989 -362 842 773 46 140 -259 -511 -211 746 600] [-989 -960 -917 -674 -511 -496 -362 -259 -211 -54 46 140 600 699 746 773 842 983]]
Test Case: 2162 | Input/Output: [[766 -39 178 517 296 -854 94 658 -732 -410 557 141 144 404 -664 133 249 744 -331 230 169 -710 211 507 385 -977 -129 -649 -247 267 -929 -601 -164 828 342 -757 -966 -9 699 -79 -57 579 -934 414] [-977 -966 -934 -929 -854 -757 -732 -710 -664 -649 -601 -410 -331 -247 -164 -129 -79 -57 -39 -9 94 133 141 144 169 178 211 230 249 267 296 342 385 404 414 507 517 557 579 658 699 744 766 828]]
Test Case: 2163 | Input/Output: [[-75 472 979 -626 -958 399 -294 232 452 -981] [-981 -958 -626 -294 -75 232 399 452 472 979]]
Test Case: 2164 | Input/Output: [[-869 -60 945 -824 16 446 -274 762 839 -864 -240 955 590 570 545 -65 618 -96 -119 130 -23 -954 -491 246 12 70 -813 81 -175 -852 871 66 970 -368 150 546 -474 499] [-954 -869 -864 -852 -824 -813 -491 -474 -368 -274 -240 -175 -119 -96 -65 -60 -23 12 16 66 70 81 130 150 246 446 499 545 546 570 590 618 762 839 871 945 955 970]]
Test Case: 2165 | Input/Output: [[65 -754 -295 39 -244 -643 -429 859 -158 155 -803 -887 -500 -97 -462 -105 659 -807 -409 -293 806 196 -294 285 -618] [-887 -807 -803 -754 -643 -618 -500 -462 -429 -409 -295 -294 -293 -244 -158 -105 -97 39 65 155 196 285 659 806 859]]
Test Case: 2166 | Input/Output: [[62 -392 501 951 -236 -676 330 330 920 -179 113 593 108 676 -16 688 386 -227 414 570 -514 405 586 473 -583 863 595 922 -817 -234 -573 344 237 -885 281 795 368 593 -18 -277 -144] [-885 -817 -676 -583 -573 -514 -392 -277 -236 -234 -227 -179 -144 -18 -16 62 108 113 237 281 330 330 344 368 386 405 414 473 501 570 586 593 593 595 676 688 795 863 920 922 951]]
Test Case: 2167 | Input/Output: [[100 -892 363 881 -607 185 -226 -822 -71 748 426 606 -221 -864 687 630 14 -520 380 -83 26 -760 -44] [-892 -864 -822 -760 -607 -520 -226 -221 -83 -71 -44 14 26 100 185 363 380 426 606 630 687 748 881]]
Test Case: 2168 | Input/Output: [[302 -935 -994 -383 410 715 100 -229 987 -257 -811 755 433 -772 -935 -407 261 721 168 364 -753 -623 -164 186 4 87 131 94 -456 -141 -591 -122 -353 -574 -661 -307 -213 103 175] [-994 -935 -935 -811 -772 -753 -661 -623 -591 -574 -456 -407 -383 -353 -307 -257 -229 -213 -164 -141 -122 4 87 94 100 103 131 168 175 186 261 302 364 410 433 715 721 755 987]]
Test Case: 2169 | Input/Output: [[53] [53]]
Test Case: 2170 | Input/Output: [[-99 -176 -378 -177 -655 816] [-655 -378 -177 -176 -99 816]]
Test Case: 2171 | Input/Output: [[949 364 602 -767 70 956 -292 -411 -43 -477 396 467 213 -762 202 16 -491 -459 -433 -355 -269 647 833 106 -180 -899 -811 -831 -419 26 -75 -388 786 -17 -878 -27] [-899 -878 -831 -811 -767 -762 -491 -477 -459 -433 -419 -411 -388 -355 -292 -269 -180 -75 -43 -27 -17 16 26 70 106 202 213 364 396 467 602 647 786 833 949 956]]
Test Case: 2172 | Input/Output: [[-744 -273 717 -245 790 759 532 -465 283 -633 841 -401 244 930 -798 -114] [-798 -744 -633 -465 -401 -273 -245 -114 244 283 532 717 759 790 841 930]]
Test Case: 2173 | Input/Output: [[987 -147 693 496 157 -591 658 -946 -883 -833 688 -636 -210 94 452 95] [-946 -883 -833 -636 -591 -210 -147 94 95 157 452 496 658 688 693 987]]
Test Case: 2174 | Input/Output: [[147 732 -653 -644 370 -490 246 -34 -172 231] [-653 -644 -490 -172 -34 147 231 246 370 732]]
Test Case: 2175 | Input/Output: [[-341 764 -859 -768 -485 629 906 62 -264 -924 -674 -470 69 -311 465 63 -978 265 -831 -977 664 688 -26 -807 230 450 999 746 -521 -388 31 -796 -764] [-978 -977 -924 -859 -831 -807 -796 -768 -764 -674 -521 -485 -470 -388 -341 -311 -264 -26 31 62 63 69 230 265 450 465 629 664 688 746 764 906 999]]
Test Case: 2176 | Input/Output: [[-2 -486 -618 -512 -955 733 119 -219 52 11 948 -994 -715 998 -235 692 -936 -404 922 184 -890 -541 679 521 781 723 -454 927 998 94 264 -698 -625 -504 506 -643 -43 -882 525] [-994 -955 -936 -890 -882 -715 -698 -643 -625 -618 -541 -512 -504 -486 -454 -404 -235 -219 -43 -2 11 52 94 119 184 264 506 521 525 679 692 723 733 781 922 927 948 998 998]]
Test Case: 2177 | Input/Output: [[-462 -155 16 85 -38 955 995 -465 654 55 328 -498 -785 -887 -6 -620 884 864 739 -319 -862 287 512 570 631 -576 20 -516 711 -974 882 110 -713 -806 381 95 451 -787 975 721 -39 -1] [-974 -887 -862 -806 -787 -785 -713 -620 -576 -516 -498 -465 -462 -319 -155 -39 -38 -6 -1 16 20 55 85 95 110 287 328 381 451 512 570 631 654 711 721 739 864 882 884 955 975 995]]
Test Case: 2178 | Input/Output: [[-920 434 537 861 356 774 322 -356 -207 311 -243 -908 427 -896 360 -630 -627 160 219 147 627 74 384 343 636 -287 754 -578 469 -302 669 364 -665 -122 628] [-920 -908 -896 -665 -630 -627 -578 -356 -302 -287 -243 -207 -122 74 147 160 219 311 322 343 356 360 364 384 427 434 469 537 627 628 636 669 754 774 861]]
Test Case: 2179 | Input/Output: [[95 791 -275 207 -457 -688 273 -813 415 -407 412 97 -843 617] [-843 -813 -688 -457 -407 -275 95 97 207 273 412 415 617 791]]
Test Case: 2180 | Input/Output: [[621 -738 -554 -671 -941 387 726 -795 -427 690 243 -968 226 416 -924 176 544 -36 208 -860 -29 -75 957 754 776 -407 291 722 103 763 -745 216 -650 118 -470 335 -576 -252 -890] [-968 -941 -924 -890 -860 -795 -745 -738 -671 -650 -576 -554 -470 -427 -407 -252 -75 -36 -29 103 118 176 208 216 226 243 291 335 387 416 544 621 690 722 726 754 763 776 957]]
Test Case: 2181 | Input/Output: [[712 -559 -146 -243 -949 918 -276 495 479 -499 864 -442 523 68 -954 673 863 -364 -795 588 -684 -680 560 720 192 992 -247 968 943 922 797 389 -205 499 -563 975 -386 -49 -225 -856 746 275 -971 16 700 -921 -532 -125 -519] [-971 -954 -949 -921 -856 -795 -684 -680 -563 -559 -532 -519 -499 -442 -386 -364 -276 -247 -243 -225 -205 -146 -125 -49 16 68 192 275 389 479 495 499 523 560 588 673 700 712 720 746 797 863 864 918 922 943 968 975 992]]
Test Case: 2182 | Input/Output: [[-702 -949 408 -943 886 742 -330 529 -449 -480 -483 747 -803] [-949 -943 -803 -702 -483 -480 -449 -330 408 529 742 747 886]]
Test Case: 2183 | Input/Output: [[-474 140 525 858 408 406 -989 573 183 -595 633 -543 -307 619 -462 390 820 -287 388 669 197 -995 -147 -730 -704 -661 -405 787 -30 213 -399 716 494 406 -783 -502 179 29 -920 53 -703 847] [-995 -989 -920 -783 -730 -704 -703 -661 -595 -543 -502 -474 -462 -405 -399 -307 -287 -147 -30 29 53 140 179 183 197 213 388 390 406 406 408 494 525 573 619 633 669 716 787 820 847 858]]
Test Case: 2184 | Input/Output: [[412 -489 348 -57 979 -797 97 714 954 -794 276] [-797 -794 -489 -57 97 276 348 412 714 954 979]]
Test Case: 2185 | Input/Output: [[-251 -643 -440 -898 911 584 -405 -439 426 -605 590] [-898 -643 -605 -440 -439 -405 -251 426 584 590 911]]
Test Case: 2186 | Input/Output: [[-632 -425 -536] [-632 -536 -425]]
Test Case: 2187 | Input/Output: [[-49 -361 -448 540 132 -29 131 -392 168 -2 891 -971 -627 520 -649 513 -303 306 -172 19 636 -560 798 219 -420 487 885 -938] [-971 -938 -649 -627 -560 -448 -420 -392 -361 -303 -172 -49 -29 -2 19 131 132 168 219 306 487 513 520 540 636 798 885 891]]
Test Case: 2188 | Input/Output: [[-912 -214 130 910 -420 -340 938 418 933 -907 -45 496 -524 495 -436] [-912 -907 -524 -436 -420 -340 -214 -45 130 418 495 496 910 933 938]]
Test Case: 2189 | Input/Output: [[954 -670 -151 -532 265 -890 604 -338 14 372 53 45 534 -300 -639 -983 -575 -232 -674 -780 -307 564 -441 860 213 -734 -227 677 819 -660 1000 -934] [-983 -934 -890 -780 -734 -674 -670 -660 -639 -575 -532 -441 -338 -307 -300 -232 -227 -151 14 45 53 213 265 372 534 564 604 677 819 860 954 1000]]
Test Case: 2190 | Input/Output: [[412 138 -696 -89 465 -22 -317 808 67 336 -748 -353 948 535 603 -190 -223 114 -348 -673 -678 107 -493 324 -589 -989 616 167 568 -244 -731 -897 625 -656] [-989 -897 -748 -731 -696 -678 -673 -656 -589 -493 -353 -348 -317 -244 -223 -190 -89 -22 67 107 114 138 167 324 336 412 465 535 568 603 616 625 808 948]]
Test Case: 2191 | Input/Output: [[436 -355 820 -991] [-991 -355 436 820]]
Test Case: 2192 | Input/Output: [[-806] [-806]]
Test Case: 2193 | Input/Output: [[41 -431 -897 -150 -393 -571 -251 -256 381 1 730 569 907 -725 737 526 -672 -642 353 12 -49 837] [-897 -725 -672 -642 -571 -431 -393 -256 -251 -150 -49 1 12 41 353 381 526 569 730 737 837 907]]
Test Case: 2194 | Input/Output: [[-697 -142 55 -270 -459] [-697 -459 -270 -142 55]]
Test Case: 2195 | Input/Output: [[-879 -230 55 -641 735 -978 965 -972 -306 737 -152 228 -563 279 679 -541 131 -917 641 369 496 -344 338 256 567 416 548 -104 288 804 -190 321 83 -729 -919 -415 -872 660 -860 -706 428] [-978 -972 -919 -917 -879 -872 -860 -729 -706 -641 -563 -541 -415 -344 -306 -230 -190 -152 -104 55 83 131 228 256 279 288 321 338 369 416 428 496 548 567 641 660 679 735 737 804 965]]
Test Case: 2196 | Input/Output: [[504 -804] [-804 504]]
Test Case: 2197 | Input/Output: [[-648 -434 314 19 156 -778 -901 706 -584 238 114 -365 432 290 -760 260 -591 -687 746 -452 -448 477 812 216 536 154 -215 -488 -546 294 314 245 -896 975 523 787 885 919 -716 -848 -935 616 499 -240 -750 -919 120 794] [-935 -919 -901 -896 -848 -778 -760 -750 -716 -687 -648 -591 -584 -546 -488 -452 -448 -434 -365 -240 -215 19 114 120 154 156 216 238 245 260 290 294 314 314 432 477 499 523 536 616 706 746 787 794 812 885 919 975]]
Test Case: 2198 | Input/Output: [[555 640 369 -146 149 -414 -86 -518 -904 113 169 875 596 225 -115 -749 -454 771 833 -893 807 137 -855 -606 -268 -830 -727 893] [-904 -893 -855 -830 -749 -727 -606 -518 -454 -414 -268 -146 -115 -86 113 137 149 169 225 369 555 596 640 771 807 833 875 893]]
Test Case: 2199 | Input/Output: [[-955 950 447 722 824 -403 996 -690 -255 -106 822 612 -138 -680 741 -752 -520 -286 370 771 -517 -193 -887 785 905 -66 -653 -529 -81 954 313 622 340 988 -93 -962 -147 -506 -303 -729 916 -385 -381 -452 355 -409 945 193 -927 912] [-962 -955 -927 -887 -752 -729 -690 -680 -653 -529 -520 -517 -506 -452 -409 -403 -385 -381 -303 -286 -255 -193 -147 -138 -106 -93 -81 -66 193 313 340 355 370 447 612 622 722 741 771 785 822 824 905 912 916 945 950 954 988 996]]
Test Case: 2200 | Input/Output: [[-402 473 178 404 -347 619 802 -116 602 553 -581 654 747 -274 -863 638 -656 -585 -506 685 -282 -891 972 -560 912 890 138 -887 916 753 -696 361 -187 -843 524 708 -226 390 -668 -647 352 886 -971 -993 -507] [-993 -971 -891 -887 -863 -843 -696 -668 -656 -647 -585 -581 -560 -507 -506 -402 -347 -282 -274 -226 -187 -116 138 178 352 361 390 404 473 524 553 602 619 638 654 685 708 747 753 802 886 890 912 916 972]]
Test Case: 2201 | Input/Output: [[354] [354]]
Test Case: 2202 | Input/Output: [[-80 834 -157 848 867 -552 306 -860 673 -941 -533 -107 -947 355 739 -792 -112 569 800 687 -271 791] [-947 -941 -860 -792 -552 -533 -271 -157 -112 -107 -80 306 355 569 673 687 739 791 800 834 848 867]]
Test Case: 2203 | Input/Output: [[-36 -855 539 563 547 904 -388 -941 -634 416 496 -281 684 -185 697 202 -713 -844 835 -357] [-941 -855 -844 -713 -634 -388 -357 -281 -185 -36 202 416 496 539 547 563 684 697 835 904]]
Test Case: 2204 | Input/Output: [[883 669 778 -575 -368 710 -401 111 -400 787 513 -192 -735 -260 462 -719 -157 -781 906 -247] [-781 -735 -719 -575 -401 -400 -368 -260 -247 -192 -157 111 462 513 669 710 778 787 883 906]]
Test Case: 2205 | Input/Output: [[831 -853 -578 -822 954 -984 -688 774 -259 598 -563 -413 -8 147 -958 -522 690 493] [-984 -958 -853 -822 -688 -578 -563 -522 -413 -259 -8 147 493 598 690 774 831 954]]
Test Case: 2206 | Input/Output: [[-899 510 514 973 -381 638 602 566 -621 477 212 -294 550 -377 -987 755 757 -412 668 -656 -321 -119] [-987 -899 -656 -621 -412 -381 -377 -321 -294 -119 212 477 510 514 550 566 602 638 668 755 757 973]]
Test Case: 2207 | Input/Output: [[106 801 -218 598 987 -585 -166 -191 35 13 132 -67 259 -96] [-585 -218 -191 -166 -96 -67 13 35 106 132 259 598 801 987]]
Test Case: 2208 | Input/Output: [[906 369 813 587 959 -191 -200 400 236 -392 719 260 -226 34 711 -786 121 -478 940 65 740] [-786 -478 -392 -226 -200 -191 34 65 121 236 260 369 400 587 711 719 740 813 906 940 959]]
Test Case: 2209 | Input/Output: [[943 546 -966 375 353 18 59 932 131 972 394 697 878 -65 -521 -125 -490 358 453 -200 137 550 -774 -146 -937 127 734 766 -146 -545 117 -403 -895 606 895 -681 -644] [-966 -937 -895 -774 -681 -644 -545 -521 -490 -403 -200 -146 -146 -125 -65 18 59 117 127 131 137 353 358 375 394 453 546 550 606 697 734 766 878 895 932 943 972]]
Test Case: 2210 | Input/Output: [[-390 86 160 405 883 715 -387 -470 668 38 694 -608 -164 -998 -252 453 735 67 -104 -476 -279 240 486 227 -795 -919 -376 -44 498 -586 46 312 231 640 212 -606 -479 51 104 280 -817 -917 -447 -312 575] [-998 -919 -917 -817 -795 -608 -606 -586 -479 -476 -470 -447 -390 -387 -376 -312 -279 -252 -164 -104 -44 38 46 51 67 86 104 160 212 227 231 240 280 312 405 453 486 498 575 640 668 694 715 735 883]]
Test Case: 2211 | Input/Output: [[-918 521 364 -179 -808 682 962 903 -456 -44 -124 -898 254 -92 -378 -668 -423 -837 414 821 -715 520 248 -587 310] [-918 -898 -837 -808 -715 -668 -587 -456 -423 -378 -179 -124 -92 -44 248 254 310 364 414 520 521 682 821 903 962]]
Test Case: 2212 | Input/Output: [[865 897 -745 -13] [-745 -13 865 897]]
Test Case: 2213 | Input/Output: [[376 -515 399 -316 397 651 406 312 -684 80 -27 -654 -358 -193 847 -890 834 400 518 635 -891 -786 565 -75 -810 -909 722 -985 -690 281 -676 405 -836 -659 453 -463 205 892 101 975 393 626 138 -775 -133 -850 -243 531] [-985 -909 -891 -890 -850 -836 -810 -786 -775 -690 -684 -676 -659 -654 -515 -463 -358 -316 -243 -193 -133 -75 -27 80 101 138 205 281 312 376 393 397 399 400 405 406 453 518 531 565 626 635 651 722 834 847 892 975]]
Test Case: 2214 | Input/Output: [[-839 491 -582] [-839 -582 491]]
Test Case: 2215 | Input/Output: [[131 272 369 333 989 38 -454 248 704 -855 -400 178 203 -112 964 600 -279 665 -585 902 518 -521 -98 149 26 845 711 -811 -859 439 785 -424 508 365 257 -148 181] [-859 -855 -811 -585 -521 -454 -424 -400 -279 -148 -112 -98 26 38 131 149 178 181 203 248 257 272 333 365 369 439 508 518 600 665 704 711 785 845 902 964 989]]
Test Case: 2216 | Input/Output: [[-958 -899 -918 -757 -261 547 27 -951 682 161 71 -628 744 161 -645 195 -383 -85 -270 -948 -126 -674 516 467 337 -42 -431 -877 147 801 -387 -905 396 509 -798 -187] [-958 -951 -948 -918 -905 -899 -877 -798 -757 -674 -645 -628 -431 -387 -383 -270 -261 -187 -126 -85 -42 27 71 147 161 161 195 337 396 467 509 516 547 682 744 801]]
Test Case: 2217 | Input/Output: [[705 574 -688 -602 -30 155 241 662 -128 -516 -127 449 -128 -109 15 134 -739 -381 -712 930 -329 -839 -737 -781 490 234 160 263 126 -649 978 -60 -579 -414 973 76 237 -745 421] [-839 -781 -745 -739 -737 -712 -688 -649 -602 -579 -516 -414 -381 -329 -128 -128 -127 -109 -60 -30 15 76 126 134 155 160 234 237 241 263 421 449 490 574 662 705 930 973 978]]
Test Case: 2218 | Input/Output: [[-698 -249 -954 746 -595 536 476 327 -634 598 -437 682 239 -696 274 -612 -119 -230 -645 603 -918 -509 263 -741 676 -342 137 -799 -356 178 -274 -139 -643 -37 112 -21 62 -626 641 -63 381 542 483 -505] [-954 -918 -799 -741 -698 -696 -645 -643 -634 -626 -612 -595 -509 -505 -437 -356 -342 -274 -249 -230 -139 -119 -63 -37 -21 62 112 137 178 239 263 274 327 381 476 483 536 542 598 603 641 676 682 746]]
Test Case: 2219 | Input/Output: [[-416 -724 936 41 -923 935 -831 303 201 -681 -177 -654 -96 -712 446 -186 676 302 -633 -534 257 830 966 172 781 -362 -500 -932 980 -758 552 596 282 305 -731 -565 -54 -5 -333] [-932 -923 -831 -758 -731 -724 -712 -681 -654 -633 -565 -534 -500 -416 -362 -333 -186 -177 -96 -54 -5 41 172 201 257 282 302 303 305 446 552 596 676 781 830 935 936 966 980]]
Test Case: 2220 | Input/Output: [[-56 -128 6 807 407 -466 271 779 526 -553 -53 466 -218 -888 -479 906 -361 -254 829 638 -805 155 491 310 -735 391 288 484 -706 633 -582 -720 713 -681 -819 -612 644 -709 848 -520 -744 -516 282] [-888 -819 -805 -744 -735 -720 -709 -706 -681 -612 -582 -553 -520 -516 -479 -466 -361 -254 -218 -128 -56 -53 6 155 271 282 288 310 391 407 466 484 491 526 633 638 644 713 779 807 829 848 906]]
Test Case: 2221 | Input/Output: [[813] [813]]
Test Case: 2222 | Input/Output: [[728 -919 -127 794 512 460 583 -408 221 -395 636 184 271 670 624 -760 592 -884 -381 644 654 670 -768 880 489 -307 -71 755 -825 244 29 850 303 234 -228 760 -116 47 -542 -414 -349 338 -97 -999 786 -347 508 914 806] [-999 -919 -884 -825 -768 -760 -542 -414 -408 -395 -381 -349 -347 -307 -228 -127 -116 -97 -71 29 47 184 221 234 244 271 303 338 460 489 508 512 583 592 624 636 644 654 670 670 728 755 760 786 794 806 850 880 914]]
Test Case: 2223 | Input/Output: [[272 -688 918 875 -72 699 -492 -459 -449 -505 774 -823 969 -785 -935 266 54 479 -3 468 615 -446 296 -894 556 637 -142 -72 710 313 -768 21 154 -14 -533] [-935 -894 -823 -785 -768 -688 -533 -505 -492 -459 -449 -446 -142 -72 -72 -14 -3 21 54 154 266 272 296 313 468 479 556 615 637 699 710 774 875 918 969]]
Test Case: 2224 | Input/Output: [[239 120 158 -490 568 578 -457 -955 528 235 -250 852 -673 833 -631 794 864 728 941 807 -722 381 9 663 -392 677 -633 -814 598 490 -680 -273 -241 -188] [-955 -814 -722 -680 -673 -633 -631 -490 -457 -392 -273 -250 -241 -188 9 120 158 235 239 381 490 528 568 578 598 663 677 728 794 807 833 852 864 941]]
Test Case: 2225 | Input/Output: [[-106 -204 874] [-204 -106 874]]
Test Case: 2226 | Input/Output: [[-59 847 -65 -28 657 652 -949 368] [-949 -65 -59 -28 368 652 657 847]]
Test Case: 2227 | Input/Output: [[-336 476 -349 -82 207 465 684 69 844 637 -420 28 486 -892 769 -689 303 -898 170 -998 615 667 746] [-998 -898 -892 -689 -420 -349 -336 -82 28 69 170 207 303 465 476 486 615 637 667 684 746 769 844]]
Test Case: 2228 | Input/Output: [[323 158 38 968 496 -545 247 333 -43 -399 -686 887 -482 -630 -721 -332 -187 703 574] [-721 -686 -630 -545 -482 -399 -332 -187 -43 38 158 247 323 333 496 574 703 887 968]]
Test Case: 2229 | Input/Output: [[-305 90 73 -648 -682 301 -259 870 -76 797 489 28 -324 945 -266 -995 49 -846 -787 -314 -378 259 70 -712 756 618 -604 -383 -905 -800 826 -991 -418 936 -330 -163 -89] [-995 -991 -905 -846 -800 -787 -712 -682 -648 -604 -418 -383 -378 -330 -324 -314 -305 -266 -259 -163 -89 -76 28 49 70 73 90 259 301 489 618 756 797 826 870 936 945]]
Test Case: 2230 | Input/Output: [[784 -3 -14 258 582 -94 -88 206 893 -799 820 -505 736 372] [-799 -505 -94 -88 -14 -3 206 258 372 582 736 784 820 893]]
Test Case: 2231 | Input/Output: [[-892 -116 60 148 45 681 -394 -391 -457 -830 418 399 -914 683] [-914 -892 -830 -457 -394 -391 -116 45 60 148 399 418 681 683]]
Test Case: 2232 | Input/Output: [[-577 -502 886 31 758 -537 -136 -517 -628 -887 -423 837 525 -323 775 -481 -77 -889 -95 -953 -460 9 72 758 -995 -299 -421 986 17 418 -163 835 106 -493 -38 484 475 -427 620 640] [-995 -953 -889 -887 -628 -577 -537 -517 -502 -493 -481 -460 -427 -423 -421 -323 -299 -163 -136 -95 -77 -38 9 17 31 72 106 418 475 484 525 620 640 758 758 775 835 837 886 986]]
Test Case: 2233 | Input/Output: [[577 125 471 645 809] [125 471 577 645 809]]
Test Case: 2234 | Input/Output: [[609 451 -783 -471 308 596 -583 702 -298] [-783 -583 -471 -298 308 451 596 609 702]]
Test Case: 2235 | Input/Output: [[221 -864] [-864 221]]
Test Case: 2236 | Input/Output: [[-930 -249 0 39 -370 -215 -5 37 261 901 424 648 -915 9 -46 -111 116 312 -93 299 195 -188 -533 -339 -392 235 519 270 -873] [-930 -915 -873 -533 -392 -370 -339 -249 -215 -188 -111 -93 -46 -5 0 9 37 39 116 195 235 261 270 299 312 424 519 648 901]]
Test Case: 2237 | Input/Output: [[373 460 186 -286 -548 -441 171 429 -980 -333 -956 193 361 542 978 189 -41 -620 -841 -57 -940 -316 566 -936 588 -890 289 80 368 -130 -295 -748 -595 -194] [-980 -956 -940 -936 -890 -841 -748 -620 -595 -548 -441 -333 -316 -295 -286 -194 -130 -57 -41 80 171 186 189 193 289 361 368 373 429 460 542 566 588 978]]
Test Case: 2238 | Input/Output: [[810 55 351 -322 79 -100 -619 51 976 74 65 -114 -401 -891] [-891 -619 -401 -322 -114 -100 51 55 65 74 79 351 810 976]]
Test Case: 2239 | Input/Output: [[-145 -518 8 -236 109 -103] [-518 -236 -145 -103 8 109]]
Test Case: 2240 | Input/Output: [[407 -176 874 643 -900 -667 -146 -231 278 911 -432 130 240 -459 968 161 -88 -242 -692 -284 738 860 901 -403 978 -175 745 -859 318 -698 503 541 205 -536 541 507 162 -66 -181 562 413 -473 -894 -45 -970 -521 -760 833] [-970 -900 -894 -859 -760 -698 -692 -667 -536 -521 -473 -459 -432 -403 -284 -242 -231 -181 -176 -175 -146 -88 -66 -45 130 161 162 205 240 278 318 407 413 503 507 541 541 562 643 738 745 833 860 874 901 911 968 978]]
Test Case: 2241 | Input/Output: [[514 671 -435] [-435 514 671]]
Test Case: 2242 | Input/Output: [[565 -428 296 -167 4 -735 -929 617 368 -492 499 -371 -9 939 -421 -658 473 882 439 628 578 -573 518 -107 -378 -990 454 -947 -879 853] [-990 -947 -929 -879 -735 -658 -573 -492 -428 -421 -378 -371 -167 -107 -9 4 296 368 439 454 473 499 518 565 578 617 628 853 882 939]]
Test Case: 2243 | Input/Output: [[-125 -314 -923 -634 230 -623 470 122 -370 207 -820 -182 501 24 143 962 -292 -331 907 -334 -678 -337 522 521] [-923 -820 -678 -634 -623 -370 -337 -334 -331 -314 -292 -182 -125 24 122 143 207 230 470 501 521 522 907 962]]
Test Case: 2244 | Input/Output: [[-413 -348 98 -435 949 47 -429 -907 594 -56 -546 -391 932 -128 12 -56 903 762 -892] [-907 -892 -546 -435 -429 -413 -391 -348 -128 -56 -56 12 47 98 594 762 903 932 949]]
Test Case: 2245 | Input/Output: [[629 -969 -571 743 330 567 106 -939 -349 579 359 -823 35 325 -948 -379 -793 833 378 -997 -243] [-997 -969 -948 -939 -823 -793 -571 -379 -349 -243 35 106 325 330 359 378 567 579 629 743 833]]
Test Case: 2246 | Input/Output: [[634 -572 -186 -428 -97 -177 944 929 -869 -331 339 -825 344 916 854 -344 901 -815 -576 253] [-869 -825 -815 -576 -572 -428 -344 -331 -186 -177 -97 253 339 344 634 854 901 916 929 944]]
Test Case: 2247 | Input/Output: [[-136 146] [-136 146]]
Test Case: 2248 | Input/Output: [[-130 854 -57 159 8 -103 -947 -255 924 -894 870 131 -916 -213 52 -964 78 742 -131 -332 -380 123 -334 -194 -94 969 715 356 -890 -982] [-982 -964 -947 -916 -894 -890 -380 -334 -332 -255 -213 -194 -131 -130 -103 -94 -57 8 52 78 123 131 159 356 715 742 854 870 924 969]]
Test Case: 2249 | Input/Output: [[-263 899 202 -76 -704 477 687 -599 823 -539 -315 730 -379 283 -19 -97 216 -381 -496 102 -859 997 -459 -981 -294 -761 367 -787 879 -419 -87 -357 -202 -169 536 456 902 -652 -984 619 163 -876 737 -949 66 -617] [-984 -981 -949 -876 -859 -787 -761 -704 -652 -617 -599 -539 -496 -459 -419 -381 -379 -357 -315 -294 -263 -202 -169 -97 -87 -76 -19 66 102 163 202 216 283 367 456 477 536 619 687 730 737 823 879 899 902 997]]
Test Case: 2250 | Input/Output: [[160 591 -437 31 520 321 -153 892 465 -272 -648 -421 971 -411 -597 -939 -998 761 -276 340 -866 -261 -548 -478 777 350 538 -380 -991 142 -756 -56 489 0 -918 623 32] [-998 -991 -939 -918 -866 -756 -648 -597 -548 -478 -437 -421 -411 -380 -276 -272 -261 -153 -56 0 31 32 142 160 321 340 350 465 489 520 538 591 623 761 777 892 971]]
Test Case: 2251 | Input/Output: [[-203 958 -278 672 -285 559 -112 -406 1 -550 582 174 -841 -135 -865 122 -744 501 501 -402 -66 -194 216 -835 700 391] [-865 -841 -835 -744 -550 -406 -402 -285 -278 -203 -194 -135 -112 -66 1 122 174 216 391 501 501 559 582 672 700 958]]
Test Case: 2252 | Input/Output: [[-754 -59 613 753 -42 -210 271 -435 -99 298 838 912 -742 566 286 900 -733 680 214 259 -948 302] [-948 -754 -742 -733 -435 -210 -99 -59 -42 214 259 271 286 298 302 566 613 680 753 838 900 912]]
Test Case: 2253 | Input/Output: [[-970 654 452 -102 479 -174 -658 -111 858 836 839 451 -819 -533 782 337 -557 369 458 173 -909 411 372 -537 -524 -871 663 809] [-970 -909 -871 -819 -658 -557 -537 -533 -524 -174 -111 -102 173 337 369 372 411 451 452 458 479 654 663 782 809 836 839 858]]
Test Case: 2254 | Input/Output: [[768 595 -140 -241 -373 329 443 -497 -921 153 58 -832 -964 915 96 218 571 -779 -50 -586 -194 -618 -531 682 -473 337 -465 526 213 102 -423 245 -395 188 -28 205 -316 -106 394 -966 -436 -160 869 -139 410 19] [-966 -964 -921 -832 -779 -618 -586 -531 -497 -473 -465 -436 -423 -395 -373 -316 -241 -194 -160 -140 -139 -106 -50 -28 19 58 96 102 153 188 205 213 218 245 329 337 394 410 443 526 571 595 682 768 869 915]]
Test Case: 2255 | Input/Output: [[-338 246 -801 946 -807 -654 -972 708 598 -727 82 -263 77 358 347 -915 913 52 -244 162 435 -96 -831 -457 -177 -490 475 776 344 947 -607 654 551 -808 -67 -858 262 473 -256 995 -420 686] [-972 -915 -858 -831 -808 -807 -801 -727 -654 -607 -490 -457 -420 -338 -263 -256 -244 -177 -96 -67 52 77 82 162 246 262 344 347 358 435 473 475 551 598 654 686 708 776 913 946 947 995]]
Test Case: 2256 | Input/Output: [[-359 -365 -64 -726 386 165 643 98 470 -754 967 -849 -369 606 662 -109 978 720 668 525 290 -3 -757 -853 823 324 -231 -401 -619] [-853 -849 -757 -754 -726 -619 -401 -369 -365 -359 -231 -109 -64 -3 98 165 290 324 386 470 525 606 643 662 668 720 823 967 978]]
Test Case: 2257 | Input/Output: [[50 -820 858 -978 481 -256 461 -838 633 215 -417 359 -786 -62 -546 997 943 -28 -963 -504 -278 530 843 738 -1000 -914 789 238 66 930] [-1000 -978 -963 -914 -838 -820 -786 -546 -504 -417 -278 -256 -62 -28 50 66 215 238 359 461 481 530 633 738 789 843 858 930 943 997]]
Test Case: 2258 | Input/Output: [[-80 641 721 423 -479 215 -563 -370 -82 -382 34 355 -943 819 -823 -81 -291 591 -683 -813 779 236 -826 -695 627 -308 718 -13 -129 547 -656 659 2 704 -166 -684 265] [-943 -826 -823 -813 -695 -684 -683 -656 -563 -479 -382 -370 -308 -291 -166 -129 -82 -81 -80 -13 2 34 215 236 265 355 423 547 591 627 641 659 704 718 721 779 819]]
Test Case: 2259 | Input/Output: [[-731 126 -113 -813 -838 -873 -989 160 -21 937 783 -358 -352 -703 -329 -118 630 220 -744 -223 -369 -728 618 533 368 926 256 685 -686 976 -166 515 -630 -919 945 880 -756 330 235 -171 -260 131 46 -556 -466 -781] [-989 -919 -873 -838 -813 -781 -756 -744 -731 -728 -703 -686 -630 -556 -466 -369 -358 -352 -329 -260 -223 -171 -166 -118 -113 -21 46 126 131 160 220 235 256 330 368 515 533 618 630 685 783 880 926 937 945 976]]
Test Case: 2260 | Input/Output: [[-779 391 -319 618] [-779 -319 391 618]]
Test Case: 2261 | Input/Output: [[-998 -219 204 605 -278 992 -160 -551 -341 980 -555] [-998 -555 -551 -341 -278 -219 -160 204 605 980 992]]
Test Case: 2262 | Input/Output: [[915 -169 -520 716 -321 -629 -135 -104 65 574 142 420 613 -368 489 242 -391 -532 -217 -92 -185 971 -20 41 445 -944 540 944 394 -876 -595 562 -734 -246 264 887 -430 87 779 -148 -750 -4 85 -903 411 434 926 -507] [-944 -903 -876 -750 -734 -629 -595 -532 -520 -507 -430 -391 -368 -321 -246 -217 -185 -169 -148 -135 -104 -92 -20 -4 41 65 85 87 142 242 264 394 411 420 434 445 489 540 562 574 613 716 779 887 915 926 944 971]]
Test Case: 2263 | Input/Output: [[-856 574 262 -554 263 -484 -960 287 380 317 262 -359 -657 811 -519 -484 -685 -414 -437] [-960 -856 -685 -657 -554 -519 -484 -484 -437 -414 -359 262 262 263 287 317 380 574 811]]
Test Case: 2264 | Input/Output: [[-7 721 614 601 929 -850 398 -683 175 210 306 39 825 -529 331 -303 575 -324 179 -34 878 -408 575 39 593 -915 -181 235 444 988 -807 975 -78 802 -144 608 -526] [-915 -850 -807 -683 -529 -526 -408 -324 -303 -181 -144 -78 -34 -7 39 39 175 179 210 235 306 331 398 444 575 575 593 601 608 614 721 802 825 878 929 975 988]]
Test Case: 2265 | Input/Output: [[-565 -525 660 -14 -367 -942 -911 -808 305 771 271 250 -341 -19 648 240 622 115 451 -882 -95 849 -348 -111 -402 428 -873 -92] [-942 -911 -882 -873 -808 -565 -525 -402 -367 -348 -341 -111 -95 -92 -19 -14 115 240 250 271 305 428 451 622 648 660 771 849]]
Test Case: 2266 | Input/Output: [[-780 507 -310 -189 136 675] [-780 -310 -189 136 507 675]]
Test Case: 2267 | Input/Output: [[146 -218 -370 941 -697 -799 -271 419 689 759 658 817 -484 189 -781 629 -16 -325 -626 -503 -603 791 567 685 20 990 613 -832 -3 921 519 337 756 -257 642 -257 807 822 -756 144 958 -873 -323 -879] [-879 -873 -832 -799 -781 -756 -697 -626 -603 -503 -484 -370 -325 -323 -271 -257 -257 -218 -16 -3 20 144 146 189 337 419 519 567 613 629 642 658 685 689 756 759 791 807 817 822 921 941 958 990]]
Test Case: 2268 | Input/Output: [[-25 -339 -298 -578 207 -11 931 477 -401 463 -787 -934 -934 -898 -45 449 -544 207 60 -730 112 -347 -20 607 903 900 798 673 -179 390 -497 147 -7 -149 298 -495 122 119 924 -766 -296 463 882 -596 935 -621 402 -39] [-934 -934 -898 -787 -766 -730 -621 -596 -578 -544 -497 -495 -401 -347 -339 -298 -296 -179 -149 -45 -39 -25 -20 -11 -7 60 112 119 122 147 207 207 298 390 402 449 463 463 477 607 673 798 882 900 903 924 931 935]]
Test Case: 2269 | Input/Output: [[-752 972 -673 804 792 -698 -31 -474 -533 -501 -732 7 52 -627 -609 -698 683 -90 -794 712 -810 565 545 960 137 -628 909 -153 342 -477 165 370 -990 605] [-990 -810 -794 -752 -732 -698 -698 -673 -628 -627 -609 -533 -501 -477 -474 -153 -90 -31 7 52 137 165 342 370 545 565 605 683 712 792 804 909 960 972]]
Test Case: 2270 | Input/Output: [[322 -368 -174 -426 -66 -534 926 657 586 808 56 694 894 -634 -940 -59 321 -764] [-940 -764 -634 -534 -426 -368 -174 -66 -59 56 321 322 586 657 694 808 894 926]]
Test Case: 2271 | Input/Output: [[491 346 413 128 749 -597 269 273 -826 -263 -62 -911 -213 185 -896 627 236 475 -240 -208 693 897 -748 -263 723 -320 -522 -201 471 -208 143 -501 -850 458 -31 718 928 -829 260 -540 70 -862 720 -575 -591] [-911 -896 -862 -850 -829 -826 -748 -597 -591 -575 -540 -522 -501 -320 -263 -263 -240 -213 -208 -208 -201 -62 -31 70 128 143 185 236 260 269 273 346 413 458 471 475 491 627 693 718 720 723 749 897 928]]
Test Case: 2272 | Input/Output: [[-504 417 -648] [-648 -504 417]]
Test Case: 2273 | Input/Output: [[720 -851 -644 -343 311 940 339 379 -937 197 22 290 -365 28 25 224 -795 410 -235 822 -242 -296 356 382 -35 951 134 582 428 405 794 -394] [-937 -851 -795 -644 -394 -365 -343 -296 -242 -235 -35 22 25 28 134 197 224 290 311 339 356 379 382 405 410 428 582 720 794 822 940 951]]
Test Case: 2274 | Input/Output: [[585 -822 661 154 130 -535 925 -564 338 -715 273 -279 789 879 463 -405 680 3 -989 145 -332 -637 -984 -324 -997 101 616 -459 357 -986 -569 101 -114 462 910] [-997 -989 -986 -984 -822 -715 -637 -569 -564 -535 -459 -405 -332 -324 -279 -114 3 101 101 130 145 154 273 338 357 462 463 585 616 661 680 789 879 910 925]]
Test Case: 2275 | Input/Output: [[-261 949 77 -356 -944 733 -692 -331 -571 38 785 553 -220 -542 -86 549 -828 -286 283 98 57 154 586 -657 -785 319 924 239 -27 -308 319 554 -962 -414 -285 901 30] [-962 -944 -828 -785 -692 -657 -571 -542 -414 -356 -331 -308 -286 -285 -261 -220 -86 -27 30 38 57 77 98 154 239 283 319 319 549 553 554 586 733 785 901 924 949]]
Test Case: 2276 | Input/Output: [[166 340 874 804 785 -432 -579 -597 -433 -865 -160 -94 -620 -292 225 -99 -7] [-865 -620 -597 -579 -433 -432 -292 -160 -99 -94 -7 166 225 340 785 804 874]]
Test Case: 2277 | Input/Output: [[698 983] [698 983]]
Test Case: 2278 | Input/Output: [[-700 734 84 501 -987 762 288 735 466 -774 -842 442 -643 -52 831 767 909 -102 -993 -392 -841 215 -705 532 -875 337 540 865 -957 -906 -159 873 -97 -944 -203 665 794 600 -736] [-993 -987 -957 -944 -906 -875 -842 -841 -774 -736 -705 -700 -643 -392 -203 -159 -102 -97 -52 84 215 288 337 442 466 501 532 540 600 665 734 735 762 767 794 831 865 873 909]]
Test Case: 2279 | Input/Output: [[-204 422 -471 703 428 732 835 842 255 -160 623 162 258 -266 -613 584 683 589 450 -799 92 -563 382 818 -443 813 680 -590 120 -210 803 -351] [-799 -613 -590 -563 -471 -443 -351 -266 -210 -204 -160 92 120 162 255 258 382 422 428 450 584 589 623 680 683 703 732 803 813 818 835 842]]
Test Case: 2280 | Input/Output: [[800 75 -516 -682 156 -336 769 741 31 -945 -809 -264 655 -390 -169 246 -932] [-945 -932 -809 -682 -516 -390 -336 -264 -169 31 75 156 246 655 741 769 800]]
Test Case: 2281 | Input/Output: [[377 618 195 672 808 821 -705 -904 152 -697 -323 -268 -722 760 128 -206 -733 213 -54] [-904 -733 -722 -705 -697 -323 -268 -206 -54 128 152 195 213 377 618 672 760 808 821]]
Test Case: 2282 | Input/Output: [[-873] [-873]]
Test Case: 2283 | Input/Output: [[-53 398 588 -289 -462 139 567 456 697 -457 -983 617] [-983 -462 -457 -289 -53 139 398 456 567 588 617 697]]
Test Case: 2284 | Input/Output: [[-493 -598 444 -817] [-817 -598 -493 444]]
Test Case: 2285 | Input/Output: [[-87 210 -897 443 -198 -837 890 609 -139 451 -623 643 -496 -457 -561 771 -654 -293 -736 -851 -201] [-897 -851 -837 -736 -654 -623 -561 -496 -457 -293 -201 -198 -139 -87 210 443 451 609 643 771 890]]
Test Case: 2286 | Input/Output: [[117 508 -134] [-134 117 508]]
Test Case: 2287 | Input/Output: [[524 -848 286 -352 423 -21 4 18 -976 -710 -741 146 543 992 790 629 108 -931 -798 -61 -440 607 813 975 922 -73 -355 -843 -135 311 -223 -610 -559 -755 612 -426 -757 725 604 135 -871 634] [-976 -931 -871 -848 -843 -798 -757 -755 -741 -710 -610 -559 -440 -426 -355 -352 -223 -135 -73 -61 -21 4 18 108 135 146 286 311 423 524 543 604 607 612 629 634 725 790 813 922 975 992]]
Test Case: 2288 | Input/Output: [[125 -707 -684 -649 -709 -596 -269 -11 656 -180 334 -459 -770 -186 707 528 838 -623 -878 -474 729] [-878 -770 -709 -707 -684 -649 -623 -596 -474 -459 -269 -186 -180 -11 125 334 528 656 707 729 838]]
Test Case: 2289 | Input/Output: [[899 -660 686 -988 582 -954 -439 32 238 63 607 561 377 497 617 673 -238 268 681 -797 201 960 488 358 -144 164] [-988 -954 -797 -660 -439 -238 -144 32 63 164 201 238 268 358 377 488 497 561 582 607 617 673 681 686 899 960]]
Test Case: 2290 | Input/Output: [[-464 -313 168 12 369 -518 -675 162 941 803 -587 -291 -975 259 -61 2 -828 -480 207 -584 -16 -878 -129 -794 925 470 -903 -284 -936 -441 474 -806] [-975 -936 -903 -878 -828 -806 -794 -675 -587 -584 -518 -480 -464 -441 -313 -291 -284 -129 -61 -16 2 12 162 168 207 259 369 470 474 803 925 941]]
Test Case: 2291 | Input/Output: [[92 736] [92 736]]
Test Case: 2292 | Input/Output: [[957 -598 149 864 577 668 221 770 -30 467 678] [-598 -30 149 221 467 577 668 678 770 864 957]]
Test Case: 2293 | Input/Output: [[369 -90 -666 -160 781 -424 -790 -343 -251 833 709 -386 659 884 -459 243 178 -335 673 -553 -329 135 325 112 -517 -241 835 325 925 935 -260 -982 -79 655 -168 836 -76 -112 -559 -911 727 -697 -782] [-982 -911 -790 -782 -697 -666 -559 -553 -517 -459 -424 -386 -343 -335 -329 -260 -251 -241 -168 -160 -112 -90 -79 -76 112 135 178 243 325 325 369 655 659 673 709 727 781 833 835 836 884 925 935]]
Test Case: 2294 | Input/Output: [[845 718 448 -421 -284 -110 -299 -147 155 -924 261 105 -535 849 -997 -519 350 -18 270 -49 222 -988 697 651 492 939 -585 -896 416 -954 -712 -23 536] [-997 -988 -954 -924 -896 -712 -585 -535 -519 -421 -299 -284 -147 -110 -49 -23 -18 105 155 222 261 270 350 416 448 492 536 651 697 718 845 849 939]]
Test Case: 2295 | Input/Output: [[836 439 102 662 -376 81 -496 -581 -8 854 814 -247 -428 -26 -505 -300 -505 125 839 -360 -55 691 -754 951 -513 621 105 -231 -435 -904 -797 276 -323 495 -830 745 934 -915 -377 313 -7 392 636 37 -293 949 807 -566] [-915 -904 -830 -797 -754 -581 -566 -513 -505 -505 -496 -435 -428 -377 -376 -360 -323 -300 -293 -247 -231 -55 -26 -8 -7 37 81 102 105 125 276 313 392 439 495 621 636 662 691 745 807 814 836 839 854 934 949 951]]
Test Case: 2296 | Input/Output: [[-459 991 80 919 708 -949 -651 -489 219 -664 437 -350] [-949 -664 -651 -489 -459 -350 80 219 437 708 919 991]]
Test Case: 2297 | Input/Output: [[382 269 -30 -279 943 961 885 -974 43 690 316 918 -190 -552 180 989 -51 -925 -354 -217 673 291 733 622 -128 -123 134 -891 -504 281 -563 549 -26 -341 -941 -712 -781 978 -150] [-974 -941 -925 -891 -781 -712 -563 -552 -504 -354 -341 -279 -217 -190 -150 -128 -123 -51 -30 -26 43 134 180 269 281 291 316 382 549 622 673 690 733 885 918 943 961 978 989]]
Test Case: 2298 | Input/Output: [[-884 -275 -247 -259 -498 -980 -958 -715 -833 -798 -725 -687 966 902 390 -695 -564 846 -771 880 500 -946 801 613 -745 639 104 -248 -645 -110 -14 939 354 -181 826 981 -309 -258 42 -959 -246 -867] [-980 -959 -958 -946 -884 -867 -833 -798 -771 -745 -725 -715 -695 -687 -645 -564 -498 -309 -275 -259 -258 -248 -247 -246 -181 -110 -14 42 104 354 390 500 613 639 801 826 846 880 902 939 966 981]]
Test Case: 2299 | Input/Output: [[-805 -259 -322 -802 733 308 -336 293 -415 -137 -750 312 -798 460 -384 631 664 488 -310 -414 -956 661 -209 -682 935 276 -137 893 -545 -956 -977 488 359 -235 -167 436 744 375 -1000] [-1000 -977 -956 -956 -805 -802 -798 -750 -682 -545 -415 -414 -384 -336 -322 -310 -259 -235 -209 -167 -137 -137 276 293 308 312 359 375 436 460 488 488 631 661 664 733 744 893 935]]
Test Case: 2300 | Input/Output: [[83 -863 -827 976 -874 903 125 -709 632 -619 -277 -741 -951 -759 53 251 791 702] [-951 -874 -863 -827 -759 -741 -709 -619 -277 53 83 125 251 632 702 791 903 976]]
Test Case: 2301 | Input/Output: [[441 778 369 342 76] [76 342 369 441 778]]
Test Case: 2302 | Input/Output: [[-17 338 -464 649] [-464 -17 338 649]]
Test Case: 2303 | Input/Output: [[-22 -848 633 -820 -893 -758 368 124 -998 749 878 -744 622 -34 888 -215 -792 -900 -545 -242 -971 -532] [-998 -971 -900 -893 -848 -820 -792 -758 -744 -545 -532 -242 -215 -34 -22 124 368 622 633 749 878 888]]
Test Case: 2304 | Input/Output: [[735 158 380 -28 -603 469 800 -963] [-963 -603 -28 158 380 469 735 800]]
Test Case: 2305 | Input/Output: [[279 380 -888 362 -941 -939 -96 -692 -663 -847 -148 -645 395 121 -570 414 448 -542 235 681 158 -657 522 69 -985 -818 -747 527 -321 -987 94 604 -37 669 360 197 -432 729 -481 106 -933 -259 357 -932 -857 -792 -355 706 303] [-987 -985 -941 -939 -933 -932 -888 -857 -847 -818 -792 -747 -692 -663 -657 -645 -570 -542 -481 -432 -355 -321 -259 -148 -96 -37 69 94 106 121 158 197 235 279 303 357 360 362 380 395 414 448 522 527 604 669 681 706 729]]
Test Case: 2306 | Input/Output: [[-332 425 -459 109 345 -322 794 383 296 -95 -552 -331 331 214 541 67 68 701 881 -310 -849 907 -870 -142 589 -137 30 775 251 -323 -655 424 -679 492 -45 -416 -592 990 -354 -907 -738 -326] [-907 -870 -849 -738 -679 -655 -592 -552 -459 -416 -354 -332 -331 -326 -323 -322 -310 -142 -137 -95 -45 30 67 68 109 214 251 296 331 345 383 424 425 492 541 589 701 775 794 881 907 990]]
Test Case: 2307 | Input/Output: [[926 -346 -740 -495 511 1 -479 -261 -958 -627 -61 -628 -466 314 -861 -952 -386 369 -680 939 -183 637 -32 -891 -888 292 -94 -219 325 587 -397 820 844 903 148 940 -332 566] [-958 -952 -891 -888 -861 -740 -680 -628 -627 -495 -479 -466 -397 -386 -346 -332 -261 -219 -183 -94 -61 -32 1 148 292 314 325 369 511 566 587 637 820 844 903 926 939 940]]
Test Case: 2308 | Input/Output: [[793 407 -780 -550 -983 990 87 395 -767 761 879 -945 473 -378 602 70 -714 -18 -882 -468 -768 312 791 963 226 -528 -108 -762 246 -199 768 217 -406 76 -801 709 -108 -910 532 -810 955 484 -600 44 -915] [-983 -945 -915 -910 -882 -810 -801 -780 -768 -767 -762 -714 -600 -550 -528 -468 -406 -378 -199 -108 -108 -18 44 70 76 87 217 226 246 312 395 407 473 484 532 602 709 761 768 791 793 879 955 963 990]]
Test Case: 2309 | Input/Output: [[923 403 137 -380 -377 605 -827] [-827 -380 -377 137 403 605 923]]
Test Case: 2310 | Input/Output: [[-599 -162 -31 -826 -207 -503 -872 589 -72 -145 405 882 -355 -915 -331 172 -858 53 -283 373 714 -962 271 77 766] [-962 -915 -872 -858 -826 -599 -503 -355 -331 -283 -207 -162 -145 -72 -31 53 77 172 271 373 405 589 714 766 882]]
Test Case: 2311 | Input/Output: [[385 -894 2 -630 -749 871 337 136 159 -704 -909 -489 620 550 -885 210 -538 -282 238 -361 704 767 185 650 -769] [-909 -894 -885 -769 -749 -704 -630 -538 -489 -361 -282 2 136 159 185 210 238 337 385 550 620 650 704 767 871]]
Test Case: 2312 | Input/Output: [[-264 -971 442 96 -831 52 398 -198 39 -579 -850 -11 189 -177 -369 -118 -456 -887 -26 378 675 -261 355 549 -473 153 -386 130 -623 933 -760 -31 -647 -208 833 657 -107 613 -34 337 470 -14 -685 353 -159 -656 -188 -290 422 116] [-971 -887 -850 -831 -760 -685 -656 -647 -623 -579 -473 -456 -386 -369 -290 -264 -261 -208 -198 -188 -177 -159 -118 -107 -34 -31 -26 -14 -11 39 52 96 116 130 153 189 337 353 355 378 398 422 442 470 549 613 657 675 833 933]]
Test Case: 2313 | Input/Output: [[588 -927 -118 -391 566 168 718 929 756 196 611 -543 -236 907 981 103 764 30 211 -356 527 297 732 516 -635 581 -613 -913 590 399 -625 894 817 71 874 272 658 -924 -818 629 -912 -859 842 -817 78 -881] [-927 -924 -913 -912 -881 -859 -818 -817 -635 -625 -613 -543 -391 -356 -236 -118 30 71 78 103 168 196 211 272 297 399 516 527 566 581 588 590 611 629 658 718 732 756 764 817 842 874 894 907 929 981]]
Test Case: 2314 | Input/Output: [[-888 275 -579 40 610 -660 581 135 -202 149 -546 -935 -956 -369 -778 -316 475 -221 774] [-956 -935 -888 -778 -660 -579 -546 -369 -316 -221 -202 40 135 149 275 475 581 610 774]]
Test Case: 2315 | Input/Output: [[496 -697 -864 613 -353 -353 797 -22] [-864 -697 -353 -353 -22 496 613 797]]
Test Case: 2316 | Input/Output: [[-741 777 -253 811 -328 162] [-741 -328 -253 162 777 811]]
Test Case: 2317 | Input/Output: [[-170 -252 -715 -374 970 264 -641 879 707 974 28 610 -135 -617 777 625 823 -400 -402 893 -970 -750 329 460 -588 268 -510 -275 758 822 -531 116 515 -889 970 -968 -782 -758 -126 611 -392] [-970 -968 -889 -782 -758 -750 -715 -641 -617 -588 -531 -510 -402 -400 -392 -374 -275 -252 -170 -135 -126 28 116 264 268 329 460 515 610 611 625 707 758 777 822 823 879 893 970 970 974]]
Test Case: 2318 | Input/Output: [[749 968 357 -901 -98 -427 -544 980 913 997 -48 -976 768 -377 542 -150 80 231 486 631 331 806 -50 -280 -494 -368 -507 -784 -149 913 -732 147 183 636] [-976 -901 -784 -732 -544 -507 -494 -427 -377 -368 -280 -150 -149 -98 -50 -48 80 147 183 231 331 357 486 542 631 636 749 768 806 913 913 968 980 997]]
Test Case: 2319 | Input/Output: [[801 685 260 896 -557 316 -652] [-652 -557 260 316 685 801 896]]
Test Case: 2320 | Input/Output: [[-163 -601 -799 91 750 -197 -203] [-799 -601 -203 -197 -163 91 750]]
Test Case: 2321 | Input/Output: [[880 989 215 -318 -71 -144 760 -180 -383 994 444] [-383 -318 -180 -144 -71 215 444 760 880 989 994]]
Test Case: 2322 | Input/Output: [[-1 457 -666 102 464 592 41 240 595 -799 -715 -904 -65 804 122 -193 770 -31 -845 948 -608] [-904 -845 -799 -715 -666 -608 -193 -65 -31 -1 41 102 122 240 457 464 592 595 770 804 948]]
Test Case: 2323 | Input/Output: [[-430 292 -733 -562 -352 556 -255 706 -618 137 775 563 640] [-733 -618 -562 -430 -352 -255 137 292 556 563 640 706 775]]
Test Case: 2324 | Input/Output: [[778 761 -265 496 -432 322 323 661 703 713 87 -700 -686 533 585 665 693 827 48 -51 252 -173 -179 -446 -891 -864 -231] [-891 -864 -700 -686 -446 -432 -265 -231 -179 -173 -51 48 87 252 322 323 496 533 585 661 665 693 703 713 761 778 827]]
Test Case: 2325 | Input/Output: [[-324 526 -818 386 -743 554 -525 170 291 144 948 -295 856 919 -845 168 -864 -660 -849 723 178 -939 417 193 119 -674 -449 208 491 -864 649 164 -495 -366 -706 -711 -127 897 -336 -444 390 -307 932 616 374 -984 131] [-984 -939 -864 -864 -849 -845 -818 -743 -711 -706 -674 -660 -525 -495 -449 -444 -366 -336 -324 -307 -295 -127 119 131 144 164 168 170 178 193 208 291 374 386 390 417 491 526 554 616 649 723 856 897 919 932 948]]
Test Case: 2326 | Input/Output: [[427 731 29 -102 569 79 -153 367 -484 -885 152 861 -102 949 482 797 373 -195 -439 942 124] [-885 -484 -439 -195 -153 -102 -102 29 79 124 152 367 373 427 482 569 731 797 861 942 949]]
Test Case: 2327 | Input/Output: [[298 -975 802 967 332 -860 53 249 208 374 357 -597 -957 831 -90 932 468 -261 168] [-975 -957 -860 -597 -261 -90 53 168 208 249 298 332 357 374 468 802 831 932 967]]
Test Case: 2328 | Input/Output: [[-998 -650 727 -712 -379 848 80 117 910 798 809 769 -103 -679 131 -52 96 -983 -880 493 -140 274 -502 971 266 688 -969 -249 192 163 -449 123 677 894 49 -149 -569 982 471 816 447 -84 390 475 413 -672 -140 997 254 -727] [-998 -983 -969 -880 -727 -712 -679 -672 -650 -569 -502 -449 -379 -249 -149 -140 -140 -103 -84 -52 49 80 96 117 123 131 163 192 254 266 274 390 413 447 471 475 493 677 688 727 769 798 809 816 848 894 910 971 982 997]]
Test Case: 2329 | Input/Output: [[-868 781 -245 247 -650 -405 -647] [-868 -650 -647 -405 -245 247 781]]
Test Case: 2330 | Input/Output: [[439 -700 281 597 -238 -171 770 -352 -658 -394 -207 -459 -594 719 455 218 821 -616 877 -523 976 -543 815 337 457 -22 261 679 534 137 -236 -936 -835 -211 -228 -919] [-936 -919 -835 -700 -658 -616 -594 -543 -523 -459 -394 -352 -238 -236 -228 -211 -207 -171 -22 137 218 261 281 337 439 455 457 534 597 679 719 770 815 821 877 976]]
Test Case: 2331 | Input/Output: [[489 -415 609 987 -218 890 995 721 429 -373 -472 -617 -333 -562 -342 -705 688 708 -477 -287 -826 270 -47 729 881 -399 256 -810 881 -574 792] [-826 -810 -705 -617 -574 -562 -477 -472 -415 -399 -373 -342 -333 -287 -218 -47 256 270 429 489 609 688 708 721 729 792 881 881 890 987 995]]
Test Case: 2332 | Input/Output: [[-99 -805 -471 -330 908 -436 92 -466 842 -956 151 -241 785 694 -71 -215 -877 -210 -653 368 481 -737 389 -677 -630 -296 -978 616 -254 204 -916 -802 732 -220 -625 304 -264 316 -166 -643 971 -485 260] [-978 -956 -916 -877 -805 -802 -737 -677 -653 -643 -630 -625 -485 -471 -466 -436 -330 -296 -264 -254 -241 -220 -215 -210 -166 -99 -71 92 151 204 260 304 316 368 389 481 616 694 732 785 842 908 971]]
Test Case: 2333 | Input/Output: [[-371 985 145 -847 143 -480 408 539] [-847 -480 -371 143 145 408 539 985]]
Test Case: 2334 | Input/Output: [[-964 818 800 -438 5 936 -732 885 759 284 -524 754 -29 177 -612 659 234 594 -494 -867 120 -901 -916 -569 -767 241 -392 978 356 43 -537 -244 -882] [-964 -916 -901 -882 -867 -767 -732 -612 -569 -537 -524 -494 -438 -392 -244 -29 5 43 120 177 234 241 284 356 594 659 754 759 800 818 885 936 978]]
Test Case: 2335 | Input/Output: [[152 266 947 876 -769 -241 158 -41 691 -585 -178 -209 -587 -254 933 -644 -46 412 387 721 493 -940 164 -525 -704 -243 608 46 -740 -286 709 -48 602 -978 -853 603 413 -268 594 -227 -73 160 739 -754 655 -613 854] [-978 -940 -853 -769 -754 -740 -704 -644 -613 -587 -585 -525 -286 -268 -254 -243 -241 -227 -209 -178 -73 -48 -46 -41 46 152 158 160 164 266 387 412 413 493 594 602 603 608 655 691 709 721 739 854 876 933 947]]
Test Case: 2336 | Input/Output: [[-870 -345 293 987 -744 485 313 155 -133 740 851 46 -749 -342 -281 -588 -482 -562 -967 -7 367 -402 -224 503 -812 -755 369 -800 -966 646 -93 819 -742 868 -527 747 438 -54 -587 528 -296 198 718 41 -497 -439 -111 15] [-967 -966 -870 -812 -800 -755 -749 -744 -742 -588 -587 -562 -527 -497 -482 -439 -402 -345 -342 -296 -281 -224 -133 -111 -93 -54 -7 15 41 46 155 198 293 313 367 369 438 485 503 528 646 718 740 747 819 851 868 987]]
Test Case: 2337 | Input/Output: [[975 -196 953 858 309 -298 -751 252 19 599 295 -934 504 934 -860 -743 689 716 -968 -517 -691 187 540 -668 -889 -792] [-968 -934 -889 -860 -792 -751 -743 -691 -668 -517 -298 -196 19 187 252 295 309 504 540 599 689 716 858 934 953 975]]
Test Case: 2338 | Input/Output: [[-355 109 -409 -791 133 -853 408 601 409 -404 -235 8 548 -813 533 484 -433 -738 -783 -785 -867 258 -583 -412] [-867 -853 -813 -791 -785 -783 -738 -583 -433 -412 -409 -404 -355 -235 8 109 133 258 408 409 484 533 548 601]]
Test Case: 2339 | Input/Output: [[663 888 145 258 685 -941 -25 -697 -214 373 944 145 -45 410 -885 67 -92 573 -6 -557 654 -711 -689 241 217 -465 54 -347 481 286 -800 -838 -794 787 -1000 646 810 -952 294 33 692 338 -768 -992 81] [-1000 -992 -952 -941 -885 -838 -800 -794 -768 -711 -697 -689 -557 -465 -347 -214 -92 -45 -25 -6 33 54 67 81 145 145 217 241 258 286 294 338 373 410 481 573 646 654 663 685 692 787 810 888 944]]
Test Case: 2340 | Input/Output: [[889 708 187 1000 -811 326 -450 -952 689 308 776 972 925 -107 540 915 -392 428 746 295 -882 -913 -10 3 528 -661 -635 -386 -981] [-981 -952 -913 -882 -811 -661 -635 -450 -392 -386 -107 -10 3 187 295 308 326 428 528 540 689 708 746 776 889 915 925 972 1000]]
Test Case: 2341 | Input/Output: [[229 981 -652 315 134 316] [-652 134 229 315 316 981]]
Test Case: 2342 | Input/Output: [[889 339 965 561 867 310 -533 383 -844 -644 -410 327 -834 -542 116 -41 368 349 344 893 -426 849 -772 531 561 -202 -396 -329 -285 -351 -433 932 516 -909 886 -364 996 -849 -769] [-909 -849 -844 -834 -772 -769 -644 -542 -533 -433 -426 -410 -396 -364 -351 -329 -285 -202 -41 116 310 327 339 344 349 368 383 516 531 561 561 849 867 886 889 893 932 965 996]]
Test Case: 2343 | Input/Output: [[-866 -157 -286 876 452 437 398 -91 -71 -788 -893 408 206 -104 489 667 -349 -609 894 947 366 945 -300 -18 210 -218 379 422 347 780 330 -714 -918 -344 303 482] [-918 -893 -866 -788 -714 -609 -349 -344 -300 -286 -218 -157 -104 -91 -71 -18 206 210 303 330 347 366 379 398 408 422 437 452 482 489 667 780 876 894 945 947]]
Test Case: 2344 | Input/Output: [[969 816 -952 972 -79 -640 106 660 -30 -713 80 -788 832 677 -655 -833 324 -55 -707 -891 212 972 -26 -181 -825 -816 595 -868 -87 -739 -179 -826 925 -159 -113 360 610 -178 -615 -225] [-952 -891 -868 -833 -826 -825 -816 -788 -739 -713 -707 -655 -640 -615 -225 -181 -179 -178 -159 -113 -87 -79 -55 -30 -26 80 106 212 324 360 595 610 660 677 816 832 925 969 972 972]]
Test Case: 2345 | Input/Output: [[-359 -988 948 224 464 880 -643 -885 -255 190 735 218 -266 919 -918 -661 -984 507 -937 -724 968 -859 332 -874 186 948 797 881 308 272 -893 637 803 -74 507 651 550 589 -147 -843 945 -365 904 300 934 227 351 -779 762] [-988 -984 -937 -918 -893 -885 -874 -859 -843 -779 -724 -661 -643 -365 -359 -266 -255 -147 -74 186 190 218 224 227 272 300 308 332 351 464 507 507 550 589 637 651 735 762 797 803 880 881 904 919 934 945 948 948 968]]
Test Case: 2346 | Input/Output: [[102 159 -4 134 417 -181 668 808 -520 -369 961 -10 -724 746 -131 -913 -801 452 -338 -234 -349 -617 549 520 -186 -649 -12 62 -853 -26 642 244 833 662 -808 320 -708] [-913 -853 -808 -801 -724 -708 -649 -617 -520 -369 -349 -338 -234 -186 -181 -131 -26 -12 -10 -4 62 102 134 159 244 320 417 452 520 549 642 662 668 746 808 833 961]]
Test Case: 2347 | Input/Output: [[810 -237 -46 772 -453 308 -675 -711 608 -188 -95 863 -445 564 -420 -781 -524 -608 -719 -162 58 472 -182 409 -1 -243 -630 -377 85 846 132 -395] [-781 -719 -711 -675 -630 -608 -524 -453 -445 -420 -395 -377 -243 -237 -188 -182 -162 -95 -46 -1 58 85 132 308 409 472 564 608 772 810 846 863]]
Test Case: 2348 | Input/Output: [[405] [405]]
Test Case: 2349 | Input/Output: [[480 -69 -918 -915 -455 597 789 916 -309 -443 332 -374 473 -521 -964 670 37 469 -730 401 338 -56 265 119 -210 -987 -22 -840 -977 -643 -135 243 -38 54 52 -559 536] [-987 -977 -964 -918 -915 -840 -730 -643 -559 -521 -455 -443 -374 -309 -210 -135 -69 -56 -38 -22 37 52 54 119 243 265 332 338 401 469 473 480 536 597 670 789 916]]
Test Case: 2350 | Input/Output: [[456 556 -666 -570 -527 840 -598 -389 255 -979 117 -299 -825 4 -19 157 353 -104 66 16 -511 -956 -376 140 404 -825 225 647 -524 760 -143] [-979 -956 -825 -825 -666 -598 -570 -527 -524 -511 -389 -376 -299 -143 -104 -19 4 16 66 117 140 157 225 255 353 404 456 556 647 760 840]]
Test Case: 2351 | Input/Output: [[-244 498 -676 -499 -712 444 313 407 544 -16 -430 -916 398 -343 313 480 887 -985 234 -988 -986 847 -493 563 301 -605 -357 -836 160 -312 63 -107 -833 543 60 220 -933 824 713 847 -166 -942 -827] [-988 -986 -985 -942 -933 -916 -836 -833 -827 -712 -676 -605 -499 -493 -430 -357 -343 -312 -244 -166 -107 -16 60 63 160 220 234 301 313 313 398 407 444 480 498 543 544 563 713 824 847 847 887]]
Test Case: 2352 | Input/Output: [[444 -899 -840 -704 -835 189 959] [-899 -840 -835 -704 189 444 959]]
Test Case: 2353 | Input/Output: [[198 -984 430 -532 752 923 -299 819 391 112 567 -514 803 570 -718 239 194 -423 418 124 -279 -430 -712 -801 541 -26 -295 -614 -739 687 351 -441 -161 -579 -699 -257 856 289 -448 -911 615 313 319] [-984 -911 -801 -739 -718 -712 -699 -614 -579 -532 -514 -448 -441 -430 -423 -299 -295 -279 -257 -161 -26 112 124 194 198 239 289 313 319 351 391 418 430 541 567 570 615 687 752 803 819 856 923]]
Test Case: 2354 | Input/Output: [[-698 786 -839 -41 145 -743 -998 59 -263 -579 927 262 -954 756 22 673 509 233 -725 -285 224 320 195 591 -806 -790 17 -179 -923] [-998 -954 -923 -839 -806 -790 -743 -725 -698 -579 -285 -263 -179 -41 17 22 59 145 195 224 233 262 320 509 591 673 756 786 927]]
Test Case: 2355 | Input/Output: [[-962 40 -506 439 321 425 -500 586 -663 856 80 -452 28] [-962 -663 -506 -500 -452 28 40 80 321 425 439 586 856]]
Test Case: 2356 | Input/Output: [[957 618 183 518 847 -497 -449 -981 27 -465 570 -365 -260 868 -268 711 -930 350 -712 -327 -140 -109 -488 253 -710 342 210 922 926 311 -418 -126 308 -69 -753 359 -209 -115 -230 696 508 242 794 -843] [-981 -930 -843 -753 -712 -710 -497 -488 -465 -449 -418 -365 -327 -268 -260 -230 -209 -140 -126 -115 -109 -69 27 183 210 242 253 308 311 342 350 359 508 518 570 618 696 711 794 847 868 922 926 957]]
Test Case: 2357 | Input/Output: [[619 790 160 -554 -617 944 118 -236] [-617 -554 -236 118 160 619 790 944]]
Test Case: 2358 | Input/Output: [[423 750 -112 652 -384 -594 577 354 714 807 -828 647 -764 526 502 -677 852 731 747 -712 -50 -142 308 -54 -53 -20 147] [-828 -764 -712 -677 -594 -384 -142 -112 -54 -53 -50 -20 147 308 354 423 502 526 577 647 652 714 731 747 750 807 852]]
Test Case: 2359 | Input/Output: [[474 -914 9 222 481 95 828 -384 763 221 -824 -341 233 462 -60 -477 -750 -96 318 -798 661 -647 -919 620 -967 -102 855 -915 -613 -919 748 571] [-967 -919 -919 -915 -914 -824 -798 -750 -647 -613 -477 -384 -341 -102 -96 -60 9 95 221 222 233 318 462 474 481 571 620 661 748 763 828 855]]
Test Case: 2360 | Input/Output: [[-724 620 78 -979 -180 894 -744 179 120 156 -4 841 -612 907 788 -126 -421 199 567 -10 -105 -754 435 -319 -788 260] [-979 -788 -754 -744 -724 -612 -421 -319 -180 -126 -105 -10 -4 78 120 156 179 199 260 435 567 620 788 841 894 907]]
Test Case: 2361 | Input/Output: [[-134 -593 919 -559 938 -904 -887 -95 486 100 -490 540 -993 -339 -887 519 760 387 -171 419 -857 576] [-993 -904 -887 -887 -857 -593 -559 -490 -339 -171 -134 -95 100 387 419 486 519 540 576 760 919 938]]
Test Case: 2362 | Input/Output: [[448 819 -539 -851 -925 -670 -174 833 -817 -234 -846 -422 -535 -233 904 -601 584 176 -891 473 -715 -626 -241 430 -562 -638 -280 466 -416 -356 873 -912 -989 -804 -570 32 606 -605 905 -802 587 202 825 950 -899 -922 -218] [-989 -925 -922 -912 -899 -891 -851 -846 -817 -804 -802 -715 -670 -638 -626 -605 -601 -570 -562 -539 -535 -422 -416 -356 -280 -241 -234 -233 -218 -174 32 176 202 430 448 466 473 584 587 606 819 825 833 873 904 905 950]]
Test Case: 2363 | Input/Output: [[270 -600 -53 877 643 59 188 319 145 254 429 -349 -460 -722 -828 990 -995 -585 -133 -489 54 661 636 8 145 88 505 594] [-995 -828 -722 -600 -585 -489 -460 -349 -133 -53 8 54 59 88 145 145 188 254 270 319 429 505 594 636 643 661 877 990]]
Test Case: 2364 | Input/Output: [[927 407 555 -235 197] [-235 197 407 555 927]]
Test Case: 2365 | Input/Output: [[597 -510 -19 634 -515 -483 -437 -552 178 383 730 -768 -387 601 -198 359 -541 715 762] [-768 -552 -541 -515 -510 -483 -437 -387 -198 -19 178 359 383 597 601 634 715 730 762]]
Test Case: 2366 | Input/Output: [[762 -359 574 -900 93 -246 -285 -799 -765 246 -255 -765 442 -760 -552] [-900 -799 -765 -765 -760 -552 -359 -285 -255 -246 93 246 442 574 762]]
Test Case: 2367 | Input/Output: [[690 910 147 470 385 -311 854 654 -856 -727 459 -352 -394 -529 -910 336 -303 562 43 -225 -893 66 725 592 -860 609 339 -619 -432 -453 157 407 -944 356 891 137 937 483 632 511 786 909 -268 -884] [-944 -910 -893 -884 -860 -856 -727 -619 -529 -453 -432 -394 -352 -311 -303 -268 -225 43 66 137 147 157 336 339 356 385 407 459 470 483 511 562 592 609 632 654 690 725 786 854 891 909 910 937]]
Test Case: 2368 | Input/Output: [[-352 407 -323 312] [-352 -323 312 407]]
Test Case: 2369 | Input/Output: [[661 891 910 -311 190 -618 358 -873 544 -942 720 -485 627 -780 67 531 -482 -571 198 -581 489 -496 -763 -881 -106 612 27 85 775 -63 207 807 -647 892 -891 436 -708 341 83 -896 -417 -620 -491 -95 902 -645] [-942 -896 -891 -881 -873 -780 -763 -708 -647 -645 -620 -618 -581 -571 -496 -491 -485 -482 -417 -311 -106 -95 -63 27 67 83 85 190 198 207 341 358 436 489 531 544 612 627 661 720 775 807 891 892 902 910]]
Test Case: 2370 | Input/Output: [[-710 76 -454 -829 110 232 -643 -551 -391 -735 853 -112 -88 702 954 289 -184 -495 683 -489 203 148 -268 -426 126 356 235 -421 208 96 105 -981 341 940 890 598 309 546] [-981 -829 -735 -710 -643 -551 -495 -489 -454 -426 -421 -391 -268 -184 -112 -88 76 96 105 110 126 148 203 208 232 235 289 309 341 356 546 598 683 702 853 890 940 954]]
Test Case: 2371 | Input/Output: [[280 514 -335 -11 -704 229 737 648 146 532 -331 -937 133 -22 955 192 -141 922 -312 -915 705 760 -474 -812 -426 541 609 398 84 -349 69 567 669 -833 479 -20] [-937 -915 -833 -812 -704 -474 -426 -349 -335 -331 -312 -141 -22 -20 -11 69 84 133 146 192 229 280 398 479 514 532 541 567 609 648 669 705 737 760 922 955]]
Test Case: 2372 | Input/Output: [[-896 113 896 626 650 -512 326 25 16 113 -27 792 774 -837 53 476 -43 -276 -187 976 841] [-896 -837 -512 -276 -187 -43 -27 16 25 53 113 113 326 476 626 650 774 792 841 896 976]]
Test Case: 2373 | Input/Output: [[-552 -514 816 -669 -386 575 -210 -998 486 -224 384 229 -717 -647 -607 -512 75 -802 890 -761 -941 296 -47 -38 441 -570 -732 -303 574 461 974 157 -411 961 455 129 -716 -307 -254 874 458 -852 -534 -894 -130 -312 679 943] [-998 -941 -894 -852 -802 -761 -732 -717 -716 -669 -647 -607 -570 -552 -534 -514 -512 -411 -386 -312 -307 -303 -254 -224 -210 -130 -47 -38 75 129 157 229 296 384 441 455 458 461 486 574 575 679 816 874 890 943 961 974]]
Test Case: 2374 | Input/Output: [[-898 -144 -58 669 -118 180 -323 -519 -936 975 -112 -976 69 683 221 -570 543 441 -82 -505 -822 -45 -705 726 -194 441 871 -806 145 888 -336 -719 -747] [-976 -936 -898 -822 -806 -747 -719 -705 -570 -519 -505 -336 -323 -194 -144 -118 -112 -82 -58 -45 69 145 180 221 441 441 543 669 683 726 871 888 975]]
Test Case: 2375 | Input/Output: [[-608 -369 -284 -743 63 -60 93 280 -537 355 508 621 971 813 -480 -420 -104 474 241 -631 727 416 243 9 -278 900 974 423 -580 -797 -924 529 -672 418 -632 -363] [-924 -797 -743 -672 -632 -631 -608 -580 -537 -480 -420 -369 -363 -284 -278 -104 -60 9 63 93 241 243 280 355 416 418 423 474 508 529 621 727 813 900 971 974]]
Test Case: 2376 | Input/Output: [[-890 632 -448 480 730 -828 -572 -772 242 939 -675 -67 -78 -643 -245 301 -808 -903] [-903 -890 -828 -808 -772 -675 -643 -572 -448 -245 -78 -67 242 301 480 632 730 939]]
Test Case: 2377 | Input/Output: [[236 357 -147 30 662 19 -428 -871 -430 -410 382 281 -281 128 233 -552 1 -380 -222 -589 -94 -58 932 275 75 238 -61 270 374 584 -590 405 295 -788 854 -132 726 368 323 249 -119 216 -750 -882 -369 -734 261 -641 -68] [-882 -871 -788 -750 -734 -641 -590 -589 -552 -430 -428 -410 -380 -369 -281 -222 -147 -132 -119 -94 -68 -61 -58 1 19 30 75 128 216 233 236 238 249 261 270 275 281 295 323 357 368 374 382 405 584 662 726 854 932]]
Test Case: 2378 | Input/Output: [[-348 963 409 -850 -187 -102 -90 -815 60 523 -251 992 781 498 -837 371 312 323 343 710 109 66 151 816 -524] [-850 -837 -815 -524 -348 -251 -187 -102 -90 60 66 109 151 312 323 343 371 409 498 523 710 781 816 963 992]]
Test Case: 2379 | Input/Output: [[-168 869 -83 -98 -337 967 -942 765 -806 -871 794 -571 973 139 82 -177 754 -65 -336 -760 232] [-942 -871 -806 -760 -571 -337 -336 -177 -168 -98 -83 -65 82 139 232 754 765 794 869 967 973]]
Test Case: 2380 | Input/Output: [[-654 -431 -698 -646 747 -331 -431 -24 667 668 -252 872 425 -523 327 601 520 -672 425 463 -685 236 -891 -187 812 -55 -262 511 -589 -626 119 553 -422 943 -578 518 -523 835 -266 625 486 720 -928 480 920 -789 179 -805] [-928 -891 -805 -789 -698 -685 -672 -654 -646 -626 -589 -578 -523 -523 -431 -431 -422 -331 -266 -262 -252 -187 -55 -24 119 179 236 327 425 425 463 480 486 511 518 520 553 601 625 667 668 720 747 812 835 872 920 943]]
Test Case: 2381 | Input/Output: [[806 74 -593 271 -938 -221 323 -433 -166 142 -713 -50 -517 -420 389 -457 -708 -196 -944 -939 -840 48 195 702 -924 -433 499 -270 722 734 809 465 669 -125 -354 -130 385 -420 -169 177 880 -653 -916 -834 633 -526 -102] [-944 -939 -938 -924 -916 -840 -834 -713 -708 -653 -593 -526 -517 -457 -433 -433 -420 -420 -354 -270 -221 -196 -169 -166 -130 -125 -102 -50 48 74 142 177 195 271 323 385 389 465 499 633 669 702 722 734 806 809 880]]
Test Case: 2382 | Input/Output: [[-229 -160] [-229 -160]]
Test Case: 2383 | Input/Output: [[636 542 -132 202 -194 122 -402 822 808 450 -560 -36 553 -822 846 -873 301 -764 -338 59 408 -91 -101 -859 335 884 88 -441 459 -488 -860] [-873 -860 -859 -822 -764 -560 -488 -441 -402 -338 -194 -132 -101 -91 -36 59 88 122 202 301 335 408 450 459 542 553 636 808 822 846 884]]
Test Case: 2384 | Input/Output: [[715 -850 -862 914 88 490 161 615 212 -567 -878 -804 -783 -936 -441 271 472 -44 -238 -287 518 646 -720 -660 668 710 -605 -160 -913 663 440 724 -744 -428 -101 -416 -462 -245 -412 -79 -602 -332 967 411 275 -599 -777 907 -535] [-936 -913 -878 -862 -850 -804 -783 -777 -744 -720 -660 -605 -602 -599 -567 -535 -462 -441 -428 -416 -412 -332 -287 -245 -238 -160 -101 -79 -44 88 161 212 271 275 411 440 472 490 518 615 646 663 668 710 715 724 907 914 967]]
Test Case: 2385 | Input/Output: [[37 845 -886 -489 727 997 373 471 590 853 -557 -46 -299 285 -773 -97 657 -260 -18 -237 -153 335 -403 616 -508 -680 429 252 578 -537 -303 -965 541 -485 649 -738 -812 39 714 738 362 373 653 -635 -294 -142 438 -282 548 -223] [-965 -886 -812 -773 -738 -680 -635 -557 -537 -508 -489 -485 -403 -303 -299 -294 -282 -260 -237 -223 -153 -142 -97 -46 -18 37 39 252 285 335 362 373 373 429 438 471 541 548 578 590 616 649 653 657 714 727 738 845 853 997]]
Test Case: 2386 | Input/Output: [[-137 84 590 -913 -163 642 708 -128 579 868 832 -950 -951] [-951 -950 -913 -163 -137 -128 84 579 590 642 708 832 868]]
Test Case: 2387 | Input/Output: [[-591 -805 -130 -2 388 561 223 -299 -217 -700 -959 -147 -218 -384 -160 940 -334 -111 -947 170 -840 344 416 -626 -828 -403 841 -519 -555 -504 740] [-959 -947 -840 -828 -805 -700 -626 -591 -555 -519 -504 -403 -384 -334 -299 -218 -217 -160 -147 -130 -111 -2 170 223 344 388 416 561 740 841 940]]
Test Case: 2388 | Input/Output: [[449 195 173 -196 665 -813 912 490 219 -563 907 -235 622 461 512 -86 -593 287 629 -251 759 -585 879 -316 -293 -701 4 -109 -829 -115 -507 626 66 955 -130 -542 -285 -610 755] [-829 -813 -701 -610 -593 -585 -563 -542 -507 -316 -293 -285 -251 -235 -196 -130 -115 -109 -86 4 66 173 195 219 287 449 461 490 512 622 626 629 665 755 759 879 907 912 955]]
Test Case: 2389 | Input/Output: [[-262] [-262]]
Test Case: 2390 | Input/Output: [[-257 708 -345 -194 -442 -113 458 193 -478 836 -251 772 -788] [-788 -478 -442 -345 -257 -251 -194 -113 193 458 708 772 836]]
Test Case: 2391 | Input/Output: [[418 339 -738 -594 -270 -955 962 -304 -167 -158 344 318 -864 -877 -38 82 -925 -89 449 -231 -41 -545 31 855 -123 632 -935 889 -484 585 -26 -445 496 139 -433 438 828 -705 454 -804] [-955 -935 -925 -877 -864 -804 -738 -705 -594 -545 -484 -445 -433 -304 -270 -231 -167 -158 -123 -89 -41 -38 -26 31 82 139 318 339 344 418 438 449 454 496 585 632 828 855 889 962]]
Test Case: 2392 | Input/Output: [[-603 -576 830 -593 486 159 936 769 926 -247 -562] [-603 -593 -576 -562 -247 159 486 769 830 926 936]]
Test Case: 2393 | Input/Output: [[243 -985 236 883 -240 -695 795 -634 -420 16 522 -159 825 -429 -480 -366 989 939 860 -976 594 -63 311 516 -890 -771 987 -707 991 -855 -849 -987 -747 125 866 393 6] [-987 -985 -976 -890 -855 -849 -771 -747 -707 -695 -634 -480 -429 -420 -366 -240 -159 -63 6 16 125 236 243 311 393 516 522 594 795 825 860 866 883 939 987 989 991]]
Test Case: 2394 | Input/Output: [[719 -797 -691 662 -595 577 -678 208 572 -27 -478 -344 573 -686 -123 164 -724 301 891 589 -275 -535 758 675 52 -650 806 -890 502 -343 -12 -823 -47 225 857 785 -345 -640 528 845 -715 -299 716 -603] [-890 -823 -797 -724 -715 -691 -686 -678 -650 -640 -603 -595 -535 -478 -345 -344 -343 -299 -275 -123 -47 -27 -12 52 164 208 225 301 502 528 572 573 577 589 662 675 716 719 758 785 806 845 857 891]]
Test Case: 2395 | Input/Output: [[-571 943 968 -434 -991 -937 -739 562 -62 -3 621 840 -133 -358 -384 261 473 296 302 -995 287 -264 57 -392 -474 -746 -41 367 -204 -26 752 -309 -917 -447 -997 218 -123 315 328 842 -880 341 958 -280 -474 -233 -662 689 794] [-997 -995 -991 -937 -917 -880 -746 -739 -662 -571 -474 -474 -447 -434 -392 -384 -358 -309 -280 -264 -233 -204 -133 -123 -62 -41 -26 -3 57 218 261 287 296 302 315 328 341 367 473 562 621 689 752 794 840 842 943 958 968]]
Test Case: 2396 | Input/Output: [[-825 -298 65 -707 -254 -220 711 799 599 400 -631 -494 372] [-825 -707 -631 -494 -298 -254 -220 65 372 400 599 711 799]]
Test Case: 2397 | Input/Output: [[917 18 -802 -128 131 -682 -845 -892 -360 -271 -508 187 -589 -700 -261 725 -522 385 803 -400 380 227 -235 305 -44 632 561 784 -850 -40 679 304 805 -700 -941 213 936 987 -980 -486 928 861 -402 -791 -385 246 976 208 -257 185] [-980 -941 -892 -850 -845 -802 -791 -700 -700 -682 -589 -522 -508 -486 -402 -400 -385 -360 -271 -261 -257 -235 -128 -44 -40 18 131 185 187 208 213 227 246 304 305 380 385 561 632 679 725 784 803 805 861 917 928 936 976 987]]
Test Case: 2398 | Input/Output: [[759 -495 -193 -19 438 11 959 459 720 751 623 -544 657 550 -18 384 -20 -361 -550 798 -581 297 -758 567 -712 434] [-758 -712 -581 -550 -544 -495 -361 -193 -20 -19 -18 11 297 384 434 438 459 550 567 623 657 720 751 759 798 959]]
Test Case: 2399 | Input/Output: [[-134 -530 -332 727 711 -914 948 138 500 -811 -266 -28 117 -912 -160 -304 920] [-914 -912 -811 -530 -332 -304 -266 -160 -134 -28 117 138 500 711 727 920 948]]
Test Case: 2400 | Input/Output: [[103 332 -403 -56 -649 -979 -564 742 306 912 -301 -967 -963 98 432 159 -602 -858 -857 761 161 -586 -859 -622 788 97 946 209 -220 -917] [-979 -967 -963 -917 -859 -858 -857 -649 -622 -602 -586 -564 -403 -301 -220 -56 97 98 103 159 161 209 306 332 432 742 761 788 912 946]]
Test Case: 2401 | Input/Output: [[449 -801 395 786 -982 -484] [-982 -801 -484 395 449 786]]
Test Case: 2402 | Input/Output: [[-991 -592 241 -174 -553 -438 992 978 -226 -171 -467 -940 -141 -936 508 351 703 854 795 -300 326 -201 648 419 662 985 737 679 -609 -553 693 -146 337 412 854 279 -703 265 -620 -27 671 -352 355 -81] [-991 -940 -936 -703 -620 -609 -592 -553 -553 -467 -438 -352 -300 -226 -201 -174 -171 -146 -141 -81 -27 241 265 279 326 337 351 355 412 419 508 648 662 671 679 693 703 737 795 854 854 978 985 992]]
Test Case: 2403 | Input/Output: [[957 -208 -732 315 93 245 -927 417 -863 943 -429 -532 664 762 -71 -741] [-927 -863 -741 -732 -532 -429 -208 -71 93 245 315 417 664 762 943 957]]
Test Case: 2404 | Input/Output: [[877 -364] [-364 877]]
Test Case: 2405 | Input/Output: [[519 -700 -499 -211] [-700 -499 -211 519]]
Test Case: 2406 | Input/Output: [[581 -234 964 -711 495 -57 -54 44 -285 -63 864 961 34 557 -255 159 766 -892 -365 -393 -202 -957 -687 913 130 839 -307 -442 77 -742 -274 246 737 -886 621 890 -751 -436] [-957 -892 -886 -751 -742 -711 -687 -442 -436 -393 -365 -307 -285 -274 -255 -234 -202 -63 -57 -54 34 44 77 130 159 246 495 557 581 621 737 766 839 864 890 913 961 964]]
Test Case: 2407 | Input/Output: [[-101 856 608 -736 -258 -528 677 729 -65 519 72 -264 719 -130 -527 -19 -819 32 -877 841 496 -132 -260 87 315 -221 -11 -313 -312 806 -325] [-877 -819 -736 -528 -527 -325 -313 -312 -264 -260 -258 -221 -132 -130 -101 -65 -19 -11 32 72 87 315 496 519 608 677 719 729 806 841 856]]
Test Case: 2408 | Input/Output: [[583 10 935 491 -328 160 -669 146 164 -456 -565 -534 355 -176 -551 487 -83 -732 97 -917 273 -754 873 -489 337 878 -141 -639 555 -238] [-917 -754 -732 -669 -639 -565 -551 -534 -489 -456 -328 -238 -176 -141 -83 10 97 146 160 164 273 337 355 487 491 555 583 873 878 935]]
Test Case: 2409 | Input/Output: [[-492 -763 -531 -63] [-763 -531 -492 -63]]
Test Case: 2410 | Input/Output: [[37 -126 516 22 -381 -558 891 -597 413 97 -943 -924 -509 855 -735 -988 278 653 -269 -711 -278 539 109 -611 -255 8 484 302 241 561 491 543 -856 669 -409 -168 -965] [-988 -965 -943 -924 -856 -735 -711 -611 -597 -558 -509 -409 -381 -278 -269 -255 -168 -126 8 22 37 97 109 241 278 302 413 484 491 516 539 543 561 653 669 855 891]]
Test Case: 2411 | Input/Output: [[-640 -761 183 835 -566 166 -377 78 601 606 905 -244 -150] [-761 -640 -566 -377 -244 -150 78 166 183 601 606 835 905]]
Test Case: 2412 | Input/Output: [[-520 -224 -312 -420 828 -666 -976 -556 -286 -851 897 -673 -543 -540 -226 -40 648 -903 -177 166 -89 462 -430 -407 866 -518 117 -710 -645 90 115 -620] [-976 -903 -851 -710 -673 -666 -645 -620 -556 -543 -540 -520 -518 -430 -420 -407 -312 -286 -226 -224 -177 -89 -40 90 115 117 166 462 648 828 866 897]]
Test Case: 2413 | Input/Output: [[695 -20 -568 748 123 887 937 839 -772 -983 -706 872] [-983 -772 -706 -568 -20 123 695 748 839 872 887 937]]
Test Case: 2414 | Input/Output: [[941 -216 434 -700 531 -258 388 -894 738 -753 -743 624 479 -281 244 994 -337 -430 282 -945 506 913 553 -240 -593 -119 867 274 -869 -582] [-945 -894 -869 -753 -743 -700 -593 -582 -430 -337 -281 -258 -240 -216 -119 244 274 282 388 434 479 506 531 553 624 738 867 913 941 994]]
Test Case: 2415 | Input/Output: [[-69 -508 610 76 -199 -706] [-706 -508 -199 -69 76 610]]
Test Case: 2416 | Input/Output: [[212 -241 487 -270 -63 -440 408 -956 422 -939 -870 426 724 -274 -590 -838 581 -893 209 477 -449 -311 947 906 345 -168 -657 133 950 91 558 -13 622] [-956 -939 -893 -870 -838 -657 -590 -449 -440 -311 -274 -270 -241 -168 -63 -13 91 133 209 212 345 408 422 426 477 487 558 581 622 724 906 947 950]]
Test Case: 2417 | Input/Output: [[835 886 -327 97 617 946 -297 91 -19 -498 -933 -152 455 -597] [-933 -597 -498 -327 -297 -152 -19 91 97 455 617 835 886 946]]
Test Case: 2418 | Input/Output: [[755 769 -135 -648 85 999 -899 -864 -835 -617 668 -809 44 -920 485 429 -499 311 512 454 852 -493 -789 772 -52 -41 -386 702 -628 76] [-920 -899 -864 -835 -809 -789 -648 -628 -617 -499 -493 -386 -135 -52 -41 44 76 85 311 429 454 485 512 668 702 755 769 772 852 999]]
Test Case: 2419 | Input/Output: [[-780 522 874 -714 -308 -29 121 -208 198 648 828 -787 -506 -778 -6 454 986 -170 -36 890 -448 -749 74 493 942 745 330 -223 -895 -130 -133 -258 -318 -885 -591 -533 -496 -215] [-895 -885 -787 -780 -778 -749 -714 -591 -533 -506 -496 -448 -318 -308 -258 -223 -215 -208 -170 -133 -130 -36 -29 -6 74 121 198 330 454 493 522 648 745 828 874 890 942 986]]
Test Case: 2420 | Input/Output: [[99 597 820 458 670 447 -724 417 -594 272 -220 824 336 938 642 888 -822 975 832 285 420 547 -537 -459 242 126 -322 201 -439 520 555 216 195 -607 838 -903 -771 388] [-903 -822 -771 -724 -607 -594 -537 -459 -439 -322 -220 99 126 195 201 216 242 272 285 336 388 417 420 447 458 520 547 555 597 642 670 820 824 832 838 888 938 975]]
Test Case: 2421 | Input/Output: [[380 -88 462 -602 67 106 -690 -121 -356 -227 -583 577 -643 383 671 190 530 -73 40 -373 -452 -256 -888 444 -105 -202 334 -688 -33 929 306 -845] [-888 -845 -690 -688 -643 -602 -583 -452 -373 -356 -256 -227 -202 -121 -105 -88 -73 -33 40 67 106 190 306 334 380 383 444 462 530 577 671 929]]
Test Case: 2422 | Input/Output: [[28 -191 711 -737 625 829] [-737 -191 28 625 711 829]]
Test Case: 2423 | Input/Output: [[230 37 523 172 203 -282 340 532 460 -786 156 617 195 570 -738 89 896 479 923 983 573 488 992 -809 784 223 -77 520 -920 472 974 75 -279 369 -690 -214 765] [-920 -809 -786 -738 -690 -282 -279 -214 -77 37 75 89 156 172 195 203 223 230 340 369 460 472 479 488 520 523 532 570 573 617 765 784 896 923 974 983 992]]
Test Case: 2424 | Input/Output: [[-76 766 867 -210 -83 -890 -265 -658 84 -333 558 653 103 -882 -221 -907 -185 -590 -83 -925 -490 356] [-925 -907 -890 -882 -658 -590 -490 -333 -265 -221 -210 -185 -83 -83 -76 84 103 356 558 653 766 867]]
Test Case: 2425 | Input/Output: [[-701 -186 509 -512 223 823 445 -604 94] [-701 -604 -512 -186 94 223 445 509 823]]
Test Case: 2426 | Input/Output: [[411 524 672 808 -797 -282 384 -423 -789 194 -475 732 -827 -948 265] [-948 -827 -797 -789 -475 -423 -282 194 265 384 411 524 672 732 808]]
Test Case: 2427 | Input/Output: [[643 -189 582 443 -22 741 568] [-189 -22 443 568 582 643 741]]
Test Case: 2428 | Input/Output: [[705 -111 -322 612 656 -325 -106 -591 82 -773 487 410 -832 -30 440 -409 784 543 541 -944 -778 -6 370 -361 -204 898 -727 400 358 429 543 -841] [-944 -841 -832 -778 -773 -727 -591 -409 -361 -325 -322 -204 -111 -106 -30 -6 82 358 370 400 410 429 440 487 541 543 543 612 656 705 784 898]]
Test Case: 2429 | Input/Output: [[186 -679 3 967 -766 515 -146 101 -705 -154 58 -921 498 30 253 -711 806 731 -627 59 490 -315 981 520 967 225 451 -890 879 -86 -133 785 -19] [-921 -890 -766 -711 -705 -679 -627 -315 -154 -146 -133 -86 -19 3 30 58 59 101 186 225 253 451 490 498 515 520 731 785 806 879 967 967 981]]
Test Case: 2430 | Input/Output: [[121 -732 111 226 -385] [-732 -385 111 121 226]]
Test Case: 2431 | Input/Output: [[-49 -25 -94 -369 111 -182 -536 -759 -637 -27 -93 -403 935 -843 -451 208 -114 -663 125 -206 920 -357 -441 140 793 -830 270 -298 -496 109 408 -626 689 31 -559 361 324 836 -138 -235] [-843 -830 -759 -663 -637 -626 -559 -536 -496 -451 -441 -403 -369 -357 -298 -235 -206 -182 -138 -114 -94 -93 -49 -27 -25 31 109 111 125 140 208 270 324 361 408 689 793 836 920 935]]
Test Case: 2432 | Input/Output: [[50 957 996] [50 957 996]]
Test Case: 2433 | Input/Output: [[394 -851 -540 -315 916 -608 -655 -920 864 -920 -308 -662 18 415 -3 995 -731 553 -922 -671 723 380 -105 904 416 353 -610 934 163 -817 79 -280 588 -702 -369 440 374 -200 -50 -396 -993 -624 -113] [-993 -922 -920 -920 -851 -817 -731 -702 -671 -662 -655 -624 -610 -608 -540 -396 -369 -315 -308 -280 -200 -113 -105 -50 -3 18 79 163 353 374 380 394 415 416 440 553 588 723 864 904 916 934 995]]
Test Case: 2434 | Input/Output: [[-109 363 -902 -291 -456 -466 -724 -649 -967 -147 -342 -561 69 914 -924 -277 -384 613 820 208 280 908 387 -488] [-967 -924 -902 -724 -649 -561 -488 -466 -456 -384 -342 -291 -277 -147 -109 69 208 280 363 387 613 820 908 914]]
Test Case: 2435 | Input/Output: [[523 263 -692 -717 83 819 -850 439 684 694 108 -186 -7] [-850 -717 -692 -186 -7 83 108 263 439 523 684 694 819]]
Test Case: 2436 | Input/Output: [[447 986 -640 -959 -782 -821 435 978 579 -548 -215 -66 -179 -860 613 -730 258 -465 -708 708 -287 -567 -559 454 50 469 -60 233 386 -110 -75 10 -934 -701 -761 449 -661] [-959 -934 -860 -821 -782 -761 -730 -708 -701 -661 -640 -567 -559 -548 -465 -287 -215 -179 -110 -75 -66 -60 10 50 233 258 386 435 447 449 454 469 579 613 708 978 986]]
Test Case: 2437 | Input/Output: [[-837 389 -648 -176 603 -522 -27 -239 -2 -679 -829] [-837 -829 -679 -648 -522 -239 -176 -27 -2 389 603]]
Test Case: 2438 | Input/Output: [[73 -737 -917 236 -299 53 -673 -727 -985 556 459 658] [-985 -917 -737 -727 -673 -299 53 73 236 459 556 658]]
Test Case: 2439 | Input/Output: [[29 5 323 545 -196 559 -758 913 131 104 -828 -45 -261 -960 78 -843 897 862 38 236 266 -977 297 -95 742 -878 -51 -919 -100 -39 -938 -256 19 -702 965 -750 535 640 -425 904 754 -140 436 758 745 952 -980 -582 -316 964] [-980 -977 -960 -938 -919 -878 -843 -828 -758 -750 -702 -582 -425 -316 -261 -256 -196 -140 -100 -95 -51 -45 -39 5 19 29 38 78 104 131 236 266 297 323 436 535 545 559 640 742 745 754 758 862 897 904 913 952 964 965]]
Test Case: 2440 | Input/Output: [[732] [732]]
Test Case: 2441 | Input/Output: [[36 -905 -541 -60 316 523] [-905 -541 -60 36 316 523]]
Test Case: 2442 | Input/Output: [[235 -632 -974 434 262 -959 -360 -860 252 -872 326 -101 390 460 136] [-974 -959 -872 -860 -632 -360 -101 136 235 252 262 326 390 434 460]]
Test Case: 2443 | Input/Output: [[-258 534 331 -894 -451 916 12 -634 -941 -327 729 -946 -737 347 -618 -984 -932 -719 150 -871 58 -998 -163 -664 -349] [-998 -984 -946 -941 -932 -894 -871 -737 -719 -664 -634 -618 -451 -349 -327 -258 -163 12 58 150 331 347 534 729 916]]
Test Case: 2444 | Input/Output: [[-837 947 -884 -934 488 135 -849 -906 -341 -591 237 857 380 -91 571 -319 701 642 236 -586 878 -173 -994 -17] [-994 -934 -906 -884 -849 -837 -591 -586 -341 -319 -173 -91 -17 135 236 237 380 488 571 642 701 857 878 947]]
Test Case: 2445 | Input/Output: [[-180 853 535 -101 -977 197 59 924 394 469 297 861 -437 650 651 -810 -668 247 -223 -890 586 97 422 -700 -837 -98 621 -203 890 17 856 556 459 -191 189 598 36 -7] [-977 -890 -837 -810 -700 -668 -437 -223 -203 -191 -180 -101 -98 -7 17 36 59 97 189 197 247 297 394 422 459 469 535 556 586 598 621 650 651 853 856 861 890 924]]
Test Case: 2446 | Input/Output: [[293 -113 32 -881 -731 -575 858 -484 518 -64 28 -603 -537 954 -563 705 -626] [-881 -731 -626 -603 -575 -563 -537 -484 -113 -64 28 32 293 518 705 858 954]]
Test Case: 2447 | Input/Output: [[-974 -913 -167 866 248 -102] [-974 -913 -167 -102 248 866]]
Test Case: 2448 | Input/Output: [[351 238 -171 445 -952 217 -988 988 -308 560 -187 -158 640 -832 -279 -147 -564 351 134 18 -960 146 -277 -805 569 195 500 884 986 33 -700 225 -238 -409 -425 -668 998 -572 -111 -556 658 -606 555] [-988 -960 -952 -832 -805 -700 -668 -606 -572 -564 -556 -425 -409 -308 -279 -277 -238 -187 -171 -158 -147 -111 18 33 134 146 195 217 225 238 351 351 445 500 555 560 569 640 658 884 986 988 998]]
Test Case: 2449 | Input/Output: [[361 -895 -684 486 21 206 483 -113] [-895 -684 -113 21 206 361 483 486]]
Test Case: 2450 | Input/Output: [[-720 330 155 -975 -848 -277 -209 -706 24 -651 -270 -624 399 52 -941 -726 249 -84 833 -360 -79 299] [-975 -941 -848 -726 -720 -706 -651 -624 -360 -277 -270 -209 -84 -79 24 52 155 249 299 330 399 833]]
Test Case: 2451 | Input/Output: [[644 -563 -871 -949 465 -908 968 -953 -918 426 -402 -990 -566 828 -188 107 187 -957 -76 -674 783 668 938 551 791 -616 412 -449 723 -32 499 452 -46 205 -445] [-990 -957 -953 -949 -918 -908 -871 -674 -616 -566 -563 -449 -445 -402 -188 -76 -46 -32 107 187 205 412 426 452 465 499 551 644 668 723 783 791 828 938 968]]
Test Case: 2452 | Input/Output: [[126 247 236 -2 -830 -442 -551 454 71 -17 -528 -293 -225 -320 -522 113 -570 -487 -766 817 -236 -276 415 -954 452 -615 -90 -281 903 -360] [-954 -830 -766 -615 -570 -551 -528 -522 -487 -442 -360 -320 -293 -281 -276 -236 -225 -90 -17 -2 71 113 126 236 247 415 452 454 817 903]]
Test Case: 2453 | Input/Output: [[-357 -201 -709 932 595 -630 532 -886 -778 310 406 408 -184 645 280 469 -253 -858 -391 -987 387 252 268 -80 -350 222 -801 368 -240 -766 67] [-987 -886 -858 -801 -778 -766 -709 -630 -391 -357 -350 -253 -240 -201 -184 -80 67 222 252 268 280 310 368 387 406 408 469 532 595 645 932]]
Test Case: 2454 | Input/Output: [[890 143 -386 415 363 789 -984 -801 -121 -682 -40 220 -972 -280 207 537 -374 -121 877 -311 323 -390 -867 264 66 -20 128 249 -40] [-984 -972 -867 -801 -682 -390 -386 -374 -311 -280 -121 -121 -40 -40 -20 66 128 143 207 220 249 264 323 363 415 537 789 877 890]]
Test Case: 2455 | Input/Output: [[-336 655 299 324 -35 -763 451 -173 911 -599 -941 -162 -787 917 691 719 137 581 710 -608 994 -31 683 604 938 966 103 -902 -581 -295 686 727 53 -27 67 -942 698 -972 612 899 201 247 202 -561 957 -502 -900 -71 868] [-972 -942 -941 -902 -900 -787 -763 -608 -599 -581 -561 -502 -336 -295 -173 -162 -71 -35 -31 -27 53 67 103 137 201 202 247 299 324 451 581 604 612 655 683 686 691 698 710 719 727 868 899 911 917 938 957 966 994]]
Test Case: 2456 | Input/Output: [[-656 -214 74 815 974 -545 929 52 908 -919 -45 -182 246 547 -462 767 593 -933 -16 185 -804 -485 617 -719] [-933 -919 -804 -719 -656 -545 -485 -462 -214 -182 -45 -16 52 74 185 246 547 593 617 767 815 908 929 974]]
Test Case: 2457 | Input/Output: [[389 -163 -238 956 136 866 -511 424 -661 69 -233 -563 -74 530 -74 -540 111] [-661 -563 -540 -511 -238 -233 -163 -74 -74 69 111 136 389 424 530 866 956]]
Test Case: 2458 | Input/Output: [[850 508 582 407 598 380 -825 -955 -11 895 -405 -996 -192 -180 413 651 182 691 589 -928 816 711 -210 815 -894 218 354 778 -167 -823 59 629 642 -848 305 47 -252 -588 749 -177 -991 690 -737 -926 -622 -162 559 -69] [-996 -991 -955 -928 -926 -894 -848 -825 -823 -737 -622 -588 -405 -252 -210 -192 -180 -177 -167 -162 -69 -11 47 59 182 218 305 354 380 407 413 508 559 582 589 598 629 642 651 690 691 711 749 778 815 816 850 895]]
Test Case: 2459 | Input/Output: [[-758 156 679 442 -391 -627 -223 694 85 -284 280 -600 449 509 -746 692 -468 58 573 494 -171 -61 -526 -568 833 -356 -896 -880 -934 162 279 241 541 -523 825 458 -729 -971] [-971 -934 -896 -880 -758 -746 -729 -627 -600 -568 -526 -523 -468 -391 -356 -284 -223 -171 -61 58 85 156 162 241 279 280 442 449 458 494 509 541 573 679 692 694 825 833]]
Test Case: 2460 | Input/Output: [[565 616 56 769] [56 565 616 769]]
Test Case: 2461 | Input/Output: [[-894 -802 143 -104 -459 -769 719 -26 424 -215 -55 -224 907 789 -47 -854 23 678 685 -83 -540 119 -943 879 -452] [-943 -894 -854 -802 -769 -540 -459 -452 -224 -215 -104 -83 -55 -47 -26 23 119 143 424 678 685 719 789 879 907]]
Test Case: 2462 | Input/Output: [[36 718 -83 -361 616 -927 191 -251 659 -476 -670 401 -829 686 -678 775 324 -65 -468 -470 -657 -135 794 931 580 -984 -336 892 754 1 773 -712 -130 -240 463 -43 -726 702] [-984 -927 -829 -726 -712 -678 -670 -657 -476 -470 -468 -361 -336 -251 -240 -135 -130 -83 -65 -43 1 36 191 324 401 463 580 616 659 686 702 718 754 773 775 794 892 931]]
Test Case: 2463 | Input/Output: [[-870 550 -96 -678 804 789 52 -118 -137 -698 -249 -911 -635 760 -850 687 -918 -754 893 -591 43 -155 956 286] [-918 -911 -870 -850 -754 -698 -678 -635 -591 -249 -155 -137 -118 -96 43 52 286 550 687 760 789 804 893 956]]
Test Case: 2464 | Input/Output: [[-116 39 -826 149 -121 494 -444 -762 -115 17 -367 -758 -243 869 317 -426 490 666 375 -599] [-826 -762 -758 -599 -444 -426 -367 -243 -121 -116 -115 17 39 149 317 375 490 494 666 869]]
Test Case: 2465 | Input/Output: [[961 123 37 -390 715 875 798 314 -916 -607 282 -716 -596 644 -980 -909 -286 -309 425 198 -342 -413 -233 -812 2 86 -112 -534 980 -135 539 999 -288 926 -793 764 -103 833 -433 -542 456 516 242 -877 -971] [-980 -971 -916 -909 -877 -812 -793 -716 -607 -596 -542 -534 -433 -413 -390 -342 -309 -288 -286 -233 -135 -112 -103 2 37 86 123 198 242 282 314 425 456 516 539 644 715 764 798 833 875 926 961 980 999]]
Test Case: 2466 | Input/Output: [[84 687 622 382 69 708 -377 -805 -483 -993 -585 -479 -738 -270 -391 -254 999 -397 198 664 -100 814 -644 168 -934 -707 -414 -628 880 -473 295 627 904 -897 -347 253 283 -360 193 714 -439 -554 -173 -273 993 576 -587 236] [-993 -934 -897 -805 -738 -707 -644 -628 -587 -585 -554 -483 -479 -473 -439 -414 -397 -391 -377 -360 -347 -273 -270 -254 -173 -100 69 84 168 193 198 236 253 283 295 382 576 622 627 664 687 708 714 814 880 904 993 999]]
Test Case: 2467 | Input/Output: [[423 68 -93 -971 -148 0 692 421 -230 -649 -96 -539 222 -725 -88 78 812 929 -12 529 673 22 -122 959 144 -336 -31 523 -473 519 409 821 -215 677 -439 762 877 -913 -833 923 233 -998 318 323 -660] [-998 -971 -913 -833 -725 -660 -649 -539 -473 -439 -336 -230 -215 -148 -122 -96 -93 -88 -31 -12 0 22 68 78 144 222 233 318 323 409 421 423 519 523 529 673 677 692 762 812 821 877 923 929 959]]
Test Case: 2468 | Input/Output: [[-697 -582 4 -290 -973 -693 -616 851 -280 0 741 618 900 -712 -197 -880 693 228 -631 251 -335 -833 -456 828 504 -301 -533] [-973 -880 -833 -712 -697 -693 -631 -616 -582 -533 -456 -335 -301 -290 -280 -197 0 4 228 251 504 618 693 741 828 851 900]]
Test Case: 2469 | Input/Output: [[-439] [-439]]
Test Case: 2470 | Input/Output: [[961 -289 636 -963 -70 -451 943 -828 -18 251 501 782 829 -843 954 727 -905 -67 -935 95 719 104 321 -61 318 730 327 -406] [-963 -935 -905 -843 -828 -451 -406 -289 -70 -67 -61 -18 95 104 251 318 321 327 501 636 719 727 730 782 829 943 954 961]]
Test Case: 2471 | Input/Output: [[804 216 9 -631 -73 -582 17 961 -522 752 -427 607 784 -950 -54] [-950 -631 -582 -522 -427 -73 -54 9 17 216 607 752 784 804 961]]
Test Case: 2472 | Input/Output: [[207 -734 237 951 -378 -561] [-734 -561 -378 207 237 951]]
Test Case: 2473 | Input/Output: [[-269 561 -826 683 -99 -679 704 -327 -130 469 -994 522 -531 957 176 763 -408 731] [-994 -826 -679 -531 -408 -327 -269 -130 -99 176 469 522 561 683 704 731 763 957]]
Test Case: 2474 | Input/Output: [[-164 -955 -16 -461 -55 762 308] [-955 -461 -164 -55 -16 308 762]]
Test Case: 2475 | Input/Output: [[890 21 344 -802 112 -534 990 832 686 -218 -491 -478 -628 670 -2 -273 716 918 763 274 642 -183 477 -817 297 698 -991] [-991 -817 -802 -628 -534 -491 -478 -273 -218 -183 -2 21 112 274 297 344 477 642 670 686 698 716 763 832 890 918 990]]
Test Case: 2476 | Input/Output: [[494 -522 -247 -680 -741 -501 -884 -172 -548 929 94 -990 -50 -781 -713 201 -447 -840 -503 -554 -389 691 98 116 -443 620 244 -821 -100] [-990 -884 -840 -821 -781 -741 -713 -680 -554 -548 -522 -503 -501 -447 -443 -389 -247 -172 -100 -50 94 98 116 201 244 494 620 691 929]]
Test Case: 2477 | Input/Output: [[548 189 -865 838 -804 -597 -180 -374 -199 -807 345 116 -215 -474 -574 750 740 407 -916 -915 -410 -340 310 -938 -222 -762 -54 -67 230 614 643 475 197 -72 127 -422 688 546 -357 609 967 -174 -86 680 -199] [-938 -916 -915 -865 -807 -804 -762 -597 -574 -474 -422 -410 -374 -357 -340 -222 -215 -199 -199 -180 -174 -86 -72 -67 -54 116 127 189 197 230 310 345 407 475 546 548 609 614 643 680 688 740 750 838 967]]
Test Case: 2478 | Input/Output: [[135 208 -665 -430 -429 310 -21 -42 -530 -278 -97 -155 328 944 282 -362 8 -975 -352 770 -479 -15 -906 -122 -130 -770 783 606 -866] [-975 -906 -866 -770 -665 -530 -479 -430 -429 -362 -352 -278 -155 -130 -122 -97 -42 -21 -15 8 135 208 282 310 328 606 770 783 944]]
Test Case: 2479 | Input/Output: [[30 -93 -338 -219 -560 -2 -559 901 -911 860 632 -698 401 180 29] [-911 -698 -560 -559 -338 -219 -93 -2 29 30 180 401 632 860 901]]
Test Case: 2480 | Input/Output: [[-188 257 -428 894 684 -259 -603 -613] [-613 -603 -428 -259 -188 257 684 894]]
Test Case: 2481 | Input/Output: [[794 -834 -560 -360 604 -168 412 927 61 713 333 -531 -620 -241 866 825 5 975 -400 -46 706 572 -359 -536 -968 925 439 -146 886 -29 985 404 -398 499 -601 457 -642 -473 -487 822 650 -439 -669 -235 -684 929 636] [-968 -834 -684 -669 -642 -620 -601 -560 -536 -531 -487 -473 -439 -400 -398 -360 -359 -241 -235 -168 -146 -46 -29 5 61 333 404 412 439 457 499 572 604 636 650 706 713 794 822 825 866 886 925 927 929 975 985]]
Test Case: 2482 | Input/Output: [[549 -222 -320 -189 755 -73 577 669 -171 -985 429 76 -9 863 922 -123 -303 -511 442 -715 280 475 -115 -271 608 62] [-985 -715 -511 -320 -303 -271 -222 -189 -171 -123 -115 -73 -9 62 76 280 429 442 475 549 577 608 669 755 863 922]]
Test Case: 2483 | Input/Output: [[487 -260 812 -167 -407 -603 45 617 766 -254 -79 622 470 -471 -155 714 279 -527 -999 833 -169 50 -648 916 845 -319 -986 887] [-999 -986 -648 -603 -527 -471 -407 -319 -260 -254 -169 -167 -155 -79 45 50 279 470 487 617 622 714 766 812 833 845 887 916]]
Test Case: 2484 | Input/Output: [[-95 392 -522 -196 -341 507 -48 -936 -353 -452 -149 763 222 760] [-936 -522 -452 -353 -341 -196 -149 -95 -48 222 392 507 760 763]]
Test Case: 2485 | Input/Output: [[961 -588 -425 898 -618 -446] [-618 -588 -446 -425 898 961]]
Test Case: 2486 | Input/Output: [[-351 894 630 -149 -499 844 -400 -708 148 -150 -576 -5 748 -439 -437 -684 792 -445] [-708 -684 -576 -499 -445 -439 -437 -400 -351 -150 -149 -5 148 630 748 792 844 894]]
Test Case: 2487 | Input/Output: [[982 -330 707 -627 648] [-627 -330 648 707 982]]
Test Case: 2488 | Input/Output: [[562 -819 280 272 362 458 -583 -721 681 -79 505 -93 -338 734 -717 -239 -557 484 327 40 -387 199 -748 621 -897 115 -890 19 837 -255 -21 -220] [-897 -890 -819 -748 -721 -717 -583 -557 -387 -338 -255 -239 -220 -93 -79 -21 19 40 115 199 272 280 327 362 458 484 505 562 621 681 734 837]]
Test Case: 2489 | Input/Output: [[145 -519 459 -193 -896 609 755 278 -364 -899 925 647 -795 -415 841 185 100 -841 -311 -98 896 -544 958 713 -313 -999 -316 -352 865 877 531 -554 -278 -767 -419 702 -441 -232 -234 800 -323] [-999 -899 -896 -841 -795 -767 -554 -544 -519 -441 -419 -415 -364 -352 -323 -316 -313 -311 -278 -234 -232 -193 -98 100 145 185 278 459 531 609 647 702 713 755 800 841 865 877 896 925 958]]
Test Case: 2490 | Input/Output: [[-731 -795 -913 738 230 292 -94 17 -119 292 82 411 -665 343 425 -439 267 -529 -444 461 -790 343 -783 -404 720 -597 338 -675 -977 -214 -930 202 -747 -752 -110 -822 964 -323 -492 -398 328 890 -143 -786 -32 374 -696] [-977 -930 -913 -822 -795 -790 -786 -783 -752 -747 -731 -696 -675 -665 -597 -529 -492 -444 -439 -404 -398 -323 -214 -143 -119 -110 -94 -32 17 82 202 230 267 292 292 328 338 343 343 374 411 425 461 720 738 890 964]]
Test Case: 2491 | Input/Output: [[698 829 -461 -131 67 -677 -176 -84 463 -751 -668 -42 167 41 -359 785] [-751 -677 -668 -461 -359 -176 -131 -84 -42 41 67 167 463 698 785 829]]
Test Case: 2492 | Input/Output: [[679 -718 992 277 44 842 159 880 857 -318 -660 785 736 536 -865 -632 -903 -722 -712 131 -450 572 -140 142] [-903 -865 -722 -718 -712 -660 -632 -450 -318 -140 44 131 142 159 277 536 572 679 736 785 842 857 880 992]]
Test Case: 2493 | Input/Output: [[-176 195 847 -375 132 -973 -519 -94 530 -661 -295 427 -388 393 -385] [-973 -661 -519 -388 -385 -375 -295 -176 -94 132 195 393 427 530 847]]
Test Case: 2494 | Input/Output: [[-262 65 -588 988 542 92 -932 682 -256 81 -774 -829 -508 229 652] [-932 -829 -774 -588 -508 -262 -256 65 81 92 229 542 652 682 988]]
Test Case: 2495 | Input/Output: [[-638 -933 -224 278 -54 320 -850 329 -449 670 -592 634 -777 459 7 -412 -764 -305 921 -610 -996 290 -59 -771 -616 566 -394 -445 582 -294 960 -810 -754 -695 187 -229 674 -874 -855 -64 -10 -457 -879 283 -860 706 946 -772] [-996 -933 -879 -874 -860 -855 -850 -810 -777 -772 -771 -764 -754 -695 -638 -616 -610 -592 -457 -449 -445 -412 -394 -305 -294 -229 -224 -64 -59 -54 -10 7 187 278 283 290 320 329 459 566 582 634 670 674 706 921 946 960]]
Test Case: 2496 | Input/Output: [[446 -404 -764 762 489 72 -784 234 -931 -752 90 149 -251 -410 574] [-931 -784 -764 -752 -410 -404 -251 72 90 149 234 446 489 574 762]]
Test Case: 2497 | Input/Output: [[230 460 -433 -361 120 904 -324 -835 79 -164] [-835 -433 -361 -324 -164 79 120 230 460 904]]
Test Case: 2498 | Input/Output: [[-388 -395 -460 -23 456 -313 -489 367 467 -774 -166 -679 -119 -2 479 -2 825 269 742 956] [-774 -679 -489 -460 -395 -388 -313 -166 -119 -23 -2 -2 269 367 456 467 479 742 825 956]]
Test Case: 2499 | Input/Output: [[-581 363 -119 -609 294 209 -39 -975 -667 -165 141 775 99 -478 824 196 -692 -663 89 -745 -247 -851 -123 46 398 148] [-975 -851 -745 -692 -667 -663 -609 -581 -478 -247 -165 -123 -119 -39 46 89 99 141 148 196 209 294 363 398 775 824]]
Test Case: 2500 | Input/Output: [[674 762 -685 -5 241 124 -847 197 -577 -916 932 -824 140 -925 -80 -883 200 -792 661 -110 -68 544 938 652 433 -467 -900 -627 592 -508 487 228 -508 -308 -733 900 344 110 867 493 -59 985] [-925 -916 -900 -883 -847 -824 -792 -733 -685 -627 -577 -508 -508 -467 -308 -110 -80 -68 -59 -5 110 124 140 197 200 228 241 344 433 487 493 544 592 652 661 674 762 867 900 932 938 985]]
Test Case: 2501 | Input/Output: [[-389 477 108 791 544 -32 -8 314 803 108 -212 -852 778 -878 -899 179 668 511 271 143 573 -548 -642 -929 570 808 304 639 485 300 -940 -800 73 -214 492 -768 730 -27 -433 -707 -637 163 7 538 698 154 -168 -472] [-940 -929 -899 -878 -852 -800 -768 -707 -642 -637 -548 -472 -433 -389 -214 -212 -168 -32 -27 -8 7 73 108 108 143 154 163 179 271 300 304 314 477 485 492 511 538 544 570 573 639 668 698 730 778 791 803 808]]
Test Case: 2502 | Input/Output: [[610 279 -365 -728 -912 -912 -940 753 482 919 701 -791 -429 -792 115 -671 -192 -271] [-940 -912 -912 -792 -791 -728 -671 -429 -365 -271 -192 115 279 482 610 701 753 919]]
Test Case: 2503 | Input/Output: [[-719 225 25 -633 -2 904 -173 995 -301 -885 -814 -25 335 897 510 781 -6 -37 992 -58 -791 290 -593 -320 -357 -957 -825 601 911 462 635 772 -2 -282 -29 738 -16 455 -867 697 -763 198 -944 13 690 -810 -397 548 841] [-957 -944 -885 -867 -825 -814 -810 -791 -763 -719 -633 -593 -397 -357 -320 -301 -282 -173 -58 -37 -29 -25 -16 -6 -2 -2 13 25 198 225 290 335 455 462 510 548 601 635 690 697 738 772 781 841 897 904 911 992 995]]
Test Case: 2504 | Input/Output: [[534 -430 152 -742 -681 -367 -191 3 660 306 -187 -403 267 -662 -456 -779 -491 263 990 934 790 -711 46 498 146 -388 873 -40 -249 -361 946 976 -546 -64 -140 -696 -862 -672 264 -476 -517 -932] [-932 -862 -779 -742 -711 -696 -681 -672 -662 -546 -517 -491 -476 -456 -430 -403 -388 -367 -361 -249 -191 -187 -140 -64 -40 3 46 146 152 263 264 267 306 498 534 660 790 873 934 946 976 990]]
Test Case: 2505 | Input/Output: [[-223 35 651 438 -289 876 491 -834 -473 -323 -415 862 869 383 -774 -512 869 -270 248 342] [-834 -774 -512 -473 -415 -323 -289 -270 -223 35 248 342 383 438 491 651 862 869 869 876]]
Test Case: 2506 | Input/Output: [[990 216 500 684 -803 303 -788 997 -383 531 -365 95 277 297 568 857 -583 174 -306 461 -780 625 316] [-803 -788 -780 -583 -383 -365 -306 95 174 216 277 297 303 316 461 500 531 568 625 684 857 990 997]]
Test Case: 2507 | Input/Output: [[-456 633 -406 260 273 -165 644 171 877 -867 -463 862 96 -51 -392 -553 166 -234 -823 -813 496 -256 -809 494 -678 -37 -25 496] [-867 -823 -813 -809 -678 -553 -463 -456 -406 -392 -256 -234 -165 -51 -37 -25 96 166 171 260 273 494 496 496 633 644 862 877]]
Test Case: 2508 | Input/Output: [[-303 -581 -143 153 427 -163 228 861 49 439 -952 203 -449 -507 147 729 -954 -523 -525 -349 -838 590 906 614] [-954 -952 -838 -581 -525 -523 -507 -449 -349 -303 -163 -143 49 147 153 203 228 427 439 590 614 729 861 906]]
Test Case: 2509 | Input/Output: [[673 72 -543 -870 115 951 -306 -362] [-870 -543 -362 -306 72 115 673 951]]
Test Case: 2510 | Input/Output: [[-637 840 -849 225 -235 -334 900 864] [-849 -637 -334 -235 225 840 864 900]]
Test Case: 2511 | Input/Output: [[-523 -32 -692 939 -595 408 998 -623 -459 621 -565 -670 14] [-692 -670 -623 -595 -565 -523 -459 -32 14 408 621 939 998]]
Test Case: 2512 | Input/Output: [[-571 21 -985 -1 627 699 -686 587 832 -915 510 129 459 140 705 -511 57 -696 789 537] [-985 -915 -696 -686 -571 -511 -1 21 57 129 140 459 510 537 587 627 699 705 789 832]]
Test Case: 2513 | Input/Output: [[-54 878 -217 935] [-217 -54 878 935]]
Test Case: 2514 | Input/Output: [[492 -936 994 -413 858 650 -630 -478 549 927 -407 691 -170] [-936 -630 -478 -413 -407 -170 492 549 650 691 858 927 994]]
Test Case: 2515 | Input/Output: [[-172 38 -769 518 616 -407 -979 734 408 -113 -563 262 294 -902 -588 -765 -470 -105 -267] [-979 -902 -769 -765 -588 -563 -470 -407 -267 -172 -113 -105 38 262 294 408 518 616 734]]
Test Case: 2516 | Input/Output: [[-345 768 100 542 -858 -813 -234 74 -958 111 987 910] [-958 -858 -813 -345 -234 74 100 111 542 768 910 987]]
Test Case: 2517 | Input/Output: [[-110 -542 248 72 617 -737 787 339 481 239 113 665 817 -184 425 -881 818 788 -329 945 -382 -705 -788 -38 -59 -786 -116 -770 -933 103 -89 458 -814 315 -199 -342 674 476 557 765 188 -144 218 -269 -81 -351 729 -576 -812 176] [-933 -881 -814 -812 -788 -786 -770 -737 -705 -576 -542 -382 -351 -342 -329 -269 -199 -184 -144 -116 -110 -89 -81 -59 -38 72 103 113 176 188 218 239 248 315 339 425 458 476 481 557 617 665 674 729 765 787 788 817 818 945]]
Test Case: 2518 | Input/Output: [[-732 -679 111 878 -788 304 -536 409 -134 259 733 773 -328 91 491 -885 -89 -552 -130 -379 -573 394 -602 -129 -333 100 -420 -538 86] [-885 -788 -732 -679 -602 -573 -552 -538 -536 -420 -379 -333 -328 -134 -130 -129 -89 86 91 100 111 259 304 394 409 491 733 773 878]]
Test Case: 2519 | Input/Output: [[-701 -581 -991 120 754 -252 -271 813 -372 -309 -173 -842 -442 666 22 -248 749 -357 -904 -277 705 974 391 -554 318 350 -661 748 62 -403 846 -973 512 859 44 -788 362 377 -463] [-991 -973 -904 -842 -788 -701 -661 -581 -554 -463 -442 -403 -372 -357 -309 -277 -271 -252 -248 -173 22 44 62 120 318 350 362 377 391 512 666 705 748 749 754 813 846 859 974]]
Test Case: 2520 | Input/Output: [[-452 570 214 387 -455 -127 -822 240 565 382 801 -574 345 -731 -637 544 -848 -435 438 37 567 883 -734 730 -660 253 -748] [-848 -822 -748 -734 -731 -660 -637 -574 -455 -452 -435 -127 37 214 240 253 345 382 387 438 544 565 567 570 730 801 883]]
Test Case: 2521 | Input/Output: [[-32 123 -867 134 269 813] [-867 -32 123 134 269 813]]
Test Case: 2522 | Input/Output: [[-605 667 -589 73 -62 375 -319 283 301 522 -137 -796 -323 753 -347 -184 -182 -526 124 -607] [-796 -607 -605 -589 -526 -347 -323 -319 -184 -182 -137 -62 73 124 283 301 375 522 667 753]]
Test Case: 2523 | Input/Output: [[246 243 -164 298 198 -814 420 14 320 924 -924 -797 808 539 -465 -368 970 -4 -257 81 -177 198 721 513 439 -615 487 -738 -608 -288 357 -851 305 -309 -148 234 -5 -724 -601 -701 -938 863 -615 -753 251 882 -178 -692 799] [-938 -924 -851 -814 -797 -753 -738 -724 -701 -692 -615 -615 -608 -601 -465 -368 -309 -288 -257 -178 -177 -164 -148 -5 -4 14 81 198 198 234 243 246 251 298 305 320 357 420 439 487 513 539 721 799 808 863 882 924 970]]
Test Case: 2524 | Input/Output: [[545 441 727 920 75 347 298 246 -86 351 -724] [-724 -86 75 246 298 347 351 441 545 727 920]]
Test Case: 2525 | Input/Output: [[-759 -369 639 -961 -233 884 -614 386 -991 -715 314 -230 304 -412 409 88 919 966 -518 -216 -26 -875 530 690 210 497 -145] [-991 -961 -875 -759 -715 -614 -518 -412 -369 -233 -230 -216 -145 -26 88 210 304 314 386 409 497 530 639 690 884 919 966]]
Test Case: 2526 | Input/Output: [[-584 -7 401 -899 689 -925 -471 696 380 -398 528 -544 445 818 667 -830 628 634 -705 -97 168 318 -172 883 -505 -8 983 -811 350 679 43 775 -489 -820 7 53 561 -988] [-988 -925 -899 -830 -820 -811 -705 -584 -544 -505 -489 -471 -398 -172 -97 -8 -7 7 43 53 168 318 350 380 401 445 528 561 628 634 667 679 689 696 775 818 883 983]]
Test Case: 2527 | Input/Output: [[-684 817 -775 223 -193 -374 923 120 876 -485 -802 -7 -673 -477 -213 784 -168 -83 -662 -894 117 531 -759] [-894 -802 -775 -759 -684 -673 -662 -485 -477 -374 -213 -193 -168 -83 -7 117 120 223 531 784 817 876 923]]
Test Case: 2528 | Input/Output: [[-647 -871 591 -117 609 926] [-871 -647 -117 591 609 926]]
Test Case: 2529 | Input/Output: [[890 471 -953 643 -791 247 -238 294 -756 -510 156 213 715 578 368 -907 -926 6 -506 495 242 -929 -657 -493 92 912 -310 -294 -595] [-953 -929 -926 -907 -791 -756 -657 -595 -510 -506 -493 -310 -294 -238 6 92 156 213 242 247 294 368 471 495 578 643 715 890 912]]
Test Case: 2530 | Input/Output: [[-452 -982 -405 197 -52 -360 67 243 495 -985 702 235 836 380 -30 674 966 558 -52 605 278 -900 -202 466 -957 -334 394 583 -17 -153 -870 384 -307 46 183 344 -982] [-985 -982 -982 -957 -900 -870 -452 -405 -360 -334 -307 -202 -153 -52 -52 -30 -17 46 67 183 197 235 243 278 344 380 384 394 466 495 558 583 605 674 702 836 966]]
Test Case: 2531 | Input/Output: [[745 150] [150 745]]
Test Case: 2532 | Input/Output: [[-236 -823 -89 606 -687 -351 -681 147 290 -295 902 205] [-823 -687 -681 -351 -295 -236 -89 147 205 290 606 902]]
Test Case: 2533 | Input/Output: [[222 92 765 148 -93 960 -426 16 -36 -76 920 991 580 -868 -334 941 -560 156] [-868 -560 -426 -334 -93 -76 -36 16 92 148 156 222 580 765 920 941 960 991]]
Test Case: 2534 | Input/Output: [[-52 213 -536 -602 396] [-602 -536 -52 213 396]]
Test Case: 2535 | Input/Output: [[-612 661 -418 -5 385 -882 -468 -805 -959 569 998 422 -147 -503 650 -270 79 -309 75 952 -353 981 -608 383 -708 215 640 -682 474 263 500 -373 -436 38 -596 459 -625 -652] [-959 -882 -805 -708 -682 -652 -625 -612 -608 -596 -503 -468 -436 -418 -373 -353 -309 -270 -147 -5 38 75 79 215 263 383 385 422 459 474 500 569 640 650 661 952 981 998]]
Test Case: 2536 | Input/Output: [[1000 550 -929 476 329 -472 576 838 539 642 -363 833 -581 -252 -580 -844 834 -562 519 670 -338 -208 50 -72 233 221 -141 -212 796 -708 -420 -557 -65] [-929 -844 -708 -581 -580 -562 -557 -472 -420 -363 -338 -252 -212 -208 -141 -72 -65 50 221 233 329 476 519 539 550 576 642 670 796 833 834 838 1000]]
Test Case: 2537 | Input/Output: [[-743 119 288 297 425 895 950 163 406 -459 -697 -45 -726 -471 -203 257 -195 -770 -638 -651 -11 -291 995 811 -257 -98 971 868 -376 -49 -927] [-927 -770 -743 -726 -697 -651 -638 -471 -459 -376 -291 -257 -203 -195 -98 -49 -45 -11 119 163 257 288 297 406 425 811 868 895 950 971 995]]
Test Case: 2538 | Input/Output: [[719 -672] [-672 719]]
Test Case: 2539 | Input/Output: [[934 -734 959 -631 527 655 689 -24 175 806 181 -741 -644 883 -609 -224 -36 349 -212 959 615 702 266 -47 -285 -264 -581 -182 -191 417 616 280 904 644 827 532 -393 264 -613] [-741 -734 -644 -631 -613 -609 -581 -393 -285 -264 -224 -212 -191 -182 -47 -36 -24 175 181 264 266 280 349 417 527 532 615 616 644 655 689 702 806 827 883 904 934 959 959]]
Test Case: 2540 | Input/Output: [[737 -758 -263 -591 -447 138 -630 -294 631 -249 -95 -201 -882 745 -686 424 45 560 -167 340 565 444 323 -97 -891 317 830 -331 -90 136 -847 -673 998 -154 -686 -497 222] [-891 -882 -847 -758 -686 -686 -673 -630 -591 -497 -447 -331 -294 -263 -249 -201 -167 -154 -97 -95 -90 45 136 138 222 317 323 340 424 444 560 565 631 737 745 830 998]]
Test Case: 2541 | Input/Output: [[-787 -706 -482 -239 -855 61 -416 814 992 916 -199 -620 -413 -369 -244 -24 597 49 -36 -344 271 -788 -101 -932 565 -792 -848 -63 289 370 -797 -55 553 -814 216 -369 838 -382 -646 845 -334 885 138 334 -195 -727 738 369 356 913] [-932 -855 -848 -814 -797 -792 -788 -787 -727 -706 -646 -620 -482 -416 -413 -382 -369 -369 -344 -334 -244 -239 -199 -195 -101 -63 -55 -36 -24 49 61 138 216 271 289 334 356 369 370 553 565 597 738 814 838 845 885 913 916 992]]
Test Case: 2542 | Input/Output: [[966 287 -107 408 851 844 -599 -758 271 -559 -499 665 -668 770 78 58 -970 806 492 858 13 -310 285 717 94 445 -588 21 -697 -56 380 -944 -23 585 309 -774 751 -496 372] [-970 -944 -774 -758 -697 -668 -599 -588 -559 -499 -496 -310 -107 -56 -23 13 21 58 78 94 271 285 287 309 372 380 408 445 492 585 665 717 751 770 806 844 851 858 966]]
Test Case: 2543 | Input/Output: [[807 188 534 529 -805 695 390 -178 -777 226 220 -659 -40 -339 608 687 452 470 -814 -734] [-814 -805 -777 -734 -659 -339 -178 -40 188 220 226 390 452 470 529 534 608 687 695 807]]
Test Case: 2544 | Input/Output: [[87 181 527 -500 5 -917 684 509 240 -646 501 922 -902 143 -95] [-917 -902 -646 -500 -95 5 87 143 181 240 501 509 527 684 922]]
Test Case: 2545 | Input/Output: [[747 421 -329 -93 -666 610 741 -986 -961 -366 434 682 514 440 142 -375 -756 344 -129 404 769 761 235 -940 -757 -58 -365 -572 -557 427 -933 -793 -602 171 568 608 -60 -651 978 -72 537 631 -243 499 486 159 -426 -669] [-986 -961 -940 -933 -793 -757 -756 -669 -666 -651 -602 -572 -557 -426 -375 -366 -365 -329 -243 -129 -93 -72 -60 -58 142 159 171 235 344 404 421 427 434 440 486 499 514 537 568 608 610 631 682 741 747 761 769 978]]
Test Case: 2546 | Input/Output: [[616 -770 -370 680 99 -250 -183 826 214 -378 533 -375 47 67 -449 -322 123 -21 387 832 398 300 92 -340 136 833 834 -851 -358 -213 12 785 -449 388 216 472 -56 325] [-851 -770 -449 -449 -378 -375 -370 -358 -340 -322 -250 -213 -183 -56 -21 12 47 67 92 99 123 136 214 216 300 325 387 388 398 472 533 616 680 785 826 832 833 834]]
Test Case: 2547 | Input/Output: [[798 646 849 174] [174 646 798 849]]
Test Case: 2548 | Input/Output: [[-719 -682 201 -57 -942 -316 371 -795 -395 742 219 -857 539 936 -827 -523 460 -248 -178 -355 -695 587 92 684 484 525 -816 -211 -716 -79 789 393 -297] [-942 -857 -827 -816 -795 -719 -716 -695 -682 -523 -395 -355 -316 -297 -248 -211 -178 -79 -57 92 201 219 371 393 460 484 525 539 587 684 742 789 936]]
Test Case: 2549 | Input/Output: [[-922 799 745 -102 -613 -193 256 260 398 -595 928 -300 -273 -717 -837 384 -320 -679 551 790 -127 687 983 -380 -392 92 -769 803 -909 361 869 -556 356 840] [-922 -909 -837 -769 -717 -679 -613 -595 -556 -392 -380 -320 -300 -273 -193 -127 -102 92 256 260 356 361 384 398 551 687 745 790 799 803 840 869 928 983]]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = c175a68023d65611d9fef93eabc5f64df9d6b972
GitHub link = https://github.com/lspector/Clojush/commit/c175a68023d65611d9fef93eabc5f64df9d6b972
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = ([] #object[clojush.problems.software.sort_vector$fn__8076 0x42172065 clojush.problems.software.sort_vector$fn__8076@42172065] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x8e77c5b clojush.instructions.tag$tag_instruction_erc$fn__2160@8e77c5b] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0xc0521e5 clojush.instructions.tag$tagged_instruction_erc$fn__2166@c0521e5] in1 integer_sub integer_inc exec_yankdup vector_integer_shove integer_yankdup exec_shove exec_y integer_mult vector_integer_dup exec_s_when_autoconstructing exec_do*vector_integer exec_dup_items exec_rot vector_integer_swap exec_dup vector_integer_butlast exec_k vector_integer_yank vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace integer_div vector_integer_rot integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth vector_integer_replacefirst integer_dup_times exec_dup_times vector_integer_indexof integer_yank integer_min exec_swap vector_integer_rest integer_dup_items vector_integer_nth exec_do*range vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush exec_y_when_autoconstructing vector_integer_length vector_integer_pop exec_do*times exec_pop vector_integer_set exec_s vector_integer_reverse exec_noop vector_integer_pushall integer_swap integer_dup exec_yank integer_pop integer_dec vector_integer_first exec_stackdepth exec_flush)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.sort_vector$make_sort_vector_error_function_from_cases$the_actual_sort_vector_error_function__8095 0x1eee9b78 clojush.problems.software.sort_vector$make_sort_vector_error_function_from_cases$the_actual_sort_vector_error_function__8095@1eee9b78]
error-threshold = 0
evalpush-limit = 1500
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-point-evaluations = 1.0E101
max-points = 2000
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.problems.software.sort_vector$sort_vector_initial_report 0x45295cfd clojush.problems.software.sort_vector$sort_vector_initial_report@45295cfd]
problem-specific-report = #object[clojush.problems.software.sort_vector$sort_vector_report 0x217c6a1e clojush.problems.software.sort_vector$sort_vector_report@217c6a1e]
random-screen = false
random-seed = 51 -20 -23 -60 107 67 25 80 -119 123 -38 94 84 40 -45 56
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Sort Vector problem report - generation 0
Test total error for best: 28607
Test mean error for best: 11.21843
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [129 2]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [18 -390]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [30 -336]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [958 -467]

Correct output: [-267 957]
| Program output: [957 -267]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [354 -483]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [529 -807]

Correct output: [-150 159]
| Program output: [159 -150]

Correct output: [-913 68]
| Program output: [68 -913]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [286 -38]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [577 -670]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [181 723 -322]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -998 322 -469]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 379 -176 -938]

Correct output: [-652 -440 944]
| Program output: [944 -440 -652]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [939 451 884 -609]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [932 -199 460 43 -833]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -297 -867]

Correct output: [-204 882 934]
| Program output: [934 882 -204]

Correct output: [-806 -221 -184]
| Program output: [-806 -184 -221]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [599 982 -862 -257 -120]

Correct output: [-601 -448 -345 154 362]
| Program output: [154 -448 362 -601 -345]

Correct output: [-328 22 24 263 978]
| Program output: [263 22 24 978 -328]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 708 -841]

Correct output: [-685 -628 -625]
| Program output: [-628 -625 -685]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -364 184 -983]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -506 393 -37]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -957 -894 -591 -563]

Correct output: [-898 249 558]
| Program output: [249 558 -898]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 471 -482 355 -59]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 201 -79 -218 -418]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [787 520 5]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 411 918 648 -223]

Correct output: [-877 -237 -56 415]
| Program output: [-237 415 -877 -56]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -556 -619]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -675 -798 -358]

Correct output: [-639 -244 374 382 548]
| Program output: [548 382 -639 374 -244]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 -820 -806 -553 16]

Correct output: [-937 -141 -97 598]
| Program output: [598 -937 -97 -141]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 977 -865 -670]

Correct output: [-928 -696 108 256 443]
| Program output: [256 -928 108 443 -696]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -811 -739 -763 -783]

Correct output: [-428 333 797]
| Program output: [333 797 -428]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -4 34 -999 -535]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [622 -423 957 955 -322 56 957 -140 -718 -961]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [56 71 -837 648 -860 547 -777 578 -551 529 -401 436 -742 -70]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -767 323 -223 692 47 20 -217 775 -356 -682]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616 -940]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 -975 -340 548 805 -416 934 -802 941 -731 510 755 119 97 -959 58 96 482 299 983 -816 -467 829 210 22]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 258 471 230 557 -293 -421 -62]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266 -473]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-267 -11 -674]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568 -341]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 938 -869 501 871 -735]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3 -279]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -49 -605 -202 -497 -390]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_nth} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_occurrencesof} {:close 1, :instruction vector_integer_stackdepth} {:close 1, :instruction exec_do*vector_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction -224} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction vector_integer_remove} {:close 0, :instruction 106} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_flush} {:close 0, :instruction 869} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_609} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_first} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_items} {:close 2, :instruction integer_mod} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction exec_noop} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1})
Lexicase best program: (vector_integer_nth integer_add vector_integer_occurrencesof vector_integer_stackdepth exec_do*vector_integer () integer_stackdepth integer_stackdepth vector_integer_butlast integer_min exec_y_when_autoconstructing (exec_noop exec_dup_items vector_integer_dup_items exec_k_when_autoconstructing (integer_max exec_k (vector_integer_yankdup integer_add in1 integer_yank integer_shove vector_integer_shove vector_integer_reverse vector_integer_replace vector_integer_remove vector_integer_indexof vector_integer_swap) (vector_integer_first vector_integer_dup exec_pop (-224) exec_yankdup integer_max integer_dup exec_s (integer_dup_times vector_integer_concat exec_y_when_autoconstructing (vector_integer_remove)) (106 integer_div exec_y_when_autoconstructing (vector_integer_pushall exec_flush 869 vector_integer_replacefirst integer_dup tag_integer_609 integer_div) vector_integer_yankdup exec_flush exec_do*count (integer_dec vector_integer_nth exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_do*range (in1 integer_swap vector_integer_first exec_dup_items integer_yank integer_dup_items) integer_mod) () vector_integer_pushall) exec_noop vector_integer_shove) (exec_swap (vector_integer_last integer_yankdup) (in1)) ())) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Lexicase best number of elite cases: 173
Lexicase best total error: 2715
Lexicase best mean error: 10.86
Lexicase best size: 95
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_nth} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_occurrencesof} {:close 1, :instruction vector_integer_stackdepth} {:close 1, :instruction exec_do*vector_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction -224} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction vector_integer_remove} {:close 0, :instruction 106} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_flush} {:close 0, :instruction 869} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_609} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_first} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_items} {:close 2, :instruction integer_mod} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction exec_noop} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1})
Zero cases best program: (vector_integer_nth integer_add vector_integer_occurrencesof vector_integer_stackdepth exec_do*vector_integer () integer_stackdepth integer_stackdepth vector_integer_butlast integer_min exec_y_when_autoconstructing (exec_noop exec_dup_items vector_integer_dup_items exec_k_when_autoconstructing (integer_max exec_k (vector_integer_yankdup integer_add in1 integer_yank integer_shove vector_integer_shove vector_integer_reverse vector_integer_replace vector_integer_remove vector_integer_indexof vector_integer_swap) (vector_integer_first vector_integer_dup exec_pop (-224) exec_yankdup integer_max integer_dup exec_s (integer_dup_times vector_integer_concat exec_y_when_autoconstructing (vector_integer_remove)) (106 integer_div exec_y_when_autoconstructing (vector_integer_pushall exec_flush 869 vector_integer_replacefirst integer_dup tag_integer_609 integer_div) vector_integer_yankdup exec_flush exec_do*count (integer_dec vector_integer_nth exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_do*range (in1 integer_swap vector_integer_first exec_dup_items integer_yank integer_dup_items) integer_mod) () vector_integer_pushall) exec_noop vector_integer_shove) (exec_swap (vector_integer_last integer_yankdup) (in1)) ())) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Zero cases best number of elite cases: 173
Zero cases best number of zero cases: 85
Zero cases best total error: 2715
Zero cases best mean error: 10.86
Zero cases best size: 95
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 88 88 89 89 89 89 89 89 89 89 89 89 89 88 89 88 89 89 89 89 89 89 89 89 89 88 89 89 88 89 88 89 89 89 88 89 89 89 89 88 89 89 89 89 89 89 89 89 88 79 7 8 81 8 8 8 8 77 7 77 8 8 7 7 7 7 77 77 8 8 8 76 7 78 78 7 7 78 8 78 77 76 7 8 77 8 8 8 7 78 7 7 7 79 8 78 7 77 7 87 1 7 77 76 85 87 85 87 78 7 77 77 87 79 86 83 87 7 86 87 76 77 7 7 87 6 6 79 7 78 6 1 83 86 77 76 7 84 85 79 6 76 7 6 1 1 78 87 86 7 76 7 82 7 80 89 7 76 8 81 78 78 75 76 76 79 77 6 7 78 7 76 88 79 77 7 77 7 7 87 7 6 8 79 8 86 78 81 78 7 7 77 7 84 78 77 79 1 7 8 8 87 7 8 7 80 1 77 87 85 7 7 78 7 78 87 79 78 78 86 8 7 8 7 7 7 8 85 86 77 79 87 84 7 77 76 7 76 7 7 86 82 7 7 7 7 76 7 76)
Population mean number of elite cases: 13.59
Count of perfect (error zero) individuals by case: (86 88 88 89 89 89 89 89 89 89 89 89 89 89 88 89 88 89 89 89 89 89 89 89 89 89 88 89 89 88 89 88 89 89 89 88 89 89 89 89 88 89 89 89 89 89 89 89 89 88 79 7 8 81 8 8 8 8 77 7 77 8 8 7 7 7 7 77 77 8 8 8 76 7 78 78 7 7 78 8 78 77 76 7 8 77 8 8 8 7 78 7 7 7 79 8 78 7 77 7 0 0 0 0 76 0 0 0 0 0 0 77 77 0 79 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 78 0 0 0 0 77 0 7 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 76 0 0 77 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 6.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_conj} {:close 1, :instruction tagged_455} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_occurrencesof} {:close 1, :instruction vector_integer_remove} {:close 2, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_vector_integer_101} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_y} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction exec_flush} {:close 1, :instruction vector_integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction 374} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction exec_s} {:close 1, :instruction vector_integer_length} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_vector_integer_671} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 1, :instruction vector_integer_take})
Best program: (vector_integer_conj tagged_455 vector_integer_rot vector_integer_rest in1 vector_integer_remove vector_integer_dup_items vector_integer_remove vector_integer_reverse vector_integer_indexof exec_y_when_autoconstructing (integer_div) integer_dup_items exec_flush exec_k (vector_integer_dup_times vector_integer_first vector_integer_reverse vector_integer_occurrencesof vector_integer_remove) (exec_y ()) integer_shove tag_vector_integer_101 exec_shove (integer_rot) vector_integer_pushall exec_y (vector_integer_subvec exec_flush vector_integer_dup_times) exec_dup (vector_integer_replacefirst integer_pop exec_pop () 374 exec_k_when_autoconstructing (vector_integer_dup_items integer_dup_items integer_sub integer_min vector_integer_indexof exec_s () (vector_integer_length) (vector_integer_nth) vector_integer_concat exec_dup_items vector_integer_concat exec_do*range (exec_y (exec_y (vector_integer_remove vector_integer_shove vector_integer_pop integer_dec integer_dup_items) integer_flush) integer_stackdepth) vector_integer_remove exec_y_when_autoconstructing () vector_integer_set vector_integer_swap exec_s (vector_integer_indexof) (exec_shove (integer_sub integer_shove integer_mult vector_integer_set integer_flush) exec_yankdup integer_yankdup) (tag_vector_integer_671 integer_mod integer_swap exec_s_when_autoconstructing (vector_integer_nth exec_swap (vector_integer_occurrencesof vector_integer_take) ()) () ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Total: 2715
Mean: 10.86
Genome size: 79
Size: 106
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 1.94197902656827E11
Median total errors in population: 250000000000
Error averages by case: (7.78001360136E8 7.77001350136E8 7.78001330134E8 7.76001350136E8 7.77001330134E8 7.76001350136E8 7.76001350136E8 7.76001350136E8 7.77001330134E8 7.76001350136E8 7.77001330134E8 7.77001330134E8 7.76001350136E8 7.77001330134E8 7.78001340135E8 7.77001330134E8 7.78001330134E8 7.76001350136E8 7.77001330134E8 7.76001350136E8 7.77001330134E8 7.76001350136E8 7.76001350136E8 7.77001330134E8 7.76001350136E8 7.77001330134E8 7.76001360137E8 7.76001350136E8 7.77001330134E8 7.78001330134E8 7.76001350136E8 7.78001340135E8 7.76001350136E8 7.77001330134E8 7.76001350136E8 7.78001340135E8 7.77001330134E8 7.77001330134E8 7.76001350136E8 7.76001350136E8 7.76001360137E8 7.76001350136E8 7.76001350136E8 7.77001330134E8 7.77001330134E8 7.77001330134E8 7.76001350136E8 7.76001350136E8 7.76001350136E8 7.78001340135E8 7.73002630283E8 7.77002640421E8 7.75002640426E8 7.73002600278E8 7.77002600417E8 7.72002620427E8 7.77002600417E8 7.73002640425E8 7.77002600278E8 7.76002640423E8 7.77002600278E8 7.77002600417E8 7.73002600425E8 7.75002630424E8 7.75002630424E8 7.76002640423E8 7.75002630424E8 7.76002630281E8 7.77002600278E8 7.77002600417E8 7.77002600417E8 7.77002600417E8 7.76002640282E8 7.76002640423E8 7.7500262028E8 7.7500262028E8 7.75002630424E8 7.77002640421E8 7.74002640282E8 7.72002620427E8 7.74002640282E8 7.74002660284E8 7.76002640282E8 7.75002630424E8 7.72002620427E8 7.77002600278E8 7.77002600417E8 7.75002610422E8 7.77002600417E8 7.75002630424E8 7.74002640282E8 7.75002630424E8 7.75002630424E8 7.76002640423E8 7.74002630281E8 7.73002620425E8 7.74002640282E8 7.75002630424E8 7.77002600278E8 7.75002630424E8 7.75003790566E8 7.76005060878E8 7.78004990862E8 7.77005040701E8 7.78003760396E8 7.76004980691E8 7.76006071013E8 7.7600500069E8 7.7500382057E8 7.75006180839E8 7.78004970774E8 7.77003760396E8 7.75003780398E8 7.77003760564E8 7.74003780398E8 7.77006181005E8 7.77006171007E8 7.76006130919E8 7.78004980774E8 7.7600382057E8 7.7700376056E8 7.77005060706E8 7.76004980702E8 7.77005060864E8 7.79006080973E8 7.7400384057E8 7.77006180998E8 7.76006171004E8 7.78006170826E8 7.77005030866E8 7.75003770398E8 7.78006120999E8 7.77005040874E8 7.76003860567E8 7.76005010694E8 7.77003760396E8 7.77005010701E8 7.75005010851E8 7.77003780563E8 7.78004950684E8 7.75006190855E8 7.77006181075E8 7.77005030703E8 7.7600500086E8 7.76006090981E8 7.7800500087E8 7.75006191017E8 7.78006080824E8 7.75003780565E8 7.78006181007E8 7.77059561264E8 7.78060530946E8 7.80059681103E8 7.8005978094E8 7.7905957104E8 7.7604022758E8 7.75037866942E8 7.75002630424E8 7.80011861829E8 7.76004970866E8 7.75037776842E8 7.77036576771E8 7.79035476293E8 7.79016413007E8 7.78002600278E8 7.80059640951E8 7.7905393995E8 7.77002600278E8 7.80035354452E8 7.78048808951E8 7.79052899834E8 7.77059008E8 7.79013022066E8 7.78009451767E8 7.78031785822E8 7.78016562926E8 7.78060400538E8 7.78034525927E8 7.78053860172E8 7.79050949465E8 7.77029775298E8 7.80052629659E8 7.7801075197E8 7.78027725236E8 7.75034866169E8 7.76016413107E8 7.80049649011E8 7.75025444393E8 7.7502504436E8 7.80009541568E8 7.78012822316E8 7.78027205003E8 7.80052149369E8 7.76018913481E8 7.79057900722E8 7.78032215733E8 7.7802131373E8 7.7502516444E8 7.74003840568E8 7.77022253944E8 7.78038447261E8 7.7704381818E8 7.760623875E8 7.79046408568E8 7.77023934474E8 7.80059751017E8 7.78052539654E8 7.75003800565E8 7.80059381037E8 7.80008271431E8 7.77031105525E8 7.79053860024E8 7.78010711983E8 7.77028445181E8 7.76026034943E8 7.78028595078E8 7.7700376056E8 7.76041367703E8 7.76041377712E8 7.77041587656E8 7.76003820568E8 7.77072749857E8 7.80056700529E8 7.76016653011E8 7.80059911018E8 7.76006071092E8 7.7703770704E8 7.770434182E8 7.77020233713E8 7.75005010695E8 7.77029344742E8 7.77057190605E8 7.76014372494E8 7.78052629639E8 7.77034256349E8 7.80049229111E8 7.78060841037E8 7.80052719845E8 7.78019263299E8 7.78103245313E8 7.78045318328E8 7.78020223707E8 7.82007271114E8 7.75032175979E8 7.77019213565E8 7.79034036227E8 7.75015932727E8 7.79051219298E8 7.79056440372E8 7.82007241115E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 3 2 0 2 4 2 2 2 2 0 0 2 0 4 4 3 2 2 2 2 2 3 2 2 3 2 2 3 0 3 3 2 2 0 2 0 2 2 2 2 2 2 0 3 3 2 2 4 48 47 47 48 46 33 29 0 6 3 28 29 26 13 0 48 43 0 8 37 43 19 7 8 25 12 42 23 43 41 22 41 7 22 25 11 39 17 17 6 8 20 40 14 47 24 15 18 1 14 30 34 12 37 19 48 42 1 49 6 23 43 8 22 21 21 2 33 33 33 2 23 45 11 48 3 28 35 16 2 17 46 10 42 23 40 48 41 13 45 32 16 4 24 15 25 10 40 45 4)
Average genome size in population (length): 96.537
Average program size in population (points): 129.959
Average percent parens in population: 0.260
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 82292040
--- Timings ---
Current time: 1559234462478 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Sort Vector problem report - generation 1
Test total error for best: 228623
Test mean error for best: 89.65608
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [129 2]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [18 -390]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [30 -336]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [958 -467]

Correct output: [-267 957]
| Program output: [957 -267]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [354 -483]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [529 -807]

Correct output: [-150 159]
| Program output: [159 -150]

Correct output: [-913 68]
| Program output: [68 -913]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [286 -38]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [577 -670]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [181 723 -322]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -998 322 -469]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 379 -176 -938]

Correct output: [-652 -440 944]
| Program output: [944 -440 -652]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [939 451 884 -609]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [932 -199 460 43 -833]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -297 -867]

Correct output: [-204 882 934]
| Program output: [934 882 -204]

Correct output: [-806 -221 -184]
| Program output: [-806 -184 -221]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [599 982 -862 -257 -120]

Correct output: [-601 -448 -345 154 362]
| Program output: [154 -448 362 -601 -345]

Correct output: [-328 22 24 263 978]
| Program output: [263 22 24 978 -328]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 708 -841]

Correct output: [-685 -628 -625]
| Program output: [-628 -625 -685]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -364 184 -983]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -506 393 -37]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -957 -894 -591 -563]

Correct output: [-898 249 558]
| Program output: [249 558 -898]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 471 -482 355 -59]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 201 -79 -218 -418]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 411 918 648 -223]

Correct output: [-877 -237 -56 415]
| Program output: [-237 415 -877 -56]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -556 -619]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -675 -798 -358]

Correct output: [-639 -244 374 382 548]
| Program output: [548 382 -639 374 -244]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 -820 -806 -553 16]

Correct output: [-937 -141 -97 598]
| Program output: [598 -937 -97 -141]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 977 -865 -670]

Correct output: [-928 -696 108 256 443]
| Program output: [256 -928 108 443 -696]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -811 -739 -763 -783]

Correct output: [-428 333 797]
| Program output: [333 797 -428]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -4 34 -999 -535]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [622 -423 957 955 -322 56 957 -140 -718 -961]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [56 71 -837 648 -860 547 -777 578 -551 529 -401 436 -742 -70]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -767 323 -223 692 47 20 -217 775 -356 -682]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616 -940]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 -975 -340 548 805 -416 934 -802 941 -731 510 755 119 97 -959 58 96 482 299 983 -816 -467 829 210 22]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 258 471 230 557 -293 -421 -62]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266 -473]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-267 -11 -674]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568 -341]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 938 -869 501 871 -735]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3 -279]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -49 -605 -202 -497 -390]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 0 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Lexicase best number of elite cases: 157
Lexicase best total error: 2713
Lexicase best mean error: 10.852
Lexicase best size: 195
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 0 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Zero cases best number of elite cases: 157
Zero cases best number of zero cases: 86
Zero cases best total error: 2713
Zero cases best mean error: 10.852
Zero cases best size: 195
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (833 831 832 829 832 829 829 829 832 829 833 832 831 832 832 832 832 830 832 829 832 829 829 832 829 832 831 829 832 832 829 832 829 832 829 832 832 832 829 829 831 829 829 832 832 832 829 829 829 832 307 420 419 307 420 419 420 419 306 421 306 420 419 421 421 421 421 306 306 420 420 420 306 421 307 307 421 421 307 419 307 306 306 421 419 305 420 421 420 421 306 421 421 421 306 419 307 421 305 421 1 106 423 303 305 726 683 824 3 300 423 304 305 3 304 1 684 1 423 3 1 407 307 423 382 1 385 3 297 423 305 382 106 726 725 304 307 420 729 726 400 382 407 420 382 106 101 299 1 785 1 402 392 795 389 434 824 421 297 422 336 405 434 302 305 401 404 307 386 391 401 388 298 781 433 403 391 432 3 391 822 391 385 420 430 417 795 305 430 397 384 388 400 387 792 430 399 432 100 387 423 410 823 393 487 391 401 100 402 783 820 391 384 403 388 403 1 399 399 399 3 423 391 3 391 384 389 1 793 725 405 403 3 791 392 403 403 390 332 392 388 792 782 390 388 387 392 400 392 398)
Population mean number of elite cases: 118.85
Count of perfect (error zero) individuals by case: (833 831 832 829 832 829 829 829 832 829 833 832 831 832 832 832 832 830 832 829 832 829 829 832 829 832 831 829 832 832 829 832 829 832 829 832 832 832 829 829 831 829 829 832 832 832 829 829 829 832 307 420 419 307 420 419 420 419 306 421 306 420 419 421 421 421 421 306 306 420 420 420 306 421 307 307 421 421 307 419 307 306 306 421 419 305 420 421 420 421 306 421 421 421 306 419 307 421 305 421 0 0 0 0 305 0 0 0 0 0 0 304 305 0 304 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 305 0 0 0 0 304 0 420 0 0 0 0 0 0 382 0 0 0 0 0 0 0 0 0 0 0 0 421 0 0 0 0 0 0 305 0 0 307 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 64.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 0 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Total: 2713
Mean: 10.852
Genome size: 138
Size: 195
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 3.4912366177515E10
Median total errors in population: 2756
Error averages by case: (1.30041314131E8 1.30041324133E8 1.30041314132E8 1.30041344135E8 1.30041314132E8 1.30041344135E8 1.30041344135E8 1.30041344135E8 1.30041314132E8 1.30041344135E8 1.29041314132E8 1.30041314132E8 1.30041324133E8 1.30041314132E8 1.29041324133E8 1.30041314132E8 1.30041314132E8 1.30041334134E8 1.30041314132E8 1.30041344135E8 1.30041314132E8 1.30041344135E8 1.30041344135E8 1.30041314132E8 1.30041344135E8 1.30041314132E8 1.30041324133E8 1.30041344135E8 1.30041314132E8 1.30041314132E8 1.30041344135E8 1.29041324133E8 1.30041344135E8 1.30041314132E8 1.30041344135E8 1.29041324133E8 1.30041314132E8 1.30041314132E8 1.30041344135E8 1.30041344135E8 1.30041324133E8 1.30041344135E8 1.30041344135E8 1.30041314132E8 1.30041314132E8 1.30041314132E8 1.30041344135E8 1.30041344135E8 1.30041344135E8 1.29041324133E8 1.31041625107E8 1.32041614878E8 1.32041624881E8 1.31041625107E8 1.31041604881E8 1.31041624883E8 1.31041604881E8 1.32041624881E8 1.32041605107E8 1.32041604877E8 1.32041605107E8 1.33041604877E8 1.31041624883E8 1.32041604877E8 1.32041604877E8 1.32041604877E8 1.32041604877E8 1.32041605107E8 1.32041605107E8 1.33041604877E8 1.31041604881E8 1.31041604881E8 1.32041605107E8 1.32041604877E8 1.32041605105E8 1.32041605105E8 1.33041604875E8 1.33041604875E8 1.32041605105E8 1.31041624883E8 1.32041605105E8 1.33041605105E8 1.33041605105E8 1.33041604875E8 1.31041624883E8 1.33041605107E8 1.31041604881E8 1.31041604879E8 1.31041604881E8 1.33041604875E8 1.32041605106E8 1.33041604875E8 1.33041604875E8 1.33041604875E8 1.32041625107E8 1.32041624881E8 1.32041605105E8 1.33041604875E8 1.33041605107E8 1.33041604875E8 1.3403166483E8 1.33042217452E8 1.3204226713E8 1.34042156414E8 1.35031614118E8 1.35042115985E8 1.37027476136E8 1.3404221589E8 1.32031684829E8 1.36027495244E8 1.34042196295E8 1.3403161412E8 1.33031674123E8 1.34031614823E8 1.33031694127E8 1.36027576E8 1.35027546146E8 1.36027535209E8 1.33042236299E8 1.33031644826E8 1.34031614827E8 1.32042216317E8 1.35042116406E8 1.33042217127E8 1.34027575283E8 1.3403167483E8 1.35027525616E8 1.34027525277E8 1.35027575208E8 1.33042267126E8 1.33031704124E8 1.34027535625E8 1.35042157439E8 1.34031654933E8 1.34042195992E8 1.3403161412E8 1.35042116406E8 1.33042255862E8 1.33031614934E8 1.3404215599E8 1.36027525576E8 1.34027625731E8 1.35042116305E8 1.32042266711E8 1.34027534512E8 1.34042157443E8 1.3702748594E8 1.34027575258E8 1.3403167483E8 1.34027576054E8 1.7004711401E8 1.69051183243E8 1.67051414245E8 1.69050183661E8 1.70051913304E8 1.37054083308E8 1.34051239354E8 1.32041604877E8 1.81028468856E8 1.34042177124E8 1.36050579341E8 1.3704871992E8 1.3704896736E8 1.37040565407E8 1.32041605108E8 1.68051184111E8 1.69045539442E8 1.31041605107E8 1.8002856959E8 1.68038074383E8 1.70044189676E8 1.38059682035E8 1.36032130363E8 1.81043510646E8 1.38043505534E8 1.34040944529E8 1.68043108517E8 1.4104653572E8 1.73045079674E8 1.69040787321E8 1.37040692371E8 1.67045517932E8 1.79048951216E8 1.38038272536E8 1.38046466216E8 1.3704070445E8 1.66039825353E8 1.40059370795E8 1.38035238821E8 1.81043349464E8 1.35032260669E8 1.40036671045E8 1.71043527181E8 1.38046376702E8 1.67050762859E8 1.40043514662E8 1.41058048925E8 1.38033708732E8 1.3403169473E8 1.39065929363E8 1.39052150976E8 1.45058074742E8 1.35040944086E8 1.66061976339E8 1.39038929765E8 1.69051424143E8 1.68043558513E8 1.34031634728E8 1.68052414964E8 1.79037948541E8 1.41041673211E8 1.72045549325E8 1.82048951581E8 1.39038252527E8 1.37035301439E8 1.39038492129E8 1.34031614827E8 1.3805531347E8 1.39055663862E8 1.41054963366E8 1.32031684829E8 1.37040693978E8 1.68049341935E8 1.37040704037E8 1.69051414126E8 1.36027526108E8 1.37050589751E8 1.44057715195E8 1.3505611882E8 1.34042225991E8 1.40060281146E8 1.66050022394E8 1.32035371894E8 1.68043988123E8 1.36045895994E8 1.67039406496E8 1.65052414317E8 1.67044638734E8 1.39046216689E8 1.68052412591E8 1.67059643785E8 1.36056118742E8 1.78032546423E8 1.39042725154E8 1.37046387535E8 1.37046546395E8 1.36037402519E8 1.71040776824E8 1.69048891376E8 1.79032536805E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 3 3 2 0 2 4 2 1 2 2 0 0 1 0 3 4 2 2 1 1 2 2 3 2 1 3 1 2 3 0 3 3 2 2 0 2 0 2 2 2 2 2 2 0 3 3 2 1 4 47 47 47 48 46 33 29 0 6 3 28 29 26 13 0 48 43 0 8 37 43 19 7 8 25 12 42 23 42 41 22 41 7 22 25 11 39 17 17 6 8 20 40 14 47 24 15 18 1 14 30 34 12 37 19 48 42 1 49 6 23 43 8 22 21 21 1 33 33 33 1 23 45 10 48 3 28 34 16 2 17 46 9 42 23 40 48 41 13 45 32 16 4 24 15 25 10 40 45 4)
Average genome size in population (length): 92.385
Average program size in population (points): 124.321
Average percent parens in population: 0.250
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.511
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.069
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 148190134
--- Timings ---
Current time: 1559234537706 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Sort Vector problem report - generation 2
Test total error for best: 228612
Test mean error for best: 89.65176
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [129 2]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [18 -390]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [30 -336]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [958 -467]

Correct output: [-267 957]
| Program output: [957 -267]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [354 -483]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [529 -807]

Correct output: [-150 159]
| Program output: [159 -150]

Correct output: [-913 68]
| Program output: [68 -913]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [286 -38]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [577 -670]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [181 723 -322]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -998 322 -469]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 379 -176 -938]

Correct output: [-652 -440 944]
| Program output: [944 -440 -652]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [939 451 884 -609]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [932 -199 460 43 -833]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -297 -867]

Correct output: [-204 882 934]
| Program output: [934 882 -204]

Correct output: [-806 -221 -184]
| Program output: [-806 -184 -221]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [599 982 -862 -257 -120]

Correct output: [-601 -448 -345 154 362]
| Program output: [154 -448 362 -601 -345]

Correct output: [-328 22 24 263 978]
| Program output: [263 22 24 978 -328]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 708 -841]

Correct output: [-685 -628 -625]
| Program output: [-628 -625 -685]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -364 184 -983]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -506 393 -37]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -957 -894 -591 -563]

Correct output: [-898 249 558]
| Program output: [249 558 -898]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 471 -482 355 -59]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 201 -79 -218 -418]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [787 520 5]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 411 918 648 -223]

Correct output: [-877 -237 -56 415]
| Program output: [-237 415 -877 -56]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -556 -619]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -675 -798 -358]

Correct output: [-639 -244 374 382 548]
| Program output: [548 382 -639 374 -244]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 -820 -806 -553 16]

Correct output: [-937 -141 -97 598]
| Program output: [598 -937 -97 -141]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 977 -865 -670]

Correct output: [-928 -696 108 256 443]
| Program output: [256 -928 108 443 -696]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -811 -739 -763 -783]

Correct output: [-428 333 797]
| Program output: [333 797 -428]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -4 34 -999 -535]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-682 -356 775 -217 20 47 692 -223 323 -767 -392]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999 -91]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 -975 -340 548 805 -416 934 -802 941 -731 510 755 119 97 -959 58 96 482 299 983 -816 -467 829 210 22]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 258 471 230 557 -293 -421 -62]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-267 -11 -674]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117 -59]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405 -489]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 938 -869 501 871 -735]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -49 -605 -202 -497 -390]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction vector_integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_dup_items} {:close 1, :instruction vector_integer_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_yank} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_do*range} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_replace})
Lexicase best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_indexof exec_stackdepth vector_integer_reverse exec_pop (vector_integer_dup_times exec_s (in1 vector_integer_dup_times vector_integer_dup_times exec_s (integer_shove in1) (vector_integer_rot) (vector_integer_swap) exec_pop () integer_swap vector_integer_flush vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_dup_times (integer_inc) exec_dup_items) (vector_integer_shove) (integer_yankdup) in1) vector_integer_yank) (vector_integer_subvec)) (in1 vector_integer_nth) vector_integer_butlast exec_do*range (vector_integer_pushall vector_integer_replace))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 3 3 3 4 3 2 4 3 1 4 2 3 3 1 3 5 4 3 2 1 3 3 2 3 3 3 3 1 4 3 3 4 3 2 2 3 2 1 2 2 5 3 3 3 1 3 4 5 3 4 48 48 47 48 47 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 27 13 42 28 42 41 22 41 7 22 27 12 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 3 34 35 34 1 23 45 10 48 3 28 35 16 2 20 47 9 42 23 41 49 41 16 45 32 16 5 24 15 26 10 41 45 5]
Lexicase best number of elite cases: 153
Lexicase best total error: 2727
Lexicase best mean error: 10.908
Lexicase best size: 69
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_shove integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 0 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 2 49 44 2 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 5]
Zero cases best number of elite cases: 151
Zero cases best number of zero cases: 86
Zero cases best total error: 2713
Zero cases best mean error: 10.852
Zero cases best size: 195
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (799 788 798 786 798 786 786 786 798 786 798 798 786 798 793 798 799 786 798 786 798 786 786 798 786 798 787 786 798 798 786 789 786 798 786 790 798 798 786 786 787 786 786 798 798 798 786 786 786 793 282 353 343 280 353 343 353 343 279 345 279 353 343 345 345 345 345 280 279 353 353 353 280 345 278 278 345 345 278 343 278 279 280 345 343 279 353 342 353 345 278 345 345 345 280 343 278 345 279 345 54 196 417 255 249 668 544 1 77 300 416 250 249 77 250 54 1 55 417 77 55 376 329 422 170 54 246 76 249 417 319 170 196 730 672 250 329 340 726 676 308 169 370 342 165 196 119 303 54 561 20 374 302 660 260 437 698 345 243 417 385 368 419 317 279 349 385 279 3 280 366 304 261 1 450 378 297 451 76 311 743 318 1 1 444 308 690 320 401 1 245 283 341 278 654 394 346 456 65 262 392 316 762 310 345 296 377 65 370 549 726 323 239 364 275 378 55 333 329 327 77 373 282 76 294 240 281 18 616 673 380 381 77 672 309 349 372 292 393 322 267 621 435 308 261 215 310 382 319 310)
Population mean number of elite cases: 103.00
Count of perfect (error zero) individuals by case: (799 788 798 786 798 786 786 786 798 786 798 798 786 798 793 798 799 786 798 786 798 786 786 798 786 798 787 786 798 798 786 789 786 798 786 790 798 798 786 786 787 786 786 798 798 798 786 786 786 793 282 353 343 280 353 343 353 343 279 345 279 353 343 345 345 345 345 280 279 353 353 353 280 345 278 278 345 345 278 343 278 279 280 345 343 279 353 342 353 345 278 345 345 345 280 343 278 345 279 345 0 0 0 0 249 0 0 0 0 0 0 250 249 0 250 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 319 0 0 0 0 250 0 340 0 0 0 0 0 0 165 0 0 0 0 0 0 0 0 0 0 0 0 345 0 0 0 0 0 0 279 0 0 279 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 58.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 4 3 3 2 2 4 2 2 4 2 2 2 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 5 2 3 2 0 4 4 4 2 4 48 48 47 48 46 34 29 0 6 3 30 31 28 13 2 49 44 2 8 37 45 19 7 8 26 12 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 17 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 13 45 32 16 4 24 16 25 10 42 45 5]
Total: 2708
Mean: 10.832
Genome size: 138
Size: 195
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 4.085782530745E10
Median total errors in population: 955483/2
Error averages by case: (1.15000870088E8 1.19000930095E8 1.15000870089E8 1.21000930095E8 1.16000870088E8 1.21000930095E8 1.21000930095E8 1.21000930095E8 1.16000870088E8 1.21000930095E8 1.16000870088E8 1.16000870088E8 1.20000930096E8 1.16000870088E8 1.17000890092E8 1.16000870088E8 1.15000870088E8 1.21000930095E8 1.16000870088E8 1.21000930095E8 1.16000870088E8 1.21000930095E8 1.21000930095E8 1.16000870088E8 1.21000930095E8 1.16000870088E8 1.18000950097E8 1.21000930095E8 1.16000870088E8 1.15000880089E8 1.21000930095E8 1.17000930096E8 1.21000930095E8 1.16000870088E8 1.21000930095E8 1.17000910095E8 1.16000870088E8 1.16000870088E8 1.21000930095E8 1.21000930095E8 1.19000940096E8 1.21000930095E8 1.21000930095E8 1.16000870088E8 1.16000870088E8 1.16000870088E8 1.21000930095E8 1.21000930095E8 1.21000930095E8 1.17000880092E8 1.31001160991E8 1.27001130852E8 1.35001200855E8 1.38001190981E8 1.31001140844E8 1.38001180849E8 1.31001130843E8 1.37001200853E8 1.31001130996E8 1.35001130848E8 1.31001130996E8 1.31001130843E8 1.38001180849E8 1.35001130848E8 1.35001130848E8 1.35001130848E8 1.35001130848E8 1.32001180996E8 1.31001130996E8 1.31001140844E8 1.31001140844E8 1.31001140844E8 1.32001220996E8 1.35001130848E8 1.36001160991E8 1.36001160991E8 1.35001130848E8 1.35001140849E8 1.36001160991E8 1.38001180849E8 1.36001160991E8 1.34001180994E8 1.32001200996E8 1.35001130848E8 1.38001180849E8 1.31001130996E8 1.31001130843E8 1.36001200856E8 1.31001140844E8 1.35001130848E8 1.36001160991E8 1.35001130848E8 1.35001130848E8 1.35001130848E8 1.3800118098E8 1.38001180849E8 1.36001160991E8 1.35001130848E8 1.31001130996E8 1.35001130848E8 1.350017118E8 1.34002163251E8 1.38002122996E8 1.30002212473E8 1.3500167124E8 1.39002261958E8 1.49004353515E8 1.33002311918E8 1.38001591739E8 1.43004402436E8 1.34002132222E8 1.33001581237E8 1.36001701239E8 1.33001581752E8 1.40001671227E8 1.44004443315E8 1.43004473543E8 1.41004512629E8 1.34002132221E8 1.3400164175E8 1.33001591801E8 1.34002182262E8 1.39002272302E8 1.3500219301E8 1.43004373057E8 1.36001691798E8 1.44004323089E8 1.46004242892E8 1.43004332297E8 1.38002122996E8 1.37001721097E8 1.42004403125E8 1.30002213267E8 1.38001591838E8 1.34002141952E8 1.33001581237E8 1.39002262301E8 1.35002091816E8 1.3700170184E8 1.33002141954E8 1.4600446286E8 1.42004323555E8 1.34002332273E8 1.38002122658E8 1.46004252553E8 1.30002223268E8 1.44004453356E8 1.43004352507E8 1.36001691798E8 1.39004433555E8 2.52029437164E8 2.31056699668E8 2.57057099362E8 2.56055808864E8 2.40059089677E8 1.87020197438E8 1.67017014614E8 1.35001130848E8 3.65007605059E8 1.38002242996E8 1.64017354567E8 2.04016143988E8 1.85016212194E8 1.63014862026E8 1.30001140999E8 2.59055649068E8 2.6205230517E8 1.31001130996E8 3.48007175889E8 2.77022857958E8 2.38054336524E8 1.64041138933E8 1.62013017733E8 3.87004194899E8 1.90015610974E8 1.67014671154E8 2.46048705029E8 1.8001838102E8 2.36054366729E8 2.52024631564E8 1.65018519123E8 2.37053955009E8 3.85004455019E8 1.70015019051E8 1.69014451708E8 1.53014611395E8 2.35024150467E8 1.68038087381E8 1.68011785452E8 3.83004064063E8 1.51013008157E8 1.83016657701E8 2.6105057315E8 1.62018663186E8 2.56055528054E8 1.88016010241E8 1.66041346043E8 1.82012805336E8 1.38001671716E8 1.78051266734E8 1.7101650587E8 2.17020357664E8 1.53014250914E8 2.35018618922E8 1.78035097789E8 2.55058899516E8 2.45049444978E8 1.40001641711E8 2.59058329873E8 3.84003613752E8 1.94015978934E8 2.40053276313E8 3.87004555267E8 1.83022218813E8 1.84013777843E8 1.82016928422E8 1.33001581802E8 1.71020128101E8 1.90021727994E8 1.86021347679E8 1.38001591739E8 1.80019320228E8 2.57052947345E8 1.54014700851E8 2.53058389476E8 1.51004363747E8 1.8002096486E8 2.28018937605E8 1.80045566153E8 1.36002231959E8 1.79039267412E8 2.35051898445E8 1.55013899194E8 2.49050424509E8 1.65017582215E8 2.56026320674E8 2.59056949192E8 2.56053354833E8 1.74019322697E8 2.36058379258E8 2.5602125624E8 1.80044855919E8 3.69003092756E8 1.74014921094E8 1.76019363743E8 1.8401787192E8 1.50012609696E8 2.47023011198E8 2.54054326992E8 3.70003142883E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 3 3 2 0 2 4 1 1 2 2 0 0 1 0 3 3 2 2 1 1 2 2 3 2 1 3 1 2 3 0 3 3 2 2 0 2 0 2 2 2 2 2 2 0 3 3 2 1 4 47 47 47 48 46 33 29 0 6 3 28 29 26 13 0 48 43 0 7 37 43 19 7 7 25 12 42 23 42 41 22 41 6 21 25 11 39 17 17 5 8 20 40 14 47 24 15 18 1 14 30 34 12 37 19 48 42 1 49 6 23 43 8 22 21 21 1 33 33 33 1 23 45 10 48 3 28 34 16 2 17 46 9 42 23 40 48 41 13 45 32 16 4 24 15 25 10 40 45 4)
Average genome size in population (length): 107.016
Average program size in population (points): 141.738
Average percent parens in population: 0.240
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.041
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.28
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 292201576
--- Timings ---
Current time: 1559234657291 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Sort Vector problem report - generation 3
Test total error for best: 38150
Test mean error for best: 14.96078
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [129 2]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [18 -390]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -998 322 -469]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 379 -176 -938]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -297 -867]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -184 -221]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 708 -841]

Correct output: [-685 -628 -625]
| Program output: [-628 -625 -685]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -364 184 -983]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -506 393 -37]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -957 -894 -591 -563]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 471 -482 355 -59]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 201 -79 -218 -418]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [787 520 5]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 411 918 648 -223]

Correct output: [-877 -237 -56 415]
| Program output: [-237 415 -877 -56]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -556 -619]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -675 -798 -358]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -553 -806 -820 -741]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 977 -865 -670]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -811 -739 -763 -783]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -4 34 -999 -535]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431 -445]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865 -33]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172 -167]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267 -123]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -767 323 -223 692 47 20 -217 775 -356 -682]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33 -334]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616 -940]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975 -160]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 258 471 230 557 -293 -421 -62]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40 -883]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124 -741]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707 -758]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276 -85]

Correct output: [-674 -267 -11]
| Program output: [-267 -11 -674]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955 -228]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685 -317]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408 -302]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425 -378]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130 -810]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 938 -869 501 871 -735]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -49 -605 -202 -497 -390]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) integer_swap exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec exec_stackdepth) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 4 3 3 0 2 4 2 2 2 2 2 0 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 2 5 2 2 0 4 4 4 2 4 48 48 50 48 46 33 29 0 6 3 30 29 26 13 2 48 43 2 8 39 45 19 10 8 25 13 42 23 43 41 22 41 7 22 27 11 39 19 20 7 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 22 22 21 2 34 33 33 2 25 47 11 49 3 31 36 16 2 17 47 10 42 23 40 48 44 13 45 37 16 4 24 16 27 10 42 46 5]
Lexicase best number of elite cases: 157
Lexicase best total error: 2690
Lexicase best mean error: 10.76
Lexicase best size: 195
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) integer_swap exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec exec_stackdepth) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 4 3 3 0 2 4 2 2 2 2 2 0 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 2 5 2 2 0 4 4 4 2 4 48 48 50 48 46 33 29 0 6 3 30 29 26 13 2 48 43 2 8 39 45 19 10 8 25 13 42 23 43 41 22 41 7 22 27 11 39 19 20 7 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 22 22 21 2 34 33 33 2 25 47 11 49 3 31 36 16 2 17 47 10 42 23 40 48 44 13 45 37 16 4 24 16 27 10 42 46 5]
Zero cases best number of elite cases: 157
Zero cases best number of zero cases: 96
Zero cases best total error: 2690
Zero cases best mean error: 10.76
Zero cases best size: 195
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (811 811 812 807 812 807 807 807 812 806 812 812 806 812 811 812 812 807 812 806 812 807 805 812 807 812 810 807 812 812 807 811 807 812 807 812 812 812 807 805 809 806 807 812 812 812 807 806 807 812 334 389 417 331 400 414 400 417 344 398 344 400 415 398 398 397 398 345 344 400 400 400 344 398 328 328 398 398 326 415 326 327 342 397 415 344 400 398 400 398 326 398 397 398 330 415 327 397 344 398 29 174 1 273 240 689 601 28 81 302 420 256 240 81 244 29 28 30 419 81 29 378 352 1 186 29 252 72 286 1 248 186 150 762 700 256 351 347 760 693 344 160 330 348 185 150 77 317 29 624 39 379 341 714 346 1 680 397 170 435 331 364 1 368 344 352 415 344 3 325 343 342 211 29 427 417 337 355 71 373 713 381 1 13 402 304 1 290 374 28 258 319 325 361 709 1 321 403 75 329 380 355 1 342 376 341 386 75 398 461 705 387 247 354 2 404 29 379 371 312 81 311 296 69 343 266 321 32 681 693 341 372 69 731 326 361 1 339 331 1 352 683 411 371 366 253 365 395 424 245)
Population mean number of elite cases: 103.21
Count of perfect (error zero) individuals by case: (811 811 812 807 812 807 807 807 812 806 812 812 806 812 811 812 812 807 812 806 812 807 805 812 807 812 810 807 812 812 807 811 807 812 807 812 812 812 807 805 809 806 807 812 812 812 807 806 807 812 334 389 417 331 400 414 400 417 344 398 344 400 415 398 398 397 398 345 344 400 400 400 344 398 328 328 398 398 326 415 326 327 342 397 415 344 400 398 400 398 326 398 397 398 330 415 327 397 344 398 0 0 0 0 240 0 0 0 0 0 0 256 240 0 244 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 0 256 0 347 0 0 0 0 0 0 185 0 0 0 0 0 0 0 0 0 0 0 0 397 0 0 0 0 0 0 344 0 0 344 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 62.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) integer_swap exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec exec_stackdepth) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 4 3 3 0 2 4 2 2 2 2 2 0 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 2 5 2 2 0 4 4 4 2 4 48 48 50 48 46 33 29 0 6 3 30 29 26 13 2 48 43 2 8 39 45 19 10 8 25 13 42 23 43 41 22 41 7 22 27 11 39 19 20 7 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 22 22 21 2 34 33 33 2 25 47 11 49 3 31 36 16 2 17 47 10 42 23 40 48 44 13 45 37 16 4 24 16 27 10 42 46 5]
Total: 2690
Mean: 10.76
Genome size: 138
Size: 195
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 3.700570586124E10
Median total errors in population: 5502337835
Error averages by case: (1.05001450147E8 1.07001430145E8 1.05001450146E8 1.10001440146E8 1.05001450146E8 1.10001440146E8 1.10001440146E8 1.10001440146E8 1.05001450146E8 1.10001450147E8 1.05001450146E8 1.05001450146E8 1.10001450147E8 1.05001450146E8 1.04001450148E8 1.05001450146E8 1.05001450146E8 1.10001440146E8 1.05001450146E8 1.10001450147E8 1.05001450146E8 1.10001440146E8 1.10001690171E8 1.05001450146E8 1.10001440146E8 1.05001450146E8 1.08001430145E8 1.10001440146E8 1.05001450146E8 1.05001450146E8 1.10001440146E8 1.04001450148E8 1.10001440146E8 1.05001450146E8 1.10001440146E8 1.06001420145E8 1.05001450146E8 1.05001450146E8 1.10001440146E8 1.10001820184E8 1.08001440146E8 1.10001450147E8 1.10001440146E8 1.05001450146E8 1.05001450146E8 1.05001450146E8 1.10001440146E8 1.10001450147E8 1.10001440146E8 1.04001440147E8 1.17002391135E8 1.13002481027E8 1.11002400978E8 1.15002411145E8 1.14002421006E8 1.14002420978E8 1.14002421006E8 1.14002400973E8 1.13002421123E8 1.11002391015E8 1.13002421123E8 1.14002421006E8 1.14002400977E8 1.11002361015E8 1.11002371015E8 1.11002381017E8 1.11002371015E8 1.14002401119E8 1.13002421123E8 1.14002421006E8 1.14002421006E8 1.14002421006E8 1.13002401125E8 1.11002371015E8 1.19002361144E8 1.19002381144E8 1.11002361015E8 1.11002361015E8 1.19002371147E8 1.14002410977E8 1.19002381148E8 1.19002391145E8 1.15002391125E8 1.11002391017E8 1.15002410975E8 1.13002421123E8 1.14002421006E8 1.10002421018E8 1.14002421006E8 1.11002361015E8 1.1800238115E8 1.11002371015E8 1.11002391017E8 1.11002361015E8 1.16002411147E8 1.14002400977E8 1.19002381146E8 1.11002381017E8 1.13002421123E8 1.11002361015E8 1.31003512044E8 1.34004683533E8 1.30004543281E8 1.35004552689E8 1.31003511466E8 1.40004572183E8 1.54007123795E8 1.40004592114E8 1.22003511962E8 1.55007102784E8 1.28004522518E8 1.29003481438E8 1.31003511466E8 1.29003481948E8 1.27003541464E8 1.62007023618E8 1.56007063762E8 1.55007112918E8 1.27004622521E8 1.28003501951E8 1.29003482047E8 1.36004682505E8 1.4000461253E8 1.35004683265E8 1.56007103297E8 1.32003472041E8 1.58007053369E8 1.46007033205E8 1.60006972626E8 1.30004613283E8 1.27003541459E8 1.54007073424E8 1.35004553549E8 1.22003462041E8 1.28004572196E8 1.29003481438E8 1.40004642532E8 1.2700457206E8 1.24003542037E8 1.37004562181E8 1.60007073136E8 1.51006923896E8 1.43004542538E8 1.3000458294E8 1.46007032828E8 1.35004553549E8 1.54007103695E8 1.56007152824E8 1.31003482042E8 1.52006973784E8 1.80069854329E8 1.72076264553E8 1.98077454382E8 1.9407613373E8 1.82090845182E8 1.88060501504E8 1.68043897117E8 1.11002381017E8 3.81013865619E8 1.3400461325E8 1.64044967243E8 2.07043046534E8 1.76045135284E8 1.49018852599E8 1.13002421123E8 1.99078724323E8 2.15067068589E8 1.13002421123E8 3.64013936285E8 2.00060094516E8 1.85075961389E8 1.470432194E8 1.52017788248E8 4.49009084869E8 1.63041364082E8 1.56019551729E8 1.77062609336E8 1.67041033812E8 1.89080101242E8 1.83058107804E8 1.68042141118E8 1.94064227719E8 4.27010205206E8 1.46037541533E8 1.54039554574E8 1.45019431974E8 1.70058026403E8 1.450427283E8 1.49034557856E8 4.55009154094E8 1.44017818564E8 1.58038800115E8 1.92083729111E8 1.46025934015E8 2.05084753594E8 1.7204016308E8 1.48042746754E8 1.63034967756E8 1.27003581918E8 1.54042306297E8 1.51048639545E8 1.84054202121E8 1.45019311483E8 1.66056645056E8 1.65040408722E8 2.01088855274E8 1.75064209319E8 1.28003501915E8 1.97079615054E8 4.41007903863E8 2.0303792091E8 1.91064219518E8 4.29010185439E8 1.6304832139E8 1.62036880313E8 1.56039391017E8 1.29003512049E8 1.57047921253E8 1.74060752417E8 1.77048240687E8 1.22003501963E8 1.6904330273E8 2.08074151582E8 1.51019451385E8 1.96089825575E8 1.57007173951E8 1.86044477044E8 1.95054772224E8 1.52034875807E8 1.35004612195E8 1.64043368311E8 1.85071312575E8 1.44019569783E8 1.86061148362E8 1.500396746E8 1.90073478191E8 1.94077734467E8 1.9406980875E8 1.57025773774E8 1.78075273489E8 1.93054381488E8 1.54034195635E8 4.0700702296E8 1.58039483758E8 1.5602524455E8 1.61039944633E8 1.43017970261E8 1.76061327936E8 1.97066190878E8 4.15007063105E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 3 2 2 0 2 4 1 1 2 2 0 0 1 0 3 3 2 2 1 1 2 2 2 2 1 3 1 2 2 0 3 3 2 2 0 2 0 2 2 2 2 2 2 0 3 3 2 1 4 47 47 47 48 46 32 29 0 6 3 28 29 25 13 0 48 43 0 7 37 43 19 7 7 25 12 42 23 42 41 22 41 6 21 25 11 38 17 17 5 8 20 40 14 47 23 15 18 1 14 30 34 11 37 19 48 42 1 49 6 23 43 8 22 20 21 1 33 33 33 1 23 45 10 48 3 28 34 16 2 17 46 9 42 23 40 47 41 13 44 32 16 4 24 15 25 10 40 45 4)
Average genome size in population (length): 105.435
Average program size in population (points): 139.183
Average percent parens in population: 0.236
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.531
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.419
Error (vector) diversity:			 0.427
Behavioral diversity:				 0.431
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 451797362
--- Timings ---
Current time: 1559234787468 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Sort Vector problem report - generation 4
Test total error for best: 508184
Test mean error for best: 199.28784
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [129 2]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [18 -390]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -998 322 -469]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 379 -176 -938]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -297 -867]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -184 -221]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 708 -841]

Correct output: [-685 -628 -625]
| Program output: [-628 -625 -685]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -364 184 -983]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -506 393 -37]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -957 -894 -591 -563]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 471 -482 355 -59]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 201 -79 -218 -418]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [787 520 5]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 411 918 648 -223]

Correct output: [-877 -237 -56 415]
| Program output: [-237 415 -877 -56]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -556 -619]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -675 -798 -358]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 -820 -806 -553 16]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 977 -865 -670]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -811 -739 -763 -783]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -4 34 -999 -535]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431 -445]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865 -33]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172 -167]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267 -123]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -767 323 -223 692 47 20 -217 775 -356 -682]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33 -334]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616 -940]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 -975 -340 548 805 -416 934 -802 941 -731 510 755 119 97 -959 58 96 482 299 983 -816 -467 829 210 22]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 258 471 230 557 -293 -421 -62]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40 -883]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124 -741]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707 -758]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276 -85]

Correct output: [-674 -267 -11]
| Program output: [-267 -11 -674]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955 -228]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685 -317]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408 -302]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425 -378]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130 -810]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 938 -869 501 871 -735]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -49 -605 -202 -497 -390]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) vector_integer_reverse exec_pop (vector_integer_conj integer_mult) integer_swap exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec exec_stackdepth) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) vector_integer_reverse integer_dup) (exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ()))) ())) ()) ())))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 2 2 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 2 0 0 2 0 2 4 3 3 0 2 4 2 2 2 2 2 0 2 0 4 4 3 2 2 2 3 2 3 2 2 3 2 4 3 0 3 4 2 2 2 2 0 2 2 2 2 2 2 0 4 4 4 2 4 50 47 50 48 49 33 29 0 6 4 28 29 26 13 2 48 43 2 90009 39 43 20 10 8 25 50011 43 23 45 42 22 42 7 23 25 14 39 17 17 7 10 22 40 15 47 24 15 18 2 17 32 36 50012 38 20 49 42 2 49 6 23 44 9 22 22 21 2 33 33 33 2 25 47 13 49 5 31 36 20016 2 17 46 70009 42 28 40 48 44 13 48 37 16 4 26 16 27 10 40 46 5]
Lexicase best number of elite cases: 144
Lexicase best total error: 282704
Lexicase best mean error: 1130.816
Lexicase best size: 175
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_757} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_757 vector_integer_yank exec_s (exec_s () () ()) () ()) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 2 2 2 0 4 4 2 2 4 48 48 500087 500086 46 340058 29 0 9 3 30 310055 300052 14 0 500089 460080 0 8 410070 45 19 10 8 270044 13 42 290049 43 41 22 41 7 22 27 11 39 19 20 7 8 230038 440074 14 490085 270047 17 210035 2 180026 30 370064 12 37 200032 500086 43 2 500087 6 23 43 8 240040 220036 240038 2 34 350061 350061 2 250040 480084 11 500087 3 320054 370064 170027 2 200034 47 10 42 23 420072 500086 450080 160024 45 380062 170027 4 24 160024 290046 10 42 470082 4]
Zero cases best number of elite cases: 130
Zero cases best number of zero cases: 99
Zero cases best total error: 13963731
Zero cases best mean error: 55854.926
Zero cases best size: 170
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (765 797 779 786 779 787 788 786 779 787 779 779 788 779 790 779 779 785 779 788 779 787 778 779 787 779 796 786 779 779 788 792 787 779 787 790 779 779 786 779 793 788 786 779 779 779 786 786 789 793 317 378 420 332 382 399 381 421 324 385 324 381 399 385 385 386 385 334 324 382 381 381 352 385 352 352 385 385 341 400 340 350 355 385 408 324 381 401 381 385 341 385 385 386 331 399 350 385 324 385 47 1 10 262 280 1 646 16 66 377 393 256 276 67 270 1 17 47 394 67 47 351 337 10 1 47 262 60 294 10 277 2 154 738 1 256 338 334 750 1 367 162 358 327 206 153 80 353 47 622 31 393 285 700 312 8 640 385 246 1 353 379 9 370 324 373 1 324 13 301 376 1 231 17 407 389 1 372 59 2 670 352 1 16 381 307 8 328 340 16 270 301 355 371 687 1 350 425 43 1 337 311 8 334 1 300 390 43 395 503 1 375 254 362 1 394 47 1 390 354 66 1 261 56 293 1 283 24 1 680 370 378 58 1 1 367 4 308 335 8 319 669 418 1 356 248 338 377 356 277)
Population mean number of elite cases: 92.33
Count of perfect (error zero) individuals by case: (765 797 779 786 779 787 788 786 779 787 779 779 788 779 790 779 779 785 779 788 779 787 778 779 787 779 796 786 779 779 788 792 787 779 787 790 779 779 786 779 793 788 786 779 779 779 786 786 789 793 317 378 420 332 382 399 381 421 324 385 324 381 399 385 385 386 385 334 324 382 381 381 352 385 352 352 385 385 341 400 340 350 355 385 408 324 381 401 381 385 341 385 385 386 331 399 350 385 324 385 0 0 0 0 280 0 0 0 0 0 0 256 276 0 270 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 277 0 0 0 0 256 0 334 0 0 0 0 0 0 206 0 0 0 0 0 0 0 0 0 0 0 0 385 0 0 0 0 0 0 324 0 0 324 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 60.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) integer_swap exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec exec_stackdepth) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (integer_dup) (integer_inc vector_integer_shove) () vector_integer_subvec integer_dup_items) (in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 4 3 3 0 2 4 2 2 2 2 2 0 2 2 4 4 3 2 2 2 3 3 3 2 2 3 2 4 3 2 3 4 2 2 2 3 0 2 2 2 2 2 2 0 4 4 4 2 4 48 48 50 48 46 33 29 0 6 3 30 29 26 13 2 48 43 2 8 39 45 19 10 8 25 13 42 23 43 41 22 41 7 22 27 11 39 19 20 7 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 22 22 21 2 34 33 33 2 25 47 11 49 3 31 36 16 2 17 47 10 42 23 40 48 44 13 45 37 16 4 24 16 27 10 42 46 5]
Total: 2687
Mean: 10.748
Genome size: 156
Size: 222
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 3.6952429139482E10
Median total errors in population: 2000595505/2
Error averages by case: (1.12042034219E8 1.1208276828E8 1.11042034206E8 1.23083028304E8 1.11042034206E8 1.22083028304E8 1.22083018303E8 1.23083028304E8 1.11042034206E8 1.23083018303E8 1.11042034206E8 1.11042034206E8 1.22082748278E8 1.11042034206E8 1.11082848288E8 1.11042034206E8 1.11042034206E8 1.22083038306E8 1.11042034206E8 1.22083018303E8 1.11042034206E8 1.22083028304E8 1.2208518852E8 1.11042034206E8 1.22083028304E8 1.11042034206E8 1.10082798282E8 1.23083028304E8 1.11042034206E8 1.11042034206E8 1.22083018303E8 1.13082828284E8 1.22083028304E8 1.11042034206E8 1.22083028304E8 1.13082988303E8 1.11042034206E8 1.11042034206E8 1.23083028304E8 1.21086358637E8 1.13083048307E8 1.22083018303E8 1.23083028304E8 1.11042034206E8 1.11042034206E8 1.11042034206E8 1.23083028304E8 1.23083028304E8 1.22083008302E8 1.14082768281E8 1.20042775168E8 1.19043054991E8 1.1808394909E8 1.3208458931E8 1.21042844992E8 1.31084609176E8 1.21042854993E8 1.21083809074E8 1.20042815124E8 1.20083499083E8 1.20042815124E8 1.21042824993E8 1.2908461918E8 1.19083499086E8 1.20083499084E8 1.19083499084E8 1.20083499084E8 1.25042535102E8 1.20042825123E8 1.21042824991E8 1.21042854993E8 1.21042844993E8 1.17042575073E8 1.19083519086E8 1.31043815178E8 1.31043815179E8 1.19083499086E8 1.19083519086E8 1.30043025123E8 1.30084599176E8 1.31043815203E8 1.21042655063E8 1.2204253506E8 1.19083499086E8 1.31084609158E8 1.20042835124E8 1.21042844993E8 1.17083379056E8 1.21042854993E8 1.19083499086E8 1.31042695072E8 1.20083499084E8 1.20083499084E8 1.19083499084E8 1.31084619311E8 1.30084589178E8 1.31043825184E8 1.20083499084E8 1.20042825123E8 1.19083499086E8 1.270328949E8 1.56044387299E8 1.39084571184E8 1.51003212416E8 1.39004161381E8 1.54128074451E8 1.65030686081E8 1.65046336207E8 1.2406365793E8 1.64007622757E8 1.36043616352E8 1.2803318434E8 1.39034774455E8 1.29033164865E8 1.39065327524E8 1.68007503644E8 1.53004263471E8 1.59005612744E8 1.3704357635E8 1.29033234862E8 1.30033164902E8 1.56044386366E8 1.53128174786E8 1.56044387043E8 1.67004982962E8 1.39032934884E8 1.69004973118E8 1.61029855387E8 1.69005482473E8 1.38084661186E8 1.36065387519E8 1.62004993148E8 1.51003203233E8 1.24063667998E8 1.36043576038E8 1.29033164337E8 1.52128154789E8 1.34043685941E8 1.26032914929E8 1.58043886021E8 1.67007403106E8 1.67029866047E8 1.68046306554E8 1.40084540864E8 1.6302975495E8 1.5000321324E8 1.6000437336E8 1.67005032546E8 1.38033544952E8 1.61004443487E8 1.70110427286E8 1.60085494268E8 1.70106316445E8 1.61059501737E8 1.65195114797E8 1.74093344116E8 1.64069718963E8 1.20083499084E8 3.13016366077E8 1.41084301162E8 1.60111343042E8 1.78051927215E8 1.58072757611E8 1.33054136008E8 1.20042825123E8 1.7311312652E8 1.75104121841E8 1.20042825125E8 2.90035218808E8 1.82054023769E8 1.73196942452E8 1.47087303596E8 1.4901344767E8 3.87051349468E8 1.69064255178E8 1.44014821053E8 1.64096571765E8 1.62086817589E8 1.6321709471E8 1.78097100404E8 1.63060602207E8 1.70138984853E8 3.55053159806E8 1.46056602526E8 1.6107914766E8 1.30088018838E8 1.5713339311E8 1.44087042494E8 1.4809662364E8 3.91009474223E8 1.5408795539E8 1.59064272229E8 1.66196019764E8 1.40057917065E8 1.83201384732E8 1.79084346501E8 1.4307820018E8 1.53035297604E8 1.38065388072E8 1.53072169064E8 1.53117165316E8 1.74068402497E8 1.39049404191E8 1.63126701358E8 1.66034768003E8 1.77138019414E8 1.61116323517E8 1.37034755005E8 1.75108986792E8 3.79041297382E8 1.72096576802E8 1.7212538523E8 3.60057560625E8 1.56077593769E8 1.53028768901E8 1.470283792E8 1.29033204907E8 1.59077142901E8 1.70114006545E8 1.70101264852E8 1.2406365793E8 1.56030371042E8 1.74064229818E8 1.51087568004E8 1.72184523988E8 1.66032756431E8 1.77041406153E8 1.79087964693E8 1.44064978505E8 1.46087010375E8 1.57044918042E8 1.67121426646E8 1.45044181947E8 1.71152856899E8 1.48062466052E8 1.73177757622E8 1.66058302284E8 1.73082799603E8 1.46019022857E8 1.69152630228E8 1.70035389847E8 1.44025094404E8 3.27050547478E8 1.78074286118E8 1.54058657518E8 1.54023202622E8 1.40114249573E8 1.64109321932E8 1.78098913773E8 3.40006443165E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 2 0 1 4 1 1 2 2 0 0 1 0 2 3 2 2 1 1 2 2 2 1 1 3 1 2 2 0 2 3 2 1 0 2 0 2 1 2 2 2 2 0 3 3 2 1 4 47 47 47 48 46 32 29 0 6 2 28 29 25 13 0 48 42 0 7 37 43 18 7 7 25 12 41 23 42 40 22 41 6 21 25 11 38 17 17 5 8 20 40 14 47 23 15 18 1 13 30 34 11 37 18 48 42 1 49 6 22 43 8 22 20 21 1 32 33 33 1 22 45 10 48 2 28 34 15 2 17 46 9 41 22 40 47 41 13 44 32 16 4 23 15 25 10 40 45 4)
Average genome size in population (length): 111.402
Average program size in population (points): 148.097
Average percent parens in population: 0.241
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.844625
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.502
Error (vector) diversity:			 0.512
Behavioral diversity:				 0.513
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 619413842
--- Timings ---
Current time: 1559234929627 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Sort Vector problem report - generation 5
Test total error for best: 58124
Test mean error for best: 22.79373
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [1 -4]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-788 -812]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-192 -432]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-983 -595]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-859 -393]

Correct output: [-982 -43]
| Program output: [-43 -982]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-853 -423]

Correct output: [-166 -55]
| Program output: [-55 -166]

Correct output: [-566 -514]
| Program output: [-514 -566]

Correct output: [-325 -191]
| Program output: [-191 -325]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-494 -160]

Correct output: [-881 -643]
| Program output: [-643 -881]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-626 -795]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-929 -157]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-469 322 -998 -290]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-938 -176 379 -847]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-867 -297 -200]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-221 -184 -806]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-841 708 -910]

Correct output: [-685 -628 -625]
| Program output: [-685 -625 -628]

Correct output: [-983 -364 -104 184]
| Program output: [-983 184 -364 -104]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-37 393 -506 -41]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-563 -591 -894 -957 -114]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-59 355 -482 471 -737]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-418 -218 -79 201 -561]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-223 648 918 411 -468]

Correct output: [-877 -237 -56 415]
| Program output: [-56 -877 415 -237]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-619 -556 -190]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-358 -798 -675 -951]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -553 -806 -820 -741]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-670 -865 977 -803]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-783 -763 -739 -811 -549]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-535 -999 34 -4 -600]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [622 -423 957 955 -322 56 957 -140 -718 -961]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [56 71 -837 648 -860 547 -777 578 -551 529 -401 436 -742 -70]

Correct output: [-57 -14]
| Program output: [-57 -14]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-596 -409]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -767 323 -223 692 47 20 -217 775 -356 -682]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616 -940]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975 -160]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 258 471 230 557 -293 -421 -62]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266 -473]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-674 -11 -267]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568 -341]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [-735 871 501 -869 938 2]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3 -279]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-390 -497 -202 -605 -49 -86]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank})
Lexicase best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup integer_dup_items integer_rot integer_mod vector_integer_last integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) (exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) integer_dup vector_integer_set integer_yank integer_inc in1 vector_integer_reverse exec_pop (vector_integer_conj integer_mult) integer_swap exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_sub vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (integer_min) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup vector_integer_rot tag_exec_739 (integer_yank vector_integer_remove integer_pop) vector_integer_set vector_integer_dup integer_yank) () vector_integer_dup_times vector_integer_yankdup vector_integer_rot tag_exec_739 (integer_yank vector_integer_remove integer_pop) exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank) ())) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 10001 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 2 2 2 2 0 0 0 2 2 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 2 0 0 0 0 0 0 2 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 0 4 4 3 2 2 2 2 2 4 4 2 4 2 2 3 0 4 4 2 2 0 2 0 2 2 2 5 2 2 0 4 4 2 2 4 50 48 50 48 49 33 29 0 6 4 30 29 26 13 0 48 43 0 8 39 43 19 7 8 25 12 42 23 45 42 22 41 7 22 25 14 39 19 20 6 10 22 40 15 47 24 15 18 2 17 30 36 12 37 20 49 43 2 49 6 23 44 9 22 22 21 2 34 33 33 2 25 47 13 49 5 31 36 16 2 17 47 10 42 23 40 48 44 13 45 37 16 4 26 16 27 10 42 46 4]
Lexicase best number of elite cases: 134
Lexicase best total error: 12701
Lexicase best mean error: 50.804
Lexicase best size: 200
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_757} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_757 vector_integer_yank exec_s (exec_s () () ()) () ()) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 2 2 2 0 4 4 2 2 4 48 48 500087 500086 46 340058 29 0 9 3 30 310055 300052 14 0 500089 460080 0 8 410070 45 19 10 8 270044 13 42 290049 43 41 22 41 7 22 27 11 39 19 20 7 8 230038 440074 14 490085 270047 17 210035 2 180026 30 370064 12 37 200032 500086 43 2 500087 6 23 43 8 240040 220036 240038 2 34 350061 350061 2 250040 480084 11 500087 3 320054 370064 170027 2 200034 47 10 42 23 420072 500086 450080 160024 45 380062 170027 4 24 160024 290046 10 42 470082 4]
Zero cases best number of elite cases: 120
Zero cases best number of zero cases: 99
Zero cases best total error: 13963731
Zero cases best mean error: 55854.926
Zero cases best size: 170
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (724 747 734 749 734 749 750 748 734 750 734 734 749 734 748 734 734 748 734 750 734 749 748 734 749 734 750 749 734 734 750 751 749 734 748 752 734 734 749 749 748 749 749 734 734 734 748 748 749 746 342 357 346 383 347 309 349 344 300 373 300 347 309 374 374 374 374 340 300 347 347 346 369 374 401 402 374 374 400 309 401 375 374 374 310 300 346 377 347 374 400 374 374 374 382 310 402 375 300 374 1 11 18 287 330 2 1 26 75 393 2 260 343 78 330 4 27 27 1 76 1 359 367 20 6 1 1 56 305 18 341 29 3 2 21 260 368 300 2 21 409 188 397 3 209 2 72 325 1 628 11 363 283 1 280 2 671 374 314 14 335 421 5 405 300 368 16 300 16 269 415 16 249 39 364 365 6 404 31 36 1 331 1 14 412 273 4 300 345 24 277 2 408 1 681 371 395 440 58 10 4 247 12 357 3 1 351 58 382 558 7 1 259 333 6 354 1 2 426 405 75 18 279 29 257 13 236 11 7 1 341 345 54 13 16 416 6 267 348 5 1 1 489 286 4 1 348 1 288 313)
Population mean number of elite cases: 81.21
Count of perfect (error zero) individuals by case: (724 747 734 749 734 749 750 748 734 750 734 734 749 734 748 734 734 748 734 750 734 749 748 734 749 734 750 749 734 734 750 751 749 734 748 752 734 734 749 749 748 749 749 734 734 734 748 748 749 746 342 357 346 383 347 309 349 344 300 373 300 347 309 374 374 374 374 340 300 347 347 346 369 374 401 402 374 374 400 309 401 375 374 374 310 300 346 377 347 374 400 374 374 374 382 310 402 375 300 374 1 0 0 0 330 0 0 0 0 0 0 260 343 0 330 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 341 0 0 0 0 260 0 300 0 0 0 0 0 0 209 0 0 0 1 0 0 0 0 0 0 0 0 374 0 0 0 0 0 0 300 0 0 300 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 58.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_757} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_757 vector_integer_yank exec_s (exec_s () () ()) () ()) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 5 2 2 0 4 4 2 2 4 48 48 47 48 46 34 29 0 9 3 30 31 28 14 0 49 44 0 8 37 45 19 10 8 26 13 42 28 43 41 22 41 7 22 27 11 39 19 20 7 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 4]
Total: 2682
Mean: 10.728
Genome size: 129
Size: 173
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.8528791502924E10
Median total errors in population: 30843084
Error averages by case: (1.23001400153E8 1.20001280134E8 1.23001400143E8 1.24001250127E8 1.23001400143E8 1.24001250127E8 1.24001240126E8 1.23001270129E8 1.23001400143E8 1.24001240126E8 1.23001400143E8 1.23001400143E8 1.24001250127E8 1.23001400143E8 1.19001300133E8 1.23001400143E8 1.23001400143E8 1.25001250127E8 1.23001400143E8 1.24001240126E8 1.23001400143E8 1.24001250127E8 1.2500147015E8 1.23001400143E8 1.24001250127E8 1.23001400143E8 1.19001280131E8 1.24001250127E8 1.23001400143E8 1.23001400143E8 1.24001240126E8 1.18001290131E8 1.24001250127E8 1.23001400143E8 1.2300127013E8 1.1800127013E8 1.23001400143E8 1.23001400143E8 1.24001250127E8 1.25001600162E8 1.19001310133E8 1.24001250127E8 1.24001250127E8 1.23001400143E8 1.23001400143E8 1.23001400143E8 1.24001250128E8 1.25001250127E8 1.24001260128E8 1.19001320135E8 1.21041884953E8 1.3204207488E8 1.1904182495E8 1.26041804869E8 1.27042154903E8 1.26041825014E8 1.27042134901E8 1.20041824951E8 1.28042105E8 1.30041994867E8 1.28042105E8 1.27042114903E8 1.26041815013E8 1.31041984865E8 1.31041984865E8 1.31041984865E8 1.31041984865E8 1.23041884949E8 1.28042105E8 1.27042114903E8 1.27042154903E8 1.27042124904E8 1.19041914898E8 1.31041984865E8 1.25041824824E8 1.25041824822E8 1.31041984865E8 1.31041984865E8 1.25041824826E8 1.27041815011E8 1.25041824824E8 1.20041884885E8 1.1804188489E8 1.31041984865E8 1.26041785012E8 1.28042135004E8 1.27042124904E8 1.25041844874E8 1.27042154903E8 1.31041984865E8 1.25041864829E8 1.31041984865E8 1.31041984865E8 1.31041984865E8 1.26041794869E8 1.26041805012E8 1.25041844825E8 1.31041984863E8 1.28042105E8 1.31041984865E8 1.3204229581E8 1.58033026105E8 1.51032595907E8 1.60032775299E8 1.42042315016E8 1.48032574945E8 1.72043537389E8 1.50032754864E8 1.42042435753E8 1.70044006391E8 1.54032455223E8 1.43042565185E8 1.36042305011E8 1.4304256575E8 1.37042305041E8 1.80043817289E8 1.68044057416E8 1.73044576637E8 1.5303258522E8 1.42042555751E8 1.44042565782E8 1.57034455347E8 1.48032615236E8 1.58033025882E8 1.85043956833E8 1.36042295781E8 1.92044226988E8 1.80043736713E8 1.8804428639E8 1.48032645918E8 1.35042395021E8 1.87044587016E8 1.6103274611E8 1.39042405861E8 1.54032454873E8 1.43042565186E8 1.45032655244E8 1.56032594771E8 1.30042345876E8 1.57032764891E8 1.79043876648E8 1.85043927292E8 1.54032515186E8 1.50032525606E8 1.81043646216E8 1.61032756119E8 1.7104397734E8 1.85044036521E8 1.36042285779E8 1.85044077362E8 1.64074154278E8 1.91072152201E8 1.92083473754E8 1.67115696483E8 1.63105146588E8 1.74092994233E8 1.77070248876E8 1.31041984865E8 2.55053470169E8 1.44032585958E8 1.68060618241E8 1.650690791E8 1.82072067121E8 1.45043154847E8 1.28042105E8 1.96087323564E8 1.92080649453E8 1.28042135004E8 2.54053331074E8 1.79088127139E8 1.76089682006E8 1.72062331024E8 1.67059862362E8 3.05039678986E8 1.76061994988E8 1.60044373907E8 1.82062127949E8 1.64062764942E8 1.72093982657E8 1.76058547164E8 1.62052451917E8 1.85065557264E8 2.99046139615E8 1.58050271912E8 1.59060055959E8 1.57041734131E8 2.00061104483E8 1.67066120101E8 1.76065270458E8 3.1404078802E8 1.62058582764E8 1.68047980746E8 1.89098849362E8 1.45048706427E8 1.87153289934E8 1.82068174681E8 1.57057658169E8 1.5706729084E8 1.35042285768E8 1.53060508022E8 1.74069700027E8 1.90097434871E8 1.76043223331E8 1.97078215369E8 1.72064241152E8 1.68141759971E8 1.83070537955E8 1.37042245764E8 1.78092485081E8 3.10034567201E8 1.9305241193E8 1.86060858686E8 2.94045790058E8 1.65056482115E8 1.65053991033E8 1.64067942931E8 1.43042565781E8 1.82075501957E8 1.84097674759E8 1.78074742077E8 1.41042425754E8 1.6505402343E8 1.85092202059E8 1.57042493684E8 1.66139480428E8 1.77043727521E8 1.73072579755E8 2.12086233548E8 1.77101271931E8 1.45032544949E8 1.92066620137E8 1.84071761461E8 1.70039251314E8 1.79060827693E8 1.6005652528E8 1.97105159699E8 1.9208325351E8 1.66094451632E8 1.62053706097E8 1.99069091069E8 1.86082413849E8 1.79056047384E8 2.78054448082E8 1.77056684486E8 1.61052106974E8 1.48063276679E8 1.63040642079E8 1.82066226573E8 1.76099193332E8 2.94054108212E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 1 3 1 1 2 1 0 0 1 0 2 3 2 1 1 0 2 2 2 1 0 2 1 2 2 0 2 2 1 1 0 2 0 1 1 2 2 2 1 0 2 3 2 0 4 47 47 47 47 46 32 29 0 6 2 28 29 25 13 0 48 42 0 7 37 43 18 7 7 25 12 41 23 42 40 21 41 6 21 25 11 38 17 17 5 8 19 40 13 47 24 15 18 1 13 29 34 11 37 18 47 42 1 49 6 22 42 8 22 20 21 0 32 33 33 1 22 45 10 48 2 28 34 15 1 17 46 9 41 22 40 47 41 13 44 31 14 4 24 14 24 10 39 45 4)
Average genome size in population (length): 108.884
Average program size in population (points): 143.826
Average percent parens in population: 0.235
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.3280625
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.512
Error (vector) diversity:			 0.54
Behavioral diversity:				 0.545
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 786868049
--- Timings ---
Current time: 1559235075427 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Sort Vector problem report - generation 6
Test total error for best: 58112
Test mean error for best: 22.78902
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [1 -4]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-788 -812]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-192 -432]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-983 -595]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-859 -393]

Correct output: [-982 -43]
| Program output: [-43 -982]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-853 -423]

Correct output: [-166 -55]
| Program output: [-55 -166]

Correct output: [-566 -514]
| Program output: [-514 -566]

Correct output: [-325 -191]
| Program output: [-191 -325]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-494 -160]

Correct output: [-881 -643]
| Program output: [-643 -881]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-626 -795]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-929 -157]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-469 322 -998 -290]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-938 -176 379 -847]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-867 -297 -200]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-221 -184 -806]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-841 708 -910]

Correct output: [-685 -628 -625]
| Program output: [-685 -625 -628]

Correct output: [-983 -364 -104 184]
| Program output: [-983 184 -364 -104]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-37 393 -506 -41]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-563 -591 -894 -957 -114]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-59 355 -482 471 -737]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-418 -218 -79 201 -561]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-223 648 918 411 -468]

Correct output: [-877 -237 -56 415]
| Program output: [-56 -877 415 -237]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-619 -556 -190]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-358 -798 -675 -951]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -553 -806 -820 -741]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-670 -865 977 -803]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-783 -763 -739 -811 -549]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-535 -999 34 -4 -600]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-57 -14]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-596 -409]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-682 -356 775 -217 20 47 692 -223 323 -767 -392]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999 -91]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975 -160]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-62 -421 -293 557 230 471 258 -418]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266 -473]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-674 -11 -267]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568 -341]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [-735 871 501 -869 938 2]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3 -279]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-390 -497 -202 -605 -49 -86]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_757} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s})
Lexicase best program: (integer_dup vector_integer_concat exec_pop (integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap) in1 integer_dup vector_integer_concat integer_dup_items vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_757 vector_integer_yank integer_stackdepth exec_s () () ()) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 2 2 2 0 4 4 2 2 4 48 48 50 48 46 33 29 0 6 3 30 29 26 13 0 48 43 0 8 39 45 19 7 8 25 12 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 22 22 21 2 34 33 33 2 25 47 11 49 3 31 36 16 2 17 47 10 42 23 40 48 44 13 45 37 16 4 24 16 27 10 42 46 4]
Lexicase best number of elite cases: 123
Lexicase best total error: 2674
Lexicase best mean error: 10.696
Lexicase best size: 181
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction exec_do*range} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_652} {:close 0, :instruction exec_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_421} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup vector_integer_dup_items in1 vector_integer_last exec_dup (exec_dup (exec_s () (vector_integer_concat exec_pop (integer_add vector_integer_concat exec_do*range () vector_integer_take) integer_dec vector_integer_dup_times vector_integer_replace vector_integer_last exec_noop integer_mod exec_dup () exec_y_when_autoconstructing (vector_integer_swap exec_yank tag_exec_652 (exec_flush vector_integer_pushall) in1 exec_s (tagged_421) (exec_dup (vector_integer_flush integer_yankdup) vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup exec_s_when_autoconstructing (integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_swap exec_k_when_autoconstructing (vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat vector_integer_swap exec_k () () exec_s (vector_integer_length vector_integer_last integer_add vector_integer_swap integer_pop integer_dup) (exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (exec_s (integer_dup_items) (in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank) () vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take vector_integer_rot integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) integer_shove integer_dup) (exec_k_when_autoconstructing (exec_k () ()) ())) ())) ())))) ()) ()) ())))) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 2 2 2 0 4 4 2 2 4 48 48 10047 48 46 33 29 0 6 3 30 29 10027 13 0 10048 10043 0 8 39 45 19 7 8 10026 10012 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 10050 6 23 43 8 10023 10021 10022 2 34 33 33 2 10022 10045 11 49 3 31 10035 10016 2 10020 47 10 42 23 40 10048 44 13 45 37 10015 4 24 16 27 10 42 46 4]
Zero cases best number of elite cases: 121
Zero cases best number of zero cases: 100
Zero cases best total error: 172669
Zero cases best mean error: 690.676
Zero cases best size: 203
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (696 723 699 728 699 728 728 728 699 728 699 699 721 699 717 699 699 722 699 729 699 729 728 699 728 699 723 729 699 699 728 722 729 699 729 721 699 699 729 727 725 728 729 699 699 699 727 729 727 713 357 311 311 404 324 290 323 307 314 340 314 310 287 340 340 340 341 349 314 309 324 310 393 341 412 412 340 340 413 289 412 394 398 339 285 314 310 332 326 340 413 341 340 340 404 291 412 341 314 340 8 12 19 292 330 8 1 38 88 348 20 265 328 1 329 22 26 14 5 1 8 1 366 29 24 8 15 56 1 18 341 19 20 11 13 265 366 258 18 13 409 204 392 15 199 20 1 305 8 2 15 343 293 4 241 3 1 341 293 17 303 379 3 1 315 335 14 314 25 1 376 18 248 48 1 1 5 337 23 36 3 319 14 4 381 264 11 296 346 15 251 12 374 17 646 2 396 1 86 6 2 261 17 2 17 18 323 87 355 1 7 6 226 320 8 1 8 3 388 386 88 38 301 21 2 6 1 15 25 2 1 346 72 10 28 3 3 276 313 25 15 6 4 10 1 2 3 1 310 314)
Population mean number of elite cases: 70.83
Count of perfect (error zero) individuals by case: (696 723 699 728 699 728 728 728 699 728 699 699 721 699 717 699 699 722 699 729 699 729 728 699 728 699 723 729 699 699 728 722 729 699 729 721 699 699 729 727 725 728 729 699 699 699 727 729 727 713 357 311 311 404 324 290 323 307 314 340 314 310 287 340 340 340 341 349 314 309 324 310 393 341 412 412 340 340 413 289 412 394 398 339 285 314 310 332 326 340 413 341 340 340 404 291 412 341 314 340 8 0 0 0 330 0 0 0 0 0 0 265 328 1 329 0 0 0 0 1 8 0 0 0 0 8 0 0 1 0 341 0 0 0 0 265 0 258 0 0 0 0 0 0 199 0 0 0 8 0 0 0 0 0 0 0 0 341 0 0 0 0 0 0 315 0 0 314 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 56.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_714} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_add vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_714 vector_integer_yank exec_s (exec_s () () ()) () ()) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 5 2 2 0 4 4 2 2 4 48 48 47 48 46 34 29 0 6 3 30 31 28 13 0 49 44 0 8 37 45 19 7 8 26 12 42 28 43 41 22 41 7 22 27 11 39 19 20 6 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 4]
Total: 2673
Mean: 10.692
Genome size: 129
Size: 173
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.5409741068865E10
Median total errors in population: 28097463/2
Error averages by case: (1.18001720186E8 1.13001490164E8 1.20001710181E8 1.17001440155E8 1.20001710181E8 1.17001440155E8 1.17001440155E8 1.17001440155E8 1.20001710181E8 1.17001440155E8 1.20001710181E8 1.20001710181E8 1.17001490162E8 1.20001710181E8 1.15001570169E8 1.20001710181E8 1.20001710181E8 1.17001470161E8 1.20001710181E8 1.16001440155E8 1.20001710181E8 1.16001440155E8 1.17001440155E8 1.20001710181E8 1.17001440155E8 1.20001710181E8 1.14001500163E8 1.16001440155E8 1.20001710181E8 1.20001710181E8 1.17001440155E8 1.15001520164E8 1.16001440155E8 1.20001710181E8 1.16001440155E8 1.15001500164E8 1.20001710181E8 1.20001710181E8 1.17001440154E8 1.18001440155E8 1.13001490162E8 1.17001440155E8 1.16001440155E8 1.20001710181E8 1.20001710181E8 1.20001710181E8 1.18001440155E8 1.17001440154E8 1.18001440155E8 1.15001570172E8 1.1800202091E8 1.20002200937E8 1.20001881004E8 1.2300189083E8 1.24002010932E8 1.21001911054E8 1.24002010934E8 1.2200190101E8 1.24002000941E8 1.27002000905E8 1.24002000941E8 1.23002000948E8 1.2100191106E8 1.27002020904E8 1.27002020905E8 1.2500203091E8 1.26002030904E8 1.20001840922E8 1.24002000941E8 1.23002010949E8 1.24002010932E8 1.24002000946E8 1.20001760842E8 1.27002040903E8 1.19001750804E8 1.20001760803E8 1.27002020905E8 1.26002020907E8 1.200017508E8 1.23001911052E8 1.20001760803E8 1.24001760837E8 1.18001730824E8 1.28002020905E8 1.22001931062E8 1.24002010956E8 1.24002000946E8 1.20001970966E8 1.2300200093E8 1.27002040905E8 1.18001760818E8 1.27002020903E8 1.28002020903E8 1.2500203091E8 1.20001920836E8 1.2200191105E8 1.20001770817E8 1.27002040903E8 1.24002000941E8 1.27002020905E8 1.15002351829E8 1.28003263191E8 1.29003042973E8 1.300034524E8 1.28002491039E8 1.35003162021E8 1.59003503446E8 1.27003231949E8 1.30002271744E8 1.49006082794E8 1.3100305228E8 1.28003281311E8 1.19002321095E8 1.29002911746E8 1.27002241083E8 1.61003893368E8 1.49004213542E8 1.530062329E8 1.33003122276E8 1.25002231746E8 1.30002921831E8 1.29003532353E8 1.3500320232E8 1.27003272947E8 1.59004962924E8 1.18002311823E8 1.67004113068E8 1.59003952749E8 1.60004332556E8 1.24003132989E8 1.18002541063E8 1.57003873147E8 1.30003403197E8 1.29002581853E8 1.31003021953E8 1.29002911247E8 1.31003242331E8 1.31002871858E8 1.23002421871E8 1.33003852034E8 1.64003532745E8 1.56003903329E8 1.33003262277E8 1.31003162635E8 1.59003792185E8 1.30003473217E8 1.50006053603E8 1.59005012777E8 1.18002311822E8 1.5400456353E8 1.62043701558E8 1.63039160378E8 1.77082984051E8 1.80057930081E8 1.58059942416E8 1.66040349436E8 1.69060848285E8 1.27002020903E8 2.07014466591E8 1.26002883011E8 1.57043636716E8 1.63029455661E8 1.76026782972E8 1.30063076757E8 1.23002000941E8 1.8905824016E8 1.91051976229E8 1.24002010956E8 1.89009617156E8 1.7503679236E8 1.77053778008E8 1.57018566623E8 1.43011467645E8 2.37008246218E8 1.54024161939E8 1.4901492086E8 1.80045115202E8 1.74075576002E8 1.63053538971E8 1.700365749E8 1.45020319165E8 1.78038934634E8 2.21007596229E8 1.53023669555E8 1.61023012293E8 1.39012891275E8 1.67039612942E8 1.52017695698E8 1.80021395537E8 2.34007095135E8 1.41009478072E8 1.51068062786E8 1.72061646228E8 1.40014272943E8 1.76109995911E8 1.67026811212E8 1.43018264208E8 1.59022616139E8 1.24002231754E8 1.36066158584E8 1.54023816355E8 1.73044939969E8 1.52010950338E8 1.7903000097E8 1.75023516648E8 1.73076322805E8 1.71083560398E8 1.2700243176E8 1.7805297135E8 2.30005684739E8 1.70027949501E8 1.69046437633E8 2.26009216888E8 1.65027209206E8 1.55031518547E8 1.43024229234E8 1.29002911832E8 1.64035698264E8 1.54058962023E8 1.65035088607E8 1.29002291749E8 1.48021180538E8 1.72051628923E8 1.46016190828E8 1.67067602784E8 1.58005823822E8 1.67030015326E8 2.01039999114E8 1.65063328259E8 1.26003032019E8 1.67019905866E8 1.82036098347E8 1.55059893483E8 1.76074808797E8 1.54022501941E8 1.71063205609E8 1.78054640677E8 1.56045716916E8 1.48022502658E8 1.86035728417E8 1.75078263459E8 1.68067648229E8 2.06005103439E8 1.54031891817E8 1.43018143538E8 1.53023152496E8 1.54011349243E8 1.64039594525E8 1.65040318696E8 2.1600684379E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 1 2 1 1 2 1 0 0 0 0 2 3 2 1 0 0 1 2 2 1 0 2 1 0 2 0 2 2 1 1 0 2 0 1 1 2 2 2 1 0 2 2 2 0 3 47 47 47 47 46 32 28 0 6 2 28 29 25 12 0 48 42 0 7 36 43 18 7 7 24 11 41 23 42 40 21 41 6 20 25 11 38 17 17 5 8 19 40 13 47 23 15 17 1 12 28 34 11 36 18 47 42 1 49 5 22 41 8 22 20 20 0 32 33 33 1 22 45 10 47 2 27 34 15 1 16 46 9 41 22 39 47 41 13 44 31 14 3 23 13 24 9 39 45 4)
Average genome size in population (length): 109.644
Average program size in population (points): 144.449
Average percent parens in population: 0.234
Minimum age in population: 6.0
Maximum age in population: 10.6875
Average age in population: 8.7639375
Median age in population: 8.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.542
Error (vector) diversity:			 0.582
Behavioral diversity:				 0.588
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 953394004
--- Timings ---
Current time: 1559235222257 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Sort Vector problem report - generation 7
Test total error for best: 58112
Test mean error for best: 22.78902
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [1 -4]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-788 -812]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-192 -432]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-983 -595]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-859 -393]

Correct output: [-982 -43]
| Program output: [-43 -982]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-853 -423]

Correct output: [-166 -55]
| Program output: [-55 -166]

Correct output: [-566 -514]
| Program output: [-514 -566]

Correct output: [-325 -191]
| Program output: [-191 -325]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-494 -160]

Correct output: [-881 -643]
| Program output: [-643 -881]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-626 -795]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-929 -157]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-469 322 -998 -290]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-938 -176 379 -847]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-867 -297 -200]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-221 -184 -806]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-841 708 -910]

Correct output: [-685 -628 -625]
| Program output: [-685 -625 -628]

Correct output: [-983 -364 -104 184]
| Program output: [-983 184 -364 -104]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-37 393 -506 -41]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-563 -591 -894 -957 -114]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-59 355 -482 471 -737]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-418 -218 -79 201 -561]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-223 648 918 411 -468]

Correct output: [-877 -237 -56 415]
| Program output: [-56 -877 415 -237]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-619 -556 -190]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-358 -798 -675 -951]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -553 -806 -820 -741]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-670 -865 977 -803]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-783 -763 -739 -811 -549]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-535 -999 34 -4 -600]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-57 -14]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-596 -409]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-682 -356 775 -217 20 47 692 -223 323 -767 -392]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999 -91]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975 -160]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-62 -421 -293 557 230 471 258 -418]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266 -473]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-674 -11 -267]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568 -341]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [-735 871 501 -869 938 2]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3 -279]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-390 -497 -202 -605 -49 -86]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_first} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth exec_swap (integer_rot vector_integer_first integer_dup_times exec_dup_items exec_shove () vector_integer_set integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap) (in1) vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 2 2 0 0 0 2 0 2 2 0 0 2 0 2 2 2 0 0 2 0 0 0 0 2 0 0 0 2 0 2 0 2 0 2 3 2 2 2 4 4 3 0 3 2 2 2 0 2 4 4 4 2 0 2 4 4 2 4 2 2 4 0 2 2 2 2 2 2 2 4 2 2 2 3 5 2 3 4 2 4 2 2 3 49 47 49 49 49 34 29 0 6 2 28 29 27 12 2 49 43 2 9 40 42 18 7 7 24 11 42 23 46 42 22 43 8 24 26 13 39 18 18 6 10 21 40 15 49 24 15 17 2 17 31 35 12 39 19 49 43 2 49 7 21 43 9 23 22 20 2 32 33 33 0 24 46 13 50 4 31 37 15 4 16 47 10 42 29 39 49 45 14 48 36 17 3 25 16 28 12 40 47 4]
Lexicase best number of elite cases: 122
Lexicase best total error: 2720
Lexicase best mean error: 10.88
Lexicase best size: 204
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction vector_integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_dup_items} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction vector_integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_dup_items} {:close 1, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_first} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_yank} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_indexof vector_integer_concat vector_integer_reverse exec_pop (vector_integer_dup_times exec_s (in1 vector_integer_dup_times vector_integer_dup_times exec_s (integer_shove in1) (vector_integer_rot) (vector_integer_swap) exec_pop () integer_swap vector_integer_flush vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_dup_times (integer_inc) exec_dup_items) (vector_integer_reverse) (integer_div exec_do*times (exec_dup_items exec_s (integer_shove in1) (vector_integer_rot) (vector_integer_swap) exec_pop () integer_swap vector_integer_flush vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_dup_times (integer_inc) exec_dup_items) vector_integer_shove) vector_integer_first) in1) (vector_integer_yank) vector_integer_subvec) () in1 vector_integer_nth integer_min exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_pushall exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_conj integer_dup_items) in1 vector_integer_reverse in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup vector_integer_rot tag_exec_739 (integer_yank vector_integer_remove integer_pop) exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 5 5 2 2 0 4 4 2 2 4 48 48 50 48 46 33 29 0 9 3 30 31 26 14 0 500050 44 0 8 410041 45 19 110011 8 270027 12 42 290029 43 41 22 41 7 22 27 11 38 19 20 10006 8 22 42 14 47 25 17 18 2 13 30 370037 12 37 19 48 44 2 50 6 23 43 8 240024 220022 23 2 34 33 34 2 250025 45 11 500050 3 28 370037 16 2 20 47 10 42 24 420042 500050 41 15 45 32 16 4 24 15 26 10 42 45 4]
Zero cases best number of elite cases: 110
Zero cases best number of zero cases: 99
Zero cases best total error: 4462703
Zero cases best mean error: 17850.812
Zero cases best size: 177
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (683 721 678 727 678 729 728 732 678 726 678 678 733 678 685 678 679 730 678 729 678 730 729 678 730 678 721 729 678 678 728 721 730 678 730 717 678 678 727 731 719 729 730 678 678 678 727 729 730 702 326 348 319 391 351 301 349 318 259 346 259 345 301 344 344 344 344 306 259 343 351 344 340 344 380 380 344 345 379 302 380 356 356 341 296 259 344 337 350 344 379 341 342 346 393 303 379 346 259 344 13 21 46 10 271 9 2 24 7 321 21 202 272 38 318 23 15 16 5 38 15 8 1 90 1 13 45 62 38 32 290 56 60 28 28 203 1 238 20 27 353 201 401 6 195 60 4 302 13 63 15 1 1 13 240 6 1 344 317 23 290 382 4 45 261 291 25 259 28 9 10 45 250 1 45 47 7 355 23 49 9 288 15 2 4 252 28 278 6 22 249 6 350 31 2 4 389 45 1 4 6 265 26 10 20 52 3 1 2 19 8 6 3 279 12 46 15 11 372 388 7 62 1 2 2 17 10 12 76 6 50 347 87 38 53 50 8 1 275 43 38 7 59 49 9 2 12 2 322 329)
Population mean number of elite cases: 65.49
Count of perfect (error zero) individuals by case: (683 721 678 727 678 729 728 732 678 726 678 678 733 678 685 678 679 730 678 729 678 730 729 678 730 678 721 729 678 678 728 721 730 678 730 717 678 678 727 731 719 729 730 678 678 678 727 729 730 702 326 348 319 391 351 301 349 318 259 346 259 345 301 344 344 344 344 306 259 343 351 344 340 344 380 380 344 345 379 302 380 356 356 341 296 259 344 337 350 344 379 341 342 346 393 303 379 346 259 344 13 0 0 0 271 0 0 0 7 0 0 202 272 38 318 0 0 0 0 38 15 0 0 0 1 13 0 0 38 0 290 0 0 0 0 203 0 238 0 0 0 0 0 0 195 0 0 0 13 0 0 0 0 0 0 0 0 344 0 0 0 0 0 0 261 0 0 259 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 15 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 55.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_714} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_add vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_714 vector_integer_yank exec_s (exec_s () () ()) () ()) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 5 2 2 0 4 4 2 2 4 48 48 47 48 46 34 29 0 6 3 30 31 28 13 0 49 44 0 8 37 45 19 7 8 26 12 42 28 43 41 22 41 7 22 27 11 39 19 20 6 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 4]
Total: 2673
Mean: 10.692
Genome size: 129
Size: 173
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.478936619333E10
Median total errors in population: 10085469/2
Error averages by case: (1.08001930209E8 1.04001640175E8 1.11001930211E8 1.10001540163E8 1.11001930211E8 1.07001540164E8 1.08001550164E8 1.06001530162E8 1.11001930211E8 1.10001550164E8 1.11001930211E8 1.11001930211E8 1.06001520161E8 1.11001930211E8 1.06002000209E8 1.11001930211E8 1.10001930211E8 1.09001520161E8 1.11001930211E8 1.07001550164E8 1.11001930211E8 1.07001540163E8 1.08001540163E8 1.11001930211E8 1.07001540163E8 1.11001930211E8 1.04001660175E8 1.07001550164E8 1.11001930211E8 1.11001930211E8 1.07001550165E8 1.04001640175E8 1.07001540163E8 1.11001930211E8 1.07001540163E8 1.08001640175E8 1.11001930211E8 1.11001930211E8 1.10001540163E8 1.06001540163E8 1.06001650175E8 1.07001550164E8 1.07001540163E8 1.11001930211E8 1.11001930211E8 1.11001930211E8 1.10001530163E8 1.07001550164E8 1.07001540163E8 1.07001800191E8 1.14002030961E8 1.18043174956E8 1.1700259105E8 1.20001880855E8 1.25002020854E8 1.18001841039E8 1.2400204086E8 1.1600387118E8 1.25002041034E8 1.26002100899E8 1.25002041035E8 1.24002030865E8 1.1700183104E8 1.25002140903E8 1.28002120899E8 1.26002210905E8 1.28002250889E8 1.15001860989E8 1.25002041035E8 1.24002050867E8 1.25002020854E8 1.24002050866E8 1.14001760933E8 1.26002140902E8 1.17001690861E8 1.17001690862E8 1.25002160903E8 1.260021909E8 1.17001680863E8 1.18001841036E8 1.17001690861E8 1.14001860902E8 1.15001760895E8 1.29002140901E8 1.22001881041E8 1.2500203104E8 1.25002030863E8 1.1600248099E8 1.25002020855E8 1.25002160903E8 1.15001720869E8 1.25002160909E8 1.29002160899E8 1.26002160896E8 1.16001820858E8 1.17001851035E8 1.16001710868E8 1.26002130898E8 1.25002041034E8 1.25002140902E8 1.1800227181E8 1.26003463147E8 1.28003352933E8 1.29003552411E8 1.23002461203E8 1.2600371213E8 1.58003533432E8 1.26003282003E8 1.30002511737E8 1.50003862632E8 1.33003422325E8 1.32003461444E8 1.19002291221E8 1.33002721639E8 1.25002281085E8 1.5700370339E8 1.56004283498E8 1.55003832758E8 1.34003442315E8 1.30002351651E8 1.33002721779E8 1.26003482454E8 1.26003182352E8 1.24003512852E8 1.70004082796E8 1.21002271805E8 1.71004172984E8 1.71004402735E8 1.68004112443E8 1.2600340296E8 1.20002611159E8 1.66004143033E8 1.27003583108E8 1.26002581817E8 1.34003341958E8 1.33002711356E8 1.23003062361E8 1.36003711959E8 1.19020873691E8 1.29003322015E8 1.5600358285E8 1.6400410326E8 1.23003192334E8 1.32003402636E8 1.67004402228E8 1.28003563095E8 1.53003933402E8 1.69004082646E8 1.19002331811E8 1.65004443405E8 1.65059222636E8 1.66105256193E8 1.75049140389E8 1.75085322799E8 1.69053551377E8 1.69036649008E8 1.73029744455E8 1.25002200903E8 1.85011056421E8 1.20003223019E8 1.68030964611E8 1.7303470581E8 1.75029362827E8 1.34014391642E8 1.23002041035E8 1.92074830799E8 1.79054496294E8 1.25002031039E8 1.75010447248E8 1.77047903068E8 1.71049177762E8 1.61071941566E8 1.45043960667E8 1.9901125676E8 1.59035912979E8 1.54053314606E8 1.72076398207E8 1.74029821217E8 1.64099603415E8 1.71047816236E8 1.60080344629E8 1.79043284588E8 2.03034218946E8 1.70067463405E8 1.59022732116E8 1.38011461119E8 1.62073376027E8 1.57017735553E8 1.73022935574E8 1.94007305303E8 1.42016008741E8 1.64072913248E8 1.61056576047E8 1.37021743626E8 1.72145279975E8 1.60073415785E8 1.43012893835E8 1.55019775792E8 1.25002201749E8 1.40018383805E8 1.70030215911E8 1.73051430401E8 1.60011930227E8 1.70047672131E8 1.69018986272E8 1.78067081596E8 1.78036215276E8 1.21002331763E8 1.87047010509E8 1.95025946884E8 1.6903420957E8 1.68050107746E8 1.96013507639E8 1.71026479017E8 1.74033668231E8 1.56021968832E8 1.33002671777E8 1.66056619645E8 1.5404357994E8 1.59043519377E8 1.3200246173E8 1.58023440136E8 1.75116544521E8 1.42016821029E8 1.73111496785E8 1.61003433588E8 1.67037985948E8 1.93105355448E8 1.55053907271E8 1.26003142039E8 1.69021305818E8 1.77036688475E8 1.55011398632E8 1.71071698729E8 1.68023461455E8 1.62066855361E8 1.72050550635E8 1.67106382218E8 1.4702115253E8 1.77041968641E8 1.65050260538E8 1.68024183647E8 1.76005173527E8 1.56039612709E8 1.4601514333E8 1.6003909368E8 1.71010909004E8 1.64042104828E8 1.62051039795E8 1.88005733832E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0 1 2 1 0 2 1 0 0 0 0 2 3 2 1 0 0 1 1 2 0 0 2 1 0 2 0 2 2 1 1 0 1 0 1 1 2 2 2 1 0 2 2 2 0 3 47 46 46 47 46 32 28 0 6 2 28 29 25 12 0 48 42 0 7 36 42 18 7 6 24 11 41 23 42 40 21 41 6 20 24 11 38 17 16 5 8 19 40 13 46 23 15 17 0 12 28 34 11 36 18 47 41 0 48 5 21 41 7 22 20 20 0 32 33 33 0 22 44 9 47 2 27 34 15 1 16 46 9 41 22 39 47 40 13 44 31 14 3 23 13 24 9 39 45 4)
Average genome size in population (length): 109.213
Average program size in population (points): 144.594
Average percent parens in population: 0.237
Minimum age in population: 7.0
Maximum age in population: 12.109375
Average age in population: 10.316
Median age in population: 10.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.546
Error (vector) diversity:			 0.59
Behavioral diversity:				 0.594
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 1109721798
--- Timings ---
Current time: 1559235363724 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Sort Vector problem report - generation 8
Test total error for best: 28113
Test mean error for best: 11.02471
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [1 -4]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-788 -812]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-192 -432]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-983 -595]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-859 -393]

Correct output: [-982 -43]
| Program output: [-43 -982]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-853 -423]

Correct output: [-166 -55]
| Program output: [-55 -166]

Correct output: [-566 -514]
| Program output: [-514 -566]

Correct output: [-325 -191]
| Program output: [-191 -325]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-494 -160]

Correct output: [-881 -643]
| Program output: [-643 -881]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-626 -795]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-929 -157]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-469 322 -998 -290]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-938 -176 379 -847]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-867 -297 -200]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-221 -184 -806]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-841 708 -910]

Correct output: [-685 -628 -625]
| Program output: [-685 -625 -628]

Correct output: [-983 -364 -104 184]
| Program output: [-983 184 -364 -104]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-37 393 -506 -41]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-563 -591 -894 -957 -114]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-59 355 -482 471 -737]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-418 -218 -79 201 -561]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-223 648 918 411 -468]

Correct output: [-877 -237 -56 415]
| Program output: [-56 -877 415 -237]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-619 -556 -190]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-358 -798 -675 -951]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -553 -806 -820 -741]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-670 -865 977 -803]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-783 -763 -739 -811 -549]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-535 -999 34 -4 -600]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192 -861]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376 -897]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752 -589]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916 -404]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540 -6]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-57 -14]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148 -490]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510 -811]

Correct output: [-596 -409]
| Program output: [-596 -409]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257 -636]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-682 -356 775 -217 20 47 692 -223 323 -767 -392]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660 -784]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999 -91]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389 -761]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975 -160]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-62 -421 -293 557 230 471 258 -418]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504 -736]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880 -466]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484 -146]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717 -153]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424 -354]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266 -473]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27 -832]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215 -703]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969 -631]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268 -907]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677 -812]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874 -173]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255 -535]

Correct output: [-674 -267 -11]
| Program output: [-674 -11 -267]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675 -431]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724 -758]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370 -75]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697 -30]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555 -243]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23 -540]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801 -261]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295 -472]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142 -380]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959 -810]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365 -780]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735 -100]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568 -341]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573 -568]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24 -672]

Correct output: [-869 -735 2 501 871 938]
| Program output: [-735 871 501 -869 938 2]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3 -279]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856 -921]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340 -522]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-390 -497 -202 -605 -49 -86]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_dup (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 2 2 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 2 0 2 0 0 0 0 0 0 0 2 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 0 4 4 3 2 0 2 4 2 2 4 2 2 4 0 2 0 2 2 2 2 2 2 2 2 2 2 5 2 3 4 2 4 2 2 3 50 47 49 48 49 33 29 0 6 4 28 29 27 13 2 49 43 2 9 39 43 18 7 8 24 11 42 23 45 42 22 43 8 24 25 14 39 18 18 6 10 22 40 15 47 24 15 18 2 17 31 36 12 39 20 49 43 2 49 7 21 44 9 23 22 20 2 32 33 33 0 24 46 13 49 5 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 26 16 27 12 40 46 4]
Lexicase best number of elite cases: 121
Lexicase best total error: 2694
Lexicase best mean error: 10.776
Lexicase best size: 191
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_714} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_do*times (integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) (vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_add vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup vector_integer_remove)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_714 vector_integer_yank exec_s (exec_s () () ()) () ()) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 5 2 2 0 4 4 2 2 4 48 48 47 48 46 34 29 0 6 3 30 31 28 13 0 49 44 0 8 37 45 19 7 8 26 12 42 28 43 41 22 41 7 22 27 11 39 19 20 6 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 4]
Zero cases best number of elite cases: 107
Zero cases best number of zero cases: 99
Zero cases best total error: 2673
Zero cases best mean error: 10.692
Zero cases best size: 173
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (729 745 730 756 730 759 756 757 730 755 730 730 758 730 741 730 731 754 730 758 730 758 756 730 758 730 748 758 730 730 758 749 758 730 757 743 730 730 755 754 742 756 757 730 730 730 756 757 756 739 365 334 299 426 340 284 336 298 306 327 306 334 282 325 325 326 326 333 306 333 339 335 360 327 398 396 326 326 396 284 397 373 371 325 281 305 335 316 339 325 397 324 324 325 426 283 397 326 306 325 19 82 1 20 302 40 4 24 52 332 17 201 313 93 364 55 45 39 11 90 41 3 33 2 39 19 97 23 90 1 327 98 110 63 13 203 33 242 63 9 350 235 2 11 196 109 3 379 19 165 8 5 3 41 201 44 2 325 359 77 310 433 8 78 305 338 53 306 56 3 31 124 298 1 108 117 2 380 16 90 54 267 17 1 39 1 67 2 45 52 238 7 401 42 69 2 1 72 31 35 5 1 58 8 57 72 39 32 38 67 51 9 40 1 64 108 41 68 401 1 52 115 8 32 4 40 7 8 135 35 111 336 100 62 92 1 51 3 1 81 58 42 129 45 9 1 11 6 1 2)
Population mean number of elite cases: 67.37
Count of perfect (error zero) individuals by case: (729 745 730 756 730 759 756 757 730 755 730 730 758 730 741 730 731 754 730 758 730 758 756 730 758 730 748 758 730 730 758 749 758 730 757 743 730 730 755 754 742 756 757 730 730 730 756 757 756 739 365 334 299 426 340 284 336 298 306 327 306 334 282 325 325 326 326 333 306 333 339 335 360 327 398 396 326 326 396 284 397 373 371 325 281 305 335 316 339 325 397 324 324 325 426 283 397 326 306 325 19 0 0 0 302 0 0 0 52 0 0 201 313 93 364 0 0 0 0 90 41 0 0 0 39 19 0 0 90 0 327 0 0 0 0 203 0 242 0 0 0 0 0 0 196 0 0 0 19 0 0 0 0 0 0 0 0 325 0 0 0 0 0 0 305 0 0 306 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31 0 0 0 0 0 0 0 0 32 0 0 0 0 0 0 0 0 41 0 0 0 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 57.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_last} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction 211} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction []} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction tag_integer_714} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items vector_integer_nth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last exec_stackdepth integer_swap exec_s_when_autoconstructing (vector_integer_rot vector_integer_yankdup exec_yankdup integer_rot exec_do*range (integer_dup_items integer_rot integer_mod vector_integer_last) integer_swap integer_min vector_integer_stackdepth exec_rot (vector_integer_flush vector_integer_flush integer_yankdup) (vector_integer_subvec integer_yankdup integer_mod) (vector_integer_remove) integer_stackdepth) (exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_yank integer_inc in1) vector_integer_reverse exec_pop (vector_integer_conj integer_mult) exec_yankdup exec_do*times (exec_dup_times (vector_integer_shove vector_integer_dup exec_do*vector_integer (exec_stackdepth exec_k (integer_add vector_integer_remove vector_integer_shove) (211 vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_indexof) (vector_integer_butlast) ([] vector_integer_pushall exec_yank integer_div vector_integer_reverse) exec_do*count () integer_pop) vector_integer_dup_items exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup vector_integer_conj exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (vector_integer_swap vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse in1 integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup vector_integer_remove)) (vector_integer_dup_times exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) vector_integer_rot exec_k (tag_integer_714 vector_integer_yank exec_s (exec_s () () ()) () ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 2 4 3 2 0 2 4 2 2 2 2 0 0 2 2 4 4 3 2 2 2 2 3 4 4 2 4 2 2 3 0 4 4 2 2 0 3 0 2 2 2 5 2 2 0 4 4 2 2 4 48 48 47 48 46 34 29 0 6 3 30 31 28 13 0 49 44 0 8 37 45 19 7 8 26 12 42 28 43 41 22 41 7 22 27 11 39 19 20 6 8 20 42 14 47 25 17 19 2 14 30 34 12 37 19 48 43 2 50 6 23 43 8 23 21 23 2 34 35 34 2 23 45 11 48 3 28 35 16 2 20 47 10 42 23 41 49 41 16 45 32 16 4 24 15 25 10 42 45 4]
Total: 2673
Mean: 10.692
Genome size: 129
Size: 172
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 2.5394072196658E10
Median total errors in population: 1055509/2
Error averages by case: (9.2002570267E7 7.2043514365E7 9.3002550265E7 7.1043414355E7 9.4002540264E7 6.9043404354E7 7.0043424356E7 7.0043414355E7 9.4002540264E7 7.1043424356E7 9.4002540264E7 9.4002540264E7 7.2043394352E7 9.4002540264E7 7.304363437E7 9.4002540264E7 9.3002540264E7 7.4043414354E7 9.4002540264E7 6.9043414355E7 9.4002540264E7 7.0043404354E7 7.1043414355E7 9.4002540264E7 7.0043404354E7 9.4002540264E7 7.3043484361E7 7.0043404354E7 9.4002540264E7 9.3002550265E7 6.9043414355E7 6.9043514365E7 6.9043414355E7 9.4002540264E7 7.0043414355E7 7.2043484367E7 9.4002540264E7 9.4002540264E7 7.1043414356E7 7.1043434357E7 7.1043554369E7 7.1043414355E7 7.0043414355E7 9.4002540264E7 9.4002540264E7 9.4002540264E7 7.2043404354E7 7.0043414355E7 7.0043424356E7 7.6043574369E7 8.9044455169E7 9.8003461109E7 8.2044355348E7 7.8044285103E7 1.05003301103E8 7.7044315388E7 1.0500331111E8 8.4044345341E7 1.06003311166E8 9.8003211166E7 1.06003311166E8 1.0500331111E8 7.8044295393E7 1.00003231165E8 1.06003211159E8 9.9003251162E7 1.06003281156E8 8.804435524E7 1.06003311166E8 1.06003321109E8 1.06003301103E8 1.0500331111E8 8.6044245183E7 1.00003231161E8 8.604425511E7 8.6044285113E7 1.00003231163E8 1.07003221157E8 8.4044245118E7 7.7044295392E7 8.4044295116E7 9.0044295147E7 8.9044275149E7 9.9003241164E7 7.8044315393E7 1.0600331117E8 1.0500331111E8 8.3044255308E7 1.05003311106E8 1.00003231165E8 8.5044255118E7 9.9003241168E7 1.00003281164E8 1.00003241165E8 7.5044285104E7 7.7044295391E7 8.4044295121E7 9.9003221163E7 1.06003311166E8 1.00003211164E8 9.6034785066E7 1.04044137195E8 1.02043896967E8 1.03044056577E8 9.103488453E7 8.9084660331E7 9.1029056283E7 8.9084840276E7 1.04004171938E8 9.9029425362E7 1.01043636535E8 1.08004971739E8 8.7034844514E7 1.11004221807E8 8.2034794396E7 9.4029406147E7 1.0602969624E8 9.6029625584E7 1.03043856516E8 1.11004291818E8 1.10004221935E8 1.05044076691E8 8.7084640571E7 1.05044106857E8 1.24003892931E8 8.6034855092E7 1.150039732E8 1.10003772998E8 1.18003972562E8 9.8044237001E7 7.9034904485E7 1.12004063272E8 1.03044067153E8 1.00004432036E8 1.00043486181E8 1.10004221652E8 9.0084630568E7 1.11044266127E8 8.3034635117E7 1.06043876264E8 9.2029565628E7 1.11003563535E8 9.3084790572E7 1.0104389678E8 1.06004092525E8 1.02044157149E8 9.8029706232E7 1.22004002755E8 8.6034875096E7 1.17004223543E8 1.06076287419E8 1.19187997167E8 1.33048382599E8 1.27189405973E8 1.1207860613E8 1.09068584334E8 1.21023646117E8 9.9003361174E7 1.27127458547E8 8.708466125E7 1.1603010634E8 1.23065010286E8 1.27022884106E8 9.5086239234E7 1.05003321169E8 1.45105336983E8 1.39044777916E8 1.0600331117E8 1.27034710224E8 1.22144784998E8 1.16066241932E8 1.11167302049E8 1.14111897855E8 1.28046430885E8 1.2402245248E8 1.19142943935E8 1.25074340324E8 1.23068806219E8 1.04211347677E8 1.14065199749E8 1.1616269384E8 1.21043667244E8 1.48150981137E8 1.22157573837E8 1.02057197165E8 9.6082168847E7 1.21047764985E8 1.11041588976E8 1.15034587895E8 1.48006585593E8 1.00063824045E8 1.06182635383E8 1.09075489928E8 1.02122054263E8 1.17149433028E8 1.13206970084E8 9.6104533718E7 1.12060660559E8 8.3034655031E7 9.9108223582E7 1.19027227695E8 1.19180115455E8 1.13047754376E8 1.22038453495E8 1.04073472648E8 1.1008587681E8 1.19037517871E8 8.003474504E7 1.38048332893E8 1.4509417409E8 1.18029500824E8 1.04063302251E8 1.29135420383E8 1.29027040147E8 1.22030149686E8 1.18021279768E8 1.09004261939E8 1.22042629788E8 1.1208382535E8 1.10078374581E8 1.05004161938E8 1.15020391261E8 1.31240680006E8 9.0084018489E7 1.11224131473E8 9.302916641E7 1.10069290899E8 1.32233690875E8 1.26164978977E8 8.4084590336E7 1.40043858628E8 1.26118998946E8 1.19094637506E8 1.11098023464E8 1.14025182996E8 1.08080409055E8 1.30042272531E8 1.16218375857E8 1.04106351694E8 1.28042661187E8 1.17082265916E8 1.35062798366E8 1.3100581386E8 9.9092849573E7 1.03098632175E8 1.16059507277E8 1.16043272943E8 1.20042326433E8 1.06142871878E8 1.49004353996E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1 0 1 2 1 0 2 1 0 0 0 0 2 3 2 1 0 0 1 1 1 0 0 2 1 0 1 0 2 2 1 1 0 1 0 1 1 2 2 1 1 0 2 2 2 0 3 47 46 46 47 46 32 28 0 6 2 28 29 25 12 0 48 42 0 7 36 42 18 7 6 24 11 40 23 42 40 21 41 6 20 24 10 38 16 16 5 8 19 40 13 46 23 14 17 0 12 28 33 11 36 18 47 41 0 48 5 21 41 7 21 20 20 0 32 33 32 0 22 44 9 47 2 27 34 15 1 16 46 9 41 22 38 47 40 12 44 31 14 3 23 13 24 9 39 44 3)
Average genome size in population (length): 113.994
Average program size in population (points): 153.843
Average percent parens in population: 0.251
Minimum age in population: 8.5
Maximum age in population: 13.8984375
Average age in population: 11.9711875
Median age in population: 12.0390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.518
Error (vector) diversity:			 0.603
Behavioral diversity:				 0.609
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 1256682560
--- Timings ---
Current time: 1559235501687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Sort Vector problem report - generation 9
Test total error for best: 58032
Test mean error for best: 22.75765
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -469 322 -998]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 -938 -176 379]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -867 -297]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -221 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 -841 708]

Correct output: [-685 -628 -625]
| Program output: [-628 -685 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -983 184 -364]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -37 393 -506]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -563 -591 -894 -957]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 -59 355 -482 471]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 -418 -218 -79 201]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 -223 648 918 411]

Correct output: [-877 -237 -56 415]
| Program output: [-237 -56 -877 415]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -619 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -358 -798 -675]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 16 -553 -806 -820]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 -670 -865 977]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -783 -763 -739 -811]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -535 -999 34 -4]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 -861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 -490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -682 -356 775 -217 20 47 692 -223 323 -767]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 -62 -421 -293 557 230 471 258]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 -535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276]

Correct output: [-674 -267 -11]
| Program output: [-267 -674 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 -75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 -30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 -380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 -780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 -735 871 501 -869 938]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -390 -497 -202 -605 -49]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Lexicase best number of elite cases: 125
Lexicase best total error: 2658
Lexicase best mean error: 10.632
Lexicase best size: 211
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Zero cases best number of elite cases: 125
Zero cases best number of zero cases: 102
Zero cases best total error: 2658
Zero cases best mean error: 10.632
Zero cases best size: 211
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 791 761 791 761 792 794 793 761 791 761 761 794 761 783 761 762 790 761 793 761 793 791 761 793 761 790 790 761 761 793 788 792 761 792 786 761 761 791 792 787 792 792 761 761 761 791 791 791 780 371 319 331 413 320 313 318 328 349 318 349 322 307 311 319 313 320 371 349 324 320 324 389 319 422 425 310 310 416 315 425 404 403 317 310 348 324 328 320 309 425 318 317 311 415 307 427 312 350 309 24 100 1 22 329 2 63 17 55 335 21 225 332 100 357 66 44 50 19 95 50 5 15 8 49 24 100 17 96 1 332 98 137 4 20 232 16 230 3 14 340 225 4 7 207 137 4 414 24 202 5 3 3 48 253 38 3 312 386 105 324 1 3 86 348 357 70 350 71 4 34 1 321 3 129 140 19 378 10 1 75 267 21 2 1 3 67 6 37 55 280 5 410 1 63 2 3 82 20 42 9 3 1 22 75 80 35 25 30 87 54 21 46 5 80 124 50 81 404 3 55 144 9 26 1 46 7 6 142 1 130 1 1 55 1 13 51 3 303 72 64 52 147 51 27 270 19 7 352 18)
Population mean number of elite cases: 69.93
Count of perfect (error zero) individuals by case: (764 791 761 791 761 792 794 793 761 791 761 761 794 761 783 761 762 790 761 793 761 793 791 761 793 761 790 790 761 761 793 788 792 761 792 786 761 761 791 792 787 792 792 761 761 761 791 791 791 780 371 319 331 413 320 313 318 328 349 318 349 322 307 311 319 313 320 371 349 324 320 324 389 319 422 425 310 310 416 315 425 404 403 317 310 348 324 328 320 309 425 318 317 311 415 307 427 312 350 309 24 0 0 0 329 2 0 0 55 0 0 225 332 100 357 0 0 0 0 95 50 0 0 0 49 24 0 0 96 0 332 0 0 4 0 232 0 230 3 0 0 0 0 0 207 0 0 0 24 0 0 0 0 0 0 0 0 312 0 0 0 0 0 0 348 0 0 350 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 0 0 0 0 0 25 0 0 0 0 0 0 0 0 50 0 0 0 55 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 60.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Total: 2658
Mean: 10.632
Genome size: 146
Size: 211
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 2.6016103890976E10
Median total errors in population: 65423/2
Error averages by case: (7.5001480162E7 6.0124122433E7 7.7001480163E7 6.6124072427E7 7.7001480163E7 6.5124072427E7 6.5124052425E7 6.5124062426E7 7.7001480163E7 6.6124072427E7 7.7001480163E7 7.7001480163E7 6.4124062426E7 7.7001480163E7 5.7124252444E7 7.7001480163E7 7.6001480163E7 6.6124082428E7 7.7001480163E7 6.5124062426E7 7.7001480163E7 6.5124062426E7 6.6124072427E7 7.7001480163E7 6.5124062426E7 7.7001480163E7 6.1124132433E7 6.6124082428E7 7.7001480163E7 7.7001480163E7 6.5124062426E7 6.2124132434E7 6.5124072427E7 7.7001480163E7 6.6124062426E7 6.1124132437E7 7.7001480163E7 7.7001480163E7 6.6124072427E7 6.6124062426E7 6.2124142435E7 6.6124062426E7 6.6124062426E7 7.7001480163E7 7.7001480163E7 7.7001480163E7 6.6124072427E7 6.6124072427E7 6.6124072427E7 5.8124262446E7 7.5042905056E7 1.03001500996E8 7.7042665172E7 8.7042544994E7 1.0400144099E8 8.6042545199E7 1.04001440994E8 8.1042615164E7 1.0400144094E8 9.9001341039E7 1.0400144094E8 1.04001440988E8 8.6042545214E7 1.01001361044E8 9.8001411043E7 1.04001311027E8 9.8001441037E7 7.5042675046E7 1.0400144094E8 1.01001470989E8 1.0400144099E8 1.04001440987E8 7.4042615013E7 1.01001331035E8 8.4042554932E7 8.404256493E7 1.01001341045E8 9.9001391052E7 8.5042554942E7 8.6042545204E7 8.3042564931E7 7.5042734984E7 7.2042674988E7 1.03001311028E8 8.80425452E7 1.01001470942E8 1.04001440987E8 8.0042595165E7 1.04001440993E8 1.01001341046E8 8.2042574932E7 1.01001361035E8 1.03001321026E8 1.02001331043E8 7.9042544987E7 8.6042545205E7 8.204256493E7 1.03001311029E8 1.01001470944E8 1.01001341047E8 8.9032604861E7 1.15002363026E8 1.16002202843E8 1.0800261239E8 8.406343738E7 8.708435038E7 9.7028156255E7 8.5043646238E7 1.18001671654E8 9.2028705414E7 1.11002262414E8 1.05002041414E8 8.9032524299E7 1.04002071576E8 9.1032454222E7 8.9028846156E7 9.5054428876E7 9.7028855586E7 1.08043236482E8 1.17001831547E8 1.05002051708E8 1.13002372588E8 8.908437064E7 1.13002412703E8 1.27003162936E8 8.203260488E7 1.29003053128E8 1.28002922903E8 1.21003232474E8 1.06002522894E8 8.6032624297E7 1.32003133187E8 1.08002623031E8 1.01001981846E8 1.11002272039E8 1.03002101407E8 8.5084380657E7 1.22003422135E8 7.4063328059E7 1.12002692165E8 1.02028525631E8 1.18003013548E8 8.7084510591E7 1.13002162691E8 1.29002952388E8 1.08002663019E8 9.1028856277E7 1.28003112667E8 8.8032554874E7 1.2900325344E8 1.1706345712E8 1.46039921713E8 1.47039032398E8 1.16108679809E8 1.1306409627E8 1.12065894537E8 1.48059639448E8 1.02001321032E8 1.13058711932E8 8.2043687209E7 1.44026405693E8 1.19061080684E8 1.50022783848E8 9.7047055806E7 1.00001480947E8 1.54044412134E8 1.39042958473E8 1.04001440936E8 1.38006937544E8 1.28056636965E8 1.31092744652E8 1.39017037002E8 1.33009127551E8 1.28045420956E8 1.44022512333E8 1.29011620876E8 1.44035577196E8 1.23100260153E8 1.13087225974E8 1.19052269824E8 1.31019349815E8 1.37039877049E8 1.59005516679E8 1.46016179726E8 1.2305529716E8 1.0204587525E8 1.52035594093E8 1.46012645903E8 1.3801599635E8 1.52005475553E8 1.10034201189E8 1.06044382206E8 1.10095582834E8 1.05049847348E8 1.3006427493E8 1.13056525996E8 1.03104043838E8 1.07043459441E8 8.5032424896E7 1.06059548963E8 1.45024467139E8 1.2012605098E8 1.33009880602E8 1.47030572801E8 1.02043970271E8 1.09103730407E8 1.37029877495E8 8.7063207949E7 1.52042602797E8 1.61004255121E8 1.3902186047E8 1.15089375153E8 1.27051112104E8 1.36022400016E8 1.5001689864E8 1.44016049171E8 1.05002161714E8 1.35032869699E8 1.16068604869E8 1.13117309266E8 1.19001671657E8 1.39017680755E8 1.45040370278E8 1.0507990821E8 1.1110147047E8 1.08028276239E8 1.13067211195E8 1.51032391028E8 1.55013163803E8 9.10433563E7 1.55016555902E8 1.45037720501E8 1.3600826887E8 1.09086293706E8 1.38034863814E8 1.08067049391E8 1.58042802402E8 1.13063891694E8 1.01097381496E8 1.48036970949E8 1.17074186106E8 1.59013553734E8 1.33003983694E8 1.15086209494E8 9.7135456392E7 1.1905567739E8 1.32008869577E8 1.39048757561E8 1.07061104455E8 1.52003833947E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1 0 0 3 1 0 2 1 0 0 0 0 2 3 2 1 0 0 1 1 1 0 0 2 1 0 1 0 2 2 0 1 0 1 0 0 1 2 2 1 1 0 2 2 2 0 3 47 46 46 47 46 32 28 0 6 2 28 28 25 12 0 48 42 0 7 36 42 17 7 6 24 11 40 23 42 39 21 41 6 20 23 10 38 16 16 5 8 19 40 12 46 23 14 17 0 12 28 33 10 36 18 47 41 0 48 5 21 41 7 21 20 20 0 32 33 32 0 22 44 9 47 2 27 34 15 0 16 44 8 41 20 38 47 40 13 44 31 14 3 23 13 25 9 39 45 3)
Average genome size in population (length): 118.05
Average program size in population (points): 161.154
Average percent parens in population: 0.260
Minimum age in population: 10.75
Maximum age in population: 15.6953125
Average age in population: 13.62019921875
Median age in population: 13.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.512
Error (vector) diversity:			 0.619
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 1412572189
--- Timings ---
Current time: 1559235644825 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Sort Vector problem report - generation 10
Test total error for best: 58032
Test mean error for best: 22.75765
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -469 322 -998]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 -938 -176 379]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -867 -297]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -221 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 -841 708]

Correct output: [-685 -628 -625]
| Program output: [-628 -685 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -983 184 -364]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -37 393 -506]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -563 -591 -894 -957]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 -59 355 -482 471]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 -418 -218 -79 201]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 -223 648 918 411]

Correct output: [-877 -237 -56 415]
| Program output: [-237 -56 -877 415]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -619 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -358 -798 -675]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 16 -553 -806 -820]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 -670 -865 977]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -783 -763 -739 -811]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -535 -999 34 -4]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 -861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 -490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -682 -356 775 -217 20 47 692 -223 323 -767]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 -62 -421 -293 557 230 471 258]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 -535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276]

Correct output: [-674 -267 -11]
| Program output: [-267 -674 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 -75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 -30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 -380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 -780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 -735 871 501 -869 938]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -390 -497 -202 -605 -49]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_dup integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove ()) ()) ())) ()) ()) ()) () ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Lexicase best number of elite cases: 122
Lexicase best total error: 2658
Lexicase best mean error: 10.632
Lexicase best size: 176
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_dup integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove ()) ()) ())) ()) ()) ()) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Zero cases best number of elite cases: 122
Zero cases best number of zero cases: 102
Zero cases best total error: 2658
Zero cases best mean error: 10.632
Zero cases best size: 176
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (780 818 781 811 781 814 817 815 781 815 781 781 818 781 804 781 782 816 781 815 781 816 814 781 816 781 819 815 781 781 815 816 814 781 815 811 781 781 815 815 819 816 814 781 781 781 814 815 816 799 416 341 311 433 347 309 346 310 331 332 333 348 296 328 333 331 333 383 331 349 347 349 408 332 417 425 328 324 416 298 424 421 417 332 306 330 349 314 348 324 417 332 335 327 423 304 423 329 334 324 24 93 4 26 310 17 48 17 44 309 16 209 309 93 351 63 79 50 14 88 37 12 12 4 49 24 96 9 90 4 333 98 154 16 20 219 12 200 18 12 320 229 1 8 197 153 2 380 24 170 6 2 5 38 223 70 5 332 356 144 330 13 4 63 326 361 59 335 66 3 26 3 322 2 119 2 14 331 13 1 73 1 27 2 14 3 65 6 61 85 239 7 388 1 67 14 4 70 19 43 6 4 14 18 81 79 64 21 62 102 41 16 54 7 100 121 37 1 360 6 44 132 4 22 4 55 6 6 1 15 119 3 2 55 2 6 76 5 356 56 75 39 126 57 19 261 28 3 359 12)
Population mean number of elite cases: 70.59
Count of perfect (error zero) individuals by case: (780 818 781 811 781 814 817 815 781 815 781 781 818 781 804 781 782 816 781 815 781 816 814 781 816 781 819 815 781 781 815 816 814 781 815 811 781 781 815 815 819 816 814 781 781 781 814 815 816 799 416 341 311 433 347 309 346 310 331 332 333 348 296 328 333 331 333 383 331 349 347 349 408 332 417 425 328 324 416 298 424 421 417 332 306 330 349 314 348 324 417 332 335 327 423 304 423 329 334 324 24 0 0 0 310 17 0 0 44 0 0 209 309 93 351 0 0 0 0 88 37 0 0 0 49 24 0 0 90 0 333 0 0 16 0 219 0 200 18 0 0 0 0 0 197 0 0 0 24 0 0 0 0 0 0 0 0 332 0 0 0 0 0 0 326 0 0 335 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 19 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 0 0 37 0 0 0 44 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 61.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Total: 2658
Mean: 10.632
Genome size: 146
Size: 211
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 2.6598164890848E10
Median total errors in population: 12716
Error averages by case: (7.5001370147E7 6.4041964213E7 7.7001320142E7 7.0041974215E7 7.7001320142E7 7.0041944212E7 7.0041924209E7 7.0041944211E7 7.7001320142E7 6.9041944212E7 7.7001320142E7 7.7001320142E7 6.6041954212E7 7.7001320142E7 6.7042094224E7 7.7001320142E7 7.6001320142E7 6.8041954212E7 7.7001320142E7 7.0041934211E7 7.7001320142E7 7.004193421E7 7.0041954212E7 7.7001320142E7 7.004193421E7 7.7001320142E7 6.5041944211E7 6.9041944212E7 7.7001320142E7 7.7001320142E7 7.0041934211E7 6.3041984216E7 7.0041944212E7 7.7001320142E7 7.0041944211E7 6.6041984219E7 7.7001320142E7 7.7001320142E7 7.0041934211E7 7.0041944211E7 6.4041954212E7 7.004193421E7 7.0041944212E7 7.7001320142E7 7.7001320142E7 7.7001320142E7 7.0041954212E7 7.0041934211E7 7.004193421E7 6.9042114227E7 7.6042284949E7 1.02001210941E8 7.80423052E7 8.5042234939E7 1.11001220924E8 8.4042335206E7 1.0900122093E8 8.1042465218E7 1.1100122096E8 1.03000990999E8 1.0900122096E8 1.11001220923E8 8.5042315232E7 1.04001031005E8 1.04001050999E8 1.02000980992E8 1.04001050998E8 8.2042134979E7 1.1100122096E8 1.10001220923E8 1.09001220928E8 1.09001220929E8 7.8042294958E7 1.04001000997E8 8.2042334942E7 8.1042294925E7 1.04001011004E8 1.03001061016E8 8.1042354942E7 8.4042335231E7 8.1042304925E7 7.9042284933E7 7.5042324944E7 1.02001000993E8 8.5042315208E7 1.08001220962E8 1.11001220925E8 8.5042795234E7 1.11001220928E8 1.04001011011E8 8.3042344939E7 1.04001030997E8 1.02001000986E8 1.05000981004E8 8.304247498E7 8.4042335214E7 8.1042304928E7 1.02000990995E8 1.0800122096E8 1.0500099101E8 8.7032754873E7 1.12001943014E8 1.0800209284E8 1.15001942363E8 8.9032234315E7 8.9042946173E7 1.08028736276E8 8.7047416638E7 1.12001441687E8 1.06028845448E8 1.09001842409E8 1.160014614E8 9.0032704375E7 1.15001461543E8 9.3032804289E7 1.05027756041E8 1.07027826157E8 1.02028865587E8 1.04001972437E8 1.15001341551E8 1.17001461672E8 1.11002002533E8 9.0042916444E7 1.11001992662E8 1.34002302797E8 8.8032704879E7 1.36002103057E8 1.30002552937E8 1.34002312458E8 1.05002162862E8 8.9032714323E7 1.37002163141E8 1.15001902945E8 1.10001511746E8 1.06001912004E8 1.14001461386E8 9.1042836443E7 1.12002492209E8 8.4032564898E7 1.19001932084E8 1.06037476585E8 1.29002323413E8 9.4042786471E7 1.05002052705E8 1.29002472436E8 1.13001932945E8 1.07028906223E8 1.37002282627E8 8.7032734882E7 1.40002903444E8 1.12070168031E8 1.5202655071E8 1.48032791698E8 1.2306046557E8 1.18065106234E8 1.16067664539E8 1.39016845458E8 1.04000990988E8 1.28030689183E8 8.6043187126E7 1.40018785384E8 1.15111445932E8 1.47018543489E8 1.01044305602E8 1.09001240968E8 1.68029740749E8 1.48030777442E8 1.09001220957E8 1.35005197483E8 1.20101882138E8 1.44080353489E8 1.48010716502E8 1.4700653732E8 1.28062532653E8 1.45015901778E8 1.24010070821E8 1.54027666212E8 1.31053706005E8 1.1505222236E8 1.10105935308E8 1.28063004229E8 1.40028316252E8 1.53020518321E8 1.43013379534E8 1.15107302398E8 1.05076408238E8 1.4303089384E8 1.46011015604E8 1.48012005842E8 1.55003575453E8 1.15059073587E8 1.10086886362E8 1.37049718399E8 9.8087321073E7 1.2511088004E8 1.17049685444E8 1.05056799112E8 1.1504255944E8 8.9032744916E7 1.03096192865E8 1.46020546687E8 1.29065785414E8 1.26008970582E8 1.38024382804E8 1.17039609816E8 1.16058196156E8 1.35024506997E8 8.9032184846E7 1.52033822133E8 1.47039158726E8 1.34016430292E8 1.15053921831E8 1.24058032805E8 1.38016429657E8 1.4301357842E8 1.36014749189E8 1.15001491679E8 1.29024459458E8 1.19070195029E8 1.24064573838E8 1.12001421693E8 1.38059455134E8 1.46079154591E8 1.0204281459E8 1.19060156134E8 1.10038677266E8 1.20057760405E8 1.52021860436E8 1.36011373962E8 8.7043146276E7 1.49012175789E8 1.39029000388E8 1.22006578921E8 1.07051460605E8 1.40016062356E8 1.17056098494E8 1.5307941612E8 1.13064122202E8 1.10051996961E8 1.52028039938E8 1.22127231236E8 1.50010953728E8 1.35071670588E8 1.12048245958E8 1.11050017851E8 1.20106602562E8 1.29007039446E8 1.38029725663E8 1.19063384272E8 1.57002433876E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1 0 0 3 1 0 2 1 0 0 0 0 2 3 2 1 0 0 1 1 1 0 0 2 1 0 1 0 2 2 0 1 0 1 0 0 1 2 2 1 1 0 2 2 2 0 3 47 46 46 47 46 32 28 0 6 2 28 28 25 12 0 48 42 0 7 36 42 17 7 6 24 10 40 23 42 39 21 40 6 20 23 10 38 16 16 5 8 19 40 12 46 23 14 17 0 12 28 33 10 36 18 47 41 0 48 5 21 41 7 21 20 20 0 31 33 32 0 22 44 9 47 2 27 34 14 0 16 44 8 41 20 38 47 40 13 44 31 14 3 23 13 25 9 39 45 3)
Average genome size in population (length): 119.387
Average program size in population (points): 163.201
Average percent parens in population: 0.261
Minimum age in population: 11.75
Maximum age in population: 17.1484375
Average age in population: 15.135181640625
Median age in population: 15.248046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.499
Error (vector) diversity:			 0.634
Behavioral diversity:				 0.636
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 1569307730
--- Timings ---
Current time: 1559235785268 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Sort Vector problem report - generation 11
Test total error for best: 58032
Test mean error for best: 22.75765
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -469 322 -998]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 -938 -176 379]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -867 -297]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -221 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 -841 708]

Correct output: [-685 -628 -625]
| Program output: [-628 -685 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -983 184 -364]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -37 393 -506]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -563 -591 -894 -957]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 -59 355 -482 471]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 -418 -218 -79 201]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 -223 648 918 411]

Correct output: [-877 -237 -56 415]
| Program output: [-237 -56 -877 415]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -619 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -358 -798 -675]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 16 -553 -806 -820]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 -670 -865 977]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -783 -763 -739 -811]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -535 -999 34 -4]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 -861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 -490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -682 -356 775 -217 20 47 692 -223 323 -767]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 -62 -421 -293 557 230 471 258]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 -535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276]

Correct output: [-674 -267 -11]
| Program output: [-267 -674 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 -75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 -30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 -380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 -780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 -735 871 501 -869 938]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -390 -497 -202 -605 -49]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc integer_yankdup exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20002 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 4 0 2 0 2 2 2 2 2 3 2 2 2 2 5 2 3 4 2 4 2 2 3 48 47 49 48 46 33 29 0 6 3 28 29 27 13 2 49 43 2 9 39 45 18 7 8 24 11 42 23 43 41 22 43 8 24 27 11 39 18 18 6 8 22 40 14 47 24 17 18 2 17 31 36 12 39 20 49 43 2 49 7 21 43 8 23 22 20 2 32 33 33 0 24 46 11 49 3 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 24 16 27 12 40 46 4]
Lexicase best number of elite cases: 117
Lexicase best total error: 22671
Lexicase best mean error: 90.684
Lexicase best size: 212
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Zero cases best number of elite cases: 116
Zero cases best number of zero cases: 102
Zero cases best total error: 2658
Zero cases best mean error: 10.632
Zero cases best size: 211
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (715 766 713 762 713 765 768 767 713 765 713 713 768 713 760 713 714 767 713 767 713 766 767 713 766 713 766 765 713 713 767 763 765 713 768 767 713 713 766 769 765 766 763 713 713 713 767 766 768 754 380 318 281 423 325 275 325 270 300 313 300 328 263 301 314 302 314 343 300 328 325 331 372 312 394 398 302 299 397 274 399 383 390 311 273 298 331 299 328 300 397 313 312 302 411 265 395 302 300 300 34 84 12 31 308 13 1 21 37 307 15 196 307 79 360 55 85 60 12 72 43 4 21 5 44 35 81 14 67 12 317 77 133 11 21 200 21 174 22 10 312 219 6 3 162 128 3 2 34 1 6 4 6 53 186 76 1 303 348 1 344 12 7 83 298 2 61 300 1 2 41 8 2 1 119 8 11 342 8 5 1 2 45 2 1 2 1 1 61 90 1 9 417 5 69 16 5 78 21 37 9 9 10 13 81 102 57 26 62 2 35 13 1 6 74 119 43 4 1 5 37 1 2 25 3 61 4 8 3 10 115 3 2 50 3 9 82 5 1 81 94 51 128 59 17 275 18 5 346 20)
Population mean number of elite cases: 63.46
Count of perfect (error zero) individuals by case: (715 766 713 762 713 765 768 767 713 765 713 713 768 713 760 713 714 767 713 767 713 766 767 713 766 713 766 765 713 713 767 763 765 713 768 767 713 713 766 769 765 766 763 713 713 713 767 766 768 754 380 318 281 423 325 275 325 270 300 313 300 328 263 301 314 302 314 343 300 328 325 331 372 312 394 398 302 299 397 274 399 383 390 311 273 298 331 299 328 300 397 313 312 302 411 265 395 302 300 300 34 0 0 0 308 13 0 0 37 0 0 196 307 79 360 0 0 0 0 72 43 0 0 0 44 35 0 0 67 0 317 0 0 11 0 200 0 174 22 0 0 0 0 0 162 0 0 0 34 0 0 0 0 0 0 0 0 303 0 0 0 0 0 0 298 0 0 300 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 0 0 26 0 0 0 0 0 0 0 0 43 0 0 0 37 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 57.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Total: 2658
Mean: 10.632
Genome size: 146
Size: 211
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 2.4347828446073E10
Median total errors in population: 112725
Error averages by case
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1 0 0 2 1 0 2 1 0 0 0 0 2 3 2 1 0 0 1 1 1 0 0 2 1 0 1 0 2 2 0 1 0 1 0 0 1 2 2 1 1 0 2 2 1 0 2 47 46 46 47 46 32 28 0 6 1 28 28 25 12 0 47 42 0 6 36 42 17 6 5 24 10 40 23 42 39 20 40 6 20 22 10 37 16 16 5 7 19 40 12 46 23 14 17 0 12 28 33 10 36 18 47 41 0 48 4 21 41 6 21 20 20 0 31 32 32 0 21 44 9 47 2 27 34 14 0 16 44 8 41 20 38 47 40 12 44 31 14 3 23 13 25 9 39 45 3)
Average genome size in population (length): 120.58
Average program size in population (points): 163.814
Average percent parens in population: 0.257
Minimum age in population: 12.75
Maximum age in population: 18.568359375
Average age in population: 16.5513935546875
Median age in population: 16.6396484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.537
Error (vector) diversity:			 0.67
Behavioral diversity:				 0.675
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 1731949806
--- Timings ---
Current time: 1559235930204 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Sort Vector problem report - generation 12
Test total error for best: 58032
Test mean error for best: 22.75765
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -469 322 -998]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 -938 -176 379]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -867 -297]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -221 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 -841 708]

Correct output: [-685 -628 -625]
| Program output: [-628 -685 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -983 184 -364]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -37 393 -506]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -563 -591 -894 -957]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 -59 355 -482 471]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 -418 -218 -79 201]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 -223 648 918 411]

Correct output: [-877 -237 -56 415]
| Program output: [-237 -56 -877 415]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -619 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -358 -798 -675]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 16 -553 -806 -820]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 -670 -865 977]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -783 -763 -739 -811]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -535 -999 34 -4]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 -861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 -490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -682 -356 775 -217 20 47 692 -223 323 -767]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 -62 -421 -293 557 230 471 258]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 -535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276]

Correct output: [-674 -267 -11]
| Program output: [-267 -674 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 -75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 -30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 -380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 -780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 -735 871 501 -869 938]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -390 -497 -202 -605 -49]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_dup integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc integer_yankdup exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20002 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 4 0 2 0 2 2 2 2 2 3 2 2 2 2 5 2 3 4 2 4 2 2 3 48 47 49 48 46 33 29 0 6 3 28 29 27 13 2 49 43 2 9 39 45 18 7 8 24 11 42 23 43 41 22 43 8 24 27 11 39 18 18 6 8 22 40 14 47 24 17 18 2 17 31 36 12 39 20 49 43 2 49 7 21 43 8 23 22 20 2 32 33 33 0 24 46 11 49 3 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 24 16 27 12 40 46 4]
Lexicase best number of elite cases: 117
Lexicase best total error: 22671
Lexicase best mean error: 90.684
Lexicase best size: 212
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_yank integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove integer_dup_items exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) (integer_inc vector_integer_shove) () vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank vector_integer_last integer_pop)) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Zero cases best number of elite cases: 116
Zero cases best number of zero cases: 102
Zero cases best total error: 2658
Zero cases best mean error: 10.632
Zero cases best size: 236
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (702 743 707 738 707 741 741 740 707 741 707 707 741 707 741 707 707 741 707 741 707 740 741 707 741 707 744 741 707 707 741 740 741 707 741 744 707 707 739 742 742 741 740 707 707 707 741 740 742 735 402 287 278 388 291 274 292 274 328 312 329 294 270 306 312 302 313 359 328 294 291 309 385 310 396 395 309 306 396 272 395 393 403 306 274 327 309 304 307 308 395 311 307 307 390 270 393 303 329 309 36 1 7 30 293 25 4 22 33 302 16 212 294 71 326 53 86 64 16 51 38 8 18 5 52 36 54 8 48 6 295 54 112 22 23 212 18 165 33 12 272 237 8 2 161 112 8 6 35 1 10 4 4 57 184 72 533 304 326 6 295 27 3 64 329 1 73 328 8 1 53 2 7 2 86 18 10 332 11 3 4 6 41 1 5 6 1 2 63 96 1 4 1 1 63 17 2 65 14 30 5 1 6 12 1 105 58 20 63 11 26 8 5 5 1 98 37 15 10 9 33 8 6 21 2 75 4 8 1 25 86 5 4 1 4 8 81 5 9 84 106 5 103 1 1 1 29 21 335 12)
Population mean number of elite cases: 61.73
Count of perfect (error zero) individuals by case: (702 743 707 738 707 741 741 740 707 741 707 707 741 707 741 707 707 741 707 741 707 740 741 707 741 707 744 741 707 707 741 740 741 707 741 744 707 707 739 742 742 741 740 707 707 707 741 740 742 735 402 287 278 388 291 274 292 274 328 312 329 294 270 306 312 302 313 359 328 294 291 309 385 310 396 395 309 306 396 272 395 393 403 306 274 327 309 304 307 308 395 311 307 307 390 270 393 303 329 309 36 0 0 0 293 25 0 0 33 0 0 212 294 71 326 0 0 0 0 51 38 0 0 0 52 36 0 0 48 0 295 0 0 22 0 212 0 165 33 0 0 0 0 0 161 0 0 0 35 0 0 0 0 0 0 0 0 304 0 0 0 0 0 0 329 0 0 328 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 14 0 0 0 0 0 0 0 0 20 0 0 0 0 0 0 0 0 37 0 0 0 33 0 0 0 0 0 0 0 0 25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 56.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 exec_stackdepth integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Total: 2658
Mean: 10.632
Genome size: 146
Size: 211
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 2.5664931406389E10
Median total errors in population: 315471/2
Error averages by case: (8.2002770299E7 6.6043574382E7 8.3002680293E7 7.0043574383E7 8.3002680293E7 7.004354438E7 7.004354438E7 6.9043564382E7 8.3002680293E7 7.004354438E7 8.3002680293E7 8.3002680293E7 7.004357438E7 8.3002680293E7 6.4043484372E7 8.3002680293E7 8.3002680293E7 7.004357438E7 8.3002680293E7 7.004354438E7 8.3002680293E7 7.0043554381E7 6.9043554381E7 8.3002680293E7 7.004354438E7 8.3002680293E7 6.6043614383E7 7.004354438E7 8.3002680293E7 8.3002680293E7 7.004354438E7 6.3043554379E7 7.004354438E7 8.3002680293E7 6.9043554381E7 6.3043464373E7 8.3002680293E7 8.3002680293E7 7.0043564382E7 6.904354438E7 6.5043604384E7 7.004354438E7 7.0043554381E7 8.3002680293E7 8.3002680293E7 8.3002680293E7 6.9043554381E7 7.0043554381E7 6.904354438E7 6.4043524378E7 8.6034204073E7 1.14003351165E8 7.7034174367E7 8.1075018216E7 1.14003311163E8 8.1075028452E7 1.14003311161E8 7.9075098466E7 1.1600331111E8 1.03003841253E8 1.1400331111E8 1.14003311162E8 8.1075028458E7 1.05003281199E8 1.04003211189E8 1.04003861262E8 1.04003211187E8 8.8034034138E7 1.1600331111E8 1.13003321163E8 1.14003311163E8 1.14003311147E8 8.5034034098E7 1.03003851256E8 9.3034064079E7 9.203412408E7 1.05003201187E8 1.03003531225E8 9.303407408E7 8.1075028458E7 9.2034134078E7 8.9034134092E7 8.7034144081E7 1.05003211194E8 8.1075018453E7 1.13003321095E8 1.14003311147E8 7.4034094314E7 1.14003311147E8 1.05003201189E8 9.303407408E7 1.0400320119E8 1.06003211191E8 1.05003841256E8 8.1075008208E7 8.1075018458E7 9.2034134081E7 1.0400346122E8 1.13003321111E8 1.07003201185E8 9.4045576073E7 1.23005993278E8 1.12006603224E8 1.20005852677E8 9.3045705617E7 9.1031875077E7 1.02037867126E8 9.9031624998E7 1.07004671997E8 1.06038056316E8 1.15005962771E8 1.20004551671E8 9.7045595643E7 1.2100454181E8 9.3045475559E7 1.02038416988E8 1.03038447101E8 1.03064889108E8 1.13006222821E8 1.20004451863E8 1.23004541896E8 1.2300601279E8 9.0031845323E7 1.23005982983E8 1.29007393289E8 9.9045576078E7 1.33007373571E8 1.1600776346E8 1.29007433093E8 1.09007363289E8 9.4045565627E7 1.31007283631E8 1.23005903277E8 1.08004822046E8 1.14006072389E8 1.20004551652E8 8.9031805337E7 1.14005652511E8 8.5045666144E7 1.23006022468E8 1.0606830965E8 1.19007183797E8 9.4031875356E7 1.10006083055E8 1.21007122964E8 1.20005863263E8 1.05038187068E8 1.29007353146E8 9.9045556087E7 1.31007273852E8 9.5106291602E7 1.26067805717E8 1.36073366174E8 1.01171066726E8 9.5132403699E7 1.10137031037E8 1.23045588487E8 1.0700321119E8 1.06069132971E8 8.3031775874E7 1.18051998761E8 1.06160540499E8 1.35043696016E8 9.3062777136E7 1.13003321096E8 1.40077355927E8 1.37070141422E8 1.14003311108E8 1.23017738651E8 1.11110652655E8 1.10147921015E8 1.190310887E8 1.36016108326E8 1.14057941985E8 1.3704021421E8 1.30022531761E8 1.26091503673E8 1.09117962303E8 9.7119129432E7 9.5091953825E7 1.2003984178E8 1.17065410763E8 1.27012917586E8 1.24034601809E8 1.00078899527E8 8.7095020189E7 1.27062207676E8 1.24054460199E8 1.2803047785E8 1.45011936153E8 9.9074375111E7 1.07093236659E8 1.03123986032E8 8.4070309289E7 1.141315019E8 1.00145234772E8 9.5074910629E7 1.07058490914E8 9.4045466145E7 1.04120715003E8 1.24088523913E8 1.04198998767E8 1.14020681827E8 1.28057386349E8 9.9081924134E7 1.00138954021E8 1.19068971501E8 9.2045506122E7 1.34076436838E8 1.18010165837E8 1.22040782775E8 1.00123448595E8 1.0308494548E8 1.35037101536E8 1.38032600198E8 1.39035710827E8 1.21004541899E8 1.2810136689E8 1.10186676284E8 1.04146491754E8 1.07004651999E8 1.34035922578E8 1.37072723814E8 9.3058596081E7 1.02168577097E8 9.7063839671E7 1.0113091772E8 1.33056443996E8 1.41025245165E8 9.007246919E7 1.37027567583E8 1.23099587714E8 1.12017449937E8 1.0209468439E8 1.23044795304E8 1.02119074902E8 1.45071725427E8 1.09150120393E8 9.4110032696E7 1.2707011506E8 1.04200488917E8 1.42025505061E8 1.16009374392E8 9.6074188356E7 9.8111823639E7 1.06117663506E8 1.16020040616E8 1.26065249341E8 1.03130260834E8 1.34008894559E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 2 1 0 2 1 0 0 0 0 2 3 2 1 0 0 1 1 1 0 0 2 1 0 1 0 2 2 0 1 0 1 0 0 1 2 2 1 1 0 2 2 1 0 2 47 46 46 47 46 32 29 0 6 1 28 28 25 12 0 46 42 0 6 36 42 16 6 5 24 10 40 23 42 39 20 40 6 20 22 10 37 16 16 5 7 19 39 12 46 23 13 17 0 12 28 32 10 36 17 47 41 0 48 4 21 41 6 21 19 20 0 31 32 32 0 21 44 9 47 2 27 34 14 0 16 44 8 40 20 38 47 40 12 44 31 13 3 22 12 24 9 39 45 3)
Average genome size in population (length): 120.179
Average program size in population (points): 163.243
Average percent parens in population: 0.258
Minimum age in population: 14.578125
Maximum age in population: 20.15234375
Average age in population: 18.0668779296875
Median age in population: 18.127685546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.543
Error (vector) diversity:			 0.661
Behavioral diversity:				 0.669
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 1895197531
--- Timings ---
Current time: 1559236077290 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Sort Vector problem report - generation 13
Test total error for best: 58032
Test mean error for best: 22.75765
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [-4 1]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-812 -788]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-432 -192]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-595 -983]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-393 -859]

Correct output: [-982 -43]
| Program output: [-982 -43]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-423 -853]

Correct output: [-166 -55]
| Program output: [-166 -55]

Correct output: [-566 -514]
| Program output: [-566 -514]

Correct output: [-325 -191]
| Program output: [-325 -191]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-160 -494]

Correct output: [-881 -643]
| Program output: [-881 -643]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-795 -626]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-157 -929]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 723 181]

Correct output: [-998 -469 -290 322]
| Program output: [-290 -469 322 -998]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-847 -938 -176 379]

Correct output: [-652 -440 944]
| Program output: [-652 -440 944]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 884 451 939]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 43 460 -199 932]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-200 -867 -297]

Correct output: [-204 882 934]
| Program output: [-204 882 934]

Correct output: [-806 -221 -184]
| Program output: [-806 -221 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 -257 -862 982 599]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 -601 362 -448 154]

Correct output: [-328 22 24 263 978]
| Program output: [-328 978 24 22 263]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-910 -841 708]

Correct output: [-685 -628 -625]
| Program output: [-628 -685 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-104 -983 184 -364]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-41 -37 393 -506]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-114 -563 -591 -894 -957]

Correct output: [-898 249 558]
| Program output: [-898 558 249]

Correct output: [-737 -482 -59 355 471]
| Program output: [-737 -59 355 -482 471]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-561 -418 -218 -79 201]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 520 787]

Correct output: [-468 -223 411 648 918]
| Program output: [-468 -223 648 918 411]

Correct output: [-877 -237 -56 415]
| Program output: [-237 -56 -877 415]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-190 -619 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-951 -358 -798 -675]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 374 -639 382 548]

Correct output: [-820 -806 -741 -553 16]
| Program output: [-741 16 -553 -806 -820]

Correct output: [-937 -141 -97 598]
| Program output: [-141 -97 -937 598]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-803 -670 -865 977]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 443 108 -928 256]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-549 -783 -763 -739 -811]

Correct output: [-428 333 797]
| Program output: [-428 797 333]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-600 -535 -999 34 -4]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-445 -861 -192 -494 -663 504 -783 561 254 -939 299 191 248 -192 269 323 -831 885 110 780 -66 -702 -866 830 -894 490 -95 -912 357 -585 906 -372 -694 -861 580 303 -706 -834 208 470 -887 -891 165 -350 -865 189 372 -23 717 431]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 -376 -253 589 916 294 -267 -176 195 -659 -166 31 579 996 866 636 -266 689 -662 -86 352 450 -346 961 -107 325 -13 -835 -400 -718 -246 664 -11 -598 827 974 -647 818 -662 -803 -360 724 31 196 732 -221 -752 584 -66 171]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 752 -492 -721 -541 71 -746 -8 -268 -634 -328 544 902 -515 454 -682 -843 722 557 765 -984 -744 638 618 -269 945 -56 -549 132 -701 -151 343 -809 276]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 -718 -140 957 56 -322 955 957 -423 622]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 916 -575 -184 533 539 -413 964 -114 698 -726 -312 367 937 213 992 -197 598 -846 -265 606 -639 -116 233 -95 845 617 868 259 590 694]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-33 -6 540 -851 312 -972 -919 -427 443 877 46 -417 52 -363 -442 732 -262 -384 -844 759 -207 -855 202 407 287 -502 -705 -317 557 -865]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 -742 436 -401 529 -551 578 -777 547 -860 648 -837 71 56]

Correct output: [-57 -14]
| Program output: [-14 -57]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-167 -490 -148 -446 560 -293 -214 765 565 -707 -676 100 -569 -68 -842 249 439 475 324 760 -345 -621 489 -82 -523 -134 695 -612 -737 364 83 -60 789 603 -555 280 -294 117 833 272 -161 -893 -408 216 408 574 -589 179 382 172]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-123 -811 -510 -615 276 -978 315 665 -118 -451 -591 -587 -304 19 -717 335 -458 325 -168 -579 -608 498 210 765 986 441 -297 907 -170 456 -532 509 132 -860 495 430 -99 -553 -702 -438 -747 -147 -251 598 -705 -267]

Correct output: [-596 -409]
| Program output: [-409 -596]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 257 -622 -164 805 -802 882 -177 716 155 841 -341 -598 105 70 546 651 -920 756 -263 -431 -708 748 9 218 35 -986 -389 -188 -177 -290 -892 -646 -904 931 82 -872 730 621 -665 383]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-392 -682 -356 775 -217 20 47 692 -223 323 -767]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-334 -784 660 897 -817 -415 -23 -788 -568 -753 834 -752 -52 -836 155 -968 -510 390 339 399 468 921 -806 72 -776 208 -33]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-91 -940 616 -347 -335 228 694 -897 127 -33 115 872 -744 -999]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 -389 -14 -819 -616 -413 809 884 66 -16 -728 -100 -345 642 -8 34 -278 -655 627 511 -351 -747 -138 996 57 671 874 -359 933]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [-160 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-418 -62 -421 -293 557 230 471 258]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 504 775 -361 -997 462 -326 376 -153 899 374 -322 -42 -194 852 -840 181 -79 -6 267 -691 -288 257]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 -880 196 -416 -846 -20 328 514 745 -492 778 -73 541 -915 -27 -12 -62 -48 507 338 392 154 333 -205 -960 -764 492 651 -991 746 -285 352 887 288 267 228 -831 547 374 186 -467 88 -820 514]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 484 -973 -877 749 -83 58 -432 509 887 -447 -868 215 -541 -77 693 422 7 461 960 -870 724 -649 859 246 599 -504 247 -512 -92 -458 122 -511 209 -638 -245 150 -588 128 443 -594 523 390 -266 -877 560 -290 629 985]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 -717 -144 98 -872 734 -759 -74 -615 -746 -857 -59 4 -857 504 611 456 -15 -234 -797 475 277 940 579 588 934 541]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 424 -875 -976 -407 -500 143 193 -234 -375 -555 -729 -733 -480 751 -420 697 -600 617 957 881]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 266 66 -176 355 -105 30 -452 524 -399 334 -391 601 -481 -511 -575 -921 769]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 -27 500 -588 -571 -156 991 489 1000 393 -482 -891 -840 69 647 -812 121 563 27 367 -495 -302 -234 203 -486 -939 -481 -147 -986 -370 634 813 -867 -974 721 -267 505]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 -215 -277 640 -176 467 880 382 743 -446 999 643 -707 -761 -492 -178 800 -390 506 571]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 -969 -167 165 318 922 297 -934 -342 -766 18 519 -962 840 -990 -3 626 664 -313 35 47 719 970 -877 -350 611 -418 760 465 -9 -208 -425 70 454 -309 592 -997 -268 346 265 -414 457 544 -344 503 258 341 -752 -319 293]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-883 -907 -268 -436 338 -197 332 -772 -224 17 101 30 -799 768 287 -598 -788 805 489 -76 721 -781 -375 -755 117 366 -931 -870 -719 715 -178 501 912 451 902 471 -785 504 -387 -501 -922 27 102 -910 -127 -141 -459 783 911 -40]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-741 -812 -677 -69 215 47 35 247 373 -179 507 850 648 591 108 -882 -315 -573 999 200 446 -911 676 -124]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-758 -173 874 -263 8 -848 590 -189 -899 692 -510 -741 907 -498 652 899 -775 -566 93 416 -36 -707]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-85 -535 255 188 -514 -410 997 -795 998 -235 -358 515 -260 98 567 -568 938 391 -350 20 301 396 -927 276]

Correct output: [-674 -267 -11]
| Program output: [-267 -674 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 675 634 825 -66 -211 221 -750 -705 331 -957 -957 -163 73 387 476 -396 -383 972 127 824 -289 384 -885 444 43 -995 -93 -336 90 360 307 589 566 564]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 -724 -252 168 -311 -594 -75 224 -120 -614 17 260 229 943 -953 24 -977 -283 -516 69 882 -162 -739 -99 -161 -365 218 -507 -861 367 740 -524 912 -402 668]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-228 -75 370 262 -408 -633 606 -800 515 914 -564 286 275 952 -462 -518 90 -851 -477 -524 756 -287 513 56 955]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-317 -30 697 591 659 761 -761 -294 -328 650 258 807 -721 199 -734 483 -263 -200 513 216 411 -709 -835 565 830 -41 976 -487 -60 -890 -632 806 407 618 100 700 -731 -829 306 -785 449 586 106 -813 -696 753 -974 685]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 -555 -267 -705 -162 -362 -412 -905 134 -474 870 -321 -25 731 268 -253 -762 66 103 -434 -608 -952 325 -827 -119 -173 321 -896 862 629 -183 -285 -982 440 -556 959 -754 -913 272 693 436 885 -694 187 -610 912 464 -958 -16 246]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 -23 -796 -636 503 -297 -811 853 144 -49 -220 -393 21 -630 220 868 254 973 796 -546 -845 -481 218 -339 -285 -641 -749 -780 -615 385 261 278]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-302 -261 -801 -556 445 237 -920 263 196 220 -413 -772 213 -431 -558 -652 112 -986 -605 520 -860 -753 -320 -854 473 840 -104 57 858 841 536 398 -766 -207 -304 -301 -408]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-59 -472 295 -610 -909 221 -415 684 67 -728 381 731 649 -971 628 -706 -117]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-378 -380 -142 -246 -165 -48 -38 87 -847 794 -571 447 -9 119 -711 128 480 -287 592 425]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 -959 550 -817 -247 629 349 796 168 -229 -371 -104 -373 542 24 -626 46 464 -757 304 -698 -584 -719 460 418 533 -460 86 708 931 -312 732 756 544 982 408 -783 -718 -47 407 337 714]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-810 -780 365 -434 -936 527 -129 824 -65 223 306 -461 146 -761 -382 -262 -469 1 768 -959 -593 734 -932 -39 840 -156 718 662 -44 -764 -22 112 -641 353 410 425 -661 -875 260 -52 -99 -310 -268 -921 900 87 -835 -135 -128 130]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 735 811 772 66 -275 -981 -825 -151 -26 -131 70 -896 799 25 123 -440 -744 42 -401 856 -55 373 996 394 53 -873 -866 -213 -414 188 -1 -360 -554 892 -814 -139 265 802 418 598 700 -338 -978 450]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 -568 155 1000 -240 19 845 904 841 -185 -115 183 328 -613 -162 133]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 573 -691 -331 497 -652 -640 -922 568 -487 488 311 -837 537 256 -364 -762 165 -498 907 -266 -122 218 -747 1 -221 602 -506 -302 -633 885 590 -673 -307 -719 488 50 101]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-489 -672 -24 -70 -23 402 889 -140 -967 -910 308 -45 -157 789 -712 -294 -405]

Correct output: [-869 -735 2 501 871 938]
| Program output: [2 -735 871 501 -869 938]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 3 250 494 166 658 -945 -855 -319 -482 -618 173 591 387 522 277]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 856 -583 -399 780 -419 342 -574 -674 445 267 125 -626 -820 -293 320 -195 -922 -295 -358 237 670 54 -929 964 -269 360 -146 68]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 340 151 802 -257 -624 -692 587 713 -707 -824 375 721 644 -722 -225 216 -698 -633 797 424 662 -129 -664 65 -845 -818 552 210 713 284 890 -236 -870 -874 -805 -123 718 737 -814 890 106 -69 -715 276 769 346]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-86 -390 -497 -202 -605 -49]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_yank integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count ()) (integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times () integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove integer_dup_items exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) (integer_inc vector_integer_shove) () vector_integer_subvec integer_dup_items in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank vector_integer_last integer_pop)) ())) ()) ())) ()) ())) () ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Lexicase best number of elite cases: 111
Lexicase best total error: 2658
Lexicase best mean error: 10.632
Lexicase best size: 236
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_yank integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count ()) (integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times () integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove integer_dup_items exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) (integer_inc vector_integer_shove) () vector_integer_subvec integer_dup_items in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank vector_integer_last integer_pop)) ())) ()) ())) ()) ())) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Zero cases best number of elite cases: 111
Zero cases best number of zero cases: 102
Zero cases best total error: 2658
Zero cases best mean error: 10.632
Zero cases best size: 236
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (734 788 747 786 747 789 785 787 747 789 747 747 793 747 789 747 747 785 747 784 747 786 792 747 790 747 789 790 747 747 789 789 789 747 791 786 747 747 785 793 785 789 786 747 747 747 792 789 791 775 413 289 272 419 299 264 299 268 305 303 305 299 248 303 307 301 308 397 305 299 299 313 453 307 461 424 304 306 462 250 424 418 470 301 266 335 313 267 313 303 462 303 298 305 446 265 424 302 305 304 64 4 1 45 318 38 9 25 36 321 35 204 339 84 325 1 1 71 24 52 53 18 24 1 27 64 51 8 46 1 311 1 138 51 31 192 24 152 43 5 277 182 4 5 143 2 12 3 47 2 14 5 5 1 179 80 1 298 363 1 1 59 2 2 335 10 2 304 7 4 66 12 1 50 1 12 11 1 17 7 8 1 42 2 4 3 2 6 1 1 3 20 3 8 48 25 8 48 10 14 8 17 5 10 17 88 86 11 121 1 34 7 8 1 2 129 51 10 28 1 36 4 8 8 6 94 2 7 16 22 80 3 6 4 3 8 88 4 33 71 115 31 93 1 4 2 57 1 347 13)
Population mean number of elite cases: 62.96
Count of perfect (error zero) individuals by case: (734 788 747 786 747 789 785 787 747 789 747 747 793 747 789 747 747 785 747 784 747 786 792 747 790 747 789 790 747 747 789 789 789 747 791 786 747 747 785 793 785 789 786 747 747 747 792 789 791 775 413 289 272 419 299 264 299 268 305 303 305 299 248 303 307 301 308 397 305 299 299 313 453 307 461 424 304 306 462 250 424 418 470 301 266 335 313 267 313 303 462 303 298 305 446 265 424 302 305 304 64 0 1 0 318 38 0 0 36 0 0 204 339 84 325 0 0 0 0 52 53 0 0 1 27 64 0 0 46 1 311 0 0 51 0 192 0 152 43 0 0 0 0 0 143 0 0 0 47 0 0 0 0 0 0 0 0 298 0 1 0 0 0 0 335 0 0 304 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 11 0 0 0 0 0 0 0 0 51 0 0 0 36 0 0 0 0 0 0 0 0 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 58.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_pop})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_yank integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop) (exec_shove (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove integer_dup_items exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) (integer_inc vector_integer_shove) () vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) (vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank vector_integer_last integer_pop)) ())) ()) ())) ()) ()) ()) () ()))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 3 2 0 2 4 2 2 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 2 0 3 0 2 2 2 2 2 3 0 2 2 2 5 2 2 0 2 4 2 2 3 48 48 49 48 46 33 29 0 6 3 30 29 27 13 2 49 43 2 8 39 45 19 7 8 24 11 42 23 43 41 22 41 7 22 27 11 39 19 20 6 8 22 40 14 47 24 17 18 2 17 30 36 12 37 20 49 43 2 49 6 23 43 8 23 22 20 2 34 33 33 2 24 46 11 49 3 31 37 15 2 16 47 10 42 23 40 49 44 13 45 37 17 3 24 16 27 10 42 46 4]
Total: 2658
Mean: 10.632
Genome size: 171
Size: 236
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 2.3445238248546E10
Median total errors in population: 425449/2
Error averages by case: (7.2002370254E7 5.6001990214E7 7.2002220242E7 5.8001990214E7 7.2002220242E7 5.900195021E7 5.9001990214E7 5.7001990214E7 7.2002220242E7 5.900195021E7 7.2002220242E7 7.2002220242E7 5.6001940209E7 7.2002220242E7 5.6001970213E7 7.2002220242E7 7.2002220242E7 5.7002010216E7 7.2002220242E7 5.9002000215E7 7.2002220242E7 5.8001990214E7 5.7001940209E7 7.2002220242E7 5.800195021E7 7.2002220242E7 5.5001990214E7 5.800195021E7 7.2002220242E7 7.2002220242E7 5.900195021E7 5.7001970212E7 5.900195021E7 7.2002220242E7 5.8001940209E7 5.9001970214E7 7.2002220242E7 7.2002220242E7 5.8002000215E7 5.7001930208E7 5.6002020217E7 6.0001940209E7 5.7002000215E7 7.2002220242E7 7.2002220242E7 7.2002220242E7 5.7001940209E7 5.900195021E7 5.8001940209E7 5.4002150231E7 6.8002720931E7 1.0100273113E8 6.6002651297E7 7.2002630942E7 1.08002521109E8 7.2002631292E7 1.08002521109E8 6.3002651307E7 1.09002521078E8 9.4002621129E7 1.08002521079E8 1.08002521108E8 7.2002631289E7 9.6002661124E7 9.3002661126E7 9.5002671137E7 9.2002661126E7 7.1002650993E7 1.09002521078E8 1.08002521108E8 1.08002521109E8 1.08002521065E8 6.9002640907E7 9.2002681129E7 7.700252087E7 7.8002570889E7 9.6002681124E7 9.3002701128E7 7.6002520872E7 7.2002631287E7 7.9002580891E7 7.2002560924E7 7.1002540877E7 9.2002691147E7 7.2002631287E7 1.08002521035E8 1.08002521065E8 6.4002661267E7 1.08002521064E8 9.6002681126E7 7.5002580876E7 9.2002681136E7 9.5002711148E7 9.600264112E7 7.100264092E7 7.2002611287E7 7.8002570893E7 9.2002711145E7 1.08002521079E8 9.7002681123E7 7.50035019E7 1.1300450316E8 1.03004733058E8 1.1100465262E8 8.0034274464E7 7.600470235E7 8.9005743999E7 8.2004582353E7 9.7003631917E7 8.8005783156E7 1.02004842722E8 1.12003551646E8 7.9003491398E7 1.12003551729E8 7.900350136E7 9.2005703852E7 8.9031516504E7 8.6005773272E7 1.0200477277E8 1.14003331817E8 1.1300355183E8 1.13004462647E8 7.6004732585E7 1.12004502905E8 1.2800581336E8 8.0003621896E7 1.28005633541E8 1.16006203285E8 1.26005763059E8 9.7004653055E7 7.6003681442E7 1.24005883576E8 1.13004653203E8 1.00003651853E8 1.02004892301E8 1.1200355163E8 7.8004712603E7 1.04004872514E8 7.7003631981E7 1.17004612451E8 9.5005623473E7 1.16005653773E8 8.1045706853E7 1.02004722963E8 1.15006273018E8 1.1300465314E8 8.6005923926E7 1.2800581315E8 8.0003541914E7 1.27005873713E8 9.6060507421E7 1.24060275153E8 1.33060845421E8 9.005929707E7 9.4054666467E7 9.3040252335E7 1.1903898808E8 9.7002711143E7 9.3036849947E7 7.4004543269E7 1.17039588001E8 9.903724876E7 1.33036785661E8 9.6016152766E7 1.07002521037E8 1.41059614933E8 1.33056590895E8 1.08002521081E8 1.1701181816E8 9.6047227387E7 1.08109297371E8 1.1502458821E8 1.31012848166E8 1.04009557248E8 1.24033964193E8 1.28016481488E8 1.33056350021E8 1.06033494358E8 9.0083466066E7 9.6050720265E7 1.17032721544E8 1.14054270109E8 1.16010497488E8 1.18031011542E8 9.7034825294E7 8.501675254E7 1.25057237144E8 1.21024047135E8 1.20027297641E8 1.33009506021E8 9.7013089109E7 9.4027790524E7 1.0305136968E8 8.4020004384E7 1.04057715369E8 9.5031814176E7 9.1021885438E7 8.8025348127E7 7.5003532022E7 9.2065709978E7 1.24039519265E8 9.8042654166E7 1.17016721538E8 1.22047255793E8 9.402370879E7 8.9062227408E7 1.16055500587E8 8.2003521995E7 1.3205883601E8 1.09008365677E8 1.23035152324E8 1.01056162109E8 9.8056292737E7 1.2502797125E8 1.25027310134E8 1.31031240601E8 1.12003551817E8 1.2404594162E8 9.9044002766E7 9.5045612456E7 9.7003621917E7 1.31028942145E8 1.24061823666E8 9.6015422063E7 9.6124503284E7 8.6005663927E7 9.00779934E7 1.32046523443E8 1.34020064928E8 7.3004642492E7 1.38022507202E8 1.24060174014E8 1.10014309664E8 9.1052681035E7 1.14034634788E8 9.1050929264E7 1.41063254718E8 9.2052171896E7 7.902062403E7 1.29060404299E8 9.5046624129E7 1.3902154478E8 9.6006684328E7 9.0035164573E7 9.0021035065E7 9.2070059491E7 1.19016010285E8 1.23060108692E8 9.2057724556E7 1.31007134564E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 2 1 0 2 1 0 0 0 0 1 2 2 1 0 0 1 1 0 0 0 2 1 0 0 0 1 2 0 1 0 1 0 0 1 2 2 1 1 0 1 2 1 0 2 47 46 46 45 46 32 28 0 6 0 27 28 25 11 0 46 41 0 6 36 42 16 5 6 23 10 40 22 42 39 20 40 6 20 22 10 37 16 15 4 7 19 39 12 46 23 13 17 0 12 28 32 10 36 17 47 41 0 48 3 21 41 6 20 19 20 0 31 32 31 0 21 44 9 47 2 27 34 14 0 16 44 8 40 20 38 47 40 12 44 31 13 3 22 12 24 9 38 45 3)
Average genome size in population (length): 121.673
Average program size in population (points): 166.54
Average percent parens in population: 0.264
Minimum age in population: 16.28125
Maximum age in population: 21.578857421875
Average age in population: 19.57610302734375
Median age in population: 19.66943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.541
Error (vector) diversity:			 0.69
Behavioral diversity:				 0.695
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 2061252258
--- Timings ---
Current time: 1559236222693 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Sort Vector problem report - generation 14
Test total error for best: 28107
Test mean error for best: 11.02235
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [1 -4]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-788 -812]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-192 -432]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-983 -595]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-859 -393]

Correct output: [-982 -43]
| Program output: [-43 -982]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-853 -423]

Correct output: [-166 -55]
| Program output: [-55 -166]

Correct output: [-566 -514]
| Program output: [-514 -566]

Correct output: [-325 -191]
| Program output: [-191 -325]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-494 -160]

Correct output: [-881 -643]
| Program output: [-643 -881]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-626 -795]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-929 -157]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 181 723]

Correct output: [-998 -469 -290 322]
| Program output: [-469 -290 -998 322]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-938 -847 379 -176]

Correct output: [-652 -440 944]
| Program output: [-652 944 -440]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 939 451 884]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 932 -199 460 43]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-867 -200 -297]

Correct output: [-204 882 934]
| Program output: [-204 934 882]

Correct output: [-806 -221 -184]
| Program output: [-221 -806 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 599 982 -862 -257]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 154 -448 362 -601]

Correct output: [-328 22 24 263 978]
| Program output: [-328 263 22 24 978]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-841 -910 708]

Correct output: [-685 -628 -625]
| Program output: [-685 -628 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-983 -104 -364 184]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-37 -41 -506 393]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-563 -114 -957 -894 -591]

Correct output: [-898 249 558]
| Program output: [-898 249 558]

Correct output: [-737 -482 -59 355 471]
| Program output: [-59 -737 471 -482 355]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-418 -561 201 -79 -218]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 5 520]

Correct output: [-468 -223 411 648 918]
| Program output: [-223 -468 411 918 648]

Correct output: [-877 -237 -56 415]
| Program output: [-56 -237 415 -877]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-619 -190 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-358 -951 -675 -798]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 548 382 -639 374]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -741 -820 -806 -553]

Correct output: [-937 -141 -97 598]
| Program output: [-141 598 -937 -97]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-670 -803 977 -865]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 256 -928 108 443]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-783 -549 -811 -739 -763]

Correct output: [-428 333 797]
| Program output: [-428 333 797]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-535 -600 -4 34 -999]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-861 -445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 622 -423 957 955 -322 56 957 -140 -718]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-6 -33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 56 71 -837 648 -860 547 -777 578 -551 529 -401 436 -742]

Correct output: [-57 -14]
| Program output: [-57 -14]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-490 -167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-811 -123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510]

Correct output: [-596 -409]
| Program output: [-596 -409]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-682 -392 -767 323 -223 692 47 20 -217 775 -356]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-784 -334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-940 -91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-62 -418 258 471 230 557 -293 -421]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-907 -883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-812 -741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-173 -758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-535 -85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255]

Correct output: [-674 -267 -11]
| Program output: [-674 -267 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-75 -228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-30 -317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-261 -302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-472 -59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-380 -378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-780 -810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-672 -489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24]

Correct output: [-869 -735 2 501 871 938]
| Program output: [-735 2 938 -869 501 871]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-390 -86 -49 -605 -202 -497]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc integer_yankdup exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (vector_integer_last vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())))) ()) ()) ()) () ()))) ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20002 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 4 0 2 0 2 2 2 2 2 3 2 2 2 2 5 2 3 4 2 4 2 2 3 48 47 49 48 46 33 29 0 6 3 28 29 27 13 2 49 43 2 9 39 45 18 7 8 24 11 42 23 43 41 22 43 8 24 27 11 39 18 18 6 8 22 40 14 47 24 17 18 2 17 31 36 12 39 20 49 43 2 49 7 21 43 8 23 22 20 2 32 33 33 0 24 46 11 49 3 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 24 16 27 12 40 46 4]
Lexicase best number of elite cases: 110
Lexicase best total error: 22671
Lexicase best mean error: 90.684
Lexicase best size: 209
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_rot) (integer_dup vector_integer_set integer_swap in1 vector_integer_last integer_swap) in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items integer_dup exec_stackdepth vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc integer_yankdup exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (vector_integer_last vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())))) ()) ()) ()) () ()))) ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20002 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 4 0 2 0 2 2 2 2 2 3 2 2 2 2 5 2 3 4 2 4 2 2 3 48 47 49 48 46 33 29 0 6 3 28 29 27 13 2 49 43 2 9 39 45 18 7 8 24 11 42 23 43 41 22 43 8 24 27 11 39 18 18 6 8 22 40 14 47 24 17 18 2 17 31 36 12 39 20 49 43 2 49 7 21 43 8 23 22 20 2 32 33 33 0 24 46 11 49 3 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 24 16 27 12 40 46 4]
Zero cases best number of elite cases: 110
Zero cases best number of zero cases: 101
Zero cases best total error: 22671
Zero cases best mean error: 90.684
Zero cases best size: 209
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (686 758 698 761 698 764 764 760 698 765 698 698 763 698 755 698 698 757 698 763 698 763 763 698 764 698 762 764 698 698 765 757 764 698 761 760 698 698 763 762 760 765 762 698 698 698 762 765 762 740 390 259 232 418 279 224 279 227 283 288 283 280 218 283 289 289 289 381 283 280 279 286 424 287 443 408 283 286 445 219 409 410 445 291 225 297 286 229 286 283 441 285 287 285 440 230 407 291 283 283 47 11 11 29 299 31 8 12 49 304 33 202 335 75 326 1 15 64 14 58 46 27 20 11 25 46 47 11 42 11 305 2 165 38 39 190 19 119 33 11 265 163 5 7 108 10 4 10 39 20 18 7 4 68 147 1 3 287 1 11 6 1 1 6 297 27 1 282 6 3 70 14 4 68 3 1 6 4 8 24 6 2 30 1 8 3 6 4 15 10 1 13 7 25 1 54 8 63 31 21 6 7 8 15 16 121 77 30 136 11 29 4 8 2 5 113 49 7 1 4 49 3 12 16 9 84 8 7 30 19 84 4 21 4 8 26 101 5 35 64 106 31 93 4 5 2 64 4 1 27)
Population mean number of elite cases: 59.25
Count of perfect (error zero) individuals by case: (686 758 698 761 698 764 764 760 698 765 698 698 763 698 755 698 698 757 698 763 698 763 763 698 764 698 762 764 698 698 765 757 764 698 761 760 698 698 763 762 760 765 762 698 698 698 762 765 762 740 390 259 232 418 279 224 279 227 283 288 283 280 218 283 289 289 289 381 283 280 279 286 424 287 443 408 283 286 445 219 409 410 445 291 225 297 286 229 286 283 441 285 287 285 440 230 407 291 283 283 47 0 11 0 299 31 0 0 49 0 0 202 335 75 326 1 0 0 0 58 46 0 0 11 25 46 0 0 42 11 305 0 0 38 0 190 0 119 33 0 0 0 0 0 108 0 0 0 39 0 0 0 0 0 0 0 0 287 0 11 0 0 0 0 297 0 0 282 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31 0 0 0 0 0 0 0 0 30 0 0 0 0 0 0 0 0 49 0 0 0 49 0 0 0 0 0 0 0 0 19 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 55.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 2, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_conj} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_nth) (integer_dup vector_integer_set integer_swap integer_mod) vector_integer_remove integer_stackdepth exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (exec_swap (vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat vector_integer_conj exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (exec_noop) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank) exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) () ()) ()) ()) ()) ()) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 0 2 3 2 2 2 4 2 2 3 2 2 2 2 2 4 4 2 2 2 0 2 3 2 4 0 4 2 4 3 2 4 3 2 2 2 3 0 2 3 4 4 4 2 0 3 4 4 0 3 48 48 48 47 46 33 29 0 8 3 30 31 27 13 0 48 42 0 8 37 45 19 8 8 26 12 42 27 43 41 22 41 7 22 27 11 39 19 20 6 8 20 43 14 47 26 17 18 2 14 30 35 12 37 19 47 43 2 49 6 23 43 8 23 21 22 0 34 34 33 2 22 46 11 48 3 29 35 16 2 20 47 10 42 23 41 48 42 15 45 31 14 4 24 16 25 10 42 45 6]
Total: 2668
Mean: 10.672
Genome size: 143
Size: 199
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 2.8509925834078E10
Median total errors in population: 222800
Error averages by case: (9.3002040225E7 6.5166026618E7 9.4001890212E7 6.7165996613E7 9.4001890212E7 6.8165956609E7 6.716595661E7 6.7165996614E7 9.4001890212E7 6.7165956609E7 9.4001890212E7 9.4001890212E7 6.7165966611E7 9.4001890212E7 6.5166046623E7 9.4001890212E7 9.4001890212E7 6.8166016616E7 9.4001890212E7 6.7165976611E7 9.4001890212E7 6.7165966611E7 6.816595661E7 9.4001890212E7 6.8165946609E7 9.4001890212E7 6.4166006615E7 6.716596661E7 9.4001890212E7 9.4001890212E7 6.7165956609E7 6.4166056623E7 6.716596661E7 9.4001890212E7 6.8165976612E7 6.7165956614E7 9.4001890212E7 9.4001890212E7 6.7165976611E7 6.916595661E7 6.4166026618E7 6.8165936608E7 6.7165986612E7 9.4001890212E7 9.4001890212E7 9.4001890212E7 6.916595661E7 6.7165956609E7 6.7165976612E7 6.6165906607E7 8.716260688E7 1.2500227103E8 8.5162697305E7 8.7162796892E7 1.27002050998E8 8.716275731E7 1.28002040996E8 8.6162727314E7 1.29002030977E8 1.13002191058E8 1.28002030978E8 1.28002040996E8 8.7162797298E7 1.18002191057E8 1.16002171052E8 1.16002221059E8 1.16002171052E8 9.3150705696E7 1.29002030977E8 1.28002040996E8 1.27002050999E8 1.27002040978E8 9.0162246835E7 1.15002191057E8 9.2162786845E7 9.4166317226E7 1.18002191057E8 1.16002211057E8 9.2162756844E7 8.7162777294E7 9.4166277224E7 9.1166277235E7 9.0162676848E7 1.15002201058E8 8.6162777309E7 1.28002040954E8 1.28002030976E8 8.7142855261E7 1.27002040977E8 1.18002191057E8 9.2162796852E7 1.1500219106E8 1.17002221061E8 1.18002191056E8 8.7162736872E7 8.7162717303E7 9.3166277229E7 1.17002201052E8 1.28002030978E8 1.19002191056E8 9.312545405E7 1.41002452789E8 1.37003202755E8 1.33002582342E8 9.712549358E7 9.420804269E7 1.04106073966E8 1.00208122719E8 1.3000265172E8 1.02106373138E8 1.37003082452E8 1.37002081421E8 9.7125443537E7 1.37002081545E8 9.8125383491E7 1.02106423792E8 1.03157458982E8 1.01106383295E8 1.36003162521E8 1.39001911598E8 1.37002131636E8 1.42002472331E8 9.3208202886E7 1.41002402615E8 1.48003042996E8 9.6125414055E7 1.56002743148E8 1.4500382304E8 1.40002952724E8 1.30003232792E8 9.6125033518E7 1.5500276318E8 1.33002512853E8 1.28002631732E8 1.37003042128E8 1.36002101422E8 9.5208102907E7 1.36003182383E8 9.4094911117E7 1.39002662234E8 1.08106083396E8 1.43002853389E8 9.7208182999E7 1.37003152702E8 1.41003912877E8 1.33002652812E8 1.01106253918E8 1.48003102812E8 9.7125324058E7 1.43003293367E8 1.08172437852E8 1.53038141712E8 1.54029511557E8 1.15175836889E8 1.09168766797E8 1.14201527427E8 1.53023625807E8 1.19002221057E8 1.07186354784E8 9.6207963475E7 1.48024685795E8 1.1618227255E8 1.6101791307E8 1.12189849803E8 1.2600205096E8 1.57031951237E8 1.68028006711E8 1.2700204098E8 1.36007857634E8 1.12133805219E8 1.16150280947E8 1.43013756792E8 1.47007277405E8 1.11210457255E8 1.62014841531E8 1.54007900345E8 1.60035126967E8 1.19172137618E8 1.06157442795E8 1.12140368482E8 1.41017899652E8 1.49044687802E8 1.49006996906E8 1.43017420015E8 1.06170218581E8 1.08194510088E8 1.44036564733E8 1.53015705754E8 1.50015736184E8 1.56004985367E8 1.09120479915E8 1.17133590722E8 1.19150368801E8 9.7216793911E7 1.16163184906E8 1.15159796143E8 1.03250688055E8 1.12123037381E8 9.3125304127E7 1.11243647394E8 1.59026666873E8 1.12218800863E8 1.50009620502E8 1.510307932E8 1.0914417031E8 1.08179897545E8 1.45035477514E8 9.6125444123E7 1.56030791978E8 1.44005135164E8 1.51021550544E8 1.09187644789E8 1.09191246084E8 1.50015729356E8 1.56011518084E8 1.5601288855E8 1.38002041614E8 1.55027728998E8 1.12208718498E8 1.1721147802E8 1.28002651724E8 1.56013830061E8 1.47029519746E8 1.08225222781E8 1.13238733675E8 1.02106043958E8 1.13288873636E8 1.56025540566E8 1.62008243428E8 9.4208102792E7 1.53010575855E8 1.53034610447E8 1.37009848872E8 1.10156400152E8 1.48023852842E8 1.13148387547E8 1.67028700489E8 1.09144040437E8 1.02219123372E8 1.57038310832E8 1.10224681256E8 1.68009773379E8 1.19003733883E8 1.02195010221E8 1.142188644E8 1.13243546055E8 1.54015419843E8 1.55039275525E8 1.06159603608E8 1.62003664037E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 2 1 0 2 1 0 0 0 0 0 2 2 1 0 0 1 1 0 0 0 2 1 0 0 0 1 2 0 1 0 1 0 0 1 2 2 1 1 0 1 2 1 0 2 47 46 46 47 46 30 28 0 5 0 27 26 25 11 0 46 40 0 6 36 42 16 5 6 23 9 40 22 42 39 20 40 6 20 22 10 37 16 15 4 7 19 39 12 45 23 13 17 0 12 28 32 10 36 17 47 41 0 48 3 21 41 6 20 19 20 0 31 31 31 0 21 44 9 47 2 27 34 14 0 16 44 8 40 20 38 47 40 12 44 31 13 3 22 12 24 9 38 44 3)
Average genome size in population (length): 116.904
Average program size in population (points): 159.26
Average percent parens in population: 0.260
Minimum age in population: 18.4384765625
Maximum age in population: 23.230224609375
Average age in population: 21.01599829101562
Median age in population: 21.08062744140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.553
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.669
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 2223206510
--- Timings ---
Current time: 1559236364082 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Sort Vector problem report - generation 15
Test total error for best: 28107
Test mean error for best: 11.02235
;;------------------------------
Outputs of best individual on training cases:
Correct output: [0]
| Program output: [0]

Correct output: [100]
| Program output: [100]

Correct output: [-100]
| Program output: [-100]

Correct output: [1000]
| Program output: [1000]

Correct output: [-1000]
| Program output: [-1000]

Correct output: [748]
| Program output: [748]

Correct output: [605]
| Program output: [605]

Correct output: [380]
| Program output: [380]

Correct output: [-697]
| Program output: [-697]

Correct output: [927]
| Program output: [927]

Correct output: [-281]
| Program output: [-281]

Correct output: [-710]
| Program output: [-710]

Correct output: [213]
| Program output: [213]

Correct output: [-472]
| Program output: [-472]

Correct output: [27]
| Program output: [27]

Correct output: [-602]
| Program output: [-602]

Correct output: [-20]
| Program output: [-20]

Correct output: [236]
| Program output: [236]

Correct output: [-789]
| Program output: [-789]

Correct output: [737]
| Program output: [737]

Correct output: [-845]
| Program output: [-845]

Correct output: [584]
| Program output: [584]

Correct output: [309]
| Program output: [309]

Correct output: [-846]
| Program output: [-846]

Correct output: [526]
| Program output: [526]

Correct output: [-663]
| Program output: [-663]

Correct output: [159]
| Program output: [159]

Correct output: [948]
| Program output: [948]

Correct output: [-434]
| Program output: [-434]

Correct output: [-107]
| Program output: [-107]

Correct output: [765]
| Program output: [765]

Correct output: [39]
| Program output: [39]

Correct output: [706]
| Program output: [706]

Correct output: [-688]
| Program output: [-688]

Correct output: [388]
| Program output: [388]

Correct output: [42]
| Program output: [42]

Correct output: [-654]
| Program output: [-654]

Correct output: [-709]
| Program output: [-709]

Correct output: [968]
| Program output: [968]

Correct output: [331]
| Program output: [331]

Correct output: [125]
| Program output: [125]

Correct output: [501]
| Program output: [501]

Correct output: [998]
| Program output: [998]

Correct output: [-659]
| Program output: [-659]

Correct output: [-832]
| Program output: [-832]

Correct output: [-555]
| Program output: [-555]

Correct output: [312]
| Program output: [312]

Correct output: [955]
| Program output: [955]

Correct output: [399]
| Program output: [399]

Correct output: [26]
| Program output: [26]

Correct output: [2 129]
| Program output: [2 129]

Correct output: [-4 1]
| Program output: [1 -4]

Correct output: [74 999]
| Program output: [74 999]

Correct output: [987 995]
| Program output: [995 987]

Correct output: [-812 -788]
| Program output: [-788 -812]

Correct output: [584 705]
| Program output: [584 705]

Correct output: [-432 -192]
| Program output: [-192 -432]

Correct output: [170 526]
| Program output: [170 526]

Correct output: [-983 -595]
| Program output: [-983 -595]

Correct output: [-937 213]
| Program output: [-937 213]

Correct output: [-859 -393]
| Program output: [-859 -393]

Correct output: [-982 -43]
| Program output: [-43 -982]

Correct output: [725 880]
| Program output: [725 880]

Correct output: [-403 996]
| Program output: [-403 996]

Correct output: [-193 555]
| Program output: [-193 555]

Correct output: [-980 256]
| Program output: [-980 256]

Correct output: [-157 541]
| Program output: [-157 541]

Correct output: [-390 18]
| Program output: [-390 18]

Correct output: [-853 -423]
| Program output: [-853 -423]

Correct output: [-166 -55]
| Program output: [-55 -166]

Correct output: [-566 -514]
| Program output: [-514 -566]

Correct output: [-325 -191]
| Program output: [-191 -325]

Correct output: [-336 30]
| Program output: [-336 30]

Correct output: [-925 285]
| Program output: [-925 285]

Correct output: [-467 958]
| Program output: [-467 958]

Correct output: [-267 957]
| Program output: [-267 957]

Correct output: [-823 880]
| Program output: [-823 880]

Correct output: [-103 310]
| Program output: [-103 310]

Correct output: [-483 354]
| Program output: [-483 354]

Correct output: [661 871]
| Program output: [661 871]

Correct output: [-807 529]
| Program output: [-807 529]

Correct output: [-150 159]
| Program output: [-150 159]

Correct output: [-913 68]
| Program output: [-913 68]

Correct output: [-528 611]
| Program output: [-528 611]

Correct output: [448 671]
| Program output: [448 671]

Correct output: [-494 -160]
| Program output: [-494 -160]

Correct output: [-881 -643]
| Program output: [-643 -881]

Correct output: [17 811]
| Program output: [17 811]

Correct output: [-795 -626]
| Program output: [-626 -795]

Correct output: [-661 858]
| Program output: [-661 858]

Correct output: [-38 286]
| Program output: [-38 286]

Correct output: [-811 697]
| Program output: [-811 697]

Correct output: [-904 957]
| Program output: [-904 957]

Correct output: [-339 254]
| Program output: [-339 254]

Correct output: [190 656]
| Program output: [656 190]

Correct output: [606 914]
| Program output: [606 914]

Correct output: [-670 577]
| Program output: [-670 577]

Correct output: [-328 456]
| Program output: [-328 456]

Correct output: [-929 -157]
| Program output: [-929 -157]

Correct output: [-901 914]
| Program output: [-901 914]

Correct output: [-322 181 723]
| Program output: [-322 181 723]

Correct output: [-998 -469 -290 322]
| Program output: [-469 -290 -998 322]

Correct output: [-683 -457 289 869]
| Program output: [-457 -683 869 289]

Correct output: [-938 -847 -176 379]
| Program output: [-938 -847 379 -176]

Correct output: [-652 -440 944]
| Program output: [-652 944 -440]

Correct output: [-862 -151 650 965]
| Program output: [650 -151 -862 965]

Correct output: [-113 125 281 328 880]
| Program output: [281 -113 880 125 328]

Correct output: [-609 451 884 939]
| Program output: [-609 939 451 884]

Correct output: [-701 395 492]
| Program output: [-701 492 395]

Correct output: [-833 -199 43 460 932]
| Program output: [-833 932 -199 460 43]

Correct output: [-781 -230 424 972]
| Program output: [-781 972 -230 424]

Correct output: [-867 -297 -200]
| Program output: [-867 -200 -297]

Correct output: [-204 882 934]
| Program output: [-204 934 882]

Correct output: [-806 -221 -184]
| Program output: [-221 -806 -184]

Correct output: [501 539 828]
| Program output: [828 539 501]

Correct output: [-862 -257 -120 599 982]
| Program output: [-120 599 982 -862 -257]

Correct output: [-601 -448 -345 154 362]
| Program output: [-345 154 -448 362 -601]

Correct output: [-328 22 24 263 978]
| Program output: [-328 263 22 24 978]

Correct output: [-187 10 414 745]
| Program output: [-187 745 10 414]

Correct output: [-910 -841 708]
| Program output: [-841 -910 708]

Correct output: [-685 -628 -625]
| Program output: [-685 -628 -625]

Correct output: [-983 -364 -104 184]
| Program output: [-983 -104 -364 184]

Correct output: [-161 -20 734 792]
| Program output: [792 -20 -161 734]

Correct output: [-506 -41 -37 393]
| Program output: [-37 -41 -506 393]

Correct output: [-957 -894 -591 -563 -114]
| Program output: [-563 -114 -957 -894 -591]

Correct output: [-898 249 558]
| Program output: [-898 249 558]

Correct output: [-737 -482 -59 355 471]
| Program output: [-59 -737 471 -482 355]

Correct output: [-276 -78 22 323 478]
| Program output: [-276 -78 22 478 323]

Correct output: [-561 -418 -218 -79 201]
| Program output: [-418 -561 201 -79 -218]

Correct output: [-575 -160 151 475]
| Program output: [-160 -575 475 151]

Correct output: [5 520 787]
| Program output: [5 5 520]

Correct output: [-468 -223 411 648 918]
| Program output: [-223 -468 411 918 648]

Correct output: [-877 -237 -56 415]
| Program output: [-56 -237 415 -877]

Correct output: [-930 -146 135]
| Program output: [-146 -930 135]

Correct output: [-964 -945 465 485]
| Program output: [-964 465 -945 485]

Correct output: [-619 -556 -190]
| Program output: [-619 -190 -556]

Correct output: [-907 -876 208 580]
| Program output: [580 -876 -907 208]

Correct output: [-237 527 980 999]
| Program output: [-237 527 980 999]

Correct output: [-902 41 278]
| Program output: [41 -902 278]

Correct output: [-951 -798 -675 -358]
| Program output: [-358 -951 -675 -798]

Correct output: [-639 -244 374 382 548]
| Program output: [-244 548 382 -639 374]

Correct output: [-820 -806 -741 -553 16]
| Program output: [16 -741 -820 -806 -553]

Correct output: [-937 -141 -97 598]
| Program output: [-141 598 -937 -97]

Correct output: [-624 -352 238 581]
| Program output: [-352 -624 238 581]

Correct output: [-223 -124 640 713 734]
| Program output: [-223 -124 640 713 734]

Correct output: [-865 -803 -670 977]
| Program output: [-670 -803 977 -865]

Correct output: [-928 -696 108 256 443]
| Program output: [-696 256 -928 108 443]

Correct output: [-811 -783 -763 -739 -549]
| Program output: [-783 -549 -811 -739 -763]

Correct output: [-428 333 797]
| Program output: [-428 333 797]

Correct output: [-999 -600 -535 -4 34]
| Program output: [-535 -600 -4 34 -999]

Correct output: [-968 -943 -925 -917 -896 -832 -699 -662 -645 -636 -592 -549 -424 -318 -230 -211 -187 -78 86 89 207 221 291 311 324 400 401 402 403 422 441 467 497 500 525 546 566 598 631 661 668 677 702 775 824 883 922 935 938 940]
| Program output: [935 -187 -925 -645 -592 922 546 422 940 -832 775 401 -549 291 677 -78 -917 -211 -896 467 -662 661 -968 -699 497 -636 -318 668 311 -943 500 566 221 598 403 525 89 824 207 938 441 702 86 324 -230 -424 400 883 402 631]

Correct output: [-966 -931 -905 -874 -873 -860 -810 -805 -801 -790 -786 -768 -766 -746 -707 -696 -679 -632 -623 -604 -523 -521 -498 -459 -412 -359 -130 -50 -47 -17 -16 58 127 137 241 439 455 471 482 538 631 634 647 650 709 768 832 885 945 975]
| Program output: [-805 832 -905 -459 -523 -746 650 -679 631 -790 634 -696 647 -130 945 137 471 455 768 -632 -786 -359 -768 241 482 885 -521 975 538 -707 -17 -498 -801 -966 -874 58 -604 -47 709 -931 -16 -766 -810 -412 -623 -860 -50 439 -873 127]

Correct output: [-939 -912 -894 -891 -887 -866 -865 -861 -861 -834 -831 -783 -706 -702 -694 -663 -585 -494 -445 -372 -350 -192 -192 -95 -66 -23 110 165 189 191 208 248 254 269 299 303 323 357 372 431 470 490 504 561 580 717 780 830 885 906]
| Program output: [-861 -445 431 717 -23 372 189 -865 -350 165 -891 -887 470 208 -834 -706 303 580 -861 -694 -372 906 -585 357 -912 -95 490 -894 830 -866 -702 -66 780 110 885 -831 323 269 -192 248 191 299 -939 254 561 -783 504 -663 -494 -192]

Correct output: [-897 -835 -803 -752 -718 -662 -662 -659 -647 -598 -400 -376 -360 -346 -267 -266 -253 -246 -221 -176 -166 -107 -86 -66 -13 -11 31 31 171 195 196 294 325 352 450 579 584 589 636 664 689 724 732 818 827 866 916 961 974 996]
| Program output: [-897 171 -66 584 -752 -221 732 196 31 724 -360 -803 -662 818 -647 974 827 -598 -11 664 -246 -718 -400 -835 -13 325 -107 961 -346 450 352 -86 -662 689 -266 636 866 996 579 31 -166 -659 195 -176 -267 294 916 589 -253 -376]

Correct output: [-957 -902 -896 -891 -782 -779 -737 -700 -606 -483 -480 -470 -432 -414 -392 -338 -218 -180 -85 -44 70 77 206 261 274 312 391 472 475 479 490 529 561 567 623 634 657 670 723 753 757 759 827 834 850 863 869 898 913 931]
| Program output: [670 -414 -432 834 757 623 391 -957 723 -218 472 863 312 479 -85 490 274 -470 759 931 70 -483 -782 827 -44 -891 657 567 -700 -737 77 561 -338 261 850 634 -779 -180 869 753 -480 -392 475 898 -896 -606 -902 529 913 206]

Correct output: [-984 -843 -809 -746 -744 -721 -701 -682 -634 -589 -549 -541 -515 -492 -328 -269 -268 -151 -56 -8 71 132 276 343 454 544 557 618 638 722 752 765 902 945]
| Program output: [-589 276 -809 343 -151 -701 132 -549 -56 945 -269 618 638 -744 -984 765 557 722 -843 -682 454 -515 902 544 -328 -634 -268 -8 -746 71 -541 -721 -492 752]

Correct output: [-952 -882 -868 -854 -725 -693 -680 -663 -564 -563 -555 -445 -428 -386 -367 -349 -286 -286 -263 -98 10 70 341 494 575 630 693 737 764 818 876 883]
| Program output: [-952 876 -693 -349 -555 883 -286 -98 630 -854 494 -445 -563 341 -680 575 -882 -725 -263 -386 -663 -286 70 764 -428 737 -367 818 -564 -868 10 693]

Correct output: [-234 886]
| Program output: [-234 886]

Correct output: [-961 -718 -423 -322 -140 56 622 955 957 957]
| Program output: [-961 622 -423 957 955 -322 56 957 -140 -718]

Correct output: [-242 92 662 804]
| Program output: [92 -242 804 662]

Correct output: [-1000 -974 -920 -867 -818 -741 -738 -712 -614 -574 -480 -390 -343 -221 -154 -121 66 69 137 256 286 314 358 495 537 574 605 903 938 972 975 979]
| Program output: [-738 -614 -154 -480 938 979 975 -867 256 574 -741 -574 903 537 137 66 -221 -390 -343 -920 -712 -121 972 69 495 358 -818 314 -1000 286 -974 605]

Correct output: [-846 -726 -639 -575 -413 -404 -312 -265 -197 -184 -116 -114 -95 213 233 259 367 533 539 590 598 606 617 694 698 845 868 916 937 964 992]
| Program output: [-404 694 590 259 868 617 845 -95 233 -116 -639 606 -265 -846 598 -197 992 213 937 367 -312 -726 698 -114 964 -413 539 533 -184 -575 916]

Correct output: [-972 -919 -865 -855 -851 -844 -705 -502 -442 -427 -417 -384 -363 -317 -262 -207 -33 -6 46 52 202 287 312 407 443 540 557 732 759 877]
| Program output: [-6 -33 -865 557 -317 -705 -502 287 407 202 -855 -207 759 -844 -384 -262 732 -442 -363 52 -417 46 877 443 -427 -919 -972 312 -851 540]

Correct output: [-860 -837 -777 -742 -551 -401 -70 56 71 436 529 547 578 648]
| Program output: [-70 56 71 -837 648 -860 547 -777 578 -551 529 -401 436 -742]

Correct output: [-57 -14]
| Program output: [-57 -14]

Correct output: [-893 -842 -737 -707 -676 -621 -612 -589 -569 -555 -523 -490 -446 -408 -345 -294 -293 -214 -167 -161 -148 -134 -82 -68 -60 83 100 117 172 179 216 249 272 280 324 364 382 408 439 475 489 560 565 574 603 695 760 765 789 833]
| Program output: [-490 -167 172 382 179 -589 574 408 216 -408 -893 -161 272 833 117 -294 280 -555 603 789 -60 83 364 -737 -612 695 -134 -523 -82 489 -621 -345 760 324 475 439 249 -842 -68 -569 100 -676 -707 565 765 -214 -293 560 -446 -148]

Correct output: [-978 -860 -811 -747 -717 -705 -702 -615 -608 -591 -587 -579 -553 -532 -510 -458 -451 -438 -304 -297 -267 -251 -170 -168 -147 -123 -118 -99 19 132 210 276 315 325 335 430 441 456 495 498 509 598 665 765 907 986]
| Program output: [-811 -123 -267 -705 598 -251 -147 -747 -438 -702 -553 -99 430 495 -860 132 509 -532 456 -170 907 -297 441 986 765 210 498 -608 -579 -168 325 -458 335 -717 19 -304 -587 -591 -451 -118 665 315 -978 276 -615 -510]

Correct output: [-596 -409]
| Program output: [-596 -409]

Correct output: [-241 -178 -31 145 468 480 551 594 607 811]
| Program output: [-178 594 468 -241 551 811 -31 607 480 145]

Correct output: [-986 -920 -904 -892 -872 -802 -708 -665 -646 -636 -622 -598 -431 -389 -341 -290 -263 -188 -177 -177 -164 9 35 70 82 105 155 218 257 383 546 621 651 716 730 748 756 805 841 882 931]
| Program output: [-636 383 -665 621 730 -872 82 931 -904 -646 -892 -290 -177 -188 -389 -986 35 218 9 748 -708 -431 -263 756 -920 651 546 70 105 -598 -341 841 155 716 -177 882 -802 805 -164 -622 257]

Correct output: [-951 -951 -872 -810 -809 -791 -754 -749 -732 -724 -707 -705 -692 -677 -587 -569 -534 -412 -392 -391 -343 -334 -294 -214 -189 -156 -119 -62 -18 58 139 146 156 247 273 340 353 367 410 493 607 643 749 791 913]
| Program output: [607 -412 247 -391 -343 -569 643 -62 58 410 -189 493 -707 -791 273 340 -749 -732 -951 -119 139 -587 -18 -692 -809 913 -214 -724 791 -534 146 -677 353 -754 -156 -951 -392 -810 156 -705 -334 367 -294 -872 749]

Correct output: [-909 -854 -757 -750 -672 -619 -251 -243 82 153 219 262 360 435 456 540 573 575 837 934]
| Program output: [-750 262 -672 219 573 -251 360 -243 456 82 837 -757 934 153 -854 -909 575 540 -619 435]

Correct output: [-767 -682 -392 -356 -223 -217 20 47 323 692 775]
| Program output: [-682 -392 -767 323 -223 692 47 20 -217 775 -356]

Correct output: [-255 -181 479 556 580 823 872 985]
| Program output: [479 580 872 -255 985 -181 823 556]

Correct output: [-968 -836 -817 -806 -788 -784 -776 -753 -752 -568 -510 -415 -334 -52 -33 -23 72 155 208 339 390 399 468 660 834 897 921]
| Program output: [-784 -334 -33 208 -776 72 -806 921 468 399 339 390 -510 -968 155 -836 -52 -752 834 -753 -568 -788 -23 -415 -817 897 660]

Correct output: [-999 -940 -897 -744 -347 -335 -91 -33 115 127 228 616 694 872]
| Program output: [-940 -91 -999 -744 872 115 -33 127 -897 694 228 -335 -347 616]

Correct output: [-957 -942 -935 -916 -874 -863 -818 -779 -774 -751 -715 -708 -693 -688 -681 -634 -564 -496 -489 -489 -454 -384 -377 -367 -255 -183 -166 -62 -6 16 120 142 171 259 339 351 406 418 560 674 749 794 879 894]
| Program output: [-166 894 351 -863 -751 -681 16 120 -874 794 -942 560 -384 -496 -688 406 -715 -818 -779 749 -634 259 -564 -957 171 -774 -489 -489 142 -255 -693 -183 674 -367 -916 339 -62 -935 -708 418 -6 -454 -377 879]

Correct output: [-819 -761 -747 -728 -655 -616 -413 -389 -359 -351 -345 -278 -138 -100 -16 -14 -8 34 57 66 511 627 642 671 809 874 884 933 996]
| Program output: [-761 933 -359 874 671 57 996 -138 -747 -351 511 627 -655 -278 34 -8 642 -345 -100 -728 -16 66 884 809 -413 -616 -819 -14 -389]

Correct output: [-882 -864 -846 -794 -759 -730 -662 -638 -635 -616 -605 -593 -546 -524 -444 -398 -393 -348 -333 -263 -245 -236 -94 -84 -72 -20 73 82 203 204 258 298 300 327 370 414 429 487 598 636 672 736 787 788 860 945]
| Program output: [636 -593 -94 787 429 487 300 258 -524 -616 -393 -635 672 -882 -245 -605 73 82 -333 -794 -84 204 370 -864 -662 598 327 -20 -846 -759 -638 298 788 736 -348 -263 -730 414 203 -72 -398 -546 -236 945 -444 860]

Correct output: [-995 -926 -658 -653 -646 -642 -630 -561 -505 -392 -352 -347 -345 -324 -235 -206 -70 -32 -15 -4 15 20 128 131 158 192 205 209 241 459 538 628 645 720 732 746 851 878 924 935 954 959 960]
| Program output: [538 -653 -347 -926 205 645 158 -646 128 -352 954 459 20 -4 241 -15 -345 851 -324 -505 -561 960 -658 959 131 15 732 -32 746 -392 720 -995 192 -206 878 628 -235 935 -642 -70 -630 209 924]

Correct output: [-975 -959 -816 -802 -731 -467 -416 -340 -160 22 58 96 97 119 210 299 482 510 548 755 805 829 934 941 983]
| Program output: [22 22 210 829 -467 -816 983 299 482 96 58 -959 97 119 755 510 -731 941 -802 934 -416 805 548 -340 -975]

Correct output: [-962 -958 -856 -808 -754 -668 -630 -616 -558 -505 -447 -440 -371 -307 -295 -150 11 19 92 183 192 212 226 321 450 462 473 514 545 545 547 676 717 807 830 877 895 897 900 904 912 949 973 993 995]
| Program output: [-616 -754 545 -808 904 547 450 -295 912 949 -505 -440 321 807 -150 545 92 -630 -856 226 212 183 897 514 -447 676 900 -307 11 -962 192 -668 462 19 830 973 473 717 993 995 -958 877 -371 -558 895]

Correct output: [-804 -646 -121 258 310 507 805 934 935]
| Program output: [-646 -804 310 934 -121 805 258 507 935]

Correct output: [-860 -804 -796 -755 -748 -700 -664 -603 -593 -406 -82 -23 258 332 398 530 549 654 727 826 826 883 949 980]
| Program output: [-406 530 -82 -796 654 258 -23 883 -860 949 -700 -755 -748 332 -603 -664 398 549 -804 980 826 727 -593 826]

Correct output: [-889 -788 -778 -641 -499 -488 -379 -366 -309 -176 -99 -45 61 92 97 123 142 214 220 247 401 414 487 491 537 609 620 910 929]
| Program output: [609 620 401 247 929 220 -788 -488 -499 910 97 -45 -778 -366 61 -99 -176 -309 214 487 -379 -641 123 92 491 142 -889 537 414]

Correct output: [-758 -659 -162 18 151 176 201 283 302 343 669 770 885 954]
| Program output: [201 343 283 151 770 176 -758 -659 302 954 -162 18 885 669]

Correct output: [-996 -992 -979 -922 -693 -576 -537 -432 -310 -309 -283 -275 -273 -230 -209 -187 -185 -122 -113 -38 -21 32 83 117 157 228 235 327 328 424 487 575 622 644 673 714 761 859 878 916 939 995]
| Program output: [-992 859 575 -537 939 235 -693 -113 -38 -275 -230 -273 878 -310 622 -576 228 424 157 -283 644 -979 -21 761 -922 328 327 -122 995 714 -209 -185 -309 673 117 -187 916 487 -432 32 -996 83]

Correct output: [-823 -719 -631 -625 -542 -470 -393 -375 -338 -306 -261 -189 -36 279 349 651 679 722 893 939]
| Program output: [-625 -470 722 -338 939 -189 -261 -719 893 -393 -36 651 -542 -375 349 -631 -306 279 -823 679]

Correct output: [-987 -947 -944 -939 -935 -807 -794 -690 -686 -683 -643 -587 -493 -165 -27 1 193 709 767 890 933]
| Program output: [-947 193 -27 -987 -165 -493 -683 933 -807 -939 -690 -794 -686 -935 767 -944 1 890 -643 -587 709]

Correct output: [-421 -418 -293 -62 230 258 471 557]
| Program output: [-62 -418 258 471 230 557 -293 -421]

Correct output: [-105 -48 21 202 279 532 549 553 835 871 896]
| Program output: [871 -48 896 532 21 279 -105 549 835 202 553]

Correct output: [-997 -840 -736 -691 -361 -326 -322 -288 -194 -153 -79 -42 -6 181 257 267 374 376 462 504 775 852 899]
| Program output: [-736 257 -288 -691 267 -6 -79 181 -840 852 -194 -42 -322 374 899 -153 376 -326 462 -997 -361 775 504]

Correct output: [-991 -960 -915 -880 -846 -831 -820 -764 -492 -467 -466 -416 -285 -205 -73 -62 -48 -27 -20 -12 88 154 186 196 228 267 288 328 333 338 352 374 392 492 507 514 514 541 547 651 745 746 778 887]
| Program output: [-466 514 -820 88 -467 186 374 547 -831 228 267 288 887 352 -285 746 -991 651 492 -764 -960 -205 333 154 392 338 507 -48 -62 -12 -27 -915 541 -73 778 -492 745 514 328 -20 -846 -416 196 -880]

Correct output: [-790 -411 77 84 199 202 322 412 452 556 559 562 575 682 783 865]
| Program output: [77 199 202 322 575 -790 452 783 865 682 84 412 -411 559 562 556]

Correct output: [-973 -877 -877 -870 -868 -649 -638 -594 -588 -541 -512 -511 -504 -458 -447 -432 -290 -266 -245 -146 -92 -83 -77 7 58 122 128 150 209 215 246 247 390 422 443 461 484 509 523 560 599 629 693 724 749 859 887 960 985]
| Program output: [-146 985 629 -290 560 -877 -266 390 523 -594 443 128 -588 150 -245 -638 209 -511 122 -458 -92 -512 247 -504 599 246 859 -649 724 -870 960 461 7 422 693 -77 -541 215 -868 -447 887 509 -432 58 -83 749 -877 -973 484]

Correct output: [-872 -857 -857 -797 -759 -746 -717 -615 -234 -153 -144 -74 -59 -15 4 98 277 456 475 504 541 579 588 611 734 934 940]
| Program output: [-153 541 934 588 579 940 277 475 -797 -234 -15 456 611 504 -857 4 -59 -857 -746 -615 -74 -759 734 -872 98 -144 -717]

Correct output: [-992 -710 -649 -444 -371 -352 -195 -31 18 405 587 603 633 682 707 726 906 925]
| Program output: [726 18 -371 -710 707 682 587 405 -992 906 -195 -444 603 -649 -31 925 -352 633]

Correct output: [-976 -875 -733 -729 -600 -555 -500 -480 -420 -407 -375 -354 -234 143 193 424 617 697 751 881 957]
| Program output: [-354 881 957 617 -600 697 -420 751 -480 -733 -729 -555 -375 -234 193 143 -500 -407 -976 -875 424]

Correct output: [138 223 597]
| Program output: [597 138 223]

Correct output: [-921 -575 -511 -481 -473 -452 -399 -391 -176 -105 30 66 266 334 355 524 601 769]
| Program output: [-473 769 -921 -575 -511 -481 601 -391 334 -399 524 -452 30 -105 355 -176 66 266]

Correct output: [-995 -994 -952 -919 -865 -857 -739 -738 -705 -659 -658 -653 -564 -564 -560 -494 -407 -347 -312 -256 -77 233 264 277 352 482 594 671 767 795 949 959 963]
| Program output: [-952 -659 277 -560 671 -739 -653 594 264 767 352 -865 -738 -705 949 -919 795 -312 -857 -564 963 -347 -995 -256 482 -77 -407 -994 -658 -564 959 -494 233]

Correct output: [-986 -974 -939 -891 -867 -840 -832 -812 -588 -571 -495 -486 -482 -481 -370 -302 -267 -234 -156 -147 -27 27 69 121 203 367 393 489 500 505 563 634 647 721 813 991 1000]
| Program output: [-832 505 -267 721 -974 -867 813 634 -370 -986 -147 -481 -939 -486 203 -234 -302 -495 367 27 563 121 -812 647 69 -840 -891 -482 393 1000 489 991 -156 -571 -588 500 -27]

Correct output: [-873 -690 -447 -311 -218 -171 -103 -8 212 256 259 287 418 920]
| Program output: [-171 920 -447 -103 -311 -8 212 -873 -218 256 418 -690 287 259]

Correct output: [-967 -931 -858 -857 -845 -825 -788 -766 -597 -575 -482 -366 -320 -318 -297 -217 -211 -168 -155 39 43 113 154 169 200 297 389 442 480 591 664 731 826 844 876 887 900 978 982]
| Program output: [-155 978 -217 -168 -482 887 169 -211 -766 -575 -857 -366 844 154 -931 -318 -825 442 900 591 982 -845 731 389 826 -788 -597 -297 876 297 200 -967 -858 480 43 39 -320 664 113]

Correct output: [-761 -707 -703 -492 -446 -390 -277 -215 -178 -176 382 467 506 571 640 643 743 800 880 999]
| Program output: [-703 571 506 -390 800 -178 -492 -761 -707 643 999 -446 743 382 880 467 -176 640 -277 -215]

Correct output: [-997 -990 -969 -962 -934 -877 -766 -752 -631 -425 -418 -414 -350 -344 -342 -319 -313 -309 -268 -208 -167 -9 -3 18 35 47 70 165 258 265 293 297 318 341 346 454 457 465 503 519 544 592 611 626 664 719 760 840 922 970]
| Program output: [-631 293 -319 -752 341 258 503 -344 544 457 -414 265 346 -268 -997 592 -309 454 70 -425 -208 -9 465 760 -418 611 -350 -877 970 719 47 35 -313 664 626 -3 -990 840 -962 519 18 -766 -342 -934 297 922 318 165 -167 -969]

Correct output: [-986 -930 -906 -765 -696 -663 -648 -603 -575 -569 -554 -541 -532 -527 -469 -343 -307 -119 -80 10 54 74 80 88 186 365 385 394 401 451 480 537 572 588 623 657 657 721 723 819 846 858 859 890]
| Program output: [-527 365 480 -575 623 -696 -469 859 721 -648 572 -119 -930 -986 890 186 588 723 74 819 -554 858 -541 -307 -80 80 -532 -663 -906 846 657 -603 54 537 394 -343 10 385 -765 451 401 88 -569 657]

Correct output: [-196 383 486]
| Program output: [486 -196 383]

Correct output: [-931 -922 -910 -907 -883 -870 -799 -788 -785 -781 -772 -755 -719 -598 -501 -459 -436 -387 -375 -268 -224 -197 -178 -141 -127 -76 -40 17 27 30 101 102 117 287 332 338 366 451 471 489 501 504 715 721 768 783 805 902 911 912]
| Program output: [-907 -883 -40 911 783 -459 -141 -127 -910 102 27 -922 -501 -387 504 -785 471 902 451 912 501 -178 715 -719 -870 -931 366 117 -755 -375 -781 721 -76 489 805 -788 -598 287 768 -799 30 101 17 -224 -772 332 -197 338 -436 -268]

Correct output: [-754 -727 -463 -410 713 795 969]
| Program output: [-410 -463 713 -754 -727 969 795]

Correct output: [-982 -802 -647 -624 -622 -613 -556 -529 -517 -299 -286 -207 -139 -129 -32 63 119 133 146 155 555 555 642 929 930 939]
| Program output: [-982 -622 -613 929 642 -647 -624 119 930 -556 -32 -286 555 -802 -139 555 -299 63 939 -529 -129 -207 155 -517 133 146]

Correct output: [-962 -927 -902 -877 -841 -836 -763 -747 -737 -723 -708 -553 -552 -366 -341 -299 -278 -240 -231 -230 -171 -169 -152 -124 -66 -19 -16 8 55 75 139 260 263 285 288 412 423 423 518 568 729 781 914 921 924 974]
| Program output: [412 974 -927 568 -747 -231 263 8 -240 924 -341 288 260 -841 55 -66 -278 -19 -230 921 -169 423 -836 781 -124 -962 -553 -171 -902 -708 -299 -877 -16 -366 -737 -723 -152 75 285 729 518 139 -552 914 -763 423]

Correct output: [-912 -501 -269 124 250 448 618 816 918]
| Program output: [618 124 -501 816 -269 -912 448 918 250]

Correct output: [-911 -882 -812 -741 -677 -573 -315 -179 -124 -69 35 47 108 200 215 247 373 446 507 591 648 676 850 999]
| Program output: [-812 -741 -124 676 -911 446 200 999 -573 -315 -882 108 591 648 850 507 -179 373 247 35 47 215 -69 -677]

Correct output: [-899 -848 -775 -758 -741 -707 -566 -510 -498 -263 -189 -173 -36 8 93 416 590 652 692 874 899 907]
| Program output: [-173 -758 -707 -36 416 93 -566 -775 899 652 -498 907 -741 -510 692 -899 -189 590 -848 8 -263 874]

Correct output: [-927 -795 -568 -535 -514 -410 -358 -350 -260 -235 -85 20 98 188 255 276 301 391 396 515 567 938 997 998]
| Program output: [-535 -85 276 -927 396 301 20 -350 391 938 -568 567 98 -260 515 -358 -235 998 -795 997 -410 -514 188 255]

Correct output: [-674 -267 -11]
| Program output: [-674 -267 -11]

Correct output: [-998 -692 -665 -595 -560 -536 -511 -469 -378 -359 -329 -282 -176 -123 -114 -12 -12 27 37 51 116 132 185 292 340 360 408 457 595 627 652 658 725 726 842]
| Program output: [-560 -511 -123 408 658 726 -378 725 842 51 -12 -469 27 -114 -692 627 -595 340 652 360 -12 -359 -665 116 -282 -536 -998 185 -329 457 595 292 -176 37 132]

Correct output: [-995 -957 -957 -885 -750 -705 -431 -396 -383 -336 -289 -211 -163 -93 -66 43 73 90 127 221 307 331 360 384 387 444 476 564 566 589 634 675 824 825 972]
| Program output: [-431 564 566 589 307 360 90 -336 -93 -995 43 444 -885 384 -289 824 127 972 -383 -396 476 387 73 -163 -957 -957 331 -705 -750 221 -211 -66 825 634 675]

Correct output: [-977 -953 -861 -758 -739 -724 -614 -594 -524 -516 -507 -402 -365 -311 -283 -252 -162 -161 -120 -99 -75 17 24 69 168 218 224 229 260 367 668 740 882 912 943]
| Program output: [-758 668 -402 912 -524 740 367 -861 -507 218 -365 -161 -99 -739 -162 882 69 -516 -283 -977 24 -953 943 229 260 17 -614 -120 224 -75 -594 -311 168 -252 -724]

Correct output: [-911 252 684]
| Program output: [-911 684 252]

Correct output: [-851 -800 -633 -564 -524 -518 -477 -462 -408 -287 -228 -75 56 90 262 275 286 370 513 515 606 756 914 952 955]
| Program output: [-75 -228 955 56 513 -287 756 -524 -477 -851 90 -518 -462 952 275 286 -564 914 515 -800 606 -633 -408 262 370]

Correct output: [-974 -890 -835 -829 -813 -785 -761 -734 -731 -721 -709 -696 -632 -487 -328 -317 -294 -263 -200 -60 -41 -30 100 106 199 216 258 306 407 411 449 483 513 565 586 591 618 650 659 685 697 700 753 761 806 807 830 976]
| Program output: [-30 -317 685 -974 753 -696 -813 106 586 449 -785 306 -829 -731 700 100 618 407 806 -632 -890 -60 -487 976 -41 830 565 -835 -709 411 216 513 -200 -263 483 -734 199 -721 807 258 650 -328 -294 -761 761 659 591 697]

Correct output: [-876 -875 -851 -683 -657 -632 -542 -501 -381 29 254 520 547 835]
| Program output: [835 -381 -632 -851 -875 -657 -876 547 -501 254 29 -683 -542 520]

Correct output: [-982 -958 -952 -913 -905 -896 -827 -762 -754 -705 -694 -610 -608 -556 -555 -474 -434 -412 -362 -321 -285 -267 -253 -243 -183 -173 -162 -119 -25 -16 66 103 134 187 246 268 272 321 325 436 440 464 629 693 731 862 870 885 912 959]
| Program output: [-243 246 -16 -958 464 912 -610 187 -694 885 436 693 272 -913 -754 959 -556 440 -982 -285 -183 629 862 -896 321 -173 -119 -827 325 -952 -608 -434 103 66 -762 -253 268 731 -25 -321 870 -474 134 -905 -412 -362 -162 -705 -267 -555]

Correct output: [-317 416 475 811 931]
| Program output: [416 475 -317 931 811]

Correct output: [-845 -811 -796 -780 -749 -641 -636 -630 -615 -546 -540 -481 -393 -339 -297 -285 -220 -49 -23 21 144 218 220 254 261 278 385 503 796 853 868 973]
| Program output: [-540 278 261 385 -615 -780 -749 -641 -285 -339 218 -481 -845 -546 796 973 254 868 220 -630 21 -393 -220 -49 144 853 -811 -297 503 -636 -796 -23]

Correct output: [-986 -920 -860 -854 -801 -772 -766 -753 -652 -605 -558 -556 -431 -413 -408 -320 -304 -302 -301 -261 -207 -104 57 112 196 213 220 237 263 398 445 473 520 536 840 841 858]
| Program output: [-261 -302 -408 -301 -304 -207 -766 398 536 841 858 57 -104 840 473 -854 -320 -753 -860 520 -605 -986 112 -652 -558 -431 213 -772 -413 220 196 263 -920 237 445 -556 -801]

Correct output: [-971 -909 -728 -706 -610 -472 -415 -117 -59 67 221 295 381 628 649 684 731]
| Program output: [-472 -59 -117 -706 628 -971 649 731 381 -728 67 684 -415 221 -909 -610 295]

Correct output: [62 75 741 929]
| Program output: [741 75 62 929]

Correct output: [-847 -711 -571 -380 -378 -287 -246 -165 -142 -48 -38 -9 87 119 128 425 447 480 592 794]
| Program output: [-380 -378 425 592 -287 480 128 -711 119 -9 447 -571 794 -847 87 -38 -48 -165 -246 -142]

Correct output: [-946 -883 -846 -788 -760 -726 -721 -714 -678 -668 -662 -651 -590 -580 -549 -543 -540 -512 -433 -389 -389 -170 -97 -48 47 149 152 249 267 288 366 369 395 471 508 522 592 697 748 763 773 787 842 904 905 927 935 985]
| Program output: [-760 -433 787 -170 -543 249 288 -540 522 -788 -668 -389 -662 763 -549 395 -721 -97 905 904 -946 152 369 985 267 -726 -678 927 697 471 -846 592 773 47 -714 935 -512 366 -651 842 -389 -590 -883 149 -48 -580 508 748]

Correct output: [-950 -541 -413 -387 -275 -93 34 245 252 423 589 619]
| Program output: [-413 -387 423 -950 -93 34 252 619 -275 -541 245 589]

Correct output: [-966 -931 -916 -898 -886 -802 -796 -655 -614 -594 -545 -475 -452 -366 -364 -302 -289 -239 -149 -147 -132 -4 -2 15 47 56 112 129 192 192 244 302 305 326 331 380 509 768 819 822 862 902 910 972]
| Program output: [302 380 192 -594 -364 -796 -302 331 15 819 -802 326 -366 -655 -916 129 112 910 305 -966 972 244 -289 768 192 -2 902 -545 47 -147 -239 -452 -886 -931 -4 822 -149 -898 509 862 -132 -614 -475 56]

Correct output: [-977 -863 -653 -649 -640 -619 -437 -409 -384 -329 -244 -238 -194 -104 -36 141 338 372 460 481 514 528 583 607 617 666 878 971 974]
| Program output: [-649 -437 -619 617 -863 528 -977 -384 -194 -104 -36 -238 338 481 -653 460 -640 878 514 -409 583 -244 607 372 971 974 666 -329 141]

Correct output: [-959 -817 -810 -783 -757 -719 -718 -698 -626 -584 -460 -373 -371 -312 -247 -229 -104 -47 24 46 86 168 304 337 349 407 408 418 460 464 533 542 544 550 629 708 714 732 756 796 931 982]
| Program output: [-810 714 337 407 -47 -718 -783 408 982 544 756 732 -312 931 708 86 -460 533 418 460 -719 -584 -698 304 -757 464 46 -626 24 542 -373 -104 -371 -229 168 796 349 629 -247 -817 550 -959]

Correct output: [-959 -936 -932 -921 -875 -835 -810 -780 -764 -761 -661 -641 -593 -469 -461 -434 -382 -310 -268 -262 -156 -135 -129 -128 -99 -65 -52 -44 -39 -22 1 87 112 130 146 223 260 306 353 365 410 425 527 662 718 734 768 824 840 900]
| Program output: [-780 -810 130 -128 -135 -835 87 900 -921 -268 -310 -99 -52 260 -875 -661 425 410 353 -641 112 -22 -764 -44 662 718 -156 840 -39 -932 734 -593 -959 768 1 -469 -262 -382 -761 146 -461 306 223 -65 824 -129 527 -936 -434 365]

Correct output: [-981 -978 -896 -873 -866 -825 -814 -744 -554 -440 -414 -401 -360 -338 -275 -213 -151 -139 -131 -100 -55 -26 -1 25 42 53 66 70 123 188 265 373 394 418 450 598 700 735 772 799 802 811 856 892 996]
| Program output: [-100 450 -978 -338 700 598 418 802 265 -139 -814 892 -554 -360 -1 188 -414 -213 -866 -873 53 394 996 373 -55 856 -401 42 -744 -440 123 25 799 -896 70 -131 -26 -151 -825 -981 -275 66 772 811 735]

Correct output: [-613 -568 -341 -240 -185 -162 -115 19 133 155 183 328 841 845 904 1000]
| Program output: [-341 133 -162 -613 328 183 -115 -185 841 904 845 19 -240 1000 155 -568]

Correct output: [-974 -890 -880 -845 -803 -711 -665 -644 -524 -518 -412 -346 -307 -304 -284 -280 -228 -223 -184 -131 -71 -63 -61 -3 56 72 73 141 214 217 299 314 391 393 421 438 539 564 574 580 611 691 726 732 813 853 879 929 961 972]
| Program output: [-223 961 -845 -184 -346 -280 853 -524 -412 813 -61 438 314 299 726 -890 732 -131 564 691 -880 -644 539 391 -974 580 141 -228 217 -803 -711 -71 393 -284 879 972 -304 -63 214 421 72 73 574 -307 611 -665 56 -518 -3 929]

Correct output: [-922 -837 -762 -747 -719 -691 -673 -652 -640 -633 -568 -506 -498 -487 -364 -331 -307 -302 -266 -221 -122 1 50 101 165 218 256 311 488 488 497 537 568 573 590 602 885 907]
| Program output: [-568 101 50 488 -719 -307 -673 590 885 -633 -302 -506 602 -221 1 -747 218 -122 -266 907 -498 165 -762 -364 256 537 -837 311 488 -487 568 -922 -640 -652 497 -331 -691 573]

Correct output: [-967 -910 -712 -672 -489 -405 -294 -157 -140 -70 -45 -24 -23 308 402 789 889]
| Program output: [-672 -489 -405 -294 -712 789 -157 -45 308 -910 -967 -140 889 402 -23 -70 -24]

Correct output: [-869 -735 2 501 871 938]
| Program output: [-735 2 938 -869 501 871]

Correct output: [-965 -931 -871 -858 -669 -600 -568 -283 -238 -230 -150 20 71 191 292 334 557 571 601 622 673 719 725 815 898 910 938]
| Program output: [571 -871 -931 -669 622 292 -568 673 910 815 20 71 -600 -150 898 601 -238 -230 725 -965 -283 191 938 557 334 -858 719]

Correct output: [-945 -855 -618 -482 -319 -279 3 166 173 250 277 387 494 522 591 658]
| Program output: [-279 277 522 387 591 173 -618 -482 -319 -855 -945 658 166 494 250 3]

Correct output: [-929 -922 -921 -820 -674 -626 -583 -574 -419 -399 -358 -295 -293 -269 -195 -146 54 68 125 237 267 320 342 360 445 670 780 856 964]
| Program output: [-921 68 -146 360 -269 964 -929 54 670 237 -358 -295 -922 -195 320 -293 -820 -626 125 267 445 -674 -574 342 -419 780 -399 -583 856]

Correct output: [-973 -956 -944 -831 -763 -186 -111 -85 -83 0 552 589 592]
| Program output: [-85 -831 0 -186 -956 -111 -763 -944 589 552 -973 -83 592]

Correct output: [-996 -964 -911 -911 -893 -704 -477 -432 -428 -407 -373 -326 -312 -222 -181 -157 -80 -69 1 39 209 264 275 297 313 368 425 463 490 498 524 534 589 673 682 708 765 775 792 821 853 865 962]
| Program output: [-80 368 962 775 821 524 -964 -996 209 -893 297 -407 39 -222 -428 463 853 275 -181 -432 589 -373 -69 708 -326 534 313 498 -911 425 673 -312 765 490 1 -157 264 792 -704 -911 682 -477 865]

Correct output: [-874 -870 -845 -824 -818 -814 -805 -722 -715 -707 -698 -692 -664 -633 -624 -522 -257 -236 -225 -129 -123 -69 65 106 151 210 216 276 284 340 346 375 424 552 587 644 662 713 713 718 721 737 769 797 802 890 890]
| Program output: [-522 346 769 276 -715 -69 106 890 -814 737 718 -123 -805 -874 -870 -236 890 284 713 210 552 -818 -845 65 -664 -129 662 424 797 -633 -698 216 -225 -722 644 721 375 -824 -707 713 587 -692 -624 -257 802 151 340]

Correct output: [-605 -497 -390 -202 -86 -49]
| Program output: [-390 -86 -49 -605 -202 -497]

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Lexicase best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (exec_swap (integer_max vector_integer_yankdup integer_swap) (in1) vector_integer_replacefirst integer_shove) (exec_swap (in1 vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_yank exec_do*times () vector_integer_replace) integer_min integer_mod vector_integer_remove vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc integer_yankdup exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (vector_integer_last vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())))) ()) ()) ()) () ()))) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 4 0 2 0 2 2 2 2 2 3 2 2 2 2 5 2 3 4 2 4 2 2 3 48 47 49 48 46 33 29 0 6 3 28 29 27 13 2 49 43 2 9 39 45 18 7 8 24 11 42 23 43 41 22 43 8 24 27 11 39 18 18 6 8 22 40 14 47 24 17 18 2 17 31 36 12 39 20 49 43 2 49 7 21 43 8 23 22 20 2 32 33 33 0 24 46 11 49 3 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 24 16 27 12 40 46 4]
Lexicase best number of elite cases: 108
Lexicase best total error: 2671
Lexicase best mean error: 10.684
Lexicase best size: 210
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction []} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction vector_integer_last} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_739} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Zero cases best program: (vector_integer_stackdepth [] vector_integer_yankdup vector_integer_nth integer_dup_items exec_yank vector_integer_last integer_max integer_swap exec_s_when_autoconstructing (exec_swap (integer_max vector_integer_yankdup integer_swap) (in1) vector_integer_replacefirst integer_shove) (exec_swap (in1 vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_yank exec_do*times () vector_integer_replace) integer_min integer_mod vector_integer_remove vector_integer_reverse exec_yank in1) (vector_integer_replacefirst integer_shove) exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (vector_integer_last exec_do*count (integer_mod exec_s (vector_integer_dup exec_s_when_autoconstructing (exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat integer_yankdup exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc integer_yankdup exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (vector_integer_rot) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_739 (integer_yank exec_rot (integer_pop) (vector_integer_last vector_integer_take integer_dup_times integer_pop) (exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())))) ()) ()) ()) () ()))) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 0 0 2 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 0 0 0 2 0 2 3 2 2 0 2 4 2 0 2 2 2 0 0 2 4 4 3 2 0 2 4 3 2 4 2 2 4 0 2 0 2 2 2 2 2 3 2 2 2 2 5 2 3 4 2 4 2 2 3 48 47 49 48 46 33 29 0 6 3 28 29 27 13 2 49 43 2 9 39 45 18 7 8 24 11 42 23 43 41 22 43 8 24 27 11 39 18 18 6 8 22 40 14 47 24 17 18 2 17 31 36 12 39 20 49 43 2 49 7 21 43 8 23 22 20 2 32 33 33 0 24 46 11 49 3 31 37 15 2 16 47 10 42 29 40 49 44 13 48 37 17 3 24 16 27 12 40 46 4]
Zero cases best number of elite cases: 108
Zero cases best number of zero cases: 101
Zero cases best total error: 2671
Zero cases best mean error: 10.684
Zero cases best size: 210
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (721 793 734 794 735 795 797 796 735 797 735 734 798 734 782 734 734 795 735 796 734 795 798 735 796 735 794 794 735 735 797 786 794 735 797 788 735 734 794 798 792 798 795 735 734 734 797 797 798 777 382 314 259 413 306 252 306 260 329 309 329 313 253 307 309 305 309 401 329 313 306 310 423 309 438 407 307 310 439 253 407 408 442 305 254 344 310 259 310 307 439 306 304 308 445 257 408 306 329 307 57 12 29 26 289 29 10 1 71 305 24 207 322 96 309 9 10 66 9 80 49 22 26 29 23 55 45 5 40 29 304 5 1 37 29 196 19 147 31 4 272 181 6 8 131 9 4 17 49 17 17 12 6 1 187 3 7 303 6 29 14 9 1 2 338 24 29 328 7 2 73 16 7 2 10 4 4 2 7 27 8 2 33 2 4 3 7 4 38 16 1 13 3 19 3 1 7 62 23 13 7 7 7 14 2 143 104 21 131 29 28 3 25 2 10 1 53 8 10 13 71 4 19 17 17 1 2 14 1 17 93 8 15 1 6 20 1 4 23 65 101 25 83 1 2 3 91 2 1 2)
Population mean number of elite cases: 61.81
Count of perfect (error zero) individuals by case: (721 793 734 794 735 795 797 796 735 797 735 734 798 734 782 734 734 795 735 796 734 795 798 735 796 735 794 794 735 735 797 786 794 735 797 788 735 734 794 798 792 798 795 735 734 734 797 797 798 777 382 314 259 413 306 252 306 260 329 309 329 313 253 307 309 305 309 401 329 313 306 310 423 309 438 407 307 310 439 253 407 408 442 305 254 344 310 259 310 307 439 306 304 308 445 257 408 306 329 307 57 0 29 0 289 29 0 1 71 0 0 207 322 96 309 9 0 0 0 80 49 0 0 29 23 55 0 0 40 29 304 0 0 37 0 196 0 147 31 0 0 0 0 0 131 0 0 0 49 0 0 0 0 0 0 0 0 303 0 29 0 0 0 0 338 0 0 328 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 0 0 53 0 0 0 71 0 0 0 0 0 0 0 0 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 58.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mod} {:close 2, :instruction vector_integer_remove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_first} {:close 1, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction exec_dup_items} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction exec_do*times} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 639} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_conj} {:close 2, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 2, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_869} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_dup vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap vector_integer_concat integer_dup_items integer_flush vector_integer_yankdup integer_swap in1 vector_integer_last integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup vector_integer_first exec_shove () vector_integer_stackdepth vector_integer_nth) (integer_dup vector_integer_set integer_swap integer_mod) vector_integer_remove integer_stackdepth exec_yankdup vector_integer_rest integer_shove vector_integer_first exec_shove () vector_integer_stackdepth integer_swap in1 vector_integer_replacefirst integer_shove exec_swap (integer_max vector_integer_yankdup exec_rot () (vector_integer_dup_items vector_integer_rot exec_stackdepth vector_integer_reverse exec_yank exec_swap () (vector_integer_yank vector_integer_first vector_integer_conj exec_dup_items vector_integer_rest integer_inc integer_mod integer_mult vector_integer_reverse exec_do*times () vector_integer_replace) vector_integer_dup_times integer_mod vector_integer_remove integer_sub) (exec_swap (vector_integer_reverse integer_mod exec_s (vector_integer_dup vector_integer_dup_times exec_yankdup 639 integer_sub integer_pop exec_do*count () integer_pop) (integer_dup exec_swap (vector_integer_concat vector_integer_conj exec_k () () exec_yankdup integer_dup_times exec_dup_times (vector_integer_last exec_do*times (integer_inc vector_integer_replace exec_rot (exec_dup (in1 vector_integer_dup vector_integer_remove exec_y_when_autoconstructing (exec_dup (exec_noop) integer_yankdup vector_integer_subvec integer_dec) integer_dup) integer_inc vector_integer_shove) () (vector_integer_subvec integer_dup_items) in1 vector_integer_reverse vector_integer_set vector_integer_dup integer_yank)) vector_integer_dup_times vector_integer_yankdup exec_swap (tag_exec_869 (integer_yank) exec_rot (integer_pop) (exec_s (vector_integer_take integer_dup_times integer_pop exec_shove (vector_integer_stackdepth vector_integer_swap) exec_shove (integer_dup) exec_k_when_autoconstructing (exec_k (integer_rot) (vector_integer_pop integer_sub integer_swap integer_stackdepth) vector_integer_remove exec_k_when_autoconstructing (integer_dec) () vector_integer_pop) (vector_integer_rot exec_k (exec_stackdepth vector_integer_yank exec_s (exec_s () () ()) () ()) ())) () ()) ()) ()) ()) ()) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 2 0 2 0 0 0 0 2 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 0 0 2 0 0 0 0 0 0 2 3 2 2 2 4 2 2 3 2 2 2 2 2 4 4 2 2 2 0 2 3 2 4 0 4 2 4 3 2 4 3 2 2 2 3 0 2 3 4 4 4 2 0 3 4 4 0 3 48 48 48 47 46 33 29 0 8 3 30 31 27 13 0 48 42 0 8 37 45 19 8 8 26 12 42 27 43 41 22 41 7 22 27 11 39 19 20 6 8 20 43 14 47 26 17 18 2 14 30 35 12 37 19 47 43 2 49 6 23 43 8 23 21 22 0 34 34 33 2 22 46 11 48 3 29 35 16 2 20 47 10 42 23 41 48 42 15 45 31 14 4 24 16 25 10 42 45 6]
Total: 2668
Mean: 10.672
Genome size: 143
Size: 199
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 2.4052199174972E10
Median total errors in population: 325469/2
Error averages by case: (8.5001920201E7 6.9039653978E7 8.1001770192E7 7.2039643976E7 8.1001760191E7 7.2039633975E7 7.1039623974E7 7.1039633975E7 8.1001760191E7 7.2039613973E7 8.1001760191E7 8.1001770192E7 6.7039623975E7 8.1001770192E7 6.5039783993E7 8.1001770192E7 8.1001770192E7 7.0039623975E7 8.1001760191E7 7.2039623974E7 8.1001800195E7 7.1039643976E7 7.1039613973E7 8.1001760191E7 7.1039633975E7 8.1001760191E7 6.7039743986E7 7.3039633975E7 8.1001760191E7 8.1001760191E7 7.2039613973E7 6.6039743989E7 7.2039643976E7 8.1001760191E7 7.1039623974E7 6.7039713985E7 8.1001760191E7 8.1001770192E7 7.3039633975E7 7.1039613973E7 6.7039763988E7 7.1039613973E7 7.2039633975E7 8.1001760191E7 8.1001770192E7 8.1001770192E7 7.1039623974E7 7.2039613973E7 7.1039613973E7 6.3039844E7 8.3040244709E7 9.9002031017E7 8.2039814998E7 8.3039864652E7 1.04001671018E8 8.5039875002E7 1.05001671015E8 8.2039854995E7 1.0500167096E8 9.3001571026E7 1.04001670961E8 1.04001651006E8 8.4039874973E7 9.8042535111E7 9.9042495108E7 9.6001611042E7 9.9042495108E7 8.4040074654E7 1.05001670961E8 1.04001671006E8 1.04001671018E8 1.04001670999E8 8.1039954642E7 9.6042525115E7 8.3080928708E7 8.5080878734E7 9.8042505111E7 9.9042505106E7 8.4080878705E7 8.5039874969E7 8.608083873E7 8.3039824648E7 8.1039834612E7 9.5001591046E7 8.4039875001E7 1.05001670937E8 1.04001670999E8 7.6040074972E7 1.04001670998E8 9.804250511E7 8.6080828702E7 9.7042515116E7 9.5001561047E7 9.9042535108E7 8.403992462E7 8.7039874994E7 8.8080818726E7 9.7001581039E7 1.0400167096E8 9.8042505111E7 8.8071358639E7 1.19002482852E8 1.07002392717E8 1.11002772415E8 8.9031124191E7 8.6040826005E7 9.8076120976E7 9.1040616047E7 1.03001861663E8 9.3050597651E7 1.10043356572E8 1.14002091459E8 8.707165822E7 1.14002091574E8 9.2030734084E7 8.9092182394E7 9.3076470977E7 9.2050707793E7 1.100429766E8 1.21001791599E8 1.14002091669E8 1.1800247238E8 8.5040966237E7 1.18002482598E8 1.21003353065E8 8.8071448654E7 1.30002763255E8 1.12003133063E8 1.21003192824E8 1.05002222709E8 8.7031184164E7 1.26002743262E8 1.13002772915E8 1.02002031729E8 1.09002402149E8 1.14002091465E8 8.6040866266E7 1.08043026438E8 9.0030724671E7 1.15002812322E8 9.5076130477E7 1.07003223487E8 8.6041196371E7 1.06002352705E8 1.0902876543E8 1.11002772883E8 9.2076040973E7 1.21003342902E8 8.7071468677E7 1.19003523469E8 9.1093600873E7 1.11036713658E8 1.26035973245E8 9.2065357353E7 8.8063597381E7 9.3102798603E7 1.10020346663E8 9.9001561038E7 9.1079974391E7 9.0040386652E7 1.07024656824E8 9.0094104694E7 1.24057528077E8 8.9042505458E7 1.04001690954E8 1.28033402955E8 1.34031038307E8 1.0500167096E8 1.0400572771E8 9.009676261E7 9.505324247E7 1.07013917383E8 1.18007717763E8 1.00083364674E8 1.2604958581E8 1.2104392442E8 1.1702986842E8 9.5055466926E7 8.9054383432E7 9.1076013108E7 1.02049773658E8 1.11030117873E8 1.16051301587E8 1.09015180453E8 9.4091040936E7 8.5078058689E7 1.13029005359E8 1.18013656081E8 1.15011546379E8 1.25005415638E8 9.6060984011E7 9.4039731988E7 9.0052870703E7 8.7088921299E7 8.8087269174E7 9.1050956021E7 8.7056078981E7 9.1063821943E7 8.9030624694E7 8.9098803334E7 1.16023547956E8 9.1071967269E7 1.0904343432E8 1.18071678687E8 8.806207262E7 9.3063907559E7 1.11037098933E8 9.2030754686E7 1.28034973703E8 1.12075412315E8 1.14051404302E8 9.2111248311E7 1.00047711841E8 1.2801630996E8 1.22040881608E8 1.21042772341E8 1.14002101657E8 1.07069014755E8 9.1106879291E7 9.7070514923E7 1.02001821662E8 1.21045724035E8 1.2307402527E8 9.2078528285E7 9.2096800865E7 9.705064837E7 9.3099135529E7 1.24025371794E8 1.26052668362E8 9.1040696084E7 1.28012196428E8 1.15064185198E8 1.05037112029E8 8.608185413E7 1.17019173276E8 8.805406968E7 1.35060405193E8 9.0079314826E7 8.504981699E7 1.18036662725E8 9.0160946013E7 1.31010834064E8 1.01034407019E8 9.0088169908E7 8.7048187954E7 9.6123244761E7 1.16008439563E8 1.16033116673E8 9.008582752E7 1.31004194187E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 2 0 0 2 1 0 0 0 0 0 2 2 1 0 0 1 1 0 0 0 2 1 0 0 0 1 1 0 1 0 1 0 0 1 2 2 1 1 0 1 2 1 0 2 47 46 46 44 46 29 28 0 5 0 27 26 25 9 0 46 41 0 6 36 42 16 5 5 23 9 40 22 42 39 20 40 6 20 22 10 37 16 15 4 7 19 39 12 45 22 13 17 0 12 28 32 10 36 15 47 41 0 48 3 21 41 6 20 19 19 0 31 31 31 0 21 44 9 47 1 27 34 13 0 16 44 8 40 20 38 46 40 12 44 31 13 3 22 11 24 9 38 43 2)
Average genome size in population (length): 114.453
Average program size in population (points): 153.87
Average percent parens in population: 0.250
Minimum age in population: 19.763671875
Maximum age in population: 24.957275390625
Average age in population: 22.51342559814453
Median age in population: 22.60992431640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.558
Error (vector) diversity:			 0.672
Behavioral diversity:				 0.679
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 2380382229
--- Timings ---
Current time: 1559236507586 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
