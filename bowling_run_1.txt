Command line args: clojush.problems.software.bowling
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (#object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x1acc768 clojush.instructions.tag$tag_instruction_erc$fn__2160@1acc768] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x38caad07 clojush.instructions.tag$tagged_instruction_erc$fn__2166@38caad07] in1 integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
error-function = #object[clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472 0x85c3522 clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472@85c3522]
evalpush-limit = 4000
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-points = 1600
parent-selection = :lexicase
population-size = 1000
problem-specific-initial-report = #object[clojush.problems.software.bowling$bowling_initial_report 0x129c760d clojush.problems.software.bowling$bowling_initial_report@129c760d]
problem-specific-report = #object[clojush.problems.software.bowling$bowling_report 0x180f33b2 clojush.problems.software.bowling$bowling_report@180f33b2]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[10 10 10 10 10 10 10 10 10 10 10 10] 300]
Train Case:   1 | Input/Output: [[4 5 1 5 10 10 9 0 3 6 6 4 10 10 5 1] 148]
Train Case:   2 | Input/Output: [[0 7 0 9 7 3 6 4 9 1 3 7 10 10 7 3 7 0] 155]
Train Case:   3 | Input/Output: [[1 0 3 6 10 4 6 0 9 8 0 10 1 4 9 0 6 2] 94]
Train Case:   4 | Input/Output: [[1 1 1 7 2 1 8 0 10 0 5 5 2 10 9 1 7 1] 93]
Train Case:   5 | Input/Output: [[1 3 2 7 1 4 10 1 7 1 7 9 1 2 4 10 8 1] 98]
Train Case:   6 | Input/Output: [[1 8 5 4 3 7 10 4 0 8 1 10 3 5 6 4 3 6] 113]
Train Case:   7 | Input/Output: [[2 6 1 1 2 2 0 5 5 2 0 0 10 10 9 1 5 4] 99]
Train Case:   8 | Input/Output: [[3 0 10 0 5 7 3 0 7 8 0 10 7 0 2 4 0 6] 84]
Train Case:   9 | Input/Output: [[3 5 5 2 0 4 10 1 5 10 5 2 6 2 6 1 6 1] 87]
Train Case:  10 | Input/Output: [[3 5 6 1 3 7 6 0 7 0 1 2 10 9 0 10 6 1] 99]
Train Case:  11 | Input/Output: [[5 3 10 9 0 10 1 5 1 1 6 3 0 6 7 0 9 0] 91]
Train Case:  12 | Input/Output: [[5 5 10 1 1 1 8 10 0 8 2 1 10 4 3 10 8 1] 115]
Train Case:  13 | Input/Output: [[7 0 10 0 3 10 7 2 2 1 0 10 7 1 8 0 2 1] 90]
Train Case:  14 | Input/Output: [[7 1 1 5 10 10 10 5 4 8 2 2 7 9 0 10 5 3] 145]
Train Case:  15 | Input/Output: [[8 0 10 2 3 2 1 10 1 2 9 0 9 1 3 1 7 2] 82]
Train Case:  16 | Input/Output: [[9 1 10 7 2 10 3 3 5 5 6 1 4 0 9 0 0 0] 106]
Train Case:  17 | Input/Output: [[10 3 2 10 2 4 7 3 6 3 7 2 9 0 1 1 6 2] 95]
Train Case:  18 | Input/Output: [[0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0] 10]
Train Case:  19 | Input/Output: [[0 0 0 5 6 4 7 2 10 0 0 7 1 4 1 1 9 0 4] 68]
Train Case:  20 | Input/Output: [[0 4 8 0 6 3 4 4 5 3 10 5 4 3 0 5 3 5 2] 83]
Train Case:  21 | Input/Output: [[0 5 0 0 5 4 8 0 8 1 6 1 10 8 1 6 0 0 3] 75]
Train Case:  22 | Input/Output: [[1 8 9 1 9 0 10 6 2 8 0 5 2 5 1 6 2 3 0] 95]
Train Case:  23 | Input/Output: [[2 1 1 9 3 5 4 3 10 9 0 10 6 3 4 5 5 5 6] 112]
Train Case:  24 | Input/Output: [[2 2 5 3 2 5 10 10 4 2 4 0 6 1 5 5 3 7 10] 109]
Train Case:  25 | Input/Output: [[2 2 8 0 7 3 5 4 4 3 10 0 7 2 1 3 3 3 2] 81]
Train Case:  26 | Input/Output: [[3 0 8 1 3 5 6 0 1 5 5 1 7 1 0 5 10 0 5] 71]
Train Case:  27 | Input/Output: [[3 5 5 4 7 0 4 0 3 2 9 0 10 5 1 1 2 3 0] 70]
Train Case:  28 | Input/Output: [[4 1 7 0 0 3 1 1 7 1 5 1 2 3 0 3 10 6 0] 61]
Train Case:  29 | Input/Output: [[4 3 0 1 5 4 0 4 10 5 0 7 3 7 0 2 6 3 0] 76]
Train Case:  30 | Input/Output: [[5 0 7 0 10 1 5 5 2 10 1 0 8 2 6 2 8 2 2] 89]
Train Case:  31 | Input/Output: [[6 1 0 0 2 1 1 7 4 6 5 1 0 10 0 3 10 0 9] 80]
Train Case:  32 | Input/Output: [[6 4 3 1 8 0 0 3 10 1 1 7 2 1 0 5 4 6 3] 70]
Train Case:  33 | Input/Output: [[6 4 4 5 1 3 4 5 6 1 10 9 0 1 7 2 7 2 3] 93]
Train Case:  34 | Input/Output: [[7 0 5 4 2 5 1 6 6 4 2 6 2 2 10 5 0 1 5] 80]
Train Case:  35 | Input/Output: [[7 1 0 7 5 3 3 1 10 10 7 2 2 4 0 7 9 1 7] 112]
Train Case:  36 | Input/Output: [[7 3 1 2 2 8 8 1 10 5 4 3 4 4 0 1 1 0 8] 90]
Train Case:  37 | Input/Output: [[8 0 6 4 1 4 4 6 8 0 10 3 4 9 1 4 0 7 2] 101]
Train Case:  38 | Input/Output: [[8 1 9 0 5 5 5 5 6 2 10 8 2 9 0 4 1 0 0] 110]
Train Case:  39 | Input/Output: [[9 0 7 3 10 5 5 3 3 9 0 7 3 8 0 3 1 6 0] 113]
Train Case:  40 | Input/Output: [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0]
Train Case:  41 | Input/Output: [[0 0 0 0 0 0 0 0 0 0 3 7 0 0 0 0 0 0 0 0] 10]
Train Case:  42 | Input/Output: [[0 2 9 0 9 1 1 5 4 6 6 3 4 1 8 2 0 9 5 3] 85]
Train Case:  43 | Input/Output: [[0 3 7 1 5 5 9 1 10 8 1 4 1 0 8 2 1 2 8 4] 108]
Train Case:  44 | Input/Output: [[0 5 1 2 4 0 9 1 1 4 4 2 6 0 5 4 3 3 1 8] 64]
Train Case:  45 | Input/Output: [[0 7 3 5 0 3 5 4 7 2 1 3 6 3 6 3 3 1 2 0] 64]
Train Case:  46 | Input/Output: [[0 9 0 10 9 1 3 0 9 1 5 5 1 7 1 3 5 4 3 1] 95]
Train Case:  47 | Input/Output: [[1 1 6 4 0 10 10 3 7 3 4 5 5 0 7 6 4 10 9 9] 137]
Train Case:  48 | Input/Output: [[1 3 5 3 9 1 3 1 5 4 0 8 1 3 6 0 4 1 3 0] 64]
Train Case:  49 | Input/Output: [[1 3 8 1 5 5 4 5 4 6 3 5 7 1 0 10 5 3 3 3] 94]
Train Case:  50 | Input/Output: [[1 5 8 1 8 1 9 0 4 6 1 9 1 8 5 4 7 3 3 4] 93]
Train Case:  51 | Input/Output: [[2 1 4 2 9 1 2 3 2 5 9 0 1 2 7 0 9 1 9 0] 80]
Train Case:  52 | Input/Output: [[2 2 9 0 4 3 6 3 9 1 5 4 5 1 0 1 4 6 5 1] 81]
Train Case:  53 | Input/Output: [[2 4 0 10 2 3 7 0 7 1 6 3 2 6 9 1 7 1 2 5] 87]
Train Case:  54 | Input/Output: [[2 4 8 1 5 3 6 1 3 5 6 2 1 2 8 1 3 5 8 1] 75]
Train Case:  55 | Input/Output: [[2 5 8 1 7 3 3 0 5 1 0 8 2 6 6 2 8 0 0 4] 74]
Train Case:  56 | Input/Output: [[3 1 0 7 2 0 7 3 1 8 1 8 5 3 2 5 8 1 5 3] 74]
Train Case:  57 | Input/Output: [[3 1 4 1 7 3 3 1 4 1 3 0 6 0 2 6 3 5 5 3] 64]
Train Case:  58 | Input/Output: [[3 4 4 5 2 4 1 7 7 3 7 1 7 3 0 7 1 7 2 2] 84]
Train Case:  59 | Input/Output: [[4 0 4 1 3 0 8 0 5 3 0 9 6 1 2 6 6 2 5 3] 68]
Train Case:  60 | Input/Output: [[4 3 4 1 9 1 0 1 9 0 7 3 1 5 8 0 2 5 5 2] 71]
Train Case:  61 | Input/Output: [[4 5 6 2 4 6 5 3 1 3 1 5 1 0 2 7 2 8 0 6] 76]
Train Case:  62 | Input/Output: [[4 6 7 3 5 0 7 0 0 6 6 3 4 6 2 0 4 5 9 0] 91]
Train Case:  63 | Input/Output: [[5 3 2 8 4 3 6 2 10 1 7 9 0 4 1 4 4 7 3 5] 100]
Train Case:  64 | Input/Output: [[5 4 5 0 6 1 9 1 4 4 3 6 4 5 7 1 1 8 7 0] 85]
Train Case:  65 | Input/Output: [[6 0 2 8 1 7 6 0 1 3 8 0 1 7 4 6 0 1 3 0] 65]
Train Case:  66 | Input/Output: [[6 0 9 0 5 1 2 0 9 1 7 3 9 0 10 1 0 10 2 5] 97]
Train Case:  67 | Input/Output: [[6 1 6 2 9 0 1 6 4 1 1 6 2 0 5 1 4 5 6 0] 66]
Train Case:  68 | Input/Output: [[6 2 0 5 8 2 4 5 4 2 2 1 2 3 9 1 3 4 1 4] 75]
Train Case:  69 | Input/Output: [[6 2 3 1 4 4 1 5 1 9 8 1 9 1 4 6 5 0 5 2] 94]
Train Case:  70 | Input/Output: [[6 2 4 4 5 1 8 2 8 0 9 0 6 2 1 8 1 1 4 5] 85]
Train Case:  71 | Input/Output: [[6 2 5 0 8 0 2 1 9 1 2 2 2 8 0 8 2 8 7 1] 83]
Train Case:  72 | Input/Output: [[6 2 7 0 1 3 2 1 6 3 5 4 2 4 4 4 7 0 1 8] 70]
Train Case:  73 | Input/Output: [[7 0 3 3 3 6 3 3 1 8 5 1 4 6 9 0 2 8 1 5] 88]
Train Case:  74 | Input/Output: [[7 0 3 7 9 0 7 1 0 8 2 0 4 5 4 3 8 2 0 1] 80]
Train Case:  75 | Input/Output: [[7 1 2 2 7 2 4 2 1 6 1 9 1 3 5 3 8 2 3 3] 76]
Train Case:  76 | Input/Output: [[7 1 7 1 7 1 2 2 3 1 4 4 2 5 9 1 4 0 8 0] 73]
Train Case:  77 | Input/Output: [[7 3 0 8 9 1 2 5 7 2 6 1 10 3 6 4 5 9 1 8] 108]
Train Case:  78 | Input/Output: [[7 3 1 1 7 3 3 6 9 0 6 2 9 0 3 3 8 2 3 4] 87]
Train Case:  79 | Input/Output: [[7 3 9 0 5 1 0 3 2 1 4 5 3 0 2 6 4 1 3 0] 68]
Train Case:  80 | Input/Output: [[8 0 5 4 5 1 7 3 1 4 7 0 6 0 0 8 9 1 4 4] 82]
Train Case:  81 | Input/Output: [[8 2 0 1 9 0 1 3 9 1 0 5 2 6 7 2 2 8 4 3] 77]
Train Case:  82 | Input/Output: [[8 2 5 3 2 4 5 3 7 0 3 5 1 1 4 5 8 0 0 5] 76]
Train Case:  83 | Input/Output: [[9 0 7 3 5 2 2 4 2 3 1 3 7 3 0 2 6 2 1 0] 67]
Train Case:  84 | Input/Output: [[9 1 1 7 0 3 8 0 0 4 2 0 6 0 6 2 8 0 2 2] 62]
Train Case:  85 | Input/Output: [[9 1 5 1 0 10 5 2 1 9 7 2 6 1 4 1 7 1 8 1] 98]
Train Case:  86 | Input/Output: [[10 4 4 0 4 4 3 5 2 8 1 8 0 1 7 7 1 7 3 2] 89]
Train Case:  87 | Input/Output: [[0 1 1 5 2 6 6 2 5 0 1 5 2 6 8 2 1 5 6 4 0] 69]
Train Case:  88 | Input/Output: [[2 5 4 1 7 1 4 5 0 5 5 2 1 3 4 4 4 4 9 1 8] 79]
Train Case:  89 | Input/Output: [[4 1 3 3 2 3 8 0 9 0 4 0 5 5 4 6 6 1 7 3 4] 88]
Train Case:  90 | Input/Output: [[4 4 0 10 7 1 0 1 9 1 3 1 0 0 2 2 1 0 10 5 2] 73]
Train Case:  91 | Input/Output: [[4 6 1 7 7 2 3 3 7 3 7 2 9 0 4 6 6 2 8 2 3] 106]
Train Case:  92 | Input/Output: [[4 6 1 8 5 0 6 4 9 0 7 1 5 5 6 3 1 3 3 7 1] 101]
Train Case:  93 | Input/Output: [[5 2 1 7 7 0 6 2 5 1 4 1 6 1 9 0 9 1 10 8 3] 98]
Train Case:  94 | Input/Output: [[5 2 6 3 2 4 4 5 7 1 2 7 3 6 2 4 1 0 9 1 0] 74]
Train Case:  95 | Input/Output: [[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5] 150]
Train Case:  96 | Input/Output: [[6 4 5 2 8 2 3 4 0 2 8 1 3 5 1 3 1 6 10 7 4] 93]
Train Case:  97 | Input/Output: [[8 2 0 1 2 8 1 6 4 4 2 8 5 1 6 0 4 0 8 2 7] 85]
Train Case:  98 | Input/Output: [[8 2 9 0 7 1 5 4 7 2 6 2 7 0 0 2 0 0 9 1 9] 90]
Train Case:  99 | Input/Output: [[9 0 9 0 0 10 5 3 4 6 8 1 9 0 9 1 1 8 9 1 7] 114]
Test Case:   0 | Input/Output: [[3 2 10 8 2 10 5 0 10 10 8 0 5 2 4 2] 132]
Test Case:   1 | Input/Output: [[9 0 6 0 2 3 10 10 0 10 10 10 6 1 8 0] 138]
Test Case:   2 | Input/Output: [[9 0 9 0 7 1 10 10 8 0 10 1 5 10 0 1] 114]
Test Case:   3 | Input/Output: [[10 3 3 2 2 10 0 6 8 2 10 10 10 10 2 4] 166]
Test Case:   4 | Input/Output: [[10 10 2 7 10 6 1 10 7 0 6 0 5 4 2 3] 118]
Test Case:   5 | Input/Output: [[0 1 1 3 6 0 10 10 10 2 6 6 0 3 7 5 2] 117]
Test Case:   6 | Input/Output: [[1 6 2 3 10 10 8 1 10 0 7 3 0 0 9 8 1] 113]
Test Case:   7 | Input/Output: [[2 3 10 6 1 9 0 8 0 10 5 1 0 8 10 4 3] 100]
Test Case:   8 | Input/Output: [[2 5 7 0 10 10 2 1 3 0 1 9 10 9 1 4 2] 115]
Test Case:   9 | Input/Output: [[3 5 10 7 3 4 2 10 8 0 8 0 5 3 10 0 6] 112]
Test Case:  10 | Input/Output: [[3 7 8 0 10 4 1 4 5 10 5 3 6 2 10 9 0] 117]
Test Case:  11 | Input/Output: [[3 7 9 0 3 6 10 10 1 1 4 3 10 3 6 3 5] 115]
Test Case:  12 | Input/Output: [[5 0 0 1 10 6 0 9 1 1 3 10 10 9 1 1 1] 105]
Test Case:  13 | Input/Output: [[5 1 0 6 10 4 2 10 2 7 6 0 0 7 10 5 1] 97]
Test Case:  14 | Input/Output: [[6 0 10 5 5 0 8 10 4 5 10 3 1 8 1 3 6] 108]
Test Case:  15 | Input/Output: [[6 3 10 7 0 10 10 7 1 5 3 0 2 3 4 7 1] 111]
Test Case:  16 | Input/Output: [[6 3 10 9 1 4 1 10 7 0 0 5 9 0 10 7 1] 112]
Test Case:  17 | Input/Output: [[7 1 8 2 10 10 1 2 9 1 10 5 0 0 3 9 0] 117]
Test Case:  18 | Input/Output: [[8 0 1 8 8 0 10 3 3 10 9 0 10 5 5 4 3] 116]
Test Case:  19 | Input/Output: [[8 0 2 7 0 8 10 9 1 10 10 4 1 9 0 9 0] 127]
Test Case:  20 | Input/Output: [[8 0 9 1 10 7 3 10 5 3 10 8 2 8 1 4 0] 145]
Test Case:  21 | Input/Output: [[8 1 0 2 1 4 10 5 3 7 0 8 2 10 10 1 2] 106]
Test Case:  22 | Input/Output: [[8 2 8 1 1 0 10 10 4 1 7 1 10 5 0 8 0] 108]
Test Case:  23 | Input/Output: [[9 1 10 10 2 2 10 8 2 0 2 8 2 4 3 3 4] 120]
Test Case:  24 | Input/Output: [[10 0 10 9 1 10 2 4 8 1 3 6 4 4 10 3 0] 123]
Test Case:  25 | Input/Output: [[10 0 10 10 4 5 1 7 2 2 10 5 4 7 2 9 0] 126]
Test Case:  26 | Input/Output: [[10 1 1 4 0 0 9 8 2 10 9 1 1 6 10 5 2] 109]
Test Case:  27 | Input/Output: [[10 1 8 7 0 10 10 5 3 2 8 6 0 6 1 6 3] 124]
Test Case:  28 | Input/Output: [[10 3 1 9 0 2 6 6 3 10 8 0 10 6 0 6 1] 99]
Test Case:  29 | Input/Output: [[10 8 0 3 3 10 8 2 1 7 10 1 2 10 10 5 5] 132]
Test Case:  30 | Input/Output: [[10 9 1 3 0 10 0 4 4 2 3 4 1 5 10 4 1] 93]
Test Case:  31 | Input/Output: [[10 10 0 10 4 3 4 3 10 4 0 8 2 2 5 5 0] 110]
Test Case:  32 | Input/Output: [[10 10 1 3 3 4 8 1 6 3 5 5 10 2 4 2 2] 110]
Test Case:  33 | Input/Output: [[10 10 1 8 9 1 5 0 7 0 10 9 0 8 1 1 2] 116]
Test Case:  34 | Input/Output: [[10 10 4 0 9 1 1 2 0 5 2 2 7 1 10 2 3] 93]
Test Case:  35 | Input/Output: [[10 10 10 0 7 7 1 3 1 7 2 3 4 9 1 5 0] 122]
Test Case:  36 | Input/Output: [[0 0 0 9 6 4 3 1 2 8 10 3 5 0 1 10 2 0] 87]
Test Case:  37 | Input/Output: [[0 0 7 3 2 3 10 10 7 2 2 7 5 0 8 0 3 4] 101]
Test Case:  38 | Input/Output: [[0 1 2 4 4 3 10 7 3 4 1 1 6 6 4 10 6 2] 106]
Test Case:  39 | Input/Output: [[0 1 10 2 7 8 0 7 2 0 6 4 4 7 0 10 8 1] 95]
Test Case:  40 | Input/Output: [[0 3 7 1 10 4 5 3 7 7 3 6 1 5 3 10 4 1] 107]
Test Case:  41 | Input/Output: [[0 3 10 3 0 7 3 10 7 3 4 1 4 5 4 0 2 6] 99]
Test Case:  42 | Input/Output: [[0 3 10 7 0 2 3 5 2 10 8 1 2 8 6 2 2 3] 96]
Test Case:  43 | Input/Output: [[0 4 0 4 0 2 3 6 8 1 7 0 10 10 9 0 3 3] 98]
Test Case:  44 | Input/Output: [[0 5 4 2 10 8 1 8 1 7 2 7 3 6 2 10 7 2] 109]
Test Case:  45 | Input/Output: [[0 6 9 1 8 1 10 2 1 10 10 0 1 4 5 8 2 1] 101]
Test Case:  46 | Input/Output: [[0 7 0 4 5 2 10 5 0 7 1 3 6 10 9 1 1 3] 90]
Test Case:  47 | Input/Output: [[0 9 1 8 7 1 10 2 7 4 0 7 0 9 1 10 2 4] 107]
Test Case:  48 | Input/Output: [[0 9 6 1 9 1 7 1 7 2 8 2 6 3 10 10 8 1] 131]
Test Case:  49 | Input/Output: [[0 10 0 1 7 1 9 1 10 9 0 10 10 9 0 5 5 5] 139]
Test Case:  50 | Input/Output: [[0 10 0 6 10 4 2 4 0 4 4 2 3 10 4 1 0 2] 77]
Test Case:  51 | Input/Output: [[1 0 8 1 10 3 7 3 1 7 3 5 5 10 6 4 1 6] 120]
Test Case:  52 | Input/Output: [[1 1 5 3 1 0 10 0 5 10 4 4 6 4 1 5 7 1] 82]
Test Case:  53 | Input/Output: [[1 1 10 3 0 7 2 3 5 10 3 5 10 4 1 6 4 10] 101]
Test Case:  54 | Input/Output: [[1 3 10 9 1 5 4 10 1 0 6 3 2 3 2 1 9 0] 86]
Test Case:  55 | Input/Output: [[1 5 9 1 0 1 2 6 8 1 8 2 10 10 2 3 4 3] 103]
Test Case:  56 | Input/Output: [[1 7 7 2 10 2 8 7 3 9 0 10 4 4 5 0 0 4] 117]
Test Case:  57 | Input/Output: [[1 8 10 6 0 2 6 9 0 10 3 0 9 0 3 6 0 0] 82]
Test Case:  58 | Input/Output: [[1 9 5 4 4 4 10 5 1 10 1 4 2 1 4 1 4 4] 90]
Test Case:  59 | Input/Output: [[2 0 0 0 1 2 9 0 4 2 5 3 10 6 3 10 3 2] 76]
Test Case:  60 | Input/Output: [[2 1 8 0 8 2 7 0 4 5 4 1 10 7 1 10 3 4] 99]
Test Case:  61 | Input/Output: [[2 2 3 1 10 9 1 2 6 10 4 2 3 3 9 1 0 7] 93]
Test Case:  62 | Input/Output: [[2 2 6 1 8 1 1 5 10 0 6 10 4 3 4 4 2 5] 87]
Test Case:  63 | Input/Output: [[2 7 6 4 10 8 0 2 3 10 1 3 5 1 3 3 6 2] 98]
Test Case:  64 | Input/Output: [[2 8 7 2 1 5 10 7 1 4 3 8 2 10 2 3 6 2] 113]
Test Case:  65 | Input/Output: [[2 8 9 0 0 9 0 3 9 0 10 10 3 2 1 1 3 6] 103]
Test Case:  66 | Input/Output: [[3 0 3 2 9 1 5 0 10 10 8 0 4 6 4 0 5 1] 106]
Test Case:  67 | Input/Output: [[3 0 10 3 3 10 0 7 8 2 1 2 6 4 3 1 3 4] 87]
Test Case:  68 | Input/Output: [[3 4 10 5 0 9 1 9 0 6 3 9 0 10 1 0 4 2] 91]
Test Case:  69 | Input/Output: [[3 6 2 3 3 2 3 5 8 0 10 2 1 10 10 10 6 8] 131]
Test Case:  70 | Input/Output: [[3 7 0 8 6 1 6 2 2 8 10 4 5 2 5 10 1 1] 102]
Test Case:  71 | Input/Output: [[4 1 2 7 1 6 2 2 10 3 0 3 1 7 3 10 1 2] 81]
Test Case:  72 | Input/Output: [[4 3 6 2 3 6 4 1 10 1 4 4 1 10 8 1 1 1] 84]
Test Case:  73 | Input/Output: [[4 3 6 2 4 5 2 8 5 4 4 5 9 1 10 10 2 6] 125]
Test Case:  74 | Input/Output: [[4 3 8 1 3 6 10 5 2 10 8 0 1 0 3 5 5 0] 89]
Test Case:  75 | Input/Output: [[4 4 3 4 1 0 1 7 1 7 9 0 4 3 10 10 5 2] 97]
Test Case:  76 | Input/Output: [[4 5 9 0 10 1 6 2 8 5 2 7 3 8 2 10 6 0] 124]
Test Case:  77 | Input/Output: [[4 6 3 0 4 2 4 0 10 9 1 4 0 10 4 3 0 9] 97]
Test Case:  78 | Input/Output: [[5 1 5 4 4 0 10 6 2 3 4 2 6 8 0 10 5 3] 94]
Test Case:  79 | Input/Output: [[5 2 2 6 4 4 10 9 0 10 0 7 8 2 3 0 5 3] 99]
Test Case:  80 | Input/Output: [[5 5 4 5 0 8 5 3 8 2 10 10 9 0 9 1 8 1] 143]
Test Case:  81 | Input/Output: [[6 0 1 2 10 4 4 10 2 5 2 4 3 7 1 9 2 0] 90]
Test Case:  82 | Input/Output: [[6 0 7 1 5 2 10 5 2 9 1 7 1 10 6 3 1 3] 102]
Test Case:  83 | Input/Output: [[6 0 10 0 10 4 3 9 1 4 1 1 5 10 9 1 3 0] 108]
Test Case:  84 | Input/Output: [[6 1 2 2 1 7 4 6 10 9 0 9 1 10 10 6 4 8] 151]
Test Case:  85 | Input/Output: [[6 1 5 1 10 10 6 2 4 0 3 2 3 5 6 1 8 1] 98]
Test Case:  86 | Input/Output: [[6 2 8 0 0 4 10 4 2 5 2 10 6 0 4 5 1 4] 85]
Test Case:  87 | Input/Output: [[6 3 10 6 2 5 4 5 1 0 10 4 1 10 2 5 2 4] 99]
Test Case:  88 | Input/Output: [[6 4 0 3 7 1 10 1 2 4 1 4 3 10 0 1 5 2] 68]
Test Case:  89 | Input/Output: [[6 4 4 5 3 2 1 5 10 1 8 2 7 10 2 6 0 9] 106]
Test Case:  90 | Input/Output: [[7 0 4 3 9 1 2 5 5 5 10 10 6 2 4 6 0 4] 119]
Test Case:  91 | Input/Output: [[7 0 7 0 10 10 4 3 2 8 4 3 5 1 3 6 6 2] 106]
Test Case:  92 | Input/Output: [[7 1 0 9 6 1 5 1 6 2 6 3 10 10 6 4 3 0] 109]
Test Case:  93 | Input/Output: [[7 1 6 2 10 7 3 3 4 5 1 9 1 8 1 10 7 2] 117]
Test Case:  94 | Input/Output: [[7 1 7 3 10 0 6 10 7 0 9 0 3 4 0 5 3 0] 98]
Test Case:  95 | Input/Output: [[7 1 10 10 1 9 4 6 3 7 4 2 4 0 8 0 6 1] 115]
Test Case:  96 | Input/Output: [[7 2 0 7 3 0 7 0 0 0 6 3 9 0 10 10 2 2] 84]
Test Case:  97 | Input/Output: [[7 2 4 0 10 10 0 10 0 8 1 4 2 0 5 1 6 0] 90]
Test Case:  98 | Input/Output: [[7 2 5 0 6 4 1 7 7 1 10 4 3 10 7 3 1 8] 105]
Test Case:  99 | Input/Output: [[7 3 10 2 3 3 2 10 2 7 4 6 5 3 9 0 7 2] 114]
Test Case: 100 | Input/Output: [[7 3 10 8 2 10 8 1 5 2 2 7 1 9 6 1 6 0] 133]
Test Case: 101 | Input/Output: [[8 0 5 4 10 6 3 5 0 3 3 10 9 1 8 0 6 0] 108]
Test Case: 102 | Input/Output: [[8 0 7 3 5 5 5 5 2 3 2 7 10 7 0 10 3 5] 114]
Test Case: 103 | Input/Output: [[8 1 10 1 2 10 8 1 9 1 0 5 6 1 4 4 3 3] 89]
Test Case: 104 | Input/Output: [[9 0 0 4 0 7 6 2 10 10 5 1 8 0 2 2 6 0] 93]
Test Case: 105 | Input/Output: [[9 0 9 1 10 6 1 1 9 7 3 10 7 2 0 2 5 2] 127]
Test Case: 106 | Input/Output: [[9 1 0 7 10 9 0 8 2 7 1 2 2 9 0 10 5 0] 103]
Test Case: 107 | Input/Output: [[9 1 2 0 10 5 0 8 2 10 6 1 0 5 1 8 5 4] 101]
Test Case: 108 | Input/Output: [[9 1 4 0 8 0 10 3 7 2 2 9 1 0 8 10 5 3] 106]
Test Case: 109 | Input/Output: [[9 1 6 1 10 5 2 5 0 2 3 1 7 10 3 2 3 3] 91]
Test Case: 110 | Input/Output: [[9 1 7 3 1 3 7 1 8 0 4 5 10 7 2 10 0 1] 97]
Test Case: 111 | Input/Output: [[9 1 10 0 8 8 1 10 7 2 5 0 5 1 4 6 6 3] 119]
Test Case: 112 | Input/Output: [[9 1 10 5 0 0 0 3 0 10 7 0 3 6 0 4 5 0] 85]
Test Case: 113 | Input/Output: [[9 1 10 10 6 2 8 0 7 3 9 0 4 5 10 9 1 1] 148]
Test Case: 114 | Input/Output: [[10 0 1 2 4 2 3 9 1 0 6 10 4 2 5 5 7 0] 85]
Test Case: 115 | Input/Output: [[10 1 0 3 6 0 4 6 2 10 2 5 8 1 3 6 1 6] 82]
Test Case: 116 | Input/Output: [[10 1 8 10 5 5 9 0 4 6 0 6 1 5 0 6 7 2] 113]
Test Case: 117 | Input/Output: [[10 2 6 8 1 3 7 3 7 2 7 0 8 10 10 9 1 8] 144]
Test Case: 118 | Input/Output: [[10 3 0 5 2 10 1 9 7 2 9 0 8 2 3 4 8 1] 107]
Test Case: 119 | Input/Output: [[10 3 2 4 4 7 1 9 1 10 3 3 6 2 9 0 0 0] 95]
Test Case: 120 | Input/Output: [[10 3 4 4 6 5 1 8 0 0 5 10 1 1 3 0 6 1] 82]
Test Case: 121 | Input/Output: [[10 3 5 5 5 9 0 6 3 4 4 0 6 8 1 10 4 1] 106]
Test Case: 122 | Input/Output: [[10 3 6 7 2 3 5 7 3 4 5 0 8 10 6 1 1 7] 108]
Test Case: 123 | Input/Output: [[10 4 0 8 0 2 8 10 3 1 10 7 2 6 4 9 1 10] 131]
Test Case: 124 | Input/Output: [[10 4 6 1 2 5 4 10 7 0 5 1 8 2 9 0 3 0] 104]
Test Case: 125 | Input/Output: [[10 4 6 5 3 3 2 10 5 4 9 1 3 7 5 5 6 0] 126]
Test Case: 126 | Input/Output: [[10 5 0 7 0 6 3 8 0 6 0 1 8 10 1 7 6 1] 92]
Test Case: 127 | Input/Output: [[10 5 1 0 6 0 1 4 3 0 5 0 4 10 4 1 7 0] 72]
Test Case: 128 | Input/Output: [[10 5 3 5 5 6 0 6 3 1 7 10 5 0 9 0 6 0] 100]
Test Case: 129 | Input/Output: [[10 5 5 1 1 2 1 2 8 10 6 4 2 4 7 2 3 1] 107]
Test Case: 130 | Input/Output: [[10 5 5 10 1 1 6 3 10 3 3 1 0 4 0 7 3 5] 105]
Test Case: 131 | Input/Output: [[10 6 1 4 3 5 4 9 1 1 0 5 2 2 4 10 4 4] 91]
Test Case: 132 | Input/Output: [[10 6 4 5 4 2 0 10 1 2 5 5 7 2 5 4 0 2] 99]
Test Case: 133 | Input/Output: [[10 7 0 5 2 2 4 10 4 2 0 2 6 4 2 0 5 1] 81]
Test Case: 134 | Input/Output: [[10 7 0 8 1 5 0 8 2 8 2 6 3 7 1 10 2 1] 105]
Test Case: 135 | Input/Output: [[10 7 2 3 6 2 6 6 2 7 2 5 5 5 0 10 0 8] 108]
Test Case: 136 | Input/Output: [[10 7 2 4 0 10 5 3 6 3 3 5 3 5 0 6 0 8] 97]
Test Case: 137 | Input/Output: [[10 7 2 10 1 3 1 0 9 0 2 4 4 0 1 0 6 1] 74]
Test Case: 138 | Input/Output: [[10 7 3 9 0 8 2 7 1 9 1 6 0 0 8 10 0 9] 131]
Test Case: 139 | Input/Output: [[10 8 1 2 2 8 2 3 3 1 9 10 5 0 6 4 5 0] 111]
Test Case: 140 | Input/Output: [[10 9 0 0 8 9 1 10 5 5 3 3 6 1 5 5 3 6] 124]
Test Case: 141 | Input/Output: [[10 9 0 6 4 6 4 8 1 5 0 0 7 10 6 0 7 1] 113]
Test Case: 142 | Input/Output: [[10 9 0 8 0 3 4 7 2 3 4 1 5 10 8 0 0 9] 100]
Test Case: 143 | Input/Output: [[10 9 0 10 0 5 6 0 9 1 10 2 0 5 4 9 1 8] 115]
Test Case: 144 | Input/Output: [[10 10 3 2 5 5 7 2 6 3 0 5 1 1 5 0 4 2] 96]
Test Case: 145 | Input/Output: [[0 0 2 7 7 3 5 3 9 1 10 6 3 0 3 3 4 5 2] 97]
Test Case: 146 | Input/Output: [[0 0 4 5 6 3 1 7 10 7 2 5 5 6 4 9 1 8 1] 116]
Test Case: 147 | Input/Output: [[0 0 6 2 8 0 0 6 10 9 1 1 6 2 3 7 1 9 0] 82]
Test Case: 148 | Input/Output: [[0 0 6 2 8 0 1 9 3 3 10 0 6 2 3 0 6 7 2] 77]
Test Case: 149 | Input/Output: [[0 0 7 3 3 2 10 5 0 3 7 6 1 8 0 7 3 3 5] 90]
Test Case: 150 | Input/Output: [[0 1 5 0 3 0 10 2 4 2 6 7 2 10 8 0 10 5 5] 94]
Test Case: 151 | Input/Output: [[0 1 9 0 0 9 10 9 1 0 9 4 4 5 5 9 1 5 4] 109]
Test Case: 152 | Input/Output: [[0 2 0 6 5 1 10 0 10 0 3 6 2 7 2 9 1 8 0] 90]
Test Case: 153 | Input/Output: [[0 2 1 8 2 5 2 0 6 4 3 7 6 2 4 5 10 3 3] 88]
Test Case: 154 | Input/Output: [[0 2 8 0 10 6 4 7 1 6 1 5 5 9 0 2 5 6 0] 103]
Test Case: 155 | Input/Output: [[0 2 8 1 8 2 8 0 10 0 3 9 1 1 8 7 1 1 8] 90]
Test Case: 156 | Input/Output: [[0 3 2 4 10 6 0 7 2 3 0 0 4 1 3 4 1 5 1] 62]
Test Case: 157 | Input/Output: [[0 3 5 0 8 0 9 0 10 0 8 8 1 6 4 6 4 1 0] 88]
Test Case: 158 | Input/Output: [[0 3 9 0 2 3 3 0 6 0 10 4 1 2 2 7 2 2 0] 61]
Test Case: 159 | Input/Output: [[0 3 10 0 4 7 3 7 0 0 1 1 6 5 1 9 0 8 0] 76]
Test Case: 160 | Input/Output: [[0 5 0 4 0 7 7 1 8 0 7 0 10 10 9 0 9 1 1] 107]
Test Case: 161 | Input/Output: [[0 6 8 2 9 0 9 0 5 1 4 3 10 9 1 8 0 6 2] 110]
Test Case: 162 | Input/Output: [[0 7 4 6 7 1 5 4 7 1 10 4 6 3 7 4 3 9 0] 112]
Test Case: 163 | Input/Output: [[0 7 5 0 5 5 7 0 10 4 4 3 7 8 0 4 5 1 4] 102]
Test Case: 164 | Input/Output: [[0 7 7 2 9 0 6 0 9 1 10 5 1 6 2 5 4 0 7] 97]
Test Case: 165 | Input/Output: [[0 7 10 3 4 1 8 8 0 3 4 3 3 0 4 6 1 9 0] 81]
Test Case: 166 | Input/Output: [[0 7 10 6 1 9 0 1 5 6 1 1 1 9 0 8 0 3 2] 77]
Test Case: 167 | Input/Output: [[0 8 0 0 3 0 9 0 8 1 9 0 7 3 10 1 6 4 5] 91]
Test Case: 168 | Input/Output: [[0 8 0 9 5 4 10 9 0 7 3 2 0 4 2 10 10 7 9] 127]
Test Case: 169 | Input/Output: [[0 8 3 3 5 5 8 0 10 9 1 9 0 1 8 1 5 4 5] 112]
Test Case: 170 | Input/Output: [[0 8 4 2 3 2 5 5 1 2 10 4 4 1 1 1 2 4 2] 70]
Test Case: 171 | Input/Output: [[0 8 10 1 9 2 3 4 1 8 2 7 1 0 2 4 6 0 0] 87]
Test Case: 172 | Input/Output: [[0 8 10 6 4 8 0 0 2 0 4 2 1 8 1 7 2 6 3] 90]
Test Case: 173 | Input/Output: [[0 8 10 7 3 2 4 1 9 7 1 7 0 8 0 1 7 7 0] 101]
Test Case: 174 | Input/Output: [[0 9 3 5 1 4 10 8 1 3 7 9 1 5 5 3 1 4 3] 108]
Test Case: 175 | Input/Output: [[0 9 4 0 1 2 6 4 1 5 10 6 3 3 4 5 2 1 3] 79]
Test Case: 176 | Input/Output: [[0 9 5 5 3 6 10 10 8 0 3 4 0 7 6 4 4 6 1] 124]
Test Case: 177 | Input/Output: [[0 9 7 0 6 0 0 6 9 0 1 9 8 2 9 0 10 7 1] 109]
Test Case: 178 | Input/Output: [[0 10 0 1 0 6 8 0 7 3 7 1 10 9 1 0 5 3 5] 93]
Test Case: 179 | Input/Output: [[0 10 4 2 8 0 4 5 7 3 10 3 7 2 8 2 1 7 2] 113]
Test Case: 180 | Input/Output: [[0 10 5 1 9 1 0 8 5 4 4 5 8 1 2 7 10 2 1] 91]
Test Case: 181 | Input/Output: [[0 10 5 4 2 0 10 10 9 0 8 2 1 1 1 7 9 1 4] 118]
Test Case: 182 | Input/Output: [[0 10 7 1 5 1 0 9 8 2 8 0 10 3 2 4 2 5 3] 100]
Test Case: 183 | Input/Output: [[1 0 4 3 4 0 5 0 8 1 2 7 10 2 8 0 4 0 8] 77]
Test Case: 184 | Input/Output: [[1 1 1 2 0 5 3 0 0 2 1 5 10 9 1 6 2 5 2] 72]
Test Case: 185 | Input/Output: [[1 2 6 1 8 2 7 0 10 1 4 10 8 1 1 2 6 4 0] 95]
Test Case: 186 | Input/Output: [[1 3 2 2 10 9 0 6 0 10 2 5 2 2 8 1 10 9 3] 101]
Test Case: 187 | Input/Output: [[1 3 9 0 0 6 9 1 10 0 9 1 2 5 5 1 7 2 3] 94]
Test Case: 188 | Input/Output: [[1 5 0 0 7 2 10 8 1 2 3 5 5 6 2 2 8 3 1] 89]
Test Case: 189 | Input/Output: [[1 5 6 0 5 1 6 0 6 1 4 2 1 5 5 0 10 8 0] 74]
Test Case: 190 | Input/Output: [[1 5 10 1 9 8 1 1 0 6 3 1 2 3 0 4 0 6 3] 82]
Test Case: 191 | Input/Output: [[1 6 5 0 2 2 6 3 7 1 8 0 0 4 7 3 10 7 1] 91]
Test Case: 192 | Input/Output: [[1 6 5 1 5 1 2 1 1 1 7 0 3 2 6 1 10 1 1] 57]
Test Case: 193 | Input/Output: [[1 6 6 4 1 4 2 0 8 0 4 5 10 5 0 3 1 9 0] 75]
Test Case: 194 | Input/Output: [[1 6 9 0 10 0 8 8 1 7 0 9 0 4 4 5 1 1 7] 89]
Test Case: 195 | Input/Output: [[1 6 10 4 1 3 3 0 9 3 5 3 5 7 0 7 2 0 0] 74]
Test Case: 196 | Input/Output: [[1 7 10 8 0 9 1 4 2 8 1 7 0 3 4 1 4 9 0] 91]
Test Case: 197 | Input/Output: [[1 8 8 2 2 5 4 5 0 1 10 0 8 2 1 8 1 9 0] 85]
Test Case: 198 | Input/Output: [[1 8 10 7 1 8 0 8 0 8 1 3 7 6 4 8 0 4 3] 109]
Test Case: 199 | Input/Output: [[1 9 2 0 4 4 10 7 2 8 1 0 1 9 0 2 2 9 0] 82]
Test Case: 200 | Input/Output: [[1 9 5 0 4 2 2 7 10 2 0 6 4 7 3 2 2 6 1] 89]
Test Case: 201 | Input/Output: [[1 9 7 3 3 7 10 6 2 5 4 3 6 9 0 9 0 3 6] 121]
Test Case: 202 | Input/Output: [[2 0 1 8 8 0 9 0 10 9 0 0 8 7 3 4 4 4 4] 94]
Test Case: 203 | Input/Output: [[2 0 8 0 8 0 5 4 7 2 3 5 10 4 5 4 5 4 2] 87]
Test Case: 204 | Input/Output: [[2 0 9 1 8 1 8 0 1 3 6 1 9 0 10 0 5 4 3] 84]
Test Case: 205 | Input/Output: [[2 1 3 3 0 5 4 1 3 4 8 0 9 1 10 6 1 9 0] 87]
Test Case: 206 | Input/Output: [[2 1 4 3 9 1 1 3 10 8 0 1 5 9 1 3 4 0 7] 84]
Test Case: 207 | Input/Output: [[2 1 5 4 6 2 5 1 10 8 2 8 0 9 0 3 5 0 8] 97]
Test Case: 208 | Input/Output: [[2 1 8 0 10 8 0 8 0 3 7 6 3 7 3 6 4 8 0] 112]
Test Case: 209 | Input/Output: [[2 1 10 7 2 3 4 0 2 4 4 2 7 9 0 6 1 1 1] 75]
Test Case: 210 | Input/Output: [[2 2 0 1 8 0 7 0 9 0 7 0 4 6 10 0 6 7 2] 87]
Test Case: 211 | Input/Output: [[2 2 2 2 5 0 10 0 8 7 2 2 0 9 0 1 3 8 1] 72]
Test Case: 212 | Input/Output: [[2 2 10 6 4 7 1 3 1 8 0 0 9 8 2 8 2 4 2] 108]
Test Case: 213 | Input/Output: [[2 3 7 1 8 1 8 1 9 0 3 6 5 2 9 0 10 5 0] 85]
Test Case: 214 | Input/Output: [[2 3 7 3 4 3 3 5 10 4 6 1 0 5 5 0 10 2 4] 94]
Test Case: 215 | Input/Output: [[2 3 8 2 0 4 5 0 7 2 2 0 8 2 10 2 7 9 0] 92]
Test Case: 216 | Input/Output: [[2 3 9 1 9 1 6 2 2 7 2 4 10 7 1 9 1 2 4] 107]
Test Case: 217 | Input/Output: [[2 4 6 1 9 1 7 3 10 0 10 3 4 2 3 3 5 2 2] 107]
Test Case: 218 | Input/Output: [[2 4 7 0 5 4 0 1 2 4 1 1 10 0 5 7 0 5 2] 65]
Test Case: 219 | Input/Output: [[2 4 7 1 6 0 5 3 1 2 7 3 0 7 10 8 2 6 0] 90]
Test Case: 220 | Input/Output: [[2 4 8 1 5 2 5 2 2 7 1 8 0 3 10 5 0 1 4] 75]
Test Case: 221 | Input/Output: [[2 4 10 9 1 4 1 6 0 5 4 7 2 7 3 5 1 3 1] 94]
Test Case: 222 | Input/Output: [[2 5 3 1 7 3 0 8 3 0 5 1 10 2 6 3 1 3 1] 72]
Test Case: 223 | Input/Output: [[2 5 6 3 5 0 10 0 2 1 7 6 1 2 5 4 2 2 3] 68]
Test Case: 224 | Input/Output: [[2 7 0 5 2 1 7 0 0 7 10 8 1 2 0 9 0 5 4] 79]
Test Case: 225 | Input/Output: [[2 7 10 6 4 2 3 0 6 10 2 5 4 6 3 5 0 10 3] 110]
Test Case: 226 | Input/Output: [[2 7 10 7 2 6 4 5 5 6 1 9 0 8 0 0 0 6 0] 98]
Test Case: 227 | Input/Output: [[2 8 4 5 3 0 5 5 4 2 3 5 10 1 8 7 2 6 1] 98]
Test Case: 228 | Input/Output: [[2 8 7 0 1 0 8 1 9 0 5 0 6 4 10 8 0 3 2] 99]
Test Case: 229 | Input/Output: [[2 8 9 1 10 9 1 3 7 1 2 8 2 4 1 6 3 2 2] 118]
Test Case: 230 | Input/Output: [[3 0 6 4 9 0 1 1 3 7 2 8 10 0 5 2 3 1 4] 95]
Test Case: 231 | Input/Output: [[3 0 9 0 6 1 2 2 10 7 1 1 5 4 6 0 10 3 3] 84]
Test Case: 232 | Input/Output: [[3 0 10 3 2 6 0 4 1 4 6 7 1 0 6 10 4 6 9] 104]
Test Case: 233 | Input/Output: [[3 0 10 9 1 4 4 8 2 2 2 0 8 5 1 4 0 1 3] 83]
Test Case: 234 | Input/Output: [[3 1 0 5 8 2 2 6 1 3 0 1 4 6 1 4 10 0 2] 64]
Test Case: 235 | Input/Output: [[3 1 6 4 4 3 5 2 5 3 10 8 2 2 5 5 5 8 1] 106]
Test Case: 236 | Input/Output: [[3 1 8 1 10 0 5 5 1 5 5 6 4 0 7 5 5 2 0] 86]
Test Case: 237 | Input/Output: [[3 2 4 6 9 1 3 4 0 4 8 0 10 4 2 5 0 6 0] 89]
Test Case: 238 | Input/Output: [[3 2 10 7 2 1 3 4 2 4 3 3 7 2 3 5 3 2 6] 83]
Test Case: 239 | Input/Output: [[3 4 7 3 10 8 1 0 3 3 6 7 2 8 1 5 4 9 0] 103]
Test Case: 240 | Input/Output: [[3 5 6 2 8 2 2 5 10 2 0 7 1 2 3 9 0 1 5] 77]
Test Case: 241 | Input/Output: [[3 5 8 0 8 0 3 0 8 0 1 2 0 6 9 0 10 5 2] 77]
Test Case: 242 | Input/Output: [[3 7 2 8 10 1 0 10 9 1 7 3 9 0 4 5 9 1 2] 130]
Test Case: 243 | Input/Output: [[3 7 6 3 3 6 3 2 2 2 6 0 7 3 9 1 10 1 2] 104]
Test Case: 244 | Input/Output: [[3 7 7 1 9 0 4 6 10 9 0 0 5 6 3 4 0 6 3] 109]
Test Case: 245 | Input/Output: [[4 0 2 4 0 4 5 1 8 2 1 2 9 0 10 7 3 8 0] 89]
Test Case: 246 | Input/Output: [[4 0 3 2 0 10 5 3 3 6 4 4 10 8 2 3 0 0 0] 85]
Test Case: 247 | Input/Output: [[4 0 7 0 4 0 4 2 10 5 1 0 6 8 2 8 2 3 2] 85]
Test Case: 248 | Input/Output: [[4 0 10 1 8 9 1 3 1 5 5 6 2 2 3 9 0 5 2] 94]
Test Case: 249 | Input/Output: [[4 1 3 5 4 6 9 1 10 5 5 9 0 0 1 10 8 2 4] 135]
Test Case: 250 | Input/Output: [[4 1 4 5 2 2 10 5 0 5 5 0 3 5 4 6 2 2 5] 75]
Test Case: 251 | Input/Output: [[4 1 4 6 4 4 5 0 6 0 4 4 9 0 4 2 10 8 1] 89]
Test Case: 252 | Input/Output: [[4 2 4 2 0 10 2 3 8 0 6 0 2 4 2 2 10 1 8] 81]
Test Case: 253 | Input/Output: [[4 2 5 1 3 5 4 2 1 4 3 7 9 1 6 3 10 1 6] 99]
Test Case: 254 | Input/Output: [[4 2 6 4 4 1 6 4 9 0 4 5 10 7 3 4 6 0 1] 107]
Test Case: 255 | Input/Output: [[4 2 9 1 0 3 8 1 1 3 7 2 6 3 2 1 10 9 0] 81]
Test Case: 256 | Input/Output: [[4 4 8 0 6 0 2 3 6 4 7 2 5 1 0 8 10 2 7] 95]
Test Case: 257 | Input/Output: [[4 4 9 1 0 1 3 7 7 1 10 8 1 3 6 3 1 5 4] 94]
Test Case: 258 | Input/Output: [[4 5 7 1 0 9 10 1 6 8 2 5 0 10 2 8 7 3 8] 125]
Test Case: 259 | Input/Output: [[4 5 8 2 8 2 5 2 4 6 0 10 10 4 6 1 7 3 2] 123]
Test Case: 260 | Input/Output: [[4 5 10 10 1 9 3 3 9 1 3 4 4 4 4 6 10 1 1] 129]
Test Case: 261 | Input/Output: [[4 6 7 3 10 9 0 6 0 5 4 4 3 1 7 5 0 8 0] 108]
Test Case: 262 | Input/Output: [[5 0 0 2 10 5 2 5 4 0 0 8 2 2 4 5 3 5 0] 71]
Test Case: 263 | Input/Output: [[5 0 5 5 9 0 5 5 3 3 3 4 10 0 7 6 2 4 5] 100]
Test Case: 264 | Input/Output: [[5 0 6 4 6 4 9 0 8 1 7 2 3 6 10 0 0 5 1] 92]
Test Case: 265 | Input/Output: [[5 0 7 2 8 1 4 5 10 2 3 4 2 6 4 5 0 7 0] 85]
Test Case: 266 | Input/Output: [[5 0 7 3 3 5 4 3 7 2 8 1 10 2 1 3 4 9 0] 83]
Test Case: 267 | Input/Output: [[5 0 10 0 2 5 1 8 1 6 4 8 2 10 2 8 10 2 3] 127]
Test Case: 268 | Input/Output: [[5 0 10 1 6 0 7 10 8 0 3 1 7 0 8 2 10 4 3] 110]
Test Case: 269 | Input/Output: [[5 1 1 4 9 1 6 1 7 3 1 9 2 7 4 3 10 0 1] 85]
Test Case: 270 | Input/Output: [[5 1 3 3 0 8 10 6 0 5 1 2 4 3 1 5 4 3 6] 76]
Test Case: 271 | Input/Output: [[5 1 4 3 10 1 0 4 0 6 0 6 2 3 3 5 1 7 0] 62]
Test Case: 272 | Input/Output: [[5 1 6 1 7 2 3 4 5 0 4 3 6 1 10 2 2 1 1] 68]
Test Case: 273 | Input/Output: [[5 1 10 5 0 5 1 4 1 9 1 6 1 9 1 7 3 5 4] 101]
Test Case: 274 | Input/Output: [[5 2 2 4 10 5 1 0 9 0 9 6 4 6 3 3 5 5 1] 92]
Test Case: 275 | Input/Output: [[5 2 7 1 5 1 4 5 1 6 5 3 10 7 0 6 4 3 0] 85]
Test Case: 276 | Input/Output: [[5 2 8 0 1 4 3 0 10 6 1 7 0 0 10 1 4 7 2] 79]
Test Case: 277 | Input/Output: [[5 2 9 0 7 0 3 3 6 4 9 1 10 3 7 5 2 7 2] 119]
Test Case: 278 | Input/Output: [[5 2 10 8 0 10 1 3 8 0 6 0 9 1 8 2 6 4 1] 110]
Test Case: 279 | Input/Output: [[5 3 2 7 2 2 9 0 6 2 10 5 4 7 3 6 0 9 0] 97]
Test Case: 280 | Input/Output: [[5 3 3 5 7 2 1 4 2 4 7 3 9 0 10 1 3 2 7] 91]
Test Case: 281 | Input/Output: [[5 3 7 2 1 0 10 8 1 4 6 1 6 5 0 0 4 1 3] 77]
Test Case: 282 | Input/Output: [[5 3 8 0 4 1 10 1 0 3 6 2 7 0 6 9 0 3 3] 72]
Test Case: 283 | Input/Output: [[5 3 8 1 0 10 7 3 9 0 4 3 0 1 5 2 10 2 2] 95]
Test Case: 284 | Input/Output: [[5 4 0 1 2 4 3 3 10 9 1 6 3 3 1 8 1 1 1] 82]
Test Case: 285 | Input/Output: [[5 4 0 3 4 3 8 0 4 3 10 6 0 7 0 6 3 8 0] 80]
Test Case: 286 | Input/Output: [[5 4 3 0 6 4 9 1 5 5 0 9 3 1 9 1 10 1 7] 115]
Test Case: 287 | Input/Output: [[5 4 3 7 4 4 1 8 7 1 3 5 4 2 10 8 0 0 7] 95]
Test Case: 288 | Input/Output: [[5 4 7 1 7 3 7 1 10 4 1 0 5 9 1 4 4 1 0] 90]
Test Case: 289 | Input/Output: [[5 4 9 1 10 5 3 3 1 3 1 3 4 8 2 5 2 1 0] 93]
Test Case: 290 | Input/Output: [[5 4 10 1 9 7 3 10 8 2 3 5 3 4 2 1 8 2 6] 133]
Test Case: 291 | Input/Output: [[5 5 5 3 4 6 10 0 2 6 2 3 5 9 1 2 8 0 8] 103]
Test Case: 292 | Input/Output: [[5 5 9 1 10 1 7 8 0 1 5 4 1 4 0 9 1 2 7] 109]
Test Case: 293 | Input/Output: [[5 5 10 1 4 0 6 6 0 7 0 7 1 7 1 0 10 6 0] 97]
Test Case: 294 | Input/Output: [[5 5 10 2 7 1 0 8 1 4 4 9 0 9 1 3 6 4 4] 105]
Test Case: 295 | Input/Output: [[6 0 0 2 5 0 4 0 10 9 0 6 0 2 7 7 2 1 6] 76]
Test Case: 296 | Input/Output: [[6 0 1 8 2 4 6 2 10 9 1 1 5 4 1 10 9 1 6] 107]
Test Case: 297 | Input/Output: [[6 0 2 3 0 5 1 9 6 2 5 3 0 6 10 3 5 2 5] 87]
Test Case: 298 | Input/Output: [[6 0 5 1 2 0 3 1 9 1 10 2 1 5 0 4 6 3 6] 81]
Test Case: 299 | Input/Output: [[6 0 9 0 7 1 10 8 0 2 4 5 2 10 7 3 9 1 2] 113]
Test Case: 300 | Input/Output: [[6 0 9 1 2 5 7 3 0 9 10 9 0 3 4 8 0 2 1] 90]
Test Case: 301 | Input/Output: [[6 1 1 3 10 1 2 5 5 1 5 10 2 1 4 4 10 5 8] 91]
Test Case: 302 | Input/Output: [[6 1 2 0 0 4 2 5 4 4 9 1 10 2 5 4 2 1 4] 83]
Test Case: 303 | Input/Output: [[6 1 4 3 5 5 5 1 8 2 5 2 7 3 10 3 6 6 0] 111]
Test Case: 304 | Input/Output: [[6 1 4 5 10 8 0 8 2 8 0 5 2 10 8 1 2 8 6] 119]
Test Case: 305 | Input/Output: [[6 1 8 1 10 0 5 5 1 5 2 6 4 4 3 3 4 5 1] 83]
Test Case: 306 | Input/Output: [[6 1 8 2 10 7 0 5 4 0 3 2 1 6 0 6 4 3 3] 91]
Test Case: 307 | Input/Output: [[6 1 9 0 0 3 5 4 7 3 9 1 10 0 8 7 0 9 0] 109]
Test Case: 308 | Input/Output: [[6 2 2 0 0 3 3 6 3 1 9 0 10 3 5 4 6 0 8] 79]
Test Case: 309 | Input/Output: [[6 2 3 3 7 2 6 2 8 2 2 5 7 0 5 2 10 0 7] 88]
Test Case: 310 | Input/Output: [[6 2 5 2 2 3 2 1 9 0 5 0 2 7 10 7 2 3 1] 78]
Test Case: 311 | Input/Output: [[6 2 9 1 7 3 5 4 0 7 4 5 3 4 10 0 0 1 8] 91]
Test Case: 312 | Input/Output: [[6 2 10 3 6 1 9 4 5 3 7 1 5 2 8 7 0 5 1] 106]
Test Case: 313 | Input/Output: [[6 3 0 1 4 4 0 10 2 7 10 9 0 6 0 4 4 3 0] 84]
Test Case: 314 | Input/Output: [[6 3 3 6 7 1 6 4 6 3 8 2 7 2 3 7 10 0 4] 115]
Test Case: 315 | Input/Output: [[6 3 7 3 9 1 10 9 1 7 2 7 0 0 6 2 2 1 5] 117]
Test Case: 316 | Input/Output: [[6 3 8 2 9 1 1 7 1 4 5 3 3 3 6 2 10 5 3] 100]
Test Case: 317 | Input/Output: [[6 3 9 1 3 4 9 1 7 3 4 2 10 1 5 8 1 3 1] 101]
Test Case: 318 | Input/Output: [[6 3 10 1 8 2 6 10 7 2 8 1 7 3 1 4 10 4 1] 113]
Test Case: 319 | Input/Output: [[6 4 0 3 3 4 3 3 0 2 10 2 6 8 0 4 6 3 2] 80]
Test Case: 320 | Input/Output: [[6 4 0 9 7 1 8 1 4 1 2 8 2 2 10 2 7 0 6] 91]
Test Case: 321 | Input/Output: [[6 4 3 1 2 4 7 0 7 2 1 2 1 5 10 3 3 2 4] 76]
Test Case: 322 | Input/Output: [[6 4 4 0 0 2 7 1 3 3 5 3 7 0 10 9 0 0 6] 83]
Test Case: 323 | Input/Output: [[6 4 4 0 4 3 8 1 10 4 1 10 5 3 3 6 10 8 2] 109]
Test Case: 324 | Input/Output: [[6 4 5 5 1 8 10 1 5 6 4 3 2 2 8 9 1 4 3] 115]
Test Case: 325 | Input/Output: [[6 4 6 0 6 1 6 0 8 0 5 0 10 5 0 1 9 8 0] 94]
Test Case: 326 | Input/Output: [[6 4 8 1 3 6 9 0 0 2 10 8 2 3 7 6 1 9 0] 112]
Test Case: 327 | Input/Output: [[7 0 3 0 5 3 7 2 2 7 8 0 8 2 10 3 1 8 1] 91]
Test Case: 328 | Input/Output: [[7 0 6 0 3 7 9 1 0 3 10 10 7 3 3 6 4 6 1] 125]
Test Case: 329 | Input/Output: [[7 0 8 2 10 6 2 0 10 3 7 7 0 1 4 2 8 1 1] 108]
Test Case: 330 | Input/Output: [[7 1 1 2 7 3 5 5 6 3 1 1 10 1 2 6 1 6 0] 82]
Test Case: 331 | Input/Output: [[7 1 1 9 6 1 0 8 8 1 10 0 3 0 8 4 2 5 2] 85]
Test Case: 332 | Input/Output: [[7 1 4 0 3 1 2 4 4 3 2 4 5 1 10 1 5 0 3] 66]
Test Case: 333 | Input/Output: [[7 1 4 6 3 2 7 3 9 0 0 8 7 0 10 3 2 1 7] 97]
Test Case: 334 | Input/Output: [[7 1 5 5 8 0 1 1 5 2 10 2 1 5 2 5 2 5 3] 81]
Test Case: 335 | Input/Output: [[7 1 6 4 10 2 5 6 0 4 5 3 1 0 0 2 7 2 3] 85]
Test Case: 336 | Input/Output: [[7 1 7 3 5 3 1 3 5 4 7 2 10 3 3 6 1 2 2] 86]
Test Case: 337 | Input/Output: [[7 1 9 0 0 0 9 0 10 2 4 0 4 2 5 8 0 3 1] 71]
Test Case: 338 | Input/Output: [[7 1 9 0 0 9 8 2 3 2 0 4 7 0 7 1 10 7 0] 87]
Test Case: 339 | Input/Output: [[7 1 9 0 6 4 7 0 10 2 4 3 2 3 2 1 2 5 0] 81]
Test Case: 340 | Input/Output: [[7 1 9 0 8 1 1 7 1 6 10 1 4 3 4 1 2 9 0] 80]
Test Case: 341 | Input/Output: [[7 2 0 9 9 1 7 0 5 2 10 2 4 3 0 2 4 4 0] 84]
Test Case: 342 | Input/Output: [[7 2 3 5 1 6 1 6 3 0 10 3 5 2 4 2 8 5 4] 90]
Test Case: 343 | Input/Output: [[7 2 7 1 5 1 1 0 10 3 7 5 4 9 1 2 3 6 3] 94]
Test Case: 344 | Input/Output: [[7 2 7 2 0 8 10 5 0 0 9 5 5 7 2 7 1 2 7] 98]
Test Case: 345 | Input/Output: [[7 2 7 2 5 3 3 0 1 0 6 4 5 1 2 2 10 8 1] 83]
Test Case: 346 | Input/Output: [[7 2 9 1 8 0 2 0 10 9 0 9 1 6 1 0 1 8 1] 98]
Test Case: 347 | Input/Output: [[7 3 0 9 0 2 10 8 2 9 1 6 1 5 2 1 2 3 1] 97]
Test Case: 348 | Input/Output: [[7 3 0 10 6 0 0 1 10 5 1 6 4 5 4 6 1 2 7] 95]
Test Case: 349 | Input/Output: [[7 3 2 5 1 9 3 4 7 1 7 2 9 1 4 3 10 5 4] 105]
Test Case: 350 | Input/Output: [[7 3 3 0 2 8 2 6 9 1 3 1 10 2 7 3 1 2 4] 91]
Test Case: 351 | Input/Output: [[7 3 8 0 2 0 0 2 1 7 7 3 2 2 0 3 10 3 1] 75]
Test Case: 352 | Input/Output: [[7 3 10 4 2 1 3 0 4 5 3 0 3 1 7 10 10 0 10] 109]
Test Case: 353 | Input/Output: [[7 3 10 4 4 7 2 7 3 2 7 3 4 5 0 5 5 1 0] 100]
Test Case: 354 | Input/Output: [[8 0 8 0 9 1 7 2 8 0 4 2 10 9 0 0 5 9 0] 98]
Test Case: 355 | Input/Output: [[8 0 8 1 2 8 4 4 6 2 0 5 2 2 10 7 3 3 5] 97]
Test Case: 356 | Input/Output: [[8 0 9 0 1 8 2 4 1 2 8 0 4 1 10 1 3 0 2] 68]
Test Case: 357 | Input/Output: [[8 0 10 1 2 9 1 0 1 2 5 6 1 4 5 5 2 5 3] 73]
Test Case: 358 | Input/Output: [[8 0 10 4 0 7 1 4 5 2 4 8 2 5 3 3 3 1 8] 87]
Test Case: 359 | Input/Output: [[8 1 0 9 10 4 6 5 3 5 4 5 4 8 2 9 1 8 1] 125]
Test Case: 360 | Input/Output: [[8 1 1 8 5 0 9 1 7 2 6 0 3 0 3 5 10 1 0] 78]
Test Case: 361 | Input/Output: [[8 1 2 6 7 1 10 6 0 3 7 9 0 5 3 3 6 8 0] 100]
Test Case: 362 | Input/Output: [[8 1 7 2 1 4 9 0 10 9 0 6 0 8 2 1 0 1 1] 80]
Test Case: 363 | Input/Output: [[8 1 7 2 3 4 3 6 2 8 4 5 8 0 3 3 10 5 2] 95]
Test Case: 364 | Input/Output: [[8 1 7 3 5 5 10 0 9 6 4 8 1 5 0 2 5 2 7] 120]
Test Case: 365 | Input/Output: [[8 1 8 0 6 2 6 1 8 1 0 5 10 6 4 2 1 1 8] 90]
Test Case: 366 | Input/Output: [[8 1 8 2 5 5 4 5 1 1 10 8 2 5 3 2 7 9 0] 110]
Test Case: 367 | Input/Output: [[8 1 8 2 8 0 9 1 5 3 4 1 6 4 1 0 10 9 0] 103]
Test Case: 368 | Input/Output: [[8 1 10 9 0 3 5 7 0 4 1 4 0 9 0 0 4 1 2] 77]
Test Case: 369 | Input/Output: [[8 2 0 1 1 1 10 9 0 9 1 1 8 5 4 1 1 6 1] 79]
Test Case: 370 | Input/Output: [[8 2 0 1 7 3 10 7 2 3 7 1 5 7 1 9 0 0 7] 100]
Test Case: 371 | Input/Output: [[8 2 0 6 9 0 0 0 10 1 5 4 5 5 5 5 3 3 1] 83]
Test Case: 372 | Input/Output: [[8 2 1 7 9 0 10 2 1 9 1 4 6 2 3 9 1 4 2] 95]
Test Case: 373 | Input/Output: [[8 2 2 4 1 5 2 3 9 0 10 3 1 1 1 8 0 1 1] 68]
Test Case: 374 | Input/Output: [[8 2 3 0 10 0 2 5 4 1 3 8 0 2 5 6 2 8 0] 74]
Test Case: 375 | Input/Output: [[8 2 5 2 3 2 2 1 10 3 3 0 9 0 3 0 1 0 3] 68]
Test Case: 376 | Input/Output: [[8 2 6 0 9 0 9 1 6 1 9 1 10 4 6 5 1 2 5] 122]
Test Case: 377 | Input/Output: [[8 2 7 3 2 6 0 3 3 4 8 1 10 5 3 4 1 5 1] 93]
Test Case: 378 | Input/Output: [[8 2 7 3 6 0 10 10 8 1 8 1 0 6 0 5 5 5 10] 135]
Test Case: 379 | Input/Output: [[8 2 8 2 10 0 10 5 5 7 1 9 1 8 0 6 1 2 2] 135]
Test Case: 380 | Input/Output: [[8 2 10 0 5 4 3 8 2 3 1 7 2 4 5 1 6 0 5] 94]
Test Case: 381 | Input/Output: [[8 2 10 1 1 8 1 8 0 8 2 8 2 10 3 5 3 7 6] 131]
Test Case: 382 | Input/Output: [[8 2 10 3 2 8 2 3 0 2 3 0 3 0 1 4 0 3 4] 76]
Test Case: 383 | Input/Output: [[8 2 10 6 4 5 2 2 2 3 0 1 4 5 0 5 5 6 1] 102]
Test Case: 384 | Input/Output: [[9 0 0 4 4 2 0 8 8 0 4 0 10 9 1 0 3 0 8] 80]
Test Case: 385 | Input/Output: [[9 0 1 3 10 8 0 1 6 4 1 2 7 1 0 0 1 2 4] 68]
Test Case: 386 | Input/Output: [[9 0 1 7 10 5 0 1 0 10 8 2 7 2 2 2 10 7 2] 107]
Test Case: 387 | Input/Output: [[9 0 4 5 0 4 5 2 4 4 5 4 6 4 7 0 10 1 1] 84]
Test Case: 388 | Input/Output: [[9 0 6 0 1 7 9 0 5 1 1 2 10 4 0 3 1 3 5] 71]
Test Case: 389 | Input/Output: [[9 0 6 2 6 4 4 3 10 4 4 9 1 8 2 6 2 3 4] 113]
Test Case: 390 | Input/Output: [[9 0 6 2 10 4 6 2 7 6 2 2 6 9 0 2 8 1 3] 98]
Test Case: 391 | Input/Output: [[9 0 6 3 0 2 6 2 7 0 8 1 4 2 2 6 10 1 7] 84]
Test Case: 392 | Input/Output: [[9 0 6 4 8 2 10 8 1 2 0 2 3 0 6 8 0 6 1] 103]
Test Case: 393 | Input/Output: [[9 0 7 1 6 1 9 1 0 8 8 2 6 4 6 0 10 8 1] 108]
Test Case: 394 | Input/Output: [[9 0 8 1 2 3 4 0 5 0 5 4 10 2 0 0 0 6 1] 62]
Test Case: 395 | Input/Output: [[9 0 8 2 6 1 10 6 3 4 0 8 0 1 3 7 1 9 0] 93]
Test Case: 396 | Input/Output: [[9 0 8 2 9 0 8 2 4 2 9 1 10 2 1 7 3 2 0] 107]
Test Case: 397 | Input/Output: [[9 0 9 0 10 7 0 5 1 6 3 8 2 0 4 2 8 0 1] 82]
Test Case: 398 | Input/Output: [[9 0 10 7 1 0 5 3 7 1 2 2 7 2 6 1 9 0 8] 89]
Test Case: 399 | Input/Output: [[9 1 1 8 8 1 2 8 3 2 4 4 6 3 10 6 2 4 5] 99]
Test Case: 400 | Input/Output: [[9 1 2 7 6 3 0 1 10 1 2 10 2 4 0 3 4 6 3] 85]
Test Case: 401 | Input/Output: [[9 1 4 3 9 0 10 3 5 2 0 10 6 3 6 2 10 9 10] 123]
Test Case: 402 | Input/Output: [[9 1 6 2 0 4 2 4 8 0 10 10 9 1 1 2 10 3 7] 125]
Test Case: 403 | Input/Output: [[9 1 6 4 2 3 10 2 0 8 2 8 1 7 1 3 2 8 1] 96]
Test Case: 404 | Input/Output: [[9 1 7 3 10 8 2 4 2 6 4 7 2 4 0 8 1 6 0] 122]
Test Case: 405 | Input/Output: [[9 1 8 2 3 6 10 7 0 9 0 3 1 1 4 1 8 2 6] 99]
Test Case: 406 | Input/Output: [[9 1 8 2 10 0 4 6 1 0 0 8 0 5 2 9 1 6 2] 102]
Test Case: 407 | Input/Output: [[9 1 9 1 1 5 6 3 8 2 1 0 10 9 1 2 8 7 0] 113]
Test Case: 408 | Input/Output: [[9 1 10 0 3 3 2 8 0 3 0 6 2 1 6 1 9 4 2] 87]
Test Case: 409 | Input/Output: [[9 1 10 0 7 7 3 10 5 2 0 10 6 3 4 0 10 1 5] 133]
Test Case: 410 | Input/Output: [[9 1 10 6 3 2 6 5 1 3 6 4 1 8 0 6 3 4 1] 98]
Test Case: 411 | Input/Output: [[10 0 4 2 2 3 6 7 1 7 3 5 0 4 1 0 10 2 1] 79]
Test Case: 412 | Input/Output: [[10 0 4 4 4 3 6 8 0 9 0 9 1 5 5 2 1 7 0] 89]
Test Case: 413 | Input/Output: [[10 0 8 8 0 4 1 0 9 1 0 4 0 7 0 1 1 3 1] 66]
Test Case: 414 | Input/Output: [[10 0 10 0 5 5 0 1 7 3 7 4 2 4 4 2 3 8 0] 89]
Test Case: 415 | Input/Output: [[10 1 6 9 0 6 1 8 2 6 0 3 3 1 4 3 3 8 0] 87]
Test Case: 416 | Input/Output: [[10 2 2 1 4 4 0 6 3 9 1 9 0 3 6 2 3 2 1] 81]
Test Case: 417 | Input/Output: [[10 2 2 3 5 4 2 8 1 0 5 4 3 3 5 5 4 5 1] 76]
Test Case: 418 | Input/Output: [[10 2 2 3 5 9 0 9 0 1 1 7 3 2 5 0 9 9 0] 83]
Test Case: 419 | Input/Output: [[10 2 5 6 1 0 7 7 3 2 3 7 3 4 5 6 4 8 1] 105]
Test Case: 420 | Input/Output: [[10 3 0 1 0 1 3 2 8 3 6 4 5 10 3 1 8 2 1] 81]
Test Case: 421 | Input/Output: [[10 3 1 6 2 0 1 7 3 0 1 3 7 1 7 6 0 9 0] 72]
Test Case: 422 | Input/Output: [[10 3 2 9 1 7 2 5 1 3 6 5 5 5 5 6 4 4 1] 111]
Test Case: 423 | Input/Output: [[10 4 2 1 6 5 0 1 5 7 3 3 4 6 4 6 0 6 0] 88]
Test Case: 424 | Input/Output: [[10 4 3 3 5 5 4 1 2 3 4 9 0 2 5 6 0 0 5] 78]
Test Case: 425 | Input/Output: [[10 4 4 0 1 0 2 8 0 6 2 6 4 0 8 3 2 1 6] 75]
Test Case: 426 | Input/Output: [[10 5 2 9 0 3 3 7 2 0 9 2 6 7 2 1 6 6 0] 87]
Test Case: 427 | Input/Output: [[10 6 1 0 1 7 0 7 3 4 2 5 0 3 6 2 2 6 3] 79]
Test Case: 428 | Input/Output: [[10 6 1 7 3 1 4 6 4 2 8 4 1 6 0 10 8 2 1] 108]
Test Case: 429 | Input/Output: [[10 7 0 5 5 4 3 10 7 1 1 1 9 1 6 1 6 4 9] 115]
Test Case: 430 | Input/Output: [[10 7 1 7 1 2 8 0 1 7 0 5 5 5 3 5 0 9 0] 89]
Test Case: 431 | Input/Output: [[10 7 3 3 6 9 1 7 3 5 0 7 1 5 1 4 6 1 7] 112]
Test Case: 432 | Input/Output: [[10 8 0 0 5 1 0 8 2 8 0 6 2 5 2 1 1 5 0] 80]
Test Case: 433 | Input/Output: [[10 8 2 6 0 6 0 5 1 9 1 1 9 4 2 1 4 5 4] 99]
Test Case: 434 | Input/Output: [[10 9 1 9 1 9 0 3 3 5 3 1 8 0 3 8 0 0 0] 101]
Test Case: 435 | Input/Output: [[10 9 1 9 1 10 5 0 1 0 0 1 2 7 5 2 5 5 0] 107]
Test Case: 436 | Input/Output: [[10 10 7 0 0 3 7 0 4 3 4 1 5 4 5 0 3 7 0] 97]
Test Case: 437 | Input/Output: [[0 0 0 6 3 4 2 0 7 3 4 4 6 0 7 3 7 3 3 1] 77]
Test Case: 438 | Input/Output: [[0 0 6 4 6 4 4 5 5 5 3 4 3 6 0 5 9 1 1 4] 89]
Test Case: 439 | Input/Output: [[0 1 6 4 10 3 0 0 4 9 1 2 5 9 0 3 3 9 1 9] 94]
Test Case: 440 | Input/Output: [[0 1 8 0 6 0 9 1 4 6 4 5 2 6 5 5 7 3 5 4] 101]
Test Case: 441 | Input/Output: [[0 1 8 1 9 0 3 3 6 4 5 4 1 3 4 4 6 3 3 5] 78]
Test Case: 442 | Input/Output: [[0 2 2 8 1 1 8 2 6 2 0 5 9 0 5 5 5 3 2 7] 85]
Test Case: 443 | Input/Output: [[0 2 3 3 7 3 9 1 2 8 8 0 7 3 3 1 10 2 8 8] 120]
Test Case: 444 | Input/Output: [[0 2 6 4 6 1 0 8 5 4 0 10 10 1 1 4 1 6 4 7] 98]
Test Case: 445 | Input/Output: [[0 2 9 0 2 7 0 9 4 1 7 3 9 1 5 4 4 4 3 2] 90]
Test Case: 446 | Input/Output: [[0 2 9 1 3 4 1 3 5 1 10 8 0 2 5 2 7 6 4 5] 89]
Test Case: 447 | Input/Output: [[0 3 5 0 6 3 5 4 5 2 6 1 9 1 1 7 7 0 6 2] 74]
Test Case: 448 | Input/Output: [[0 3 9 0 3 1 2 0 5 3 8 0 0 5 9 0 4 1 2 0] 55]
Test Case: 449 | Input/Output: [[0 3 10 5 1 8 1 2 4 2 8 1 6 8 1 1 6 3 7 0] 84]
Test Case: 450 | Input/Output: [[0 4 0 7 3 2 7 3 4 2 7 1 4 1 2 5 7 3 1 2] 70]
Test Case: 451 | Input/Output: [[0 4 2 2 2 1 8 2 5 3 5 1 2 1 6 3 2 5 3 0] 62]
Test Case: 452 | Input/Output: [[0 4 2 6 0 6 5 1 0 1 0 5 2 3 5 4 6 1 1 6] 58]
Test Case: 453 | Input/Output: [[0 4 5 5 6 1 5 3 1 6 4 1 1 3 9 0 0 10 0 4] 74]
Test Case: 454 | Input/Output: [[0 4 7 1 5 5 6 0 6 3 8 0 1 8 6 3 1 7 5 4] 86]
Test Case: 455 | Input/Output: [[0 4 8 0 7 0 2 4 0 10 4 1 8 0 7 2 2 4 3 4] 74]
Test Case: 456 | Input/Output: [[0 5 0 9 9 1 1 9 5 1 6 4 0 3 6 1 5 3 7 0] 81]
Test Case: 457 | Input/Output: [[0 5 2 1 8 2 9 0 7 3 4 5 1 8 9 1 1 5 9 0] 94]
Test Case: 458 | Input/Output: [[0 5 3 0 4 6 4 3 8 0 3 7 10 8 1 0 2 3 7 10] 107]
Test Case: 459 | Input/Output: [[0 5 5 1 8 1 2 8 7 0 1 7 4 0 1 3 7 1 7 1] 76]
Test Case: 460 | Input/Output: [[0 5 6 0 0 0 4 3 9 1 9 1 5 0 1 9 2 8 4 0] 87]
Test Case: 461 | Input/Output: [[0 5 10 9 0 1 7 3 6 7 3 1 6 0 9 6 3 10 5 1] 102]
Test Case: 462 | Input/Output: [[0 6 0 2 5 3 3 2 1 5 3 1 3 0 5 5 7 1 6 2] 67]
Test Case: 463 | Input/Output: [[0 6 1 2 9 0 1 0 8 1 8 0 9 0 4 1 3 4 0 3] 60]
Test Case: 464 | Input/Output: [[0 6 1 7 7 0 7 2 6 0 9 0 10 0 5 0 9 10 4 5] 93]
Test Case: 465 | Input/Output: [[0 6 1 7 7 3 9 0 9 1 2 3 4 0 4 6 4 0 8 1] 90]
Test Case: 466 | Input/Output: [[0 6 4 4 8 2 7 1 4 0 6 3 2 7 4 5 3 3 4 2] 82]
Test Case: 467 | Input/Output: [[0 7 2 2 9 1 8 1 8 1 3 1 2 4 4 4 6 2 0 1] 74]
Test Case: 468 | Input/Output: [[0 7 7 0 2 7 3 4 9 0 5 3 1 7 0 9 5 3 4 5] 81]
Test Case: 469 | Input/Output: [[0 7 8 0 3 6 8 1 5 2 4 1 2 7 2 5 6 0 0 9] 76]
Test Case: 470 | Input/Output: [[0 7 9 0 9 1 1 1 10 5 3 3 5 2 8 2 3 4 6 3] 93]
Test Case: 471 | Input/Output: [[0 8 0 9 8 0 8 0 2 7 4 5 0 6 5 0 4 5 0 1] 72]
Test Case: 472 | Input/Output: [[0 8 0 10 5 4 0 2 0 5 4 0 6 0 9 0 3 1 7 1] 70]
Test Case: 473 | Input/Output: [[0 8 3 2 8 2 5 2 1 3 9 1 0 8 5 5 7 2 1 2] 86]
Test Case: 474 | Input/Output: [[0 8 7 2 0 3 1 1 8 0 3 6 2 8 7 0 9 0 5 3] 80]
Test Case: 475 | Input/Output: [[0 8 9 1 1 8 5 0 0 1 2 5 2 4 8 0 3 5 3 1] 67]
Test Case: 476 | Input/Output: [[0 9 5 2 2 3 0 8 3 7 8 0 1 1 9 1 4 3 6 1] 85]
Test Case: 477 | Input/Output: [[0 9 6 4 6 3 8 2 4 2 2 8 5 0 2 2 4 4 4 3] 93]
Test Case: 478 | Input/Output: [[0 10 4 4 1 9 7 0 9 0 10 3 1 5 4 3 5 9 1 8] 108]
Test Case: 479 | Input/Output: [[0 10 5 5 6 1 8 2 7 3 1 4 4 5 1 1 4 2 8 0] 96]
Test Case: 480 | Input/Output: [[1 0 0 8 2 3 4 5 4 2 9 1 7 3 4 1 7 1 0 0] 73]
Test Case: 481 | Input/Output: [[1 0 6 0 3 6 7 1 6 3 4 2 9 0 6 3 7 1 1 4] 70]
Test Case: 482 | Input/Output: [[1 0 6 0 4 5 2 2 0 0 6 2 8 0 0 7 7 2 2 1] 55]
Test Case: 483 | Input/Output: [[1 0 6 4 5 5 8 0 5 3 4 2 7 0 9 0 6 4 5 1] 93]
Test Case: 484 | Input/Output: [[1 1 0 2 2 7 8 2 5 1 9 1 0 5 0 10 3 7 2 5] 81]
Test Case: 485 | Input/Output: [[1 1 2 5 2 8 10 2 0 0 1 8 0 2 4 8 0 6 4 6] 82]
Test Case: 486 | Input/Output: [[1 1 5 1 7 0 3 0 8 0 8 0 1 1 8 2 4 3 5 3] 65]
Test Case: 487 | Input/Output: [[1 1 6 0 0 0 5 3 7 3 6 4 3 5 2 3 9 0 8 0] 75]
Test Case: 488 | Input/Output: [[1 2 0 1 7 2 4 4 7 3 2 8 0 2 9 0 6 2 0 8] 70]
Test Case: 489 | Input/Output: [[1 2 2 3 9 1 7 3 8 1 3 7 4 2 7 1 2 5 1 5] 93]
Test Case: 490 | Input/Output: [[1 2 5 2 2 4 3 3 6 0 2 8 2 3 4 2 9 0 5 2] 67]
Test Case: 491 | Input/Output: [[1 2 5 3 9 1 6 0 8 2 3 5 3 5 7 2 10 10 6 2] 115]
Test Case: 492 | Input/Output: [[1 2 5 4 0 1 9 1 1 6 10 4 4 8 0 8 1 10 7 5] 96]
Test Case: 493 | Input/Output: [[1 2 8 2 6 2 4 6 6 2 8 2 1 2 5 2 1 3 2 7] 85]
Test Case: 494 | Input/Output: [[1 2 9 1 10 4 6 8 2 5 3 5 3 5 5 3 5 8 2 0] 123]
Test Case: 495 | Input/Output: [[1 3 2 1 4 0 2 2 9 1 6 3 1 4 6 1 9 1 6 1] 75]
Test Case: 496 | Input/Output: [[1 3 4 4 7 2 8 1 0 4 3 4 2 4 9 0 3 6 5 3] 73]
Test Case: 497 | Input/Output: [[1 3 8 1 1 3 6 4 9 1 5 2 2 4 4 6 10 0 10 0] 114]
Test Case: 498 | Input/Output: [[1 3 9 1 7 2 2 2 0 6 3 6 9 1 7 0 4 0 1 4] 82]
Test Case: 499 | Input/Output: [[1 4 3 2 9 1 0 8 9 1 9 1 8 1 1 1 9 1 9 0] 104]
Test Case: 500 | Input/Output: [[1 4 5 1 9 0 8 1 8 2 4 6 3 1 2 0 4 0 0 8] 74]
Test Case: 501 | Input/Output: [[1 4 8 1 10 7 1 6 2 8 2 0 5 1 0 4 2 8 2 5] 85]
Test Case: 502 | Input/Output: [[1 5 0 6 9 0 1 7 8 1 6 1 6 0 7 0 5 3 1 7] 74]
Test Case: 503 | Input/Output: [[1 5 1 4 9 1 5 0 8 1 7 2 4 4 2 1 1 7 2 4] 74]
Test Case: 504 | Input/Output: [[1 5 2 5 4 2 5 5 9 1 2 3 9 1 6 3 1 8 5 3] 97]
Test Case: 505 | Input/Output: [[1 5 3 4 0 3 8 1 0 7 2 0 3 4 8 2 0 1 4 3] 59]
Test Case: 506 | Input/Output: [[1 5 6 3 8 0 9 1 7 2 4 4 2 7 0 9 1 0 4 5] 85]
Test Case: 507 | Input/Output: [[1 5 9 0 7 0 4 6 4 2 4 0 4 0 8 0 1 6 4 0] 69]
Test Case: 508 | Input/Output: [[1 6 0 4 0 0 5 3 5 4 5 3 10 6 3 2 0 10 0 5] 81]
Test Case: 509 | Input/Output: [[1 6 0 8 2 6 7 3 5 1 2 6 7 3 4 3 1 5 1 4] 84]
Test Case: 510 | Input/Output: [[1 6 2 3 1 7 3 1 3 7 2 5 10 6 0 0 0 8 2 5] 80]
Test Case: 511 | Input/Output: [[1 6 2 3 2 7 7 2 5 1 9 0 5 5 3 5 9 0 0 6] 81]
Test Case: 512 | Input/Output: [[1 6 3 2 6 1 10 7 1 7 3 3 3 3 1 7 1 3 7 3] 89]
Test Case: 513 | Input/Output: [[1 6 3 4 3 5 7 3 3 0 3 5 0 10 8 0 1 0 3 2] 78]
Test Case: 514 | Input/Output: [[1 6 4 5 4 0 8 0 7 2 5 1 4 3 5 5 7 1 2 4] 81]
Test Case: 515 | Input/Output: [[1 6 8 0 8 2 4 6 0 6 0 10 7 0 2 6 0 6 0 4] 87]
Test Case: 516 | Input/Output: [[1 6 8 1 10 0 10 3 1 6 1 9 0 6 2 4 0 8 2 1] 92]
Test Case: 517 | Input/Output: [[1 7 0 6 8 0 3 1 9 1 8 2 5 3 5 3 5 4 4 5] 93]
Test Case: 518 | Input/Output: [[1 7 1 2 5 1 1 5 3 4 8 2 7 0 3 6 7 3 4 0] 81]
Test Case: 519 | Input/Output: [[1 7 7 3 6 4 8 0 1 5 1 6 9 1 5 0 10 9 1 9] 122]
Test Case: 520 | Input/Output: [[1 7 8 0 9 0 4 5 0 1 0 0 8 0 9 0 1 0 4 0] 57]
Test Case: 521 | Input/Output: [[1 7 9 0 8 2 2 7 7 1 4 5 10 3 1 1 8 6 4 4] 96]
Test Case: 522 | Input/Output: [[1 8 1 1 4 6 10 5 0 9 0 8 2 1 3 5 0 5 5 9] 99]
Test Case: 523 | Input/Output: [[1 8 5 1 9 1 0 6 10 3 4 5 5 1 7 0 4 8 2 8] 96]
Test Case: 524 | Input/Output: [[1 8 7 3 6 0 3 1 5 0 0 7 2 4 2 3 5 5 6 0] 80]
Test Case: 525 | Input/Output: [[1 9 4 2 9 0 10 1 6 5 2 6 4 0 3 9 1 8 2 5] 106]
Test Case: 526 | Input/Output: [[1 9 6 3 3 1 1 6 1 2 0 3 10 1 5 3 2 8 2 5] 84]
Test Case: 527 | Input/Output: [[1 9 9 0 6 2 6 0 6 0 1 7 5 5 1 6 5 0 0 2] 81]
Test Case: 528 | Input/Output: [[2 0 0 4 6 3 2 2 2 6 9 0 6 3 7 2 4 1 8 1] 68]
Test Case: 529 | Input/Output: [[2 0 0 5 6 4 10 4 2 7 3 1 7 5 0 5 3 2 8 6] 97]
Test Case: 530 | Input/Output: [[2 0 6 1 0 9 1 3 1 0 9 1 8 0 4 0 2 5 2 6] 68]
Test Case: 531 | Input/Output: [[2 0 6 1 2 7 4 1 7 3 4 2 4 3 0 9 2 3 1 3] 68]
Test Case: 532 | Input/Output: [[2 0 6 3 1 2 4 2 7 0 0 8 5 3 1 6 7 1 3 2] 63]
Test Case: 533 | Input/Output: [[2 0 6 3 8 1 0 10 3 5 6 4 0 7 0 5 0 5 4 1] 73]
Test Case: 534 | Input/Output: [[2 0 9 1 2 6 7 2 3 0 10 2 2 2 8 5 1 10 9 0] 92]
Test Case: 535 | Input/Output: [[2 1 1 1 9 0 2 1 5 1 2 0 7 0 1 7 5 0 0 8] 53]
Test Case: 536 | Input/Output: [[2 1 1 3 0 7 7 1 6 3 7 1 0 3 0 1 9 1 5 3] 66]
Test Case: 537 | Input/Output: [[2 1 2 3 8 1 3 0 5 2 4 0 8 2 6 4 1 9 0 2] 70]
Test Case: 538 | Input/Output: [[2 1 4 6 0 8 2 2 1 9 10 8 1 7 1 3 1 9 1 6] 101]
Test Case: 539 | Input/Output: [[2 1 6 1 4 2 5 3 6 3 5 1 2 7 2 2 2 4 8 1] 67]
Test Case: 540 | Input/Output: [[2 1 7 1 7 3 8 2 6 1 3 6 8 0 0 5 7 0 6 2] 89]
Test Case: 541 | Input/Output: [[2 1 8 2 8 1 3 6 1 7 1 7 2 7 1 7 5 2 2 2] 83]
Test Case: 542 | Input/Output: [[2 2 7 1 0 8 4 2 0 9 1 9 2 4 7 2 6 1 5 0] 74]
Test Case: 543 | Input/Output: [[2 2 9 1 6 2 3 2 0 5 0 7 6 2 10 5 2 9 1 2] 89]
Test Case: 544 | Input/Output: [[2 3 0 6 1 3 4 3 7 0 8 2 4 1 6 4 3 3 6 1] 74]
Test Case: 545 | Input/Output: [[2 3 3 5 7 3 10 4 4 0 3 7 3 1 0 3 5 7 3 1] 93]
Test Case: 546 | Input/Output: [[2 3 3 6 5 5 5 3 1 3 3 1 8 2 4 4 1 9 7 2] 93]
Test Case: 547 | Input/Output: [[2 3 4 6 0 2 1 2 1 1 10 7 1 1 0 9 1 10 0 4] 83]
Test Case: 548 | Input/Output: [[2 3 5 5 2 3 0 9 5 4 6 3 6 1 5 5 7 2 9 0] 91]
Test Case: 549 | Input/Output: [[2 3 5 5 4 3 9 1 3 1 8 1 9 0 6 4 9 0 3 6] 98]
Test Case: 550 | Input/Output: [[2 3 8 2 5 0 6 1 4 1 3 2 8 1 4 3 4 5 7 0] 74]
Test Case: 551 | Input/Output: [[2 3 9 0 4 4 0 10 2 8 9 0 6 2 4 3 9 0 1 6] 93]
Test Case: 552 | Input/Output: [[2 4 2 1 0 0 1 7 1 6 9 0 10 3 4 9 1 9 1 9] 95]
Test Case: 553 | Input/Output: [[2 4 4 2 1 2 5 3 1 6 4 2 6 2 1 3 8 0 7 0] 63]
Test Case: 554 | Input/Output: [[2 4 4 2 2 8 0 8 9 0 9 0 9 0 6 2 8 1 1 1] 76]
Test Case: 555 | Input/Output: [[2 4 6 4 5 0 8 0 5 1 3 1 2 1 6 4 4 0 8 0] 73]
Test Case: 556 | Input/Output: [[2 4 9 1 6 3 1 0 9 0 2 4 6 3 6 4 4 0 3 6] 83]
Test Case: 557 | Input/Output: [[2 4 10 5 3 2 5 1 4 1 0 1 2 1 3 7 2 9 1 3] 74]
Test Case: 558 | Input/Output: [[2 5 1 2 5 0 0 7 1 3 5 5 6 0 2 0 3 1 4 4] 62]
Test Case: 559 | Input/Output: [[2 5 4 0 2 5 7 2 0 1 8 0 1 3 1 8 6 0 9 0] 64]
Test Case: 560 | Input/Output: [[2 5 4 3 2 8 3 7 7 2 3 0 4 5 4 1 8 2 3 0] 86]
Test Case: 561 | Input/Output: [[2 5 5 2 8 2 8 2 7 2 8 2 9 0 2 3 8 1 4 3] 107]
Test Case: 562 | Input/Output: [[2 5 7 0 8 1 1 8 8 0 7 1 3 1 3 7 0 10 2 7] 83]
Test Case: 563 | Input/Output: [[2 5 7 1 3 0 1 6 9 0 7 1 8 1 9 1 2 2 7 1] 75]
Test Case: 564 | Input/Output: [[2 5 9 1 4 1 0 6 4 3 7 1 5 5 2 0 7 1 0 3] 72]
Test Case: 565 | Input/Output: [[2 6 0 5 7 1 9 1 2 2 1 4 7 1 0 1 7 3 6 0] 73]
Test Case: 566 | Input/Output: [[2 6 1 7 6 1 3 4 0 2 0 5 4 4 3 4 8 1 8 0] 69]
Test Case: 567 | Input/Output: [[2 6 9 1 10 8 0 8 1 1 9 2 8 3 2 8 0 5 5 5] 116]
Test Case: 568 | Input/Output: [[2 7 0 7 3 4 7 2 1 5 0 8 0 1 5 3 10 4 6 3] 88]
Test Case: 569 | Input/Output: [[2 7 1 4 1 2 2 6 6 0 4 6 6 2 7 1 10 9 1 6] 99]
Test Case: 570 | Input/Output: [[2 7 2 0 4 3 1 5 6 2 2 5 1 7 8 2 4 5 5 1] 76]
Test Case: 571 | Input/Output: [[2 7 3 2 4 6 5 3 3 2 2 3 8 0 0 6 9 0 0 4] 74]
Test Case: 572 | Input/Output: [[2 7 5 5 0 6 8 2 1 2 6 2 4 0 0 1 3 2 1 0] 58]
Test Case: 573 | Input/Output: [[2 7 6 3 2 8 5 0 7 1 5 2 8 0 6 3 7 3 8 0] 96]
Test Case: 574 | Input/Output: [[2 7 9 0 1 7 9 1 5 5 6 1 1 9 6 4 7 0 4 2] 110]
Test Case: 575 | Input/Output: [[2 8 3 0 7 3 1 7 9 0 0 0 2 3 9 1 4 0 8 1] 76]
Test Case: 576 | Input/Output: [[2 8 6 0 0 0 9 1 3 0 1 6 2 1 2 4 6 1 6 1] 68]
Test Case: 577 | Input/Output: [[2 8 6 2 4 4 8 0 5 3 6 2 10 6 3 1 6 5 5 9] 110]
Test Case: 578 | Input/Output: [[2 8 8 2 7 1 0 7 7 1 1 9 5 1 3 3 0 9 3 6] 103]
Test Case: 579 | Input/Output: [[3 0 1 1 4 2 5 0 8 2 9 0 6 3 1 6 7 2 8 0] 77]
Test Case: 580 | Input/Output: [[3 0 1 7 5 0 8 2 1 2 0 7 6 4 8 2 1 6 4 2] 79]
Test Case: 581 | Input/Output: [[3 0 3 1 1 6 0 4 1 8 5 5 2 2 7 0 7 2 6 1] 66]
Test Case: 582 | Input/Output: [[3 0 4 3 7 3 3 2 1 9 9 0 4 4 5 0 3 4 3 4] 83]
Test Case: 583 | Input/Output: [[3 0 4 4 2 7 2 5 4 3 2 1 8 0 7 2 4 3 0 4] 65]
Test Case: 584 | Input/Output: [[3 1 1 3 6 2 8 1 7 0 5 3 9 1 8 0 3 5 8 1] 83]
Test Case: 585 | Input/Output: [[3 1 1 6 2 1 7 0 6 4 3 7 0 9 4 2 8 0 4 3] 74]
Test Case: 586 | Input/Output: [[3 1 1 8 3 3 8 0 0 8 3 1 4 0 1 3 9 1 3 1] 64]
Test Case: 587 | Input/Output: [[3 1 2 3 2 2 0 0 1 6 10 9 1 8 1 8 0 9 1 10] 95]
Test Case: 588 | Input/Output: [[3 1 2 5 7 0 3 7 6 4 4 4 7 1 0 7 0 7 0 7] 85]
Test Case: 589 | Input/Output: [[3 1 3 4 0 6 9 1 9 0 2 8 5 4 9 1 10 8 2 9] 128]
Test Case: 590 | Input/Output: [[3 1 3 5 1 9 0 9 5 4 8 0 9 1 7 1 6 4 5 0] 93]
Test Case: 591 | Input/Output: [[3 1 4 3 3 1 3 1 5 0 2 6 5 2 4 1 0 9 6 3] 62]
Test Case: 592 | Input/Output: [[3 1 4 6 1 8 7 2 5 1 0 8 1 5 0 3 6 0 3 0] 65]
Test Case: 593 | Input/Output: [[3 1 5 1 6 4 3 3 10 8 0 1 9 6 0 9 0 9 1 9] 105]
Test Case: 594 | Input/Output: [[3 1 7 1 5 3 0 1 4 6 3 4 3 2 2 2 0 9 1 3] 63]
Test Case: 595 | Input/Output: [[3 2 0 8 8 0 4 1 4 6 6 1 9 1 5 3 3 4 5 2] 86]
Test Case: 596 | Input/Output: [[3 2 1 0 9 0 8 0 2 6 3 4 4 4 6 0 0 0 1 2] 55]
Test Case: 597 | Input/Output: [[3 2 1 4 7 2 5 1 6 1 5 4 4 3 2 2 3 2 8 1] 66]
Test Case: 598 | Input/Output: [[3 2 3 7 4 4 9 1 4 5 5 0 9 0 0 7 1 5 8 1] 86]
Test Case: 599 | Input/Output: [[3 2 4 4 0 2 4 2 3 1 2 5 4 4 9 1 2 7 8 0] 69]
Test Case: 600 | Input/Output: [[3 3 0 4 1 1 2 4 6 0 7 2 1 2 3 2 7 3 0 2] 53]
Test Case: 601 | Input/Output: [[3 3 0 8 4 1 7 2 7 2 8 2 7 2 2 5 0 9 3 5] 87]
Test Case: 602 | Input/Output: [[3 3 9 1 8 2 6 3 8 1 5 5 4 1 2 0 9 1 4 4] 101]
Test Case: 603 | Input/Output: [[3 4 1 5 2 0 4 0 9 1 2 6 7 0 8 0 5 4 7 1] 71]
Test Case: 604 | Input/Output: [[3 4 2 6 1 2 3 6 9 1 1 0 3 2 6 0 5 2 3 3] 63]
Test Case: 605 | Input/Output: [[3 4 3 0 0 9 7 1 8 0 8 0 5 4 3 1 1 0 1 1] 59]
Test Case: 606 | Input/Output: [[3 4 4 6 7 0 6 2 9 1 4 6 2 0 6 3 4 1 6 3] 90]
Test Case: 607 | Input/Output: [[3 4 5 2 8 0 3 7 5 4 5 1 6 3 1 1 2 1 0 0] 66]
Test Case: 608 | Input/Output: [[3 4 6 2 5 0 7 3 0 5 4 0 6 2 6 1 4 6 4 1] 73]
Test Case: 609 | Input/Output: [[3 4 7 0 2 7 1 8 8 2 6 0 3 3 6 2 8 2 6 2] 92]
Test Case: 610 | Input/Output: [[3 4 10 1 3 9 0 2 4 3 5 7 0 2 8 0 3 6 4 8] 86]
Test Case: 611 | Input/Output: [[3 5 1 8 4 4 5 4 5 1 7 0 3 3 4 5 7 3 5 2] 84]
Test Case: 612 | Input/Output: [[3 5 2 8 2 3 1 6 5 0 4 0 0 7 6 3 7 2 6 0] 72]
Test Case: 613 | Input/Output: [[3 5 5 3 6 2 3 5 7 3 8 0 0 5 6 3 10 4 6 10] 112]
Test Case: 614 | Input/Output: [[3 5 6 1 3 4 9 0 8 2 9 1 4 2 7 0 3 1 0 0] 81]
Test Case: 615 | Input/Output: [[3 5 7 1 8 0 5 3 10 1 7 5 3 3 0 1 3 10 0 4] 87]
Test Case: 616 | Input/Output: [[3 5 9 1 8 0 2 2 6 0 2 6 0 7 4 6 3 5 7 0] 87]
Test Case: 617 | Input/Output: [[3 6 3 0 8 1 2 6 8 2 7 3 8 0 2 8 2 5 0 4] 95]
Test Case: 618 | Input/Output: [[3 6 4 6 4 4 8 1 5 3 2 5 3 5 6 0 9 0 0 6] 84]
Test Case: 619 | Input/Output: [[3 7 0 7 10 0 7 6 4 0 7 9 1 8 1 6 4 9 1 5] 119]
Test Case: 620 | Input/Output: [[3 7 2 0 6 3 5 1 6 2 3 3 7 0 4 2 7 1 2 7] 73]
Test Case: 621 | Input/Output: [[3 7 4 2 3 0 8 2 8 0 3 4 7 2 3 5 7 1 5 3] 89]
Test Case: 622 | Input/Output: [[3 7 4 4 5 5 2 5 0 3 3 7 7 0 9 0 2 3 0 0] 82]
Test Case: 623 | Input/Output: [[3 7 7 3 5 3 0 8 1 4 5 0 5 2 2 8 4 4 9 0] 96]
Test Case: 624 | Input/Output: [[3 7 8 1 1 8 2 8 5 5 8 2 8 2 7 3 2 2 8 1] 129]
Test Case: 625 | Input/Output: [[3 7 8 1 2 2 3 6 0 7 9 0 4 4 3 1 4 5 2 5] 84]
Test Case: 626 | Input/Output: [[4 0 0 4 5 3 5 2 5 0 5 4 7 3 8 2 2 3 6 0] 78]
Test Case: 627 | Input/Output: [[4 0 2 6 7 3 3 0 9 0 1 7 3 5 8 1 4 2 3 1] 72]
Test Case: 628 | Input/Output: [[4 0 5 4 10 5 2 0 8 5 1 6 0 9 0 8 0 10 8 4] 96]
Test Case: 629 | Input/Output: [[4 0 7 0 4 0 9 1 3 2 9 1 3 0 9 0 7 1 6 1] 73]
Test Case: 630 | Input/Output: [[4 1 2 1 7 1 3 3 5 0 2 5 3 3 6 3 7 3 3 2] 67]
Test Case: 631 | Input/Output: [[4 1 2 5 6 2 5 5 1 3 5 2 4 4 1 8 3 5 7 0] 74]
Test Case: 632 | Input/Output: [[4 1 4 4 9 0 6 0 5 2 7 0 10 3 2 5 1 5 5 5] 83]
Test Case: 633 | Input/Output: [[4 1 4 5 3 0 8 0 8 1 10 4 2 6 4 1 9 10 9 8] 114]
Test Case: 634 | Input/Output: [[4 1 4 5 5 2 4 2 1 0 0 4 1 5 4 0 2 3 5 3] 55]
Test Case: 635 | Input/Output: [[4 1 4 5 5 5 2 6 6 3 2 6 8 2 5 4 5 4 6 0] 90]
Test Case: 636 | Input/Output: [[4 1 6 3 0 4 6 4 8 2 3 4 6 3 1 7 0 1 2 1] 77]
Test Case: 637 | Input/Output: [[4 1 9 1 4 6 8 2 5 0 5 2 1 6 9 1 0 10 8 1] 108]
Test Case: 638 | Input/Output: [[4 2 3 4 7 1 2 2 2 6 0 9 4 0 6 3 5 5 5 2] 77]
Test Case: 639 | Input/Output: [[4 2 3 6 8 2 9 1 3 6 10 0 9 7 0 9 1 10 1 1] 123]
Test Case: 640 | Input/Output: [[4 2 4 1 4 4 7 3 1 3 7 3 4 6 8 2 2 8 5 4] 102]
Test Case: 641 | Input/Output: [[4 2 6 0 1 8 0 3 3 5 7 1 2 0 3 1 7 1 3 2] 59]
Test Case: 642 | Input/Output: [[4 2 6 2 6 3 0 2 1 1 6 0 6 4 5 4 0 4 2 4] 67]
Test Case: 643 | Input/Output: [[4 3 6 2 3 0 3 3 8 2 6 3 9 0 6 1 9 0 5 2] 81]
Test Case: 644 | Input/Output: [[4 3 7 2 10 2 2 4 1 4 5 4 2 4 6 2 3 10 9 9] 99]
Test Case: 645 | Input/Output: [[4 4 1 3 9 0 2 3 0 6 4 2 6 1 2 7 10 5 5 10] 94]
Test Case: 646 | Input/Output: [[4 4 1 9 0 0 1 4 0 0 7 1 8 0 10 6 4 9 1 4] 92]
Test Case: 647 | Input/Output: [[4 4 2 0 8 2 7 1 8 0 10 6 3 7 3 2 4 10 7 2] 108]
Test Case: 648 | Input/Output: [[4 4 4 4 3 0 0 9 1 1 7 1 1 9 6 2 8 1 4 2] 77]
Test Case: 649 | Input/Output: [[4 4 6 3 8 1 3 4 0 3 3 0 3 6 2 1 7 2 8 1] 69]
Test Case: 650 | Input/Output: [[4 4 8 1 4 0 0 8 8 1 2 7 0 1 5 2 1 3 2 0] 61]
Test Case: 651 | Input/Output: [[4 5 2 6 0 3 1 9 0 7 8 2 6 2 3 1 0 8 7 2] 82]
Test Case: 652 | Input/Output: [[4 5 4 5 2 7 9 1 6 2 0 4 3 6 4 6 0 7 0 2] 83]
Test Case: 653 | Input/Output: [[4 5 6 4 2 0 2 2 9 0 3 0 1 9 5 2 8 1 8 0] 78]
Test Case: 654 | Input/Output: [[4 5 7 1 2 7 1 5 6 0 6 0 6 4 6 0 4 3 9 0] 82]
Test Case: 655 | Input/Output: [[4 5 8 0 2 0 5 5 2 1 6 3 3 0 8 2 6 2 5 2] 77]
Test Case: 656 | Input/Output: [[4 5 9 0 6 0 4 4 5 3 1 6 9 0 1 7 8 0 2 2] 76]
Test Case: 657 | Input/Output: [[4 6 4 5 10 5 5 6 3 2 0 3 2 1 8 9 1 1 9 3] 108]
Test Case: 658 | Input/Output: [[4 6 6 0 3 4 6 3 1 2 4 1 8 1 2 4 9 1 7 1] 86]
Test Case: 659 | Input/Output: [[4 6 7 1 8 1 7 3 3 2 1 0 10 4 3 4 3 10 1 8] 103]
Test Case: 660 | Input/Output: [[5 0 1 4 0 3 3 4 4 4 4 6 0 8 10 7 2 9 1 10] 94]
Test Case: 661 | Input/Output: [[5 0 7 1 4 5 5 2 10 0 4 0 4 7 0 0 1 10 10 9] 88]
Test Case: 662 | Input/Output: [[5 1 2 0 5 4 6 0 9 0 4 0 8 2 4 1 7 3 8 1] 82]
Test Case: 663 | Input/Output: [[5 1 2 3 6 0 0 1 2 7 8 1 5 0 7 3 9 0 7 0] 76]
Test Case: 664 | Input/Output: [[5 1 3 6 10 5 1 2 8 4 5 4 2 9 1 7 1 8 2 5] 106]
Test Case: 665 | Input/Output: [[5 1 6 3 6 0 10 5 2 5 0 0 4 5 5 6 0 4 6 8] 94]
Test Case: 666 | Input/Output: [[5 2 4 3 3 5 8 1 0 9 1 3 6 3 10 4 2 8 2 0] 85]
Test Case: 667 | Input/Output: [[5 2 4 3 8 1 4 4 6 3 5 0 4 6 3 6 5 1 8 0] 81]
Test Case: 668 | Input/Output: [[5 2 4 6 7 0 2 5 8 1 10 3 4 8 0 5 1 8 2 1] 96]
Test Case: 669 | Input/Output: [[5 2 5 1 10 7 3 3 1 0 0 6 3 1 4 7 2 10 7 8] 98]
Test Case: 670 | Input/Output: [[5 2 5 5 6 2 0 1 5 5 2 7 0 9 10 6 0 1 9 1] 95]
Test Case: 671 | Input/Output: [[5 2 6 4 7 3 5 4 3 4 1 8 9 0 3 6 9 0 4 3] 98]
Test Case: 672 | Input/Output: [[5 2 7 0 9 0 4 1 7 2 10 4 4 4 1 6 3 3 7 8] 95]
Test Case: 673 | Input/Output: [[5 2 8 1 5 4 2 7 10 2 4 4 5 6 0 6 2 9 1 4] 93]
Test Case: 674 | Input/Output: [[5 2 8 2 1 7 9 0 1 5 7 0 2 3 8 2 0 10 3 2] 81]
Test Case: 675 | Input/Output: [[5 2 9 1 1 5 5 4 10 4 0 7 0 6 2 0 10 6 4 2] 94]
Test Case: 676 | Input/Output: [[5 3 0 4 8 0 6 3 0 9 9 1 4 0 2 0 3 3 4 2] 70]
Test Case: 677 | Input/Output: [[5 3 0 5 8 1 1 9 10 1 0 9 0 7 0 0 2 10 3 0] 85]
Test Case: 678 | Input/Output: [[5 3 3 0 1 1 3 4 2 6 7 0 1 9 7 0 1 7 7 2] 76]
Test Case: 679 | Input/Output: [[5 3 3 1 1 3 9 1 2 0 5 1 1 1 2 3 7 1 3 1] 55]
Test Case: 680 | Input/Output: [[5 3 3 6 6 4 3 2 0 10 8 0 4 2 5 1 5 0 4 2] 84]
Test Case: 681 | Input/Output: [[5 3 3 7 5 2 5 0 3 6 6 1 8 0 7 3 2 4 7 0] 84]
Test Case: 682 | Input/Output: [[5 3 5 3 7 0 5 4 4 4 8 1 4 2 10 0 6 8 2 10] 97]
Test Case: 683 | Input/Output: [[5 3 6 1 3 5 3 0 0 1 6 1 4 0 1 6 5 0 5 4] 59]
Test Case: 684 | Input/Output: [[5 3 8 2 9 1 7 3 4 1 5 5 7 3 9 0 3 3 8 1] 123]
Test Case: 685 | Input/Output: [[5 3 9 1 7 2 5 5 3 0 2 1 9 0 0 6 8 1 9 0] 86]
Test Case: 686 | Input/Output: [[5 4 1 7 8 2 1 7 6 3 2 1 5 5 7 0 0 3 1 0] 76]
Test Case: 687 | Input/Output: [[5 4 2 4 2 2 9 0 2 0 9 0 10 9 0 6 4 6 4 7] 100]
Test Case: 688 | Input/Output: [[5 4 2 5 8 1 9 1 8 1 3 5 7 1 1 2 5 0 5 3] 84]
Test Case: 689 | Input/Output: [[5 4 4 4 6 1 8 0 2 2 9 1 10 9 1 0 0 5 5 10] 106]
Test Case: 690 | Input/Output: [[5 4 5 2 8 0 7 0 4 5 6 1 8 2 8 0 8 2 1 6] 91]
Test Case: 691 | Input/Output: [[5 4 6 2 6 0 1 2 0 3 9 1 4 6 4 3 6 1 4 0] 75]
Test Case: 692 | Input/Output: [[5 4 6 2 8 2 9 1 9 1 6 4 6 2 9 0 1 1 3 5] 114]
Test Case: 693 | Input/Output: [[5 4 6 4 6 0 4 0 4 0 6 4 2 0 7 0 9 0 7 2] 78]
Test Case: 694 | Input/Output: [[5 4 7 0 8 0 8 1 5 3 1 8 8 2 7 1 4 4 4 5] 92]
Test Case: 695 | Input/Output: [[5 4 7 1 6 4 2 7 4 0 2 1 7 2 0 10 0 6 6 0] 76]
Test Case: 696 | Input/Output: [[5 4 9 0 6 3 9 1 8 1 4 0 3 2 7 0 6 2 8 0] 86]
Test Case: 697 | Input/Output: [[5 5 0 4 5 5 9 1 5 1 4 2 2 0 1 7 5 2 6 0] 83]
Test Case: 698 | Input/Output: [[5 5 0 5 9 1 6 4 1 7 5 4 0 4 9 0 6 2 3 1] 84]
Test Case: 699 | Input/Output: [[5 5 1 9 6 2 4 0 4 3 5 0 6 0 9 1 8 0 0 2] 85]
Test Case: 700 | Input/Output: [[5 5 4 0 2 6 7 1 9 0 7 1 5 0 8 0 10 3 7 3] 97]
Test Case: 701 | Input/Output: [[5 5 4 1 4 0 7 3 9 1 6 3 1 9 1 2 1 5 7 1] 95]
Test Case: 702 | Input/Output: [[5 5 4 2 6 2 5 1 3 3 6 2 5 3 6 2 0 8 4 4] 80]
Test Case: 703 | Input/Output: [[5 5 4 4 2 2 2 8 9 1 3 3 3 7 9 1 4 2 1 1] 105]
Test Case: 704 | Input/Output: [[5 5 6 3 2 3 6 1 1 1 3 2 7 1 9 1 3 1 6 0] 75]
Test Case: 705 | Input/Output: [[5 5 7 1 1 2 9 0 7 3 4 4 5 4 3 6 9 0 2 4] 92]
Test Case: 706 | Input/Output: [[5 5 7 2 7 3 9 0 7 3 6 1 6 4 4 4 7 0 6 2] 114]
Test Case: 707 | Input/Output: [[5 5 8 2 3 4 6 1 6 2 9 1 6 3 5 2 1 1 8 1] 96]
Test Case: 708 | Input/Output: [[6 0 0 5 3 3 5 5 0 0 7 0 4 0 7 1 0 5 1 1] 53]
Test Case: 709 | Input/Output: [[6 0 1 9 8 0 4 2 6 1 5 2 4 3 5 4 8 0 5 0] 81]
Test Case: 710 | Input/Output: [[6 0 3 5 3 1 8 2 2 1 2 7 6 3 9 1 7 3 5 0] 88]
Test Case: 711 | Input/Output: [[6 0 4 4 4 4 0 10 1 7 4 3 6 4 3 5 4 3 5 1] 82]
Test Case: 712 | Input/Output: [[6 0 6 0 5 2 5 3 8 2 1 5 9 1 1 4 2 6 6 2] 76]
Test Case: 713 | Input/Output: [[6 0 6 3 2 8 0 5 8 2 5 4 4 4 8 2 3 3 2 0] 83]
Test Case: 714 | Input/Output: [[6 0 6 4 6 4 5 2 9 0 10 6 4 0 5 1 6 5 5 7] 112]
Test Case: 715 | Input/Output: [[6 0 9 0 7 1 6 3 2 4 8 2 5 2 1 7 7 3 4 2] 88]
Test Case: 716 | Input/Output: [[6 0 9 1 7 2 6 4 5 0 6 2 5 4 9 0 9 0 8 0] 95]
Test Case: 717 | Input/Output: [[6 1 0 7 4 4 1 0 5 2 10 8 0 4 2 5 1 10 6 10] 94]
Test Case: 718 | Input/Output: [[6 1 1 6 7 3 9 0 2 3 0 6 8 1 6 3 9 0 2 6] 88]
Test Case: 719 | Input/Output: [[6 1 3 1 9 1 0 10 3 0 1 7 6 2 0 2 0 0 1 3] 59]
Test Case: 720 | Input/Output: [[6 1 6 0 0 1 9 1 0 10 6 4 7 3 9 1 5 3 5 0] 104]
Test Case: 721 | Input/Output: [[6 1 6 1 8 1 7 3 9 0 0 5 4 6 7 2 9 1 1 8] 102]
Test Case: 722 | Input/Output: [[6 1 8 1 1 1 4 2 6 2 6 2 7 3 9 0 4 1 8 1] 82]
Test Case: 723 | Input/Output: [[6 1 10 4 6 4 0 5 1 0 5 2 1 5 4 5 0 3 7 2] 85]
Test Case: 724 | Input/Output: [[6 2 0 0 3 0 2 3 5 1 4 5 8 2 6 1 4 1 6 0] 65]
Test Case: 725 | Input/Output: [[6 2 1 6 0 6 3 7 0 9 1 4 1 0 5 0 9 1 5 1] 72]
Test Case: 726 | Input/Output: [[6 2 2 7 7 3 9 0 6 1 9 0 1 2 8 1 6 2 9 0] 90]
Test Case: 727 | Input/Output: [[6 2 4 0 1 6 0 2 8 2 10 3 2 1 1 0 7 10 2 2] 84]
Test Case: 728 | Input/Output: [[6 2 6 4 6 4 0 0 8 1 9 1 4 5 8 2 6 2 1 6] 97]
Test Case: 729 | Input/Output: [[6 2 7 2 9 0 8 0 9 0 3 2 6 3 10 8 1 10 4 10] 109]
Test Case: 730 | Input/Output: [[6 2 7 3 4 2 8 2 2 4 6 4 5 5 8 0 7 1 2 3] 100]
Test Case: 731 | Input/Output: [[6 2 8 0 4 4 3 3 4 3 2 7 7 0 8 0 6 4 1 2] 75]
Test Case: 732 | Input/Output: [[6 3 2 4 8 1 2 3 5 5 7 2 0 8 4 6 3 3 2 5] 89]
Test Case: 733 | Input/Output: [[6 3 4 3 2 7 4 1 4 2 6 3 8 2 6 4 5 3 5 0] 89]
Test Case: 734 | Input/Output: [[6 3 5 1 0 5 9 0 2 7 5 4 4 2 6 2 9 1 1 1] 74]
Test Case: 735 | Input/Output: [[6 3 5 2 5 0 3 5 5 3 0 6 3 6 6 2 9 0 8 1] 78]
Test Case: 736 | Input/Output: [[6 3 9 0 4 4 6 4 7 0 2 2 4 5 8 2 4 2 1 0] 84]
Test Case: 737 | Input/Output: [[6 3 9 0 7 1 7 2 7 1 2 2 1 2 0 10 0 1 2 3] 66]
Test Case: 738 | Input/Output: [[6 4 0 2 7 0 7 1 4 6 3 1 0 3 3 7 7 1 1 2] 75]
Test Case: 739 | Input/Output: [[6 4 3 1 5 4 1 8 10 4 2 8 1 5 4 4 1 10 9 2] 101]
Test Case: 740 | Input/Output: [[6 4 3 2 0 2 5 0 0 4 1 7 9 1 8 1 2 3 3 4] 76]
Test Case: 741 | Input/Output: [[6 4 4 0 8 1 4 2 1 0 5 3 2 7 9 0 2 6 0 8] 76]
Test Case: 742 | Input/Output: [[6 4 4 5 6 4 3 3 2 2 8 0 7 0 9 1 9 1 2 1] 95]
Test Case: 743 | Input/Output: [[6 4 4 6 6 3 1 6 2 0 9 0 8 1 4 3 2 4 7 2] 88]
Test Case: 744 | Input/Output: [[6 4 6 1 4 6 5 3 4 1 1 7 4 0 9 1 5 0 4 4] 91]
Test Case: 745 | Input/Output: [[6 4 6 4 8 1 0 7 1 6 2 3 6 2 8 2 10 10 7 2] 136]
Test Case: 746 | Input/Output: [[6 4 7 2 4 2 2 2 9 1 3 2 7 0 0 1 3 4 2 6] 77]
Test Case: 747 | Input/Output: [[6 4 7 2 6 1 4 3 8 0 3 1 10 4 2 2 3 9 1 9] 98]
Test Case: 748 | Input/Output: [[6 4 9 0 7 3 7 2 3 7 0 10 7 2 3 7 3 3 6 2] 117]
Test Case: 749 | Input/Output: [[7 0 0 7 0 4 0 8 9 1 2 7 7 2 4 5 2 8 3 5] 86]
Test Case: 750 | Input/Output: [[7 0 0 10 2 6 4 6 6 0 7 3 8 2 8 1 0 4 5 0] 103]
Test Case: 751 | Input/Output: [[7 0 1 2 3 6 5 5 0 9 8 1 2 5 1 3 2 2 0 9] 71]
Test Case: 752 | Input/Output: [[7 0 2 0 9 0 10 7 0 9 0 7 2 3 7 9 0 8 2 2] 100]
Test Case: 753 | Input/Output: [[7 0 2 2 3 4 8 1 2 4 8 2 7 1 6 4 0 1 0 0] 69]
Test Case: 754 | Input/Output: [[7 0 2 3 4 3 6 4 0 10 6 2 9 1 2 4 6 1 0 1] 79]
Test Case: 755 | Input/Output: [[7 0 4 5 3 0 0 5 7 2 4 2 5 5 6 1 5 0 4 5] 76]
Test Case: 756 | Input/Output: [[7 0 5 0 2 8 6 1 0 3 5 5 4 2 4 4 9 1 0 6] 82]
Test Case: 757 | Input/Output: [[7 0 5 3 8 2 2 3 4 5 2 0 9 0 2 2 3 3 3 2] 67]
Test Case: 758 | Input/Output: [[7 0 5 4 6 2 7 3 0 10 5 5 5 4 4 2 9 0 3 5] 96]
Test Case: 759 | Input/Output: [[7 0 6 4 3 7 10 6 4 6 3 5 0 5 5 2 7 10 6 2] 129]
Test Case: 760 | Input/Output: [[7 0 9 0 8 1 7 0 0 10 3 3 7 0 8 2 8 1 4 2] 91]
Test Case: 761 | Input/Output: [[7 1 2 5 3 6 2 6 10 8 1 3 6 8 1 8 1 7 3 9] 106]
Test Case: 762 | Input/Output: [[7 1 3 4 7 0 1 8 4 6 8 2 3 3 5 1 6 2 7 0] 89]
Test Case: 763 | Input/Output: [[7 1 4 0 1 9 7 1 8 0 2 4 1 6 6 1 1 9 7 2] 91]
Test Case: 764 | Input/Output: [[7 1 4 0 7 0 1 4 8 1 2 8 5 3 0 2 8 2 6 2] 82]
Test Case: 765 | Input/Output: [[7 1 4 4 0 8 9 0 2 2 2 3 7 0 4 4 1 5 7 1] 71]
Test Case: 766 | Input/Output: [[7 1 6 3 9 1 10 5 2 4 2 3 1 1 9 5 0 8 2 4] 105]
Test Case: 767 | Input/Output: [[7 1 6 4 6 3 2 7 0 2 7 3 3 7 8 1 8 1 4 0] 97]
Test Case: 768 | Input/Output: [[7 1 7 0 5 2 3 6 8 2 9 1 2 2 5 3 8 0 4 1] 87]
Test Case: 769 | Input/Output: [[7 1 7 3 5 1 0 4 2 1 6 1 1 8 3 2 2 5 6 2] 72]
Test Case: 770 | Input/Output: [[7 1 8 0 3 3 6 4 4 2 0 3 5 4 2 4 5 0 2 4] 71]
Test Case: 771 | Input/Output: [[7 1 8 2 8 0 6 2 3 6 8 0 3 2 9 1 1 2 7 1] 86]
Test Case: 772 | Input/Output: [[7 2 0 7 3 1 3 4 1 6 8 1 9 1 8 0 6 2 7 2] 86]
Test Case: 773 | Input/Output: [[7 2 1 8 6 4 2 5 7 2 9 0 3 5 3 3 4 6 8 1] 96]
Test Case: 774 | Input/Output: [[7 2 3 6 4 4 2 1 7 1 9 0 6 0 2 5 1 9 8 0] 85]
Test Case: 775 | Input/Output: [[7 2 6 1 8 0 5 3 8 1 10 6 4 5 2 3 0 9 1 0] 96]
Test Case: 776 | Input/Output: [[7 2 6 2 1 5 1 4 3 5 0 0 1 9 1 6 7 1 5 2] 69]
Test Case: 777 | Input/Output: [[7 2 7 2 4 1 2 6 1 4 5 2 1 2 2 0 9 0 3 3] 63]
Test Case: 778 | Input/Output: [[7 2 8 2 10 1 6 4 0 0 7 1 0 5 1 8 1 2 8 9] 99]
Test Case: 779 | Input/Output: [[7 2 10 7 2 9 1 7 0 6 1 7 3 4 6 1 0 9 1 0] 104]
Test Case: 780 | Input/Output: [[7 3 2 1 7 1 9 1 9 1 5 1 6 3 1 8 3 4 8 0] 96]
Test Case: 781 | Input/Output: [[7 3 3 7 9 1 5 2 3 6 4 4 8 2 2 1 3 3 5 3] 100]
Test Case: 782 | Input/Output: [[7 3 4 2 6 4 4 1 6 0 1 0 8 1 2 7 4 2 3 1] 74]
Test Case: 783 | Input/Output: [[7 3 6 2 9 0 8 0 2 2 8 0 9 0 10 1 5 5 5 5] 99]
Test Case: 784 | Input/Output: [[7 3 7 0 0 5 2 5 1 8 5 4 3 2 4 1 10 7 3 7] 101]
Test Case: 785 | Input/Output: [[7 3 7 1 0 7 3 2 1 2 9 0 10 5 4 3 1 10 2 9] 102]
Test Case: 786 | Input/Output: [[7 3 7 1 2 7 10 4 0 7 1 5 1 9 1 3 0 10 4 4] 100]
Test Case: 787 | Input/Output: [[7 3 7 3 1 3 1 0 8 2 3 0 7 2 2 1 5 4 6 1] 77]
Test Case: 788 | Input/Output: [[7 3 8 1 7 2 5 0 2 8 4 4 6 3 9 1 7 0 1 2] 99]
Test Case: 789 | Input/Output: [[7 3 9 1 0 6 7 3 3 3 3 3 2 4 0 1 7 2 8 0] 84]
Test Case: 790 | Input/Output: [[8 0 1 1 0 8 0 3 6 3 4 4 4 6 1 4 4 4 4 2] 68]
Test Case: 791 | Input/Output: [[8 0 1 8 5 2 5 3 5 4 2 0 6 1 6 4 2 0 1 0] 65]
Test Case: 792 | Input/Output: [[8 0 2 4 0 4 9 0 8 0 5 3 8 2 2 0 5 3 2 3] 70]
Test Case: 793 | Input/Output: [[8 0 2 8 9 1 0 10 3 3 7 1 3 2 8 2 1 3 1 7] 92]
Test Case: 794 | Input/Output: [[8 0 4 0 7 1 5 4 9 1 3 2 5 1 9 1 0 7 6 3] 79]
Test Case: 795 | Input/Output: [[8 0 5 3 7 1 8 0 5 1 0 9 7 0 0 4 6 3 2 4] 73]
Test Case: 796 | Input/Output: [[8 0 5 3 7 2 4 0 6 1 0 5 0 2 2 1 2 0 2 0] 50]
Test Case: 797 | Input/Output: [[8 0 6 3 10 1 7 1 8 1 0 6 0 0 2 5 3 4 6 8] 87]
Test Case: 798 | Input/Output: [[8 0 7 2 4 3 8 2 7 2 5 1 2 3 5 3 8 2 4 5] 92]
Test Case: 799 | Input/Output: [[8 0 9 0 0 4 7 1 7 0 8 1 6 2 0 8 8 2 6 3] 86]
Test Case: 800 | Input/Output: [[8 0 9 1 8 2 5 0 7 0 3 7 10 7 2 9 0 5 5 1] 121]
Test Case: 801 | Input/Output: [[8 1 1 0 1 6 7 2 0 5 4 2 3 5 3 3 6 1 4 0] 62]
Test Case: 802 | Input/Output: [[8 1 1 3 10 8 2 6 4 4 0 3 4 8 0 4 3 7 3 1] 100]
Test Case: 803 | Input/Output: [[8 1 2 7 2 2 5 4 4 6 6 2 9 0 2 7 2 6 7 0] 88]
Test Case: 804 | Input/Output: [[8 1 4 0 2 0 6 4 7 3 0 10 9 0 3 1 4 4 7 0] 89]
Test Case: 805 | Input/Output: [[8 1 5 4 2 0 7 2 9 1 4 4 9 0 3 4 9 1 7 0] 91]
Test Case: 806 | Input/Output: [[8 1 7 2 1 1 1 3 9 0 2 8 1 9 4 3 0 0 7 1] 73]
Test Case: 807 | Input/Output: [[8 1 7 2 9 1 8 1 1 0 6 4 8 0 4 0 0 8 6 3] 93]
Test Case: 808 | Input/Output: [[8 1 8 0 0 1 3 2 2 6 7 2 6 0 6 3 6 3 5 4] 73]
Test Case: 809 | Input/Output: [[8 1 9 1 4 6 9 1 6 2 1 5 4 4 2 6 6 2 1 8] 105]
Test Case: 810 | Input/Output: [[8 1 9 1 7 2 10 7 3 8 1 0 2 1 8 2 4 8 2 4] 113]
Test Case: 811 | Input/Output: [[8 2 0 1 8 2 2 6 10 2 1 7 2 4 1 9 0 8 2 5] 85]
Test Case: 812 | Input/Output: [[8 2 0 7 7 3 1 8 1 2 5 4 6 0 6 2 7 1 3 3] 77]
Test Case: 813 | Input/Output: [[8 2 1 2 0 10 9 0 7 1 7 1 2 7 8 1 2 2 1 3] 84]
Test Case: 814 | Input/Output: [[8 2 4 0 0 2 5 0 5 3 4 2 9 0 5 1 5 2 6 3] 70]
Test Case: 815 | Input/Output: [[8 2 4 0 7 0 5 0 0 2 1 7 8 2 3 7 9 0 3 0] 84]
Test Case: 816 | Input/Output: [[8 2 5 3 6 2 8 0 5 5 7 0 5 2 0 0 8 2 1 5] 87]
Test Case: 817 | Input/Output: [[8 2 5 3 8 2 6 4 5 3 8 2 7 3 8 1 2 3 3 4] 118]
Test Case: 818 | Input/Output: [[8 2 6 2 1 3 1 6 5 3 6 0 8 0 4 3 5 5 4 5] 87]
Test Case: 819 | Input/Output: [[8 2 6 4 1 0 2 5 4 2 6 3 5 0 7 0 4 2 3 5] 76]
Test Case: 820 | Input/Output: [[8 2 7 2 9 0 5 0 5 5 8 2 7 1 1 7 1 7 6 0] 105]
Test Case: 821 | Input/Output: [[8 2 9 1 1 9 4 0 7 3 8 0 3 4 8 1 1 8 4 3] 106]
Test Case: 822 | Input/Output: [[8 2 10 9 0 7 2 8 1 0 8 9 1 7 0 5 3 6 4 5] 121]
Test Case: 823 | Input/Output: [[9 0 0 6 8 1 2 8 5 5 1 2 1 5 0 4 6 1 1 7] 78]
Test Case: 824 | Input/Output: [[9 0 2 1 5 1 10 6 2 3 5 3 0 8 0 7 1 10 5 9] 95]
Test Case: 825 | Input/Output: [[9 0 2 3 0 3 9 0 2 8 5 3 3 2 6 0 5 5 1 8] 80]
Test Case: 826 | Input/Output: [[9 0 2 3 6 2 3 6 6 2 7 2 1 1 5 1 5 4 8 0] 73]
Test Case: 827 | Input/Output: [[9 0 2 7 1 3 8 0 9 1 7 3 4 2 2 8 6 3 5 1] 98]
Test Case: 828 | Input/Output: [[9 0 3 2 8 2 9 0 4 5 6 3 5 3 4 2 8 2 0 4] 88]
Test Case: 829 | Input/Output: [[9 0 3 6 8 0 8 2 7 2 5 3 9 0 3 1 7 2 9 0] 91]
Test Case: 830 | Input/Output: [[9 0 3 7 6 0 2 2 2 5 3 1 5 5 4 4 4 6 6 2] 92]
Test Case: 831 | Input/Output: [[9 0 5 1 0 8 8 2 5 2 6 2 8 1 0 7 6 1 9 0] 85]
Test Case: 832 | Input/Output: [[9 0 5 1 3 1 1 1 9 0 0 8 8 1 2 6 2 1 4 3] 65]
Test Case: 833 | Input/Output: [[9 0 5 2 3 1 6 2 9 1 4 3 1 0 1 5 8 0 9 0] 73]
Test Case: 834 | Input/Output: [[9 0 5 3 10 9 0 2 5 9 0 1 8 7 2 6 2 10 5 4] 106]
Test Case: 835 | Input/Output: [[9 0 6 2 1 7 0 7 3 0 0 6 2 1 7 1 0 4 7 0] 63]
Test Case: 836 | Input/Output: [[9 0 9 0 9 1 4 2 0 6 2 8 2 1 6 1 2 6 3 3] 80]
Test Case: 837 | Input/Output: [[9 0 9 1 6 2 6 2 6 0 4 3 2 0 4 6 4 0 3 6] 83]
Test Case: 838 | Input/Output: [[9 0 10 6 1 5 1 0 10 8 1 7 0 2 4 1 2 10 9 3] 104]
Test Case: 839 | Input/Output: [[9 1 0 7 0 4 9 1 8 2 10 7 0 4 6 6 2 6 4 9] 126]
Test Case: 840 | Input/Output: [[9 1 1 1 5 0 8 1 3 5 3 0 6 1 5 0 0 5 5 3] 63]
Test Case: 841 | Input/Output: [[9 1 1 2 1 0 2 0 4 2 4 6 5 3 7 1 7 2 2 3] 68]
Test Case: 842 | Input/Output: [[9 1 1 7 1 9 2 2 9 1 8 2 5 4 9 1 4 6 2 3] 108]
Test Case: 843 | Input/Output: [[9 1 2 1 5 2 4 4 3 3 3 0 10 1 2 4 2 9 1 8] 79]
Test Case: 844 | Input/Output: [[9 1 2 3 7 3 6 0 8 2 4 1 8 1 0 1 5 0 3 2] 78]
Test Case: 845 | Input/Output: [[9 1 2 6 5 0 5 3 2 0 8 2 6 2 4 0 4 5 5 4] 81]
Test Case: 846 | Input/Output: [[9 1 3 0 1 2 7 0 5 5 10 0 2 8 1 7 3 9 1 0] 98]
Test Case: 847 | Input/Output: [[9 1 3 0 3 0 2 1 7 0 7 0 9 1 10 7 3 4 6 5] 105]
Test Case: 848 | Input/Output: [[9 1 3 5 4 6 5 3 1 8 4 6 4 4 4 4 2 5 3 4] 97]
Test Case: 849 | Input/Output: [[9 1 3 5 9 0 4 4 7 2 3 0 2 0 1 5 2 7 5 1] 73]
Test Case: 850 | Input/Output: [[9 1 4 1 9 0 3 6 6 1 5 2 0 1 0 8 1 7 1 0] 69]
Test Case: 851 | Input/Output: [[9 1 4 2 8 1 3 0 4 1 1 6 3 5 3 1 4 3 1 8] 72]
Test Case: 852 | Input/Output: [[9 1 5 1 7 3 6 3 7 3 5 5 2 1 8 1 7 2 1 4] 99]
Test Case: 853 | Input/Output: [[9 1 5 4 0 1 6 1 4 3 1 0 1 2 8 1 5 4 7 0] 68]
Test Case: 854 | Input/Output: [[9 1 5 4 6 4 2 1 3 1 9 0 5 4 8 0 7 1 7 0] 84]
Test Case: 855 | Input/Output: [[9 1 7 1 8 2 10 8 0 0 9 3 5 0 6 8 2 8 2 4] 126]
Test Case: 856 | Input/Output: [[9 1 7 3 9 0 7 2 4 3 5 4 4 3 1 5 4 2 1 8] 98]
Test Case: 857 | Input/Output: [[9 1 8 0 0 1 2 7 5 2 8 1 0 6 7 0 8 1 4 0] 78]
Test Case: 858 | Input/Output: [[9 1 8 0 4 3 1 5 0 3 4 5 0 4 3 7 6 3 9 0] 89]
Test Case: 859 | Input/Output: [[9 1 8 0 10 3 4 8 2 2 6 3 0 7 2 6 0 0 10 8] 106]
Test Case: 860 | Input/Output: [[9 1 8 2 2 8 1 4 1 5 3 5 0 6 4 3 0 10 6 0] 95]
Test Case: 861 | Input/Output: [[9 1 8 2 6 4 0 2 9 0 7 1 6 4 1 3 5 2 0 9] 94]
Test Case: 862 | Input/Output: [[9 1 9 0 4 1 9 1 7 1 1 5 1 1 1 3 5 0 7 0] 82]
Test Case: 863 | Input/Output: [[9 1 9 1 0 5 8 0 6 4 10 7 2 8 2 3 5 6 4 1] 122]
Test Case: 864 | Input/Output: [[9 1 10 1 0 6 4 4 6 0 6 6 2 3 6 2 6 0 10 9] 106]
Test Case: 865 | Input/Output: [[9 1 10 1 3 5 5 5 2 2 2 9 1 3 5 0 0 10 2 2] 99]
Test Case: 866 | Input/Output: [[10 0 1 7 1 7 2 1 0 3 3 2 4 1 1 4 2 4 6 7] 67]
Test Case: 867 | Input/Output: [[10 1 9 5 0 6 0 1 8 0 2 0 1 0 9 5 2 9 1 7] 91]
Test Case: 868 | Input/Output: [[10 2 3 2 2 5 4 2 6 4 5 6 1 2 2 5 1 2 8 0] 77]
Test Case: 869 | Input/Output: [[10 3 1 3 5 0 2 8 2 4 5 2 3 2 7 1 9 10 7 10] 112]
Test Case: 870 | Input/Output: [[10 3 3 6 1 9 0 3 5 7 1 6 3 5 4 4 0 10 4 10] 100]
Test Case: 871 | Input/Output: [[10 4 5 1 7 0 6 5 2 2 6 9 1 4 4 2 8 10 10 0] 119]
Test Case: 872 | Input/Output: [[10 5 0 3 7 1 0 9 1 4 4 2 7 6 2 5 1 6 4 0] 87]
Test Case: 873 | Input/Output: [[10 5 1 8 2 6 1 1 1 3 6 4 6 4 6 8 1 9 1 7] 114]
Test Case: 874 | Input/Output: [[10 7 2 1 4 4 2 1 7 7 3 6 0 1 8 8 1 0 10 1] 98]
Test Case: 875 | Input/Output: [[10 7 2 1 8 0 5 4 1 9 0 6 2 6 4 7 2 10 8 0] 108]
Test Case: 876 | Input/Output: [[10 7 3 2 7 3 6 9 0 8 1 3 6 4 1 1 9 10 5 10] 127]
Test Case: 877 | Input/Output: [[10 8 1 6 2 6 1 6 4 8 1 8 0 7 2 8 1 10 2 7] 115]
Test Case: 878 | Input/Output: [[10 9 1 7 2 3 4 9 1 2 6 7 0 8 0 5 0 7 3 7] 110]
Test Case: 879 | Input/Output: [[10 9 1 8 2 8 1 5 3 6 0 3 1 0 3 7 2 9 1 3] 108]
Test Case: 880 | Input/Output: [[0 0 2 6 7 3 6 1 6 0 4 4 6 1 1 1 8 0 8 2 1] 73]
Test Case: 881 | Input/Output: [[0 3 4 0 6 4 5 4 9 1 8 2 2 0 2 2 4 1 10 1 3] 86]
Test Case: 882 | Input/Output: [[0 4 1 9 7 0 2 1 3 0 8 1 3 6 1 0 4 5 10 5 5] 82]
Test Case: 883 | Input/Output: [[0 5 2 8 8 0 0 1 7 0 4 2 1 4 8 2 0 0 5 5 9] 79]
Test Case: 884 | Input/Output: [[0 5 8 0 0 0 8 0 1 6 0 3 0 7 7 3 0 5 4 6 5] 68]
Test Case: 885 | Input/Output: [[0 6 4 2 9 1 5 0 6 2 3 0 9 0 5 1 0 2 10 2 7] 79]
Test Case: 886 | Input/Output: [[0 6 8 0 8 2 9 0 3 0 9 0 6 0 4 1 4 1 8 2 8] 88]
Test Case: 887 | Input/Output: [[0 7 7 2 6 1 3 2 3 3 3 5 2 3 3 1 5 0 9 1 9] 75]
Test Case: 888 | Input/Output: [[1 0 7 2 2 1 2 6 0 6 0 9 7 0 0 5 8 2 9 1 4] 81]
Test Case: 889 | Input/Output: [[1 0 8 0 6 1 1 0 7 1 5 3 1 4 7 3 4 5 8 2 9] 80]
Test Case: 890 | Input/Output: [[1 0 8 1 8 2 1 1 1 1 2 3 1 4 9 1 4 2 10 7 4] 76]
Test Case: 891 | Input/Output: [[1 1 8 2 8 1 8 1 7 3 6 2 6 0 7 0 1 7 4 6 4] 97]
Test Case: 892 | Input/Output: [[1 2 4 6 1 0 8 1 2 7 2 2 0 1 9 0 9 0 8 2 1] 67]
Test Case: 893 | Input/Output: [[1 2 5 3 0 3 8 0 3 1 0 6 8 0 3 2 6 3 10 3 8] 75]
Test Case: 894 | Input/Output: [[1 4 2 7 7 3 9 1 5 2 3 5 2 4 3 6 7 2 5 5 5] 102]
Test Case: 895 | Input/Output: [[1 5 6 2 3 6 7 0 1 8 2 8 5 1 5 0 5 4 5 5 0] 84]
Test Case: 896 | Input/Output: [[1 5 8 1 1 8 7 1 0 4 2 0 1 3 5 5 7 3 8 2 3] 90]
Test Case: 897 | Input/Output: [[1 5 8 1 6 2 9 0 8 0 8 0 7 0 1 5 6 2 0 10 3] 82]
Test Case: 898 | Input/Output: [[1 6 0 5 7 0 6 0 7 3 6 0 4 6 2 7 5 2 8 2 2] 87]
Test Case: 899 | Input/Output: [[1 6 0 6 9 0 4 3 6 2 3 1 9 0 4 5 3 5 8 2 7] 84]
Test Case: 900 | Input/Output: [[1 6 6 1 5 0 2 4 8 1 7 2 1 0 8 0 6 3 8 2 5] 76]
Test Case: 901 | Input/Output: [[1 7 1 5 7 2 9 1 4 3 5 0 2 2 4 1 2 3 10 4 0] 77]
Test Case: 902 | Input/Output: [[1 9 1 6 4 2 4 3 6 0 8 0 2 1 5 4 1 6 9 1 2] 76]
Test Case: 903 | Input/Output: [[2 0 9 0 4 2 6 2 6 2 5 5 5 0 2 4 0 2 10 10 2] 83]
Test Case: 904 | Input/Output: [[2 1 4 3 7 1 4 4 7 1 2 6 9 0 2 8 8 0 9 1 5] 92]
Test Case: 905 | Input/Output: [[2 2 7 0 3 1 8 2 5 2 2 8 4 6 7 0 3 5 6 4 7] 100]
Test Case: 906 | Input/Output: [[2 4 3 6 5 3 1 6 5 2 0 9 9 1 5 4 6 1 8 2 2] 89]
Test Case: 907 | Input/Output: [[2 5 0 9 9 1 3 6 9 0 4 2 2 0 6 4 8 1 6 4 5] 97]
Test Case: 908 | Input/Output: [[2 5 1 6 2 4 3 6 1 2 5 1 8 1 9 1 9 1 9 1 0] 95]
Test Case: 909 | Input/Output: [[2 5 1 7 0 2 3 1 0 4 5 4 1 3 9 0 8 0 0 10 5] 70]
Test Case: 910 | Input/Output: [[2 5 8 2 8 2 3 6 0 10 0 2 1 1 8 0 4 5 9 1 6] 94]
Test Case: 911 | Input/Output: [[2 5 9 1 6 2 3 1 9 1 7 0 0 4 8 1 2 4 7 3 0] 88]
Test Case: 912 | Input/Output: [[2 6 4 2 7 0 6 1 9 0 5 4 4 4 5 4 3 4 6 4 0] 80]
Test Case: 913 | Input/Output: [[2 7 5 4 8 2 4 1 5 0 8 1 6 4 5 0 4 1 8 2 1] 87]
Test Case: 914 | Input/Output: [[3 0 1 6 7 0 1 8 1 0 9 0 3 7 5 1 5 4 3 7 0] 76]
Test Case: 915 | Input/Output: [[3 1 2 1 2 6 0 9 5 4 2 0 5 5 9 0 4 4 10 7 8] 96]
Test Case: 916 | Input/Output: [[3 2 0 2 9 0 6 4 8 1 4 6 4 2 1 1 9 1 9 1 6] 100]
Test Case: 917 | Input/Output: [[3 2 9 1 3 3 1 9 3 4 5 3 2 7 5 5 8 0 8 2 3] 100]
Test Case: 918 | Input/Output: [[3 3 0 0 5 2 4 3 5 2 6 1 9 0 3 0 9 0 7 3 5] 70]
Test Case: 919 | Input/Output: [[3 3 0 5 0 2 6 0 5 1 8 0 3 6 5 0 5 3 2 8 6] 71]
Test Case: 920 | Input/Output: [[3 3 9 1 0 8 0 8 1 1 5 5 5 3 4 0 6 3 0 10 8] 88]
Test Case: 921 | Input/Output: [[3 4 0 4 6 1 0 4 0 6 2 5 7 1 4 5 6 4 10 3 7] 92]
Test Case: 922 | Input/Output: [[3 4 0 6 1 2 2 4 5 2 8 1 4 1 3 5 1 1 1 9 6] 69]
Test Case: 923 | Input/Output: [[3 4 4 3 8 0 1 4 3 1 6 0 4 0 9 1 9 1 9 1 5] 94]
Test Case: 924 | Input/Output: [[3 5 4 3 5 1 1 8 2 4 3 3 2 3 7 1 5 3 10 8 7] 88]
Test Case: 925 | Input/Output: [[3 5 4 4 6 0 5 2 2 8 5 5 7 3 8 2 4 2 3 7 3] 112]
Test Case: 926 | Input/Output: [[3 7 2 1 3 1 9 0 0 2 9 1 9 1 5 5 6 3 10 8 3] 110]
Test Case: 927 | Input/Output: [[3 7 4 6 9 0 0 4 8 2 3 6 5 2 0 8 6 4 10 0 6] 119]
Test Case: 928 | Input/Output: [[3 7 7 3 0 4 0 9 0 3 6 4 7 0 3 6 1 9 9 1 7] 112]
Test Case: 929 | Input/Output: [[3 7 7 3 2 4 5 3 4 1 7 3 4 5 3 6 3 2 8 2 10] 105]
Test Case: 930 | Input/Output: [[4 0 1 4 1 9 2 8 6 0 6 2 3 1 3 5 0 2 9 1 1] 76]
Test Case: 931 | Input/Output: [[4 0 4 6 5 2 1 9 9 1 4 4 0 3 6 1 8 2 5 5 10] 112]
Test Case: 932 | Input/Output: [[4 0 7 0 4 0 8 2 5 5 8 2 8 0 6 2 9 1 10 7 9] 128]
Test Case: 933 | Input/Output: [[4 1 0 2 1 7 6 4 0 3 7 2 1 3 3 7 3 2 10 1 2] 72]
Test Case: 934 | Input/Output: [[4 1 1 5 9 0 2 3 4 2 2 5 3 3 8 0 0 6 10 7 4] 79]
Test Case: 935 | Input/Output: [[4 1 5 0 4 3 7 1 1 5 4 6 2 8 5 5 3 5 10 6 7] 102]
Test Case: 936 | Input/Output: [[4 1 6 0 0 3 5 4 2 3 2 6 2 3 4 4 3 5 8 2 9] 76]
Test Case: 937 | Input/Output: [[4 1 8 2 2 6 0 10 1 4 5 1 8 0 5 1 4 6 9 1 2] 92]
Test Case: 938 | Input/Output: [[4 5 3 1 3 3 1 2 7 3 7 3 0 6 7 1 3 1 7 3 6] 83]
Test Case: 939 | Input/Output: [[4 5 7 1 2 8 5 3 3 3 3 3 2 3 9 0 4 1 9 1 6] 87]
Test Case: 940 | Input/Output: [[5 0 4 0 3 5 3 2 2 2 7 0 4 6 9 0 6 0 9 1 3] 80]
Test Case: 941 | Input/Output: [[5 0 8 1 1 3 2 3 5 0 8 0 4 6 4 4 0 5 10 0 8] 81]
Test Case: 942 | Input/Output: [[5 0 8 2 3 6 0 5 9 1 2 5 8 0 1 8 3 2 10 10 6] 99]
Test Case: 943 | Input/Output: [[5 1 4 4 0 4 4 6 5 1 7 3 8 1 0 8 0 0 10 5 7] 96]
Test Case: 944 | Input/Output: [[5 1 5 2 3 5 5 2 4 6 2 5 0 2 4 1 9 0 8 2 7] 80]
Test Case: 945 | Input/Output: [[5 1 7 2 6 0 6 0 2 0 8 0 4 4 3 5 3 7 4 6 6] 83]
Test Case: 946 | Input/Output: [[5 1 8 0 3 4 3 2 0 6 4 2 8 0 4 3 2 2 10 1 10] 78]
Test Case: 947 | Input/Output: [[5 2 0 7 1 6 1 4 3 4 4 2 2 2 1 2 5 2 2 8 9] 72]
Test Case: 948 | Input/Output: [[5 2 1 4 7 2 6 4 3 2 6 3 1 8 3 3 4 3 9 1 10] 90]
Test Case: 949 | Input/Output: [[5 2 7 2 0 7 0 10 0 2 9 1 4 3 4 5 2 4 7 3 5] 86]
Test Case: 950 | Input/Output: [[5 3 1 9 9 0 5 5 8 0 7 2 8 2 8 0 0 3 9 1 8] 118]
Test Case: 951 | Input/Output: [[5 3 3 4 4 1 1 3 4 3 8 2 5 4 5 2 8 2 10 3 1] 96]
Test Case: 952 | Input/Output: [[5 3 6 1 7 0 0 8 8 1 2 8 4 1 2 3 4 1 9 1 1] 79]
Test Case: 953 | Input/Output: [[5 3 8 2 3 6 8 1 1 8 7 0 2 2 8 0 8 0 1 9 1] 86]
Test Case: 954 | Input/Output: [[5 4 4 5 8 2 5 0 7 3 8 2 2 5 8 1 6 2 10 10 7] 119]
Test Case: 955 | Input/Output: [[5 4 5 5 6 0 8 0 4 5 5 4 7 2 6 3 5 0 10 1 2] 93]
Test Case: 956 | Input/Output: [[5 5 8 1 4 1 4 6 8 2 9 1 6 3 6 3 1 4 10 10 7] 135]
Test Case: 957 | Input/Output: [[6 0 4 3 2 6 5 3 6 3 1 4 8 0 0 0 1 9 9 1 10] 90]
Test Case: 958 | Input/Output: [[6 0 8 2 1 7 1 4 3 2 3 1 3 2 1 0 7 0 8 2 3] 65]
Test Case: 959 | Input/Output: [[6 1 6 0 5 3 8 2 4 1 3 0 4 6 4 0 7 1 10 5 9] 93]
Test Case: 960 | Input/Output: [[6 2 1 0 5 0 9 1 3 4 6 1 1 5 8 0 5 3 10 10 1] 84]
Test Case: 961 | Input/Output: [[6 2 8 1 6 4 7 2 7 3 9 1 9 1 8 0 6 1 10 10 6] 140]
Test Case: 962 | Input/Output: [[6 3 6 1 8 2 8 0 3 1 2 4 7 0 6 0 7 2 7 3 6] 90]
Test Case: 963 | Input/Output: [[6 4 1 2 4 3 4 6 0 0 5 1 7 0 2 8 3 7 10 3 7] 97]
Test Case: 964 | Input/Output: [[6 4 5 5 8 2 0 9 2 2 6 0 6 3 5 1 2 4 10 0 2] 95]
Test Case: 965 | Input/Output: [[7 0 1 9 3 1 9 1 7 3 2 8 3 6 5 5 5 3 9 1 1] 109]
Test Case: 966 | Input/Output: [[7 0 3 4 6 2 8 2 8 0 7 0 8 0 4 2 0 6 7 3 5] 90]
Test Case: 967 | Input/Output: [[7 0 5 2 4 3 4 3 2 4 0 3 1 9 3 1 1 2 9 1 0] 67]
Test Case: 968 | Input/Output: [[7 0 6 4 7 2 3 1 5 3 1 9 5 0 9 1 3 4 10 8 1] 104]
Test Case: 969 | Input/Output: [[7 0 7 3 2 5 4 4 6 3 9 1 2 8 8 0 0 6 6 4 5] 102]
Test Case: 970 | Input/Output: [[7 0 9 1 9 1 9 1 2 3 3 6 0 10 6 0 1 6 6 4 4] 114]
Test Case: 971 | Input/Output: [[7 1 0 6 5 1 7 1 8 0 8 1 8 2 1 0 6 0 7 3 2] 75]
Test Case: 972 | Input/Output: [[7 1 3 3 9 0 8 2 2 7 3 6 3 3 3 4 2 0 8 2 5] 83]
Test Case: 973 | Input/Output: [[7 1 6 4 9 1 5 0 5 0 2 1 8 0 7 3 9 0 9 1 2] 103]
Test Case: 974 | Input/Output: [[7 1 7 2 7 0 0 5 4 1 3 7 4 0 8 2 7 2 2 8 3] 91]
Test Case: 975 | Input/Output: [[7 2 0 4 0 9 0 0 7 0 6 3 9 1 8 1 6 2 3 7 6] 89]
Test Case: 976 | Input/Output: [[7 2 1 3 6 4 9 0 1 4 4 6 5 5 9 0 7 2 10 6 7] 121]
Test Case: 977 | Input/Output: [[7 2 3 3 2 5 5 3 6 2 6 3 0 7 0 3 9 0 10 10 4] 90]
Test Case: 978 | Input/Output: [[7 2 4 3 3 0 0 9 1 2 7 3 7 0 4 1 0 3 9 1 0] 73]
Test Case: 979 | Input/Output: [[7 2 5 2 5 3 2 5 3 1 3 3 8 0 7 3 8 0 4 6 8] 93]
Test Case: 980 | Input/Output: [[7 2 6 1 2 7 5 0 4 0 6 1 1 8 3 3 9 1 5 5 6] 87]
Test Case: 981 | Input/Output: [[7 3 2 5 2 6 0 6 5 0 1 5 4 1 2 6 9 0 9 1 5] 81]
Test Case: 982 | Input/Output: [[7 3 6 4 2 4 9 1 1 6 7 2 3 0 4 2 8 2 2 8 0] 92]
Test Case: 983 | Input/Output: [[8 0 0 8 7 1 6 3 5 3 7 3 1 0 5 5 0 2 0 10 9] 84]
Test Case: 984 | Input/Output: [[8 0 3 0 5 1 8 2 6 2 8 2 7 1 9 1 3 3 10 7 9] 111]
Test Case: 985 | Input/Output: [[8 1 0 3 5 1 6 4 8 1 1 0 2 2 4 2 7 3 9 1 5] 90]
Test Case: 986 | Input/Output: [[8 1 9 1 6 3 8 0 7 0 3 0 0 3 1 2 0 4 0 10 2] 74]
Test Case: 987 | Input/Output: [[8 2 1 8 1 9 7 0 3 1 3 1 1 1 6 0 9 0 7 3 7] 86]
Test Case: 988 | Input/Output: [[8 2 3 3 0 10 1 6 8 2 8 2 5 4 8 2 4 0 5 5 2] 109]
Test Case: 989 | Input/Output: [[8 2 6 2 6 3 3 3 8 2 5 5 7 3 6 1 0 1 10 1 0] 106]
Test Case: 990 | Input/Output: [[9 0 2 4 2 6 4 4 4 5 9 0 6 0 3 1 6 0 10 1 0] 76]
Test Case: 991 | Input/Output: [[9 0 5 1 1 8 3 3 3 7 1 2 1 3 1 4 2 8 10 10 2] 95]
Test Case: 992 | Input/Output: [[9 1 0 1 1 4 3 6 4 3 1 4 6 0 7 1 4 3 7 3 5] 73]
Test Case: 993 | Input/Output: [[9 1 0 3 4 0 6 2 0 5 9 1 6 1 6 4 7 1 5 5 5] 93]
Test Case: 994 | Input/Output: [[9 1 0 4 7 1 7 1 5 4 2 4 7 0 6 2 9 0 6 4 6] 85]
Test Case: 995 | Input/Output: [[9 1 2 4 2 7 1 3 3 7 2 5 6 2 3 6 2 7 8 2 4] 90]
Test Case: 996 | Input/Output: [[9 1 2 8 8 1 4 1 9 0 4 6 0 10 0 9 5 5 7 3 1] 110]
Test Case: 997 | Input/Output: [[9 1 4 5 9 0 4 0 6 3 9 0 1 7 0 4 6 1 6 4 7] 90]
Test Case: 998 | Input/Output: [[9 1 6 1 4 2 0 6 4 1 7 0 1 1 2 3 7 3 6 4 0] 80]
Test Case: 999 | Input/Output: [[9 1 7 1 3 3 4 6 4 1 2 8 7 1 8 0 0 1 9 1 2] 96]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 994bc7fe4bb0d8330ff3b97ede81b749344ccefb
GitHub link = https://github.com/lspector/Clojush/commit/994bc7fe4bb0d8330ff3b97ede81b749344ccefb
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (#object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x1acc768 clojush.instructions.tag$tag_instruction_erc$fn__2160@1acc768] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x38caad07 clojush.instructions.tag$tagged_instruction_erc$fn__2166@38caad07] in1 integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472 0x85c3522 clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472@85c3522]
error-threshold = 0
evalpush-limit = 4000
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-point-evaluations = 1.0E101
max-points = 1600
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.problems.software.bowling$bowling_initial_report 0x129c760d clojush.problems.software.bowling$bowling_initial_report@129c760d]
problem-specific-report = #object[clojush.problems.software.bowling$bowling_report 0x180f33b2 clojush.problems.software.bowling$bowling_report@180f33b2]
random-screen = false
random-seed = -107 -17 121 -4 -6 -90 47 -73 23 -112 -54 -34 6 -6 -35 36
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- bowling problem report - generation 0
Test total error for best: 20335
Test mean error for best: 20.33500
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 73
Correct output:    148 | Program output: 73
Correct output:    155 | Program output: 73
Correct output:     94 | Program output: 73
Correct output:     93 | Program output: 73
Correct output:     98 | Program output: 73
Correct output:    113 | Program output: 73
Correct output:     99 | Program output: 73
Correct output:     84 | Program output: 73
Correct output:     87 | Program output: 73
Correct output:     99 | Program output: 73
Correct output:     91 | Program output: 73
Correct output:    115 | Program output: 73
Correct output:     90 | Program output: 73
Correct output:    145 | Program output: 73
Correct output:     82 | Program output: 73
Correct output:    106 | Program output: 73
Correct output:     95 | Program output: 73
Correct output:     10 | Program output: 73
Correct output:     68 | Program output: 73
Correct output:     83 | Program output: 73
Correct output:     75 | Program output: 73
Correct output:     95 | Program output: 73
Correct output:    112 | Program output: 73
Correct output:    109 | Program output: 73
Correct output:     81 | Program output: 73
Correct output:     71 | Program output: 73
Correct output:     70 | Program output: 73
Correct output:     61 | Program output: 73
Correct output:     76 | Program output: 73
Correct output:     89 | Program output: 73
Correct output:     80 | Program output: 73
Correct output:     70 | Program output: 73
Correct output:     93 | Program output: 73
Correct output:     80 | Program output: 73
Correct output:    112 | Program output: 73
Correct output:     90 | Program output: 73
Correct output:    101 | Program output: 73
Correct output:    110 | Program output: 73
Correct output:    113 | Program output: 73
Correct output:      0 | Program output: 73
Correct output:     10 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:    108 | Program output: 73
Correct output:     64 | Program output: 73
Correct output:     64 | Program output: 73
Correct output:     95 | Program output: 73
Correct output:    137 | Program output: 73
Correct output:     64 | Program output: 73
Correct output:     94 | Program output: 73
Correct output:     93 | Program output: 73
Correct output:     80 | Program output: 73
Correct output:     81 | Program output: 73
Correct output:     87 | Program output: 73
Correct output:     75 | Program output: 73
Correct output:     74 | Program output: 73
Correct output:     74 | Program output: 73
Correct output:     64 | Program output: 73
Correct output:     84 | Program output: 73
Correct output:     68 | Program output: 73
Correct output:     71 | Program output: 73
Correct output:     76 | Program output: 73
Correct output:     91 | Program output: 73
Correct output:    100 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:     65 | Program output: 73
Correct output:     97 | Program output: 73
Correct output:     66 | Program output: 73
Correct output:     75 | Program output: 73
Correct output:     94 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:     83 | Program output: 73
Correct output:     70 | Program output: 73
Correct output:     88 | Program output: 73
Correct output:     80 | Program output: 73
Correct output:     76 | Program output: 73
Correct output:     73 | Program output: 73
Correct output:    108 | Program output: 73
Correct output:     87 | Program output: 73
Correct output:     68 | Program output: 73
Correct output:     82 | Program output: 73
Correct output:     77 | Program output: 73
Correct output:     76 | Program output: 73
Correct output:     67 | Program output: 73
Correct output:     62 | Program output: 73
Correct output:     98 | Program output: 73
Correct output:     89 | Program output: 73
Correct output:     69 | Program output: 73
Correct output:     79 | Program output: 73
Correct output:     88 | Program output: 73
Correct output:     73 | Program output: 73
Correct output:    106 | Program output: 73
Correct output:    101 | Program output: 73
Correct output:     98 | Program output: 73
Correct output:     74 | Program output: 73
Correct output:    150 | Program output: 73
Correct output:     93 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:     90 | Program output: 73
Correct output:    114 | Program output: 73
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Lexicase best errors: [227 75 82 21 20 25 40 26 11 14 26 18 42 17 72 9 33 22 63 5 10 2 22 39 36 8 2 3 12 3 16 7 3 20 7 39 17 28 37 40 73 63 12 35 9 9 22 64 9 21 20 7 8 14 2 1 1 9 11 5 2 3 18 27 12 8 24 7 2 21 12 10 3 15 7 3 0 35 14 5 9 4 3 6 11 25 16 4 6 15 0 33 28 25 1 77 20 12 17 41]
Lexicase best number of elite cases: 93
Lexicase best total error: 2175
Lexicase best mean error: 21.75
Lexicase best size: 227
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Zero cases best errors: [227 75 82 21 20 25 40 26 11 14 26 18 42 17 72 9 33 22 63 5 10 2 22 39 36 8 2 3 12 3 16 7 3 20 7 39 17 28 37 40 73 63 12 35 9 9 22 64 9 21 20 7 8 14 2 1 1 9 11 5 2 3 18 27 12 8 24 7 2 21 12 10 3 15 7 3 0 35 14 5 9 4 3 6 11 25 16 4 6 15 0 33 28 25 1 77 20 12 17 41]
Zero cases best number of elite cases: 93
Zero cases best number of zero cases: 2
Zero cases best total error: 2175
Zero cases best mean error: 21.75
Zero cases best size: 227
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 102 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 0.20
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 102 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Errors: [227 75 82 21 20 25 40 26 11 14 26 18 42 17 72 9 33 22 63 5 10 2 22 39 36 8 2 3 12 3 16 7 3 20 7 39 17 28 37 40 73 63 12 35 9 9 22 64 9 21 20 7 8 14 2 1 1 9 11 5 2 3 18 27 12 8 24 7 2 21 12 10 3 15 7 3 0 35 14 5 9 4 3 6 11 25 16 4 6 15 0 33 28 25 1 77 20 12 17 41]
Total: 2175
Mean: 21.75
Genome size: 182
Size: 227
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 8.0600001888602E10
Median total errors in population: 100000000000
Error averages by case: (8.06000057927E8 8.06000029801E8 8.06000031089E8 8.06000019865E8 8.06000019681E8 8.06000020601E8 8.06000023361E8 8.06000020785E8 8.06000018025E8 8.06000018577E8 8.06000020785E8 8.06000019313E8 8.06000023729E8 8.06000019129E8 8.06000029249E8 8.06000017657E8 8.06000022073E8 8.06000020049E8 8.06000004907E8 8.06000015091E8 8.06000017841E8 8.06000016369E8 8.06000020049E8 8.06000023177E8 8.06000022625E8 8.06000017473E8 8.06000015637E8 8.06000015455E8 8.06000013817E8 8.06000016553E8 8.06000018945E8 8.06000017289E8 8.06000015455E8 8.06000019681E8 8.06000017289E8 8.06000023177E8 8.06000019129E8 8.06000021153E8 8.06000022809E8 8.06000023361E8 8.06000003941E8 8.06000004907E8 8.06000018209E8 8.06000022441E8 8.06000014363E8 8.06000014363E8 8.06000020049E8 8.06000027777E8 8.06000014363E8 8.06000019865E8 8.06000019681E8 8.06000017289E8 8.06000017473E8 8.06000018577E8 8.06000016369E8 8.06000016185E8 8.06000016185E8 8.06000014363E8 8.06000018025E8 8.06000015091E8 8.06000015637E8 8.06000016553E8 8.06000019313E8 8.06000020969E8 8.06000018209E8 8.06000014545E8 8.06000020417E8 8.06000014727E8 8.06000016369E8 8.06000019865E8 8.06000018209E8 8.06000017841E8 8.06000015455E8 8.06000018761E8 8.06000017289E8 8.06000016553E8 8.06000016001E8 8.06000022441E8 8.06000018577E8 8.06000015091E8 8.06000017657E8 8.06000016737E8 8.06000016553E8 8.06000014909E8 8.06000013999E8 8.06000020601E8 8.06000018945E8 8.06000015273E8 8.06000017105E8 8.06000018761E8 8.06000016001E8 8.06000022073E8 8.06000021153E8 8.06000020601E8 8.06000016185E8 8.06000030169E8 8.06000019681E8 8.06000018209E8 8.06000019129E8 8.06000023545E8)
Error minima by case: (79 73 66 21 20 25 40 26 11 14 26 18 42 17 72 9 33 22 0 5 10 2 22 39 36 8 2 3 12 3 16 7 3 20 7 39 17 28 37 40 0 0 12 35 9 9 22 64 9 21 20 7 8 14 2 1 1 9 11 5 2 3 18 27 12 8 24 7 2 21 12 10 3 15 7 3 0 35 14 5 9 4 3 6 11 25 16 4 6 15 0 33 28 25 1 71 20 12 17 41)
Average genome size in population (length): 101.477
Average program size in population (points): 141.585
Average percent parens in population: 0.288
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.032
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 53888200
--- Timings ---
Current time: 1559324144001 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- bowling problem report - generation 1
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank exec_y (integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult boolean_shove exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Lexicase best errors: [188 36 43 18 19 14 1 13 28 25 13 21 3 22 33 30 6 17 102 44 29 37 17 0 3 31 41 42 51 36 23 32 42 19 32 0 22 11 2 1 112 102 27 4 48 48 17 25 48 18 19 32 31 25 37 38 38 48 28 44 41 36 21 12 27 47 15 46 37 18 27 29 42 24 32 36 39 4 25 44 30 35 36 45 50 14 23 43 33 24 39 6 11 14 38 38 19 27 22 2]
Lexicase best number of elite cases: 7
Lexicase best total error: 3087
Lexicase best mean error: 30.87
Lexicase best size: 228
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) (exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty integer_dup boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Zero cases best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1833
Zero cases best mean error: 18.33
Zero cases best size: 233
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 3 4 4 1 2 4 7 2 1 1 6 1 12 1 4 18 28 3 14 4 1 1 12 33 28 10 16 6 17 28 4 17 1 6 2 2 1 15 18 4 1 10 10 4 1 10 3 4 17 12 7 14 20 20 10 4 28 33 16 1 2 4 11 2 14 14 3 4 3 28 6 17 16 228 1 7 28 12 20 16 14 7 4 6 16 28 6 228 1 2 4 20 1 4 4 6 1)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (0 0 0 3 4 0 0 2 4 7 2 1 0 6 0 12 1 4 18 28 3 14 4 1 0 12 33 28 10 16 6 17 28 4 17 1 6 0 0 0 15 18 4 1 10 10 4 0 10 3 4 17 12 7 14 20 20 10 4 28 33 16 1 2 4 11 2 14 14 3 4 3 28 6 17 16 228 1 7 28 12 20 16 14 7 0 6 16 28 6 228 1 0 0 20 0 4 4 6 0)
Population mean number of perfect (error zero) cases: 1.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_434} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_rot () (integer_lt boolean_yank) (boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_434 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop) exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) integer_gte integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (integer_swap integer_dec) exec_while (boolean_eq) boolean_not integer_mod integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 210
Size: 261
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 1.0400003013356E10
Median total errors in population: 2353
Error averages by case: (1.04000206161E8 1.04000074445E8 1.04000080325E8 1.04000029311E8 1.04000028507E8 1.04000032583E8 1.04000045077E8 1.04000033407E8 1.04000021611E8 1.04000023811E8 1.04000033407E8 1.04000026915E8 1.04000046753E8 1.04000026121E8 1.04000071925E8 1.04000020185E8 1.04000039227E8 1.04000030121E8 1.04000054151E8 1.04000016087E8 1.04000020895E8 1.04000016153E8 1.04000030121E8 1.04000044239E8 1.04000041731E8 1.04000019499E8 1.04000015481E8 1.04000015635E8 1.04000018671E8 1.04000016613E8 1.04000025339E8 1.04000018837E8 1.04000015635E8 1.04000028507E8 1.04000018837E8 1.04000044239E8 1.04000026121E8 1.04000035067E8 1.04000042567E8 1.04000045077E8 1.04000062639E8 1.04000054151E8 1.04000022335E8 1.04000040895E8 1.04000017441E8 1.04000017441E8 1.04000030121E8 1.04000065205E8 1.04000017441E8 1.04000029311E8 1.04000028507E8 1.04000018837E8 1.04000019499E8 1.04000023811E8 1.04000016153E8 1.04000015721E8 1.04000015721E8 1.04000017441E8 1.04000021611E8 1.04000016087E8 1.04000015481E8 1.04000016613E8 1.04000026915E8 1.04000034235E8 1.04000022335E8 1.04000017065E8 1.04000031759E8 1.04000016711E8 1.04000016153E8 1.04000029311E8 1.04000022335E8 1.04000020895E8 1.04000015635E8 1.04000024569E8 1.04000018837E8 1.04000016613E8 1.04000015329E8 1.04000040895E8 1.04000023811E8 1.04000016087E8 1.04000020185E8 1.04000017105E8 1.04000016613E8 1.04000016385E8 1.04000018247E8 1.04000032583E8 1.04000025339E8 1.04000015845E8 1.04000018209E8 1.04000024569E8 1.04000015329E8 1.04000039227E8 1.04000035067E8 1.04000032583E8 1.04000015721E8 1.04000076125E8 1.04000028507E8 1.04000022335E8 1.04000026121E8 1.04000045915E8)
Error minima by case: (1 19 26 0 0 1 1 0 0 0 0 0 3 0 16 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 21 0 0 0 2)
Average genome size in population (length): 175.273
Average program size in population (points): 219.812
Average percent parens in population: 0.204
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.095
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 76331800
--- Timings ---
Current time: 1559324164637 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- bowling problem report - generation 2
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 exec_do*count (boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) (exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush exec_empty integer_mult tagged_188 boolean_and integer_flush exec_dup_items boolean_xor integer_yank exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (boolean_pop boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () exec_y_when_autoconstructing (integer_mult exec_pop (exec_yank integer_sub) integer_pop boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Lexicase best errors: [220 68 75 14 13 18 33 19 4 7 19 11 35 10 65 2 26 15 70 12 3 5 15 32 29 1 9 10 19 4 9 0 10 13 0 32 10 21 30 33 80 70 5 28 16 16 15 57 16 14 13 0 1 7 5 6 6 16 4 12 9 4 11 20 5 15 17 14 5 14 5 3 10 8 0 4 7 28 7 12 2 3 4 13 18 18 9 11 1 8 7 26 21 18 6 70 13 5 10 34]
Lexicase best number of elite cases: 4
Lexicase best total error: 1903
Lexicase best mean error: 19.03
Lexicase best size: 222
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 exec_do*count (boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) (exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush exec_empty integer_mult tagged_188 boolean_and integer_flush exec_dup_items boolean_xor integer_yank exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (boolean_pop boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () exec_y_when_autoconstructing (integer_mult exec_pop (exec_yank integer_sub) integer_pop boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Zero cases best errors: [220 68 75 14 13 18 33 19 4 7 19 11 35 10 65 2 26 15 70 12 3 5 15 32 29 1 9 10 19 4 9 0 10 13 0 32 10 21 30 33 80 70 5 28 16 16 15 57 16 14 13 0 1 7 5 6 6 16 4 12 9 4 11 20 5 15 17 14 5 14 5 3 10 8 0 4 7 28 7 12 2 3 4 13 18 18 9 11 1 8 7 26 21 18 6 70 13 5 10 34]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1903
Zero cases best mean error: 19.03
Zero cases best size: 222
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 18 16 5 7 10 16 15 10 16 4 13 2 16 6 20 14 17 17 12 20 21 5 13 14 17 10 16 15 19 17 16 19 21 13 10 3 7 17 14 16 7 13 13 20 3 13 18 16 19 13 15 12 24 24 13 16 17 14 16 16 13 16 10 18 10 12 18 16 17 17 20 19 16 16 7 15 17 16 18 16 19 10 5 15 7 17 20 16 6 10 5 24 1 16 16 13 5)
Population mean number of elite cases: 1.35
Count of perfect (error zero) individuals by case: (1 1 0 18 16 5 7 10 16 15 10 16 4 13 2 16 6 20 14 17 17 12 20 21 5 13 14 17 10 16 15 19 17 16 19 21 13 10 3 7 17 14 16 7 13 13 20 0 13 18 16 19 13 15 12 24 24 13 16 17 14 16 16 13 16 10 18 10 12 18 16 17 17 20 19 16 16 7 15 17 16 18 16 19 10 5 15 7 17 20 16 6 10 5 24 0 16 16 13 5)
Population mean number of perfect (error zero) cases: 1.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) (exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop) exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove exec_pop (boolean_dup_items boolean_xor integer_stackdepth) exec_y () exec_noop exec_yank) (in1 tagged_339 exec_flush) (boolean_shove) exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor) (exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) exec_flush) () (integer_pop integer_lt) exec_dup (integer_lt) integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 185
Size: 232
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 9.000002869576E9
Median total errors in population: 2491
Error averages by case: (9.0000198952E7 9.0000062892E7 9.000006915E7 9.0000022688E7 9.000002235E7 9.0000024396E7 9.0000033562E7 9.0000024884E7 9.00000206E7 9.000002092E7 9.0000024884E7 9.0000021758E7 9.0000035056E7 9.0000021504E7 9.0000060216E7 9.0000020538E7 9.000002886E7 9.0000023062E7 9.0000065776E7 9.000002366E7 9.0000020552E7 9.0000021328E7 9.0000023062E7 9.0000032834E7 9.0000030802E7 9.0000020556E7 9.0000022492E7 9.0000022854E7 9.000002729E7 9.0000021118E7 9.0000021276E7 9.00000206E7 9.0000022854E7 9.000002235E7 9.00000206E7 9.0000032834E7 9.0000021504E7 9.0000025926E7 9.0000031472E7 9.0000033562E7 9.0000074252E7 9.0000065776E7 9.000002068E7 9.0000030142E7 9.000002561E7 9.000002561E7 9.0000023062E7 9.0000053126E7 9.000002561E7 9.0000022688E7 9.000002235E7 9.00000206E7 9.0000020556E7 9.000002092E7 9.0000021328E7 9.0000021562E7 9.0000021562E7 9.000002561E7 9.00000206E7 9.000002366E7 9.0000022492E7 9.0000021118E7 9.0000021758E7 9.0000025392E7 9.000002068E7 9.0000025088E7 9.0000023918E7 9.0000024586E7 9.0000021328E7 9.0000022688E7 9.000002068E7 9.0000020552E7 9.0000022854E7 9.0000021078E7 9.00000206E7 9.0000021118E7 9.0000021844E7 9.0000030142E7 9.000002092E7 9.000002366E7 9.0000020538E7 9.000002094E7 9.0000021118E7 9.0000024104E7 9.0000026714E7 9.0000024396E7 9.0000021276E7 9.000002325E7 9.0000020682E7 9.0000021078E7 9.0000021844E7 9.000002886E7 9.0000025926E7 9.0000024396E7 9.0000021562E7 9.000006468E7 9.000002235E7 9.000002068E7 9.0000021504E7 9.0000034304E7)
Error minima by case: (0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0)
Average genome size in population (length): 184.85
Average program size in population (points): 227.93
Average percent parens in population: 0.190
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1355
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 92211200
--- Timings ---
Current time: 1559324181303 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- bowling problem report - generation 3
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_do*range (boolean_rot) integer_gte boolean_pop boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) (boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_dup_times exec_k () (boolean_yankdup exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) integer_div integer_empty boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor integer_pop exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) (integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt boolean_pop integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Lexicase best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Lexicase best number of elite cases: 4
Lexicase best total error: 1833
Lexicase best mean error: 18.33
Lexicase best size: 233
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_do*range (boolean_rot) integer_gte boolean_pop boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) (boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_dup_times exec_k () (boolean_yankdup exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) integer_div integer_empty boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor integer_pop exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) (integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt boolean_pop integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Zero cases best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1833
Zero cases best mean error: 18.33
Zero cases best size: 233
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 7 1 11 15 22 11 15 12 17 15 16 6 18 2 11 13 20 9 16 16 17 20 7 4 12 16 19 8 22 8 20 19 15 20 7 18 14 8 11 18 9 16 11 17 17 20 2 17 11 15 20 12 17 17 18 18 17 12 16 16 22 16 5 16 9 8 9 17 11 16 16 19 19 20 22 13 11 17 16 11 13 22 7 8 22 8 6 10 19 13 13 14 22 18 2 15 16 18 3)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (1 7 1 11 15 22 11 15 12 17 15 16 6 18 2 11 13 20 9 16 16 17 20 7 4 12 16 19 8 22 8 20 19 15 20 7 18 14 8 11 18 9 16 11 17 17 20 2 17 11 15 20 12 17 17 18 18 17 12 16 16 22 16 5 16 9 8 9 17 11 16 16 19 19 20 22 13 11 17 16 11 13 22 7 8 22 8 6 10 19 13 13 14 22 18 2 15 16 18 3)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte boolean_or) exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank exec_do*count (boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (integer_pop) boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) (integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush) () integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_do*range () boolean_invert_first_then_and) exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (integer_stackdepth integer_sub) integer_dec boolean_dup_times integer_mult integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 205
Size: 254
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 8.900002901321E9
Median total errors in population: 2567
Error averages by case: (8.9000197768E7 8.9000060944E7 8.9000067157E7 8.9000022946E7 8.9000022657E7 8.9000024362E7 8.9000032837E7 8.9000024791E7 8.900002128E7 8.9000021479E7 8.9000024791E7 8.9000022153E7 8.9000034265E7 8.900002194E7 8.9000058355E7 8.9000021282E7 8.9000028362E7 8.9000023257E7 8.9000067024E7 8.900002455E7 8.9000021265E7 8.9000022153E7 8.9000023257E7 8.9000032148E7 8.9000030187E7 8.9000021321E7 8.9000023349E7 8.900002372E7 8.9000028117E7 8.9000021934E7 8.9000021763E7 8.9000021384E7 8.900002372E7 8.9000022657E7 8.9000021384E7 8.9000032148E7 8.900002194E7 8.9000025719E7 8.9000030822E7 8.9000032837E7 8.900007556E7 8.9000067024E7 8.9000021319E7 8.900002956E7 8.9000026458E7 8.9000026458E7 8.9000023257E7 8.9000051563E7 8.9000026458E7 8.9000022946E7 8.9000022657E7 8.9000021384E7 8.9000021321E7 8.9000021479E7 8.9000022153E7 8.9000022406E7 8.9000022406E7 8.9000026458E7 8.900002128E7 8.900002455E7 8.9000023349E7 8.9000021934E7 8.9000022153E7 8.900002525E7 8.9000021319E7 8.9000025955E7 8.9000023977E7 8.900002547E7 8.9000022153E7 8.9000022946E7 8.9000021319E7 8.9000021265E7 8.900002372E7 8.9000021602E7 8.9000021384E7 8.9000021934E7 8.9000022695E7 8.900002956E7 8.9000021479E7 8.900002455E7 8.9000021282E7 8.9000021759E7 8.9000021934E7 8.9000025003E7 8.9000027548E7 8.9000024362E7 8.9000021763E7 8.9000024129E7 8.9000021487E7 8.9000021602E7 8.9000022695E7 8.9000028362E7 8.9000025719E7 8.9000024362E7 8.9000022406E7 8.9000062708E7 8.9000022657E7 8.9000021319E7 8.900002194E7 8.9000033548E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 187.155
Average program size in population (points): 230.168
Average percent parens in population: 0.187
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.62325
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 106085600
--- Timings ---
Current time: 1559324199659 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- bowling problem report - generation 4
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank integer_empty) tag_boolean_599 boolean_and)) boolean_and boolean_pop exec_dup_items boolean_xor integer_pop exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_empty integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Lexicase best errors: [236 84 91 30 29 34 49 35 20 23 35 27 51 26 81 18 42 31 54 4 19 11 31 48 45 17 7 6 3 12 25 16 6 29 16 48 26 37 46 49 64 54 21 44 0 0 31 73 0 30 29 16 17 23 11 10 10 0 20 4 7 12 27 36 21 1 33 2 11 30 21 19 6 24 16 12 9 44 23 4 18 13 12 3 2 34 25 5 15 24 9 42 37 34 10 86 29 21 26 50]
Lexicase best number of elite cases: 4
Lexicase best total error: 2807
Lexicase best mean error: 28.07
Lexicase best size: 202
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank integer_empty) tag_boolean_599 boolean_and)) boolean_and boolean_pop exec_dup_items boolean_xor integer_pop exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_empty integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Zero cases best errors: [236 84 91 30 29 34 49 35 20 23 35 27 51 26 81 18 42 31 54 4 19 11 31 48 45 17 7 6 3 12 25 16 6 29 16 48 26 37 46 49 64 54 21 44 0 0 31 73 0 30 29 16 17 23 11 10 10 0 20 4 7 12 27 36 21 1 33 2 11 30 21 19 6 24 16 12 9 44 23 4 18 13 12 3 2 34 25 5 15 24 9 42 37 34 10 86 29 21 26 50]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2807
Zero cases best mean error: 28.07
Zero cases best size: 202
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 2 9 17 28 5 12 17 23 12 10 4 13 5 14 11 10 11 15 20 15 10 6 6 11 8 18 3 24 21 19 18 17 19 6 13 15 15 5 29 11 21 7 9 9 10 4 9 9 17 19 11 23 15 18 18 9 17 15 8 24 10 12 21 4 17 11 15 9 21 20 18 11 19 24 13 7 23 15 14 12 24 17 9 28 21 16 11 11 13 11 15 28 18 2 17 21 13 12)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (3 0 2 9 17 28 5 12 17 23 12 10 4 13 5 14 11 10 11 15 20 15 10 6 6 11 8 18 3 24 21 19 18 17 19 6 13 15 15 5 29 11 21 7 9 9 10 4 9 9 17 19 11 23 15 18 18 9 17 15 8 24 10 12 21 4 17 11 15 9 21 20 18 11 19 24 13 7 23 15 14 12 24 17 9 28 21 16 11 11 13 11 15 28 18 2 17 21 13 12)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and exec_k () (integer_dec exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_dup_times (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup exec_while (boolean_eq) boolean_not integer_mod)) (integer_empty) (integer_div)) integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap integer_mult exec_flush boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () boolean_rot integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (integer_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_flush exec_eq integer_pop)) integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 201
Size: 251
Percent parens: 0.199
--- Population Statistics ---
Average total errors in population: 7.900003011567E9
Median total errors in population: 2461
Error averages by case: (7.9000199228E7 7.9000062044E7 7.9000068247E7 7.900002372E7 7.9000023427E7 7.9000025086E7 7.9000033611E7 7.9000025521E7 7.900002213E7 7.9000022257E7 7.9000025521E7 7.9000022933E7 7.9000035021E7 7.9000022718E7 7.9000059411E7 7.9000022232E7 7.900002915E7 7.9000024031E7 7.9000068994E7 7.9000026198E7 7.9000022161E7 7.9000023491E7 7.9000024031E7 7.9000032928E7 7.9000030965E7 7.9000022331E7 7.9000024885E7 7.9000025288E7 7.9000030139E7 7.9000023218E7 7.9000022529E7 7.9000022452E7 7.9000025288E7 7.9000023427E7 7.9000022452E7 7.9000032928E7 7.9000022718E7 7.9000026463E7 7.9000031596E7 7.9000033611E7 7.9000077404E7 7.9000068994E7 7.9000022133E7 7.9000030346E7 7.9000028356E7 7.9000028356E7 7.9000024031E7 7.9000052575E7 7.9000028356E7 7.900002372E7 7.9000023427E7 7.9000022452E7 7.9000022331E7 7.9000022257E7 7.9000023491E7 7.9000023794E7 7.9000023794E7 7.9000028356E7 7.900002213E7 7.9000026198E7 7.9000024885E7 7.9000023218E7 7.9000022933E7 7.900002598E7 7.9000022133E7 7.9000027791E7 7.9000024707E7 7.9000027234E7 7.9000023491E7 7.900002372E7 7.9000022133E7 7.9000022161E7 7.9000025288E7 7.9000022382E7 7.9000022452E7 7.9000023218E7 7.9000024133E7 7.9000030346E7 7.9000022257E7 7.9000026198E7 7.9000022232E7 7.9000022993E7 7.9000023218E7 7.9000026699E7 7.900002953E7 7.9000025086E7 7.9000022529E7 7.9000025727E7 7.9000022611E7 7.9000022382E7 7.9000024133E7 7.900002915E7 7.9000026463E7 7.9000025086E7 7.9000023794E7 7.900006381E7 7.9000023427E7 7.9000022133E7 7.9000022718E7 7.9000034304E7)
Error minima by case: (0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 186.94
Average program size in population (points): 229.068
Average percent parens in population: 0.184
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.0355
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.991
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.991
Total error diversity:				 0.134
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 121405700
--- Timings ---
Current time: 1559324215313 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- bowling problem report - generation 5
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) integer_eq integer_empty boolean_yankdup integer_min integer_empty) tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (integer_dup_items boolean_xor integer_stackdepth boolean_yank integer_pop) boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_not boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (integer_dup boolean_eq) (boolean_not integer_mod)) (integer_empty) exec_flush) () (integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_dup_items exec_k () (exec_eq integer_dup) boolean_shove exec_eq integer_rot boolean_yank integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_lt boolean_dup_times integer_mult boolean_shove integer_yank integer_mod boolean_dup_items boolean_rot exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Lexicase best errors: [220 68 75 14 13 18 33 19 4 7 19 11 35 10 65 2 26 15 70 12 3 5 15 32 29 1 9 10 19 4 9 0 10 13 0 32 10 21 30 33 80 70 5 28 16 16 15 57 16 14 13 0 1 7 5 6 6 16 4 12 9 4 11 20 5 15 17 14 5 14 5 3 10 8 0 4 7 28 7 12 2 3 4 13 18 18 9 11 1 8 7 26 21 18 6 70 13 5 10 34]
Lexicase best number of elite cases: 4
Lexicase best total error: 1903
Lexicase best mean error: 19.03
Lexicase best size: 227
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) integer_eq integer_empty boolean_yankdup integer_min integer_empty) tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (integer_dup_items boolean_xor integer_stackdepth boolean_yank integer_pop) boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_not boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (integer_dup boolean_eq) (boolean_not integer_mod)) (integer_empty) exec_flush) () (integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_dup_items exec_k () (exec_eq integer_dup) boolean_shove exec_eq integer_rot boolean_yank integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_lt boolean_dup_times integer_mult boolean_shove integer_yank integer_mod boolean_dup_items boolean_rot exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Zero cases best errors: [220 68 75 14 13 18 33 19 4 7 19 11 35 10 65 2 26 15 70 12 3 5 15 32 29 1 9 10 19 4 9 0 10 13 0 32 10 21 30 33 80 70 5 28 16 16 15 57 16 14 13 0 1 7 5 6 6 16 4 12 9 4 11 20 5 15 17 14 5 14 5 3 10 8 0 4 7 28 7 12 2 3 4 13 18 18 9 11 1 8 7 26 21 18 6 70 13 5 10 34]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1903
Zero cases best mean error: 19.03
Zero cases best size: 227
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 1 13 20 12 6 13 16 15 13 15 13 16 3 5 15 17 11 15 13 22 17 8 6 9 14 12 11 19 13 25 12 20 25 8 16 15 2 6 19 11 23 14 19 19 17 2 19 13 20 25 9 15 22 18 18 19 16 15 14 19 15 8 23 9 8 8 22 13 23 13 12 19 25 19 10 14 15 15 5 17 19 12 10 12 13 16 19 19 10 15 15 12 18 2 20 23 16 7)
Population mean number of elite cases: 1.41
Count of perfect (error zero) individuals by case: (1 0 1 13 20 12 6 13 16 15 13 15 13 16 3 5 15 17 11 15 13 22 17 8 6 9 14 12 11 19 13 25 12 20 25 8 16 15 2 6 19 11 23 14 19 19 17 2 19 13 20 25 9 15 22 18 18 19 16 15 14 19 15 8 23 9 8 8 22 13 23 13 12 19 25 19 10 14 15 15 5 17 19 12 10 12 13 16 19 19 10 15 15 12 18 2 20 23 16 7)
Population mean number of perfect (error zero) cases: 1.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) integer_max boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop) exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (exec_eq integer_inc boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup boolean_dup_times) boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc) boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq boolean_not integer_mod)) (integer_empty) exec_flush integer_pop integer_lt boolean_invert_second_then_and integer_rot exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_invert_second_then_and integer_mod) integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec)
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 182
Size: 217
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 8.500003098087E9
Median total errors in population: 2491
Error averages by case: (8.5000199078E7 8.500006302E7 8.5000069157E7 8.5000024746E7 8.5000024429E7 8.5000026252E7 8.5000034809E7 8.5000026677E7 8.5000023016E7 8.5000023193E7 8.5000026677E7 8.5000023899E7 8.5000036229E7 8.5000023676E7 8.5000060425E7 8.5000023072E7 8.5000030272E7 8.5000025089E7 8.5000070354E7 8.500002674E7 8.5000023031E7 8.5000024105E7 8.5000025089E7 8.5000034118E7 8.5000032129E7 8.5000023123E7 8.5000025451E7 8.5000025854E7 8.5000030637E7 8.5000023856E7 8.5000023485E7 8.5000023192E7 8.5000025854E7 8.5000024429E7 8.5000023192E7 8.5000034118E7 8.5000023676E7 8.5000027595E7 8.5000032784E7 8.5000034809E7 8.5000078882E7 8.5000070354E7 8.5000023033E7 8.5000031486E7 8.5000028818E7 8.5000028818E7 8.5000025089E7 8.5000053667E7 8.5000028818E7 8.5000024746E7 8.5000024429E7 8.5000023192E7 8.5000023123E7 8.5000023193E7 8.5000024105E7 8.5000024398E7 8.5000024398E7 8.5000028818E7 8.5000023016E7 8.500002674E7 8.5000025451E7 8.5000023856E7 8.5000023899E7 8.5000027128E7 8.5000023033E7 8.5000028271E7 8.5000025851E7 8.5000027742E7 8.5000024105E7 8.5000024746E7 8.5000023033E7 8.5000023031E7 8.5000025854E7 8.500002332E7 8.5000023192E7 8.5000023856E7 8.5000024727E7 8.5000031486E7 8.5000023193E7 8.500002674E7 8.5000023072E7 8.5000023645E7 8.5000023856E7 8.5000027229E7 8.500003001E7 8.5000026252E7 8.5000023485E7 8.5000026281E7 8.5000023311E7 8.500002332E7 8.5000024727E7 8.5000030272E7 8.5000027595E7 8.5000026252E7 8.5000024398E7 8.5000064758E7 8.5000024429E7 8.5000023033E7 8.5000023676E7 8.5000035512E7)
Error minima by case: (0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 186.261
Average program size in population (points): 228.4
Average percent parens in population: 0.184
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.5208125
Median age in population: 7.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.142
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 139046800
--- Timings ---
Current time: 1559324233989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- bowling problem report - generation 6
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_432} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth) integer_rot boolean_xor exec_flush) boolean_dup boolean_eq exec_s (integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) (exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or) integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) boolean_and boolean_flush boolean_or integer_mult tagged_339 boolean_and boolean_pop) tagged_432 exec_flush) (boolean_xor in1) tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult integer_yank exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_shove tagged_609 integer_rot exec_yankdup boolean_swap boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_eq integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (integer_empty boolean_invert_first_then_and) exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_while (integer_sub integer_dec boolean_dup_times integer_mult)) integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Lexicase best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Lexicase best number of elite cases: 4
Lexicase best total error: 1833
Lexicase best mean error: 18.33
Lexicase best size: 198
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_339} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_432} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_609} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth) integer_rot boolean_xor exec_flush) boolean_dup boolean_eq exec_s (integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) (exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or) integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) boolean_and boolean_flush boolean_or integer_mult tagged_339 boolean_and boolean_pop) tagged_432 exec_flush) (boolean_xor in1) tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult integer_yank exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_shove tagged_609 integer_rot exec_yankdup boolean_swap boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_eq integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (integer_empty boolean_invert_first_then_and) exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_while (integer_sub integer_dec boolean_dup_times integer_mult)) integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Zero cases best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1833
Zero cases best mean error: 18.33
Zero cases best size: 198
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 5 21 23 11 4 9 14 15 9 18 1 21 2 13 8 25 11 14 14 15 25 7 12 9 18 18 7 17 14 21 18 23 21 7 21 10 7 4 12 11 27 7 16 16 25 3 16 21 23 21 9 15 15 15 15 16 14 14 18 17 18 9 27 11 8 15 15 21 27 14 18 13 21 17 17 7 15 14 13 9 17 6 8 11 14 10 15 13 17 8 10 11 15 5 23 27 21 10)
Population mean number of elite cases: 1.41
Count of perfect (error zero) individuals by case: (3 0 5 21 23 11 4 9 14 15 9 18 1 21 2 13 8 25 11 14 14 15 25 7 12 9 18 18 7 17 14 21 18 23 21 7 21 10 7 4 12 11 27 7 16 16 25 3 16 21 23 21 9 15 15 15 15 16 14 14 18 17 18 9 27 11 8 15 15 21 27 14 18 13 21 17 17 7 15 14 13 9 17 6 8 11 14 10 15 13 17 8 10 11 15 5 23 27 21 10)
Population mean number of perfect (error zero) cases: 1.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_434} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (integer_max boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop integer_yank integer_min exec_empty integer_inc boolean_shove) (integer_gte integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_rot () (integer_lt boolean_yank) (boolean_yank boolean_not integer_swap) exec_if (integer_gte boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_434 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop) exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc integer_add) integer_min boolean_xor exec_yankdup exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq) integer_gte integer_mod) () integer_empty) (exec_flush)) integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (integer_swap integer_dec) exec_while (boolean_eq) boolean_not integer_mod integer_empty exec_flush exec_empty integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_sub exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 integer_stackdepth exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 210
Size: 261
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 8.100003033115E9
Median total errors in population: 2491
Error averages by case: (8.1000196307E7 8.1000061251E7 8.1000067294E7 8.1000023899E7 8.1000023602E7 8.1000025461E7 8.100003389E7 8.1000025908E7 8.1000022423E7 8.1000022528E7 8.1000025908E7 8.1000023116E7 8.100003528E7 8.1000022917E7 8.1000058698E7 8.1000022529E7 8.1000029483E7 8.1000024238E7 8.1000070729E7 8.1000026393E7 8.1000022462E7 8.1000023754E7 8.1000024238E7 8.1000033213E7 8.1000031266E7 8.1000022622E7 8.100002508E7 8.1000025487E7 8.100003026E7 8.1000023497E7 8.100002276E7 8.1000022733E7 8.1000025487E7 8.1000023602E7 8.1000022733E7 8.1000033213E7 8.1000022917E7 8.1000026856E7 8.1000031901E7 8.100003389E7 8.1000079473E7 8.1000070729E7 8.1000022412E7 8.1000030655E7 8.1000028475E7 8.1000028475E7 8.1000024238E7 8.1000052046E7 8.1000028475E7 8.1000023899E7 8.1000023602E7 8.1000022733E7 8.1000022622E7 8.1000022528E7 8.1000023754E7 8.1000024041E7 8.1000024041E7 8.1000028475E7 8.1000022423E7 8.1000026393E7 8.100002508E7 8.1000023497E7 8.1000023116E7 8.1000026373E7 8.1000022412E7 8.100002792E7 8.1000025036E7 8.1000027387E7 8.1000023754E7 8.1000023899E7 8.1000022412E7 8.1000022462E7 8.1000025487E7 8.1000022631E7 8.1000022733E7 8.1000023497E7 8.1000024358E7 8.1000030655E7 8.1000022528E7 8.1000026393E7 8.1000022529E7 8.1000023274E7 8.1000023497E7 8.1000026884E7 8.1000029653E7 8.1000025461E7 8.100002276E7 8.100002593E7 8.1000022886E7 8.1000022631E7 8.1000024358E7 8.1000029483E7 8.1000026856E7 8.1000025461E7 8.1000024041E7 8.1000062961E7 8.1000023602E7 8.1000022412E7 8.1000022917E7 8.1000034575E7)
Error minima by case: (0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 185.217
Average program size in population (points): 226.493
Average percent parens in population: 0.182
Minimum age in population: 6.5
Maximum age in population: 10.75
Average age in population: 8.99828125
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.142
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 158347900
--- Timings ---
Current time: 1559324252433 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- bowling problem report - generation 7
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte exec_dup_items integer_empty)) tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (boolean_frominteger boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) (integer_lte in1) integer_dup integer_mod) (boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) (integer_min boolean_xor boolean_shove exec_empty) (exec_s (integer_swap integer_dec) (exec_while (integer_yank) boolean_not integer_mod) () integer_empty) exec_flush) integer_pop exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup boolean_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty exec_dup_items exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max exec_dup_times (boolean_dup_items exec_do*range ())))
Lexicase best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Lexicase best number of elite cases: 4
Lexicase best total error: 2031
Lexicase best mean error: 20.31
Lexicase best size: 204
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte exec_dup_items integer_empty)) tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult boolean_and exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (boolean_frominteger boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) (integer_lte in1) integer_dup integer_mod) (boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) (integer_min boolean_xor boolean_shove exec_empty) (exec_s (integer_swap integer_dec) (exec_while (integer_yank) boolean_not integer_mod) () integer_empty) exec_flush) integer_pop exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup boolean_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty exec_dup_items exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max exec_dup_times (boolean_dup_items exec_do*range ())))
Zero cases best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2031
Zero cases best mean error: 20.31
Zero cases best size: 204
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1 1 13 14 8 16 8 14 25 8 12 8 24 4 19 14 15 7 14 9 13 15 14 5 22 22 17 10 19 15 18 17 14 18 14 24 9 4 16 11 7 18 7 14 14 15 5 14 13 14 18 22 25 13 15 15 14 14 14 22 19 12 11 18 15 12 10 13 13 18 9 17 27 18 19 14 7 25 14 19 15 19 17 7 8 15 6 12 27 14 14 9 8 15 1 14 18 24 7)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (2 1 1 13 14 8 16 8 14 25 8 12 8 24 4 19 14 15 7 14 9 13 15 14 5 22 22 17 10 19 15 18 17 14 18 14 24 9 4 16 11 7 18 7 14 14 15 5 14 13 14 18 22 25 13 15 15 14 14 14 22 19 12 11 18 15 12 10 13 13 18 9 17 27 18 19 14 7 25 14 19 15 19 17 7 8 15 6 12 27 14 14 9 8 15 1 14 18 24 7)
Population mean number of perfect (error zero) cases: 1.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq integer_fromboolean boolean_or) exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) () boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty exec_noop boolean_shove) integer_mult integer_lte integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 boolean_and) () exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (integer_yank boolean_dup_items boolean_xor integer_stackdepth boolean_swap) (exec_noop exec_yank in1 exec_dup (exec_flush) boolean_xor in1) tagged_97 integer_mod) (boolean_yankdup boolean_yank integer_pop) (exec_noop boolean_dup_times) boolean_invert_first_then_and integer_dup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup exec_do*while (exec_eq integer_inc boolean_flush) integer_min integer_eq exec_if (exec_empty) (exec_s (integer_swap integer_dec) (exec_while (boolean_eq boolean_not integer_mod)) (integer_empty) exec_flush)) integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_pop boolean_pop boolean_invert_second_then_and boolean_dup_times boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_lt integer_mod integer_gt exec_empty exec_stackdepth boolean_empty tagged_700 integer_fromboolean integer_rot integer_yank integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty exec_y_when_autoconstructing ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 170
Size: 206
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.400002888524E9
Median total errors in population: 2491
Error averages by case: (7.4000200496E7 7.4000061204E7 7.400006749E7 7.4000022678E7 7.4000022338E7 7.4000024288E7 7.4000032716E7 7.400002474E7 7.4000020754E7 7.400002092E7 7.400002474E7 7.4000021734E7 7.4000034118E7 7.4000021466E7 7.4000058546E7 7.4000020784E7 7.400002837E7 7.4000023044E7 7.4000068556E7 7.4000024492E7 7.400002076E7 7.400002191E7 7.4000023044E7 7.4000032054E7 7.4000030168E7 7.4000020846E7 7.4000023194E7 7.40000236E7 7.4000028402E7 7.4000021658E7 7.4000021246E7 7.4000020952E7 7.40000236E7 7.4000022338E7 7.4000020952E7 7.4000032054E7 7.4000021466E7 7.4000025698E7 7.400003079E7 7.4000032716E7 7.4000077318E7 7.4000068556E7 7.4000020776E7 7.4000029556E7 7.4000026584E7 7.4000026584E7 7.4000023044E7 7.4000051582E7 7.4000026584E7 7.4000022678E7 7.4000022338E7 7.4000020952E7 7.4000020846E7 7.400002092E7 7.400002191E7 7.4000022188E7 7.4000022188E7 7.4000026584E7 7.4000020754E7 7.4000024492E7 7.4000023194E7 7.4000021658E7 7.4000021734E7 7.4000025208E7 7.4000020776E7 7.400002602E7 7.4000023852E7 7.4000025486E7 7.400002191E7 7.4000022678E7 7.4000020776E7 7.400002076E7 7.40000236E7 7.4000021056E7 7.4000020952E7 7.4000021658E7 7.4000022496E7 7.4000029556E7 7.400002092E7 7.4000024492E7 7.4000020784E7 7.4000021444E7 7.4000021658E7 7.4000024972E7 7.4000027782E7 7.4000024288E7 7.4000021246E7 7.400002404E7 7.4000021094E7 7.4000021056E7 7.4000022496E7 7.400002837E7 7.4000025698E7 7.4000024288E7 7.4000022188E7 7.4000062992E7 7.4000022338E7 7.4000020776E7 7.4000021466E7 7.400003341E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 183.899
Average program size in population (points): 224.807
Average percent parens in population: 0.181
Minimum age in population: 7.5
Maximum age in population: 12.28125
Average age in population: 10.43875
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.146
Error (vector) diversity:			 0.147
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 171841000
--- Timings ---
Current time: 1559324266582 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- bowling problem report - generation 8
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_469} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 integer_add exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_eq integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq exec_dup (integer_dup tagged_753 boolean_swap) in1 integer_pop boolean_invert_second_then_and integer_min exec_swap (integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_469 exec_yank tag_boolean_599 boolean_and)) exec_empty boolean_flush integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 integer_mult exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) () tag_boolean_599 boolean_and) () exec_empty exec_dup_items exec_eq integer_flush boolean_dup_times boolean_and boolean_xor integer_stackdepth exec_y () integer_sub exec_yank in1 tagged_339 exec_if () (boolean_xor exec_do*while () tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_dup_times integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor integer_empty exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) (boolean_swap integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Lexicase best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Lexicase best number of elite cases: 4
Lexicase best total error: 2031
Lexicase best mean error: 20.31
Lexicase best size: 195
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_469} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 integer_add exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_eq integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq exec_dup (integer_dup tagged_753 boolean_swap) in1 integer_pop boolean_invert_second_then_and integer_min exec_swap (integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_469 exec_yank tag_boolean_599 boolean_and)) exec_empty boolean_flush integer_shove integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 integer_mult exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) () tag_boolean_599 boolean_and) () exec_empty exec_dup_items exec_eq integer_flush boolean_dup_times boolean_and boolean_xor integer_stackdepth exec_y () integer_sub exec_yank in1 tagged_339 exec_if () (boolean_xor exec_do*while () tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_dup_times integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor integer_empty exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) (boolean_swap integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Zero cases best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2031
Zero cases best mean error: 20.31
Zero cases best size: 195
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 1 26 16 8 9 17 8 19 17 9 8 20 5 15 14 19 8 15 16 16 19 6 7 25 16 12 9 23 10 18 12 16 18 6 20 15 5 9 14 8 28 14 18 18 19 2 18 26 16 18 25 19 16 24 24 18 8 15 16 23 9 9 28 9 9 14 16 26 28 16 12 18 18 23 14 14 19 15 15 10 23 10 10 8 10 9 15 18 14 14 15 8 24 5 16 28 20 2)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (3 2 1 26 16 8 9 17 8 19 17 9 8 20 5 15 14 19 8 15 16 16 19 6 7 25 16 12 9 23 10 18 12 16 18 6 20 15 5 9 14 8 28 14 18 18 19 2 18 26 16 18 25 19 16 24 24 18 8 15 16 23 9 9 28 9 9 14 16 26 28 16 12 18 18 23 14 14 19 15 15 10 23 10 10 8 10 9 15 18 14 14 15 8 24 5 16 28 20 2)
Population mean number of perfect (error zero) cases: 1.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove integer_min exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) (boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth boolean_yankdup) (tag_boolean_599 integer_empty)) (exec_empty exec_dup_items integer_shove boolean_or integer_mult tagged_188 boolean_and boolean_pop) tagged_339 exec_flush boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_inc boolean_flush boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min integer_eq exec_yankdup exec_empty exec_s () (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) integer_empty exec_flush integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_pop boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) () exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items boolean_empty exec_y_when_autoconstructing ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 156
Size: 183
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 7.00000286585E9
Median total errors in population: 2397
Error averages by case: (7.0000201538E7 7.0000062418E7 7.0000068742E7 7.0000022218E7 7.0000021896E7 7.000002391E7 7.0000033286E7 7.0000024388E7 7.0000020334E7 7.0000020564E7 7.0000024388E7 7.0000021344E7 7.0000034794E7 7.00000211E7 7.0000059754E7 7.0000020334E7 7.0000028382E7 7.0000022592E7 7.000006865E7 7.0000024036E7 7.0000020318E7 7.0000021396E7 7.0000022592E7 7.0000032552E7 7.00000304E7 7.000002038E7 7.0000022734E7 7.0000023146E7 7.0000027912E7 7.000002115E7 7.0000020896E7 7.0000020476E7 7.0000023146E7 7.0000021896E7 7.0000020476E7 7.0000032552E7 7.00000211E7 7.000002543E7 7.000003111E7 7.0000033286E7 7.0000077482E7 7.000006865E7 7.0000020366E7 7.0000029704E7 7.0000026106E7 7.0000026106E7 7.0000022592E7 7.0000052802E7 7.0000026106E7 7.0000022218E7 7.0000021896E7 7.0000020476E7 7.000002038E7 7.0000020564E7 7.0000021396E7 7.0000021674E7 7.0000021674E7 7.0000026106E7 7.0000020334E7 7.0000024036E7 7.0000022734E7 7.000002115E7 7.0000021344E7 7.00000249E7 7.0000020366E7 7.0000025556E7 7.0000023448E7 7.0000025024E7 7.0000021396E7 7.0000022218E7 7.0000020366E7 7.0000020318E7 7.0000023146E7 7.0000020712E7 7.0000020476E7 7.000002115E7 7.0000022E7 7.0000029704E7 7.0000020564E7 7.0000024036E7 7.0000020334E7 7.000002095E7 7.000002115E7 7.000002452E7 7.0000027292E7 7.000002391E7 7.0000020896E7 7.0000023582E7 7.0000020608E7 7.0000020712E7 7.0000022E7 7.0000028382E7 7.000002543E7 7.000002391E7 7.0000021674E7 7.0000064208E7 7.0000021896E7 7.0000020366E7 7.00000211E7 7.0000034038E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 180.976
Average program size in population (points): 220.846
Average percent parens in population: 0.180
Minimum age in population: 9.0
Maximum age in population: 13.953125
Average age in population: 11.8216875
Median age in population: 11.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.136
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 185551300
--- Timings ---
Current time: 1559324281521 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- bowling problem report - generation 9
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_236} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap integer_empty tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (integer_add) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and exec_stackdepth exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_min exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_do*times () boolean_and boolean_flush boolean_or integer_mult boolean_and boolean_pop) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_stackdepth integer_min integer_gt exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (boolean_pop integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_dup_times (integer_sub) integer_pop boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush integer_dup_items exec_y () integer_max tag_boolean_303 boolean_dup_items tagged_236 exec_y_when_autoconstructing ()))
Lexicase best errors: [220 68 75 14 13 18 33 19 4 7 19 11 35 10 65 2 26 15 70 12 3 5 15 32 29 1 9 10 19 4 9 0 10 13 0 32 10 21 30 33 80 70 5 28 16 16 15 57 16 14 13 0 1 7 5 6 6 16 4 12 9 4 11 20 5 15 17 14 5 14 5 3 10 8 0 4 7 28 7 12 2 3 4 13 18 18 9 11 1 8 7 26 21 18 6 70 13 5 10 34]
Lexicase best number of elite cases: 4
Lexicase best total error: 1903
Lexicase best mean error: 19.03
Lexicase best size: 173
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_236} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap integer_empty tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (integer_add) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and exec_stackdepth exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_min exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_do*times () boolean_and boolean_flush boolean_or integer_mult boolean_and boolean_pop) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_stackdepth integer_min integer_gt exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (boolean_pop integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_dup_times (integer_sub) integer_pop boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush integer_dup_items exec_y () integer_max tag_boolean_303 boolean_dup_items tagged_236 exec_y_when_autoconstructing ()))
Zero cases best errors: [220 68 75 14 13 18 33 19 4 7 19 11 35 10 65 2 26 15 70 12 3 5 15 32 29 1 9 10 19 4 9 0 10 13 0 32 10 21 30 33 80 70 5 28 16 16 15 57 16 14 13 0 1 7 5 6 6 16 4 12 9 4 11 20 5 15 17 14 5 14 5 3 10 8 0 4 7 28 7 12 2 3 4 13 18 18 9 11 1 8 7 26 21 18 6 70 13 5 10 34]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1903
Zero cases best mean error: 19.03
Zero cases best size: 173
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 7 1 11 17 14 15 12 20 19 12 18 1 15 8 20 11 20 9 20 21 17 20 8 6 19 12 10 6 24 11 16 10 17 16 8 15 17 13 15 16 9 16 11 21 21 20 2 21 11 17 16 19 19 17 22 22 21 20 20 12 24 18 14 16 12 7 7 17 11 16 21 10 16 16 24 13 11 19 20 20 8 24 13 9 14 11 10 16 16 13 11 17 14 22 1 17 16 15 9)
Population mean number of elite cases: 1.46
Count of perfect (error zero) individuals by case: (4 7 1 11 17 14 15 12 20 19 12 18 1 15 8 20 11 20 9 20 21 17 20 8 6 19 12 10 6 24 11 16 10 17 16 8 15 17 13 15 16 9 16 11 21 21 20 2 21 11 17 16 19 19 17 22 22 21 20 20 12 24 18 14 16 12 7 7 17 11 16 21 10 16 16 24 13 11 19 20 20 8 24 13 9 14 11 10 16 16 13 11 17 14 22 1 17 16 15 9)
Population mean number of perfect (error zero) cases: 1.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte exec_yank integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_dup_items boolean_yankdup) exec_do*range (boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_pop boolean_invert_second_then_and tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_dup_items integer_dup_times exec_k (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) (boolean_yank boolean_not integer_swap) integer_eq integer_mult tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq exec_k (boolean_flush) (integer_min boolean_xor exec_yankdup exec_empty) exec_s (exec_pop (exec_yank integer_rot boolean_and) boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) () exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or exec_stackdepth tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (boolean_shove boolean_stackdepth integer_rot exec_yankdup integer_pop) boolean_pop exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items boolean_empty exec_y_when_autoconstructing ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 133
Size: 154
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 7.000002948898E9
Median total errors in population: 2441
Error averages by case: (7.0000199897E7 7.0000061775E7 7.0000068017E7 7.0000022991E7 7.0000022683E7 7.0000024497E7 7.0000033131E7 7.0000024935E7 7.0000021265E7 7.0000021449E7 7.0000024935E7 7.0000022155E7 7.0000034597E7 7.0000021937E7 7.0000059165E7 7.0000021331E7 7.0000028623E7 7.0000023321E7 7.0000070451E7 7.0000025465E7 7.0000021277E7 7.0000022657E7 7.0000023321E7 7.0000032437E7 7.0000030453E7 7.0000021425E7 7.0000024127E7 7.0000024553E7 7.0000029505E7 7.0000022373E7 7.0000021749E7 7.0000021557E7 7.0000024553E7 7.0000022683E7 7.0000021557E7 7.0000032437E7 7.0000021937E7 7.0000025887E7 7.0000031093E7 7.0000033131E7 7.0000079195E7 7.0000070451E7 7.0000021293E7 7.0000029825E7 7.0000027619E7 7.0000027619E7 7.0000023321E7 7.0000052367E7 7.0000027619E7 7.0000022991E7 7.0000022683E7 7.0000021557E7 7.0000021425E7 7.0000021449E7 7.0000022657E7 7.0000022975E7 7.0000022975E7 7.0000027619E7 7.0000021265E7 7.0000025465E7 7.0000024127E7 7.0000022373E7 7.0000022155E7 7.0000025397E7 7.0000021293E7 7.0000027049E7 7.0000024087E7 7.0000026503E7 7.0000022657E7 7.0000022991E7 7.0000021293E7 7.0000021277E7 7.0000024553E7 7.0000021583E7 7.0000021557E7 7.0000022373E7 7.0000023337E7 7.0000029825E7 7.0000021449E7 7.0000025465E7 7.0000021331E7 7.0000022137E7 7.0000022373E7 7.0000025971E7 7.0000028859E7 7.0000024497E7 7.0000021749E7 7.0000024999E7 7.0000021721E7 7.0000021583E7 7.0000023337E7 7.0000028623E7 7.0000025887E7 7.0000024497E7 7.0000022975E7 7.0000063545E7 7.0000022683E7 7.0000021293E7 7.0000021937E7 7.0000033855E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 178.996
Average program size in population (points): 217.979
Average percent parens in population: 0.178
Minimum age in population: 10.0
Maximum age in population: 15.625
Average age in population: 13.29101953125
Median age in population: 13.3671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.135
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 202887400
--- Timings ---
Current time: 1559324298729 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- bowling problem report - generation 10
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_804} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_lte boolean_dup_items integer_rot exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_do*range (boolean_rot) integer_gte boolean_pop boolean_invert_first_then_and exec_stackdepth integer_rot boolean_xor exec_flush boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_dup_times exec_k () (boolean_yankdup exec_when (integer_dup_times exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap integer_div integer_empty boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_dup integer_mult tagged_188 exec_do*range (boolean_pop) exec_dup_items boolean_xor integer_pop exec_dup_items integer_eq integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_when (exec_s_when_autoconstructing (integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) boolean_dup_times exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush) () integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_804 integer_fromboolean boolean_swap)
Lexicase best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Lexicase best number of elite cases: 4
Lexicase best total error: 2031
Lexicase best mean error: 20.31
Lexicase best size: 173
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_804} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_lte boolean_dup_items integer_rot exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_do*range (boolean_rot) integer_gte boolean_pop boolean_invert_first_then_and exec_stackdepth integer_rot boolean_xor exec_flush boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_dup_times exec_k () (boolean_yankdup exec_when (integer_dup_times exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap integer_div integer_empty boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_dup integer_mult tagged_188 exec_do*range (boolean_pop) exec_dup_items boolean_xor integer_pop exec_dup_items integer_eq integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_when (exec_s_when_autoconstructing (integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) boolean_dup_times exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush) () integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_804 integer_fromboolean boolean_swap)
Zero cases best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2031
Zero cases best mean error: 20.31
Zero cases best size: 173
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 4 22 22 16 13 14 13 15 14 13 4 20 1 10 9 14 7 19 10 12 14 9 7 10 15 11 7 20 15 15 11 22 15 9 20 10 10 13 22 7 25 6 18 18 14 5 18 22 22 15 10 15 12 20 20 18 13 19 15 20 13 12 25 15 10 5 12 22 25 10 11 14 15 20 9 6 15 19 10 11 20 11 13 16 15 11 14 14 9 9 10 16 20 3 22 25 20 8)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (2 0 4 22 22 16 13 14 13 15 14 13 4 20 1 10 9 14 7 19 10 12 14 9 7 10 15 11 7 20 15 15 11 22 15 9 20 10 10 13 22 7 25 6 18 18 14 5 18 22 22 15 10 15 12 20 20 18 13 19 15 20 13 12 25 15 10 5 12 22 25 10 11 14 15 20 9 6 15 19 10 11 20 11 13 16 15 11 14 14 9 9 10 16 20 3 22 25 20 8)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_341} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_515} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 3, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range})
Best program: (integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) integer_swap boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty boolean_yankdup boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) exec_if (boolean_yank) (exec_eq boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) boolean_swap exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and integer_eq boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_shove) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_flush) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth boolean_frominteger) boolean_yank exec_yank in1 tagged_341 exec_flush) (boolean_invert_second_then_and in1) tagged_97 integer_mod) (boolean_yankdup boolean_yank exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 boolean_yankdup) boolean_xor in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq exec_while (boolean_flush) tagged_515 boolean_yank integer_pop) boolean_dup_times boolean_dup_times) boolean_invert_first_then_and integer_dup exec_while (boolean_eq) boolean_not integer_mod integer_empty exec_flush integer_pop boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_flush integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty boolean_yankdup boolean_empty integer_lte integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush integer_dup_items integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank exec_pop (boolean_dup_items) boolean_rot) (exec_flush exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range ()) ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 183
Size: 223
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 1.0200002993738E10
Median total errors in population: 2578
Error averages by case: (1.02000193453E8 1.02000060305E8 1.02000066325E8 1.02000023703E8 1.02000023433E8 1.02000025111E8 1.02000033109E8 1.02000025529E8 1.02000022427E8 1.02000022499E8 1.02000025529E8 1.02000023003E8 1.02000034441E8 1.02000022825E8 1.02000057759E8 1.02000022527E8 1.02000028993E8 1.02000024017E8 1.02000067935E8 1.02000026047E8 1.02000022467E8 1.02000023619E8 1.02000024017E8 1.02000032477E8 1.02000030671E8 1.02000022607E8 1.02000024859E8 1.02000025233E8 1.02000029707E8 1.02000023377E8 1.02000022687E8 1.02000022707E8 1.02000025233E8 1.02000023433E8 1.02000022707E8 1.02000032477E8 1.02000022825E8 1.02000026445E8 1.02000031257E8 1.02000033109E8 1.02000076189E8 1.02000067935E8 1.02000022413E8 1.02000030099E8 1.02000027987E8 1.02000027987E8 1.02000024017E8 1.02000051093E8 1.02000027987E8 1.02000023703E8 1.02000023433E8 1.02000022707E8 1.02000022607E8 1.02000022499E8 1.02000023619E8 1.02000023885E8 1.02000023885E8 1.02000027987E8 1.02000022427E8 1.02000026047E8 1.02000024859E8 1.02000023377E8 1.02000023003E8 1.02000025975E8 1.02000022413E8 1.02000027469E8 1.02000024725E8 1.02000026981E8 1.02000023619E8 1.02000023703E8 1.02000022413E8 1.02000022467E8 1.02000025233E8 1.02000022579E8 1.02000022707E8 1.02000023377E8 1.02000024191E8 1.02000030099E8 1.02000022499E8 1.02000026047E8 1.02000022527E8 1.02000023175E8 1.02000023377E8 1.02000026503E8 1.02000029111E8 1.02000025111E8 1.02000022687E8 1.02000025629E8 1.02000022837E8 1.02000022579E8 1.02000024191E8 1.02000028993E8 1.02000026445E8 1.02000025111E8 1.02000023885E8 1.02000062013E8 1.02000023433E8 1.02000022413E8 1.02000022825E8 1.02000033767E8)
Error minima by case: (0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 177.223
Average program size in population (points): 215.441
Average percent parens in population: 0.176
Minimum age in population: 11.0
Maximum age in population: 17.15625
Average age in population: 14.70357421875
Median age in population: 14.8046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.135
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 217873200
--- Timings ---
Current time: 1559324314006 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- bowling problem report - generation 11
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_flush})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (boolean_invert_first_then_and boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_pop integer_lte integer_dup_times exec_k () (integer_yank exec_when (integer_empty boolean_yankdup boolean_stackdepth integer_empty) tag_boolean_599 exec_dup_times ()) exec_empty integer_shove integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop integer_mod boolean_xor integer_shove exec_rot (integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop) (integer_pop boolean_eq integer_mult boolean_swap) (integer_gte boolean_dup_items boolean_and) exec_noop exec_yank exec_swap (tagged_339 exec_flush) (boolean_xor in1) exec_do*count (integer_mod) boolean_yankdup integer_inc integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_dup_items integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (boolean_yankdup boolean_eq) (boolean_not integer_mod) integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) boolean_flush)
Lexicase best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Lexicase best number of elite cases: 4
Lexicase best total error: 1833
Lexicase best mean error: 18.33
Lexicase best size: 153
Percent parens: 0.124
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_flush})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (boolean_invert_first_then_and boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_pop integer_lte integer_dup_times exec_k () (integer_yank exec_when (integer_empty boolean_yankdup boolean_stackdepth integer_empty) tag_boolean_599 exec_dup_times ()) exec_empty integer_shove integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop integer_mod boolean_xor integer_shove exec_rot (integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop) (integer_pop boolean_eq integer_mult boolean_swap) (integer_gte boolean_dup_items boolean_and) exec_noop exec_yank exec_swap (tagged_339 exec_flush) (boolean_xor in1) exec_do*count (integer_mod) boolean_yankdup integer_inc integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_dup_items integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (boolean_yankdup boolean_eq) (boolean_not integer_mod) integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) boolean_flush)
Zero cases best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1833
Zero cases best mean error: 18.33
Zero cases best size: 153
Percent parens: 0.124
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 21 18 13 8 9 14 14 9 7 7 18 3 17 8 20 15 19 14 20 20 9 8 11 18 15 7 26 8 20 15 18 20 9 18 7 10 8 20 15 20 10 17 17 20 4 17 21 18 20 11 14 20 19 19 17 14 19 18 26 7 15 20 16 4 11 20 21 20 14 15 15 20 26 11 10 14 19 17 12 26 10 9 13 8 16 14 15 11 8 7 13 19 5 18 20 18 9)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (0 1 1 21 18 13 8 9 14 14 9 7 7 18 3 17 8 20 15 19 14 20 20 9 8 11 18 15 7 26 8 20 15 18 20 9 18 7 10 8 20 15 20 10 17 17 20 4 17 21 18 20 11 14 20 19 19 17 14 19 18 26 7 15 20 16 4 11 20 21 20 14 15 15 20 26 11 10 14 19 17 12 26 10 9 13 8 16 14 15 11 8 7 13 19 5 18 20 18 9)
Population mean number of perfect (error zero) cases: 1.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction tagged_97} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 2, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty integer_dup_times exec_stackdepth integer_rot boolean_xor exec_flush boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap exec_when (tag_integer_634 exec_yank) integer_lt integer_lt boolean_yank) boolean_yank boolean_not integer_swap) (exec_if (integer_lt integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_empty exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) exec_if (exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) (boolean_yank boolean_not integer_sub exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 integer_sub) exec_empty exec_dup_items integer_shove) integer_flush boolean_dup_times)) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor integer_sub in1 tagged_97 boolean_pop boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) (integer_empty) exec_flush integer_pop integer_lt integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_pop boolean_flush integer_min boolean_xor exec_yankdup boolean_flush boolean_yankdup boolean_yank integer_pop exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot boolean_and integer_pop boolean_pop boolean_invert_second_then_and))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 168
Size: 199
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 6.300003435723E9
Median total errors in population: 2491
Error averages by case: (6.3000205403E7 6.3000066475E7 6.3000072694E7 6.3000028471E7 6.3000028154E7 6.3000030071E7 6.3000038552E7 6.3000030522E7 6.3000026483E7 6.3000026804E7 6.3000030522E7 6.3000027614E7 6.3000039948E7 6.3000027369E7 6.3000063874E7 6.3000026421E7 6.3000034177E7 6.300002883E7 6.3000072561E7 6.3000029475E7 6.3000026438E7 6.3000027126E7 6.300002883E7 6.3000037879E7 6.3000035954E7 6.3000026438E7 6.300002827E7 6.3000028641E7 6.3000033282E7 6.3000026929E7 6.300002716E7 6.3000026477E7 6.3000028641E7 6.3000028154E7 6.3000026477E7 6.3000037879E7 6.3000027369E7 6.300003149E7 6.3000036579E7 6.3000038552E7 6.3000081123E7 6.3000072561E7 6.3000026556E7 6.3000035345E7 6.3000031495E7 6.3000031495E7 6.300002883E7 6.30000571E7 6.3000031495E7 6.3000028471E7 6.3000028154E7 6.3000026477E7 6.3000026438E7 6.3000026804E7 6.3000027126E7 6.3000027363E7 6.3000027363E7 6.3000031495E7 6.3000026483E7 6.3000029475E7 6.300002827E7 6.3000026929E7 6.3000027614E7 6.3000030991E7 6.3000026556E7 6.300003095E7 6.3000029646E7 6.3000030437E7 6.3000027126E7 6.3000028471E7 6.3000026556E7 6.3000026438E7 6.3000028641E7 6.3000026967E7 6.3000026477E7 6.3000026929E7 6.3000027638E7 6.3000035345E7 6.3000026804E7 6.3000029475E7 6.3000026421E7 6.3000026784E7 6.3000026929E7 6.3000029946E7 6.3000032669E7 6.3000030071E7 6.300002716E7 6.3000029042E7 6.3000026556E7 6.3000026967E7 6.3000027638E7 6.3000034177E7 6.300003149E7 6.3000030071E7 6.3000027363E7 6.3000068225E7 6.3000028154E7 6.3000026556E7 6.3000027369E7 6.3000039241E7)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 177.91
Average program size in population (points): 215.945
Average percent parens in population: 0.175
Minimum age in population: 12.0
Maximum age in population: 18.0126953125
Average age in population: 16.126873046875
Median age in population: 16.197265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.151
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 237076700
--- Timings ---
Current time: 1559324332067 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- bowling problem report - generation 12
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_invert_first_then_and boolean_pop integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_mult exec_stackdepth integer_dup_items exec_empty integer_inc integer_dup boolean_pop integer_eq exec_if (boolean_or exec_when (boolean_empty boolean_or) exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush boolean_rot) boolean_eq boolean_yank integer_dup tagged_753 integer_dup in1 integer_pop integer_swap) (exec_if (integer_empty boolean_yankdup exec_eq integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup exec_noop exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc exec_empty integer_min boolean_invert_first_then_and exec_yankdup exec_empty exec_s (integer_swap integer_dec) (boolean_dup boolean_eq) (boolean_not integer_mod) integer_empty exec_flush integer_pop integer_lt boolean_shove boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush integer_pop) (boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_invert_second_then_and integer_empty boolean_invert_first_then_and boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Lexicase best errors: [207 55 62 1 0 5 20 6 9 6 6 2 22 3 52 11 13 2 83 25 10 18 2 19 16 12 22 23 32 17 4 13 23 0 13 19 3 8 17 20 93 83 8 15 29 29 2 44 29 1 0 13 12 6 18 19 19 29 9 25 22 17 2 7 8 28 4 27 18 1 8 10 23 5 13 17 20 15 6 25 11 16 17 26 31 5 4 24 14 5 20 13 8 5 19 57 0 8 3 21]
Lexicase best number of elite cases: 4
Lexicase best total error: 1947
Lexicase best mean error: 19.47
Lexicase best size: 157
Percent parens: 0.108
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_invert_first_then_and boolean_pop integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_mult exec_stackdepth integer_dup_items exec_empty integer_inc integer_dup boolean_pop integer_eq exec_if (boolean_or exec_when (boolean_empty boolean_or) exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush boolean_rot) boolean_eq boolean_yank integer_dup tagged_753 integer_dup in1 integer_pop integer_swap) (exec_if (integer_empty boolean_yankdup exec_eq integer_empty) (tag_boolean_599 boolean_and)) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or integer_mult integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup exec_noop exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc exec_empty integer_min boolean_invert_first_then_and exec_yankdup exec_empty exec_s (integer_swap integer_dec) (boolean_dup boolean_eq) (boolean_not integer_mod) integer_empty exec_flush integer_pop integer_lt boolean_shove boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush integer_pop) (boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_invert_second_then_and integer_empty boolean_invert_first_then_and boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Zero cases best errors: [207 55 62 1 0 5 20 6 9 6 6 2 22 3 52 11 13 2 83 25 10 18 2 19 16 12 22 23 32 17 4 13 23 0 13 19 3 8 17 20 93 83 8 15 29 29 2 44 29 1 0 13 12 6 18 19 19 29 9 25 22 17 2 7 8 28 4 27 18 1 8 10 23 5 13 17 20 15 6 25 11 16 17 26 31 5 4 24 14 5 20 13 8 5 19 57 0 8 3 21]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1947
Zero cases best mean error: 19.47
Zero cases best size: 157
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 2 15 13 18 12 11 9 21 11 14 9 15 2 12 4 27 11 16 12 20 27 8 11 15 18 29 8 24 21 17 29 13 17 8 15 10 8 12 14 11 23 9 17 17 27 2 17 15 13 17 15 21 20 23 23 17 9 16 18 24 14 13 23 9 17 8 20 15 23 12 29 16 17 24 18 9 21 16 12 11 24 14 10 18 21 11 16 16 18 4 10 18 23 1 13 23 15 4)
Population mean number of elite cases: 1.50
Count of perfect (error zero) individuals by case: (0 2 2 15 13 18 12 11 9 21 11 14 9 15 2 12 4 27 11 16 12 20 27 8 11 15 18 29 8 24 21 17 29 13 17 8 15 10 8 12 14 11 23 9 17 17 27 2 17 15 13 17 15 21 20 23 23 17 9 16 18 24 14 13 23 9 17 8 20 15 23 12 29 16 17 24 18 9 21 16 12 11 24 14 10 18 21 11 16 16 18 4 10 18 23 1 13 23 15 4)
Population mean number of perfect (error zero) cases: 1.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte boolean_pop integer_swap exec_stackdepth exec_noop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_empty exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) integer_swap boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min boolean_invert_second_then_and integer_min exec_empty in1 boolean_or boolean_yank boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush boolean_dup boolean_frominteger boolean_yank integer_dup tagged_753 exec_if (integer_empty boolean_yankdup integer_dec integer_empty) (tag_boolean_599 boolean_not) integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (boolean_swap) (exec_yank boolean_dup_items boolean_and) (exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_97 integer_mod) (boolean_yankdup boolean_yank integer_pop) boolean_dup_times boolean_dup_times) boolean_invert_first_then_and integer_dup integer_mod boolean_dup_times exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (integer_yank exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty boolean_invert_second_then_and boolean_pop boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank boolean_dup) integer_mult exec_rot (integer_yank integer_mod boolean_dup_items) (boolean_rot) (exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ())))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 153
Size: 183
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 6.500002842213E9
Median total errors in population: 2353
Error averages by case: (6.5000202958E7 6.5000062252E7 6.5000068639E7 6.5000021902E7 6.5000021601E7 6.5000023446E7 6.5000032567E7 6.5000023913E7 6.5000020188E7 6.5000020349E7 6.5000023913E7 6.5000021067E7 6.5000034089E7 6.5000020836E7 6.5000059537E7 6.5000020218E7 6.5000027796E7 6.5000022233E7 6.500006881E7 6.5000023918E7 6.5000020191E7 6.5000021205E7 6.5000022233E7 6.5000031834E7 6.5000029727E7 6.5000020269E7 6.5000022541E7 6.5000022954E7 6.5000028067E7 6.5000020968E7 6.5000020635E7 6.500002035E7 6.5000022954E7 6.5000021601E7 6.500002035E7 6.5000031834E7 6.5000020836E7 6.5000024917E7 6.5000030414E7 6.5000032567E7 6.5000077542E7 6.500006881E7 6.5000020203E7 6.5000029062E7 6.5000026152E7 6.5000026152E7 6.5000022233E7 6.5000052441E7 6.5000026152E7 6.5000021902E7 6.5000021601E7 6.500002035E7 6.5000020269E7 6.5000020349E7 6.5000021205E7 6.5000021482E7 6.5000021482E7 6.5000026152E7 6.5000020188E7 6.5000023918E7 6.5000022541E7 6.5000020968E7 6.5000021067E7 6.5000024402E7 6.5000020203E7 6.5000025565E7 6.5000023015E7 6.5000024996E7 6.5000021205E7 6.5000021902E7 6.5000020203E7 6.5000020191E7 6.5000022954E7 6.5000020476E7 6.500002035E7 6.5000020968E7 6.5000021805E7 6.5000029062E7 6.5000020349E7 6.5000023918E7 6.5000020218E7 6.5000020779E7 6.5000020968E7 6.5000024443E7 6.500002741E7 6.5000023446E7 6.5000020635E7 6.5000023425E7 6.5000020465E7 6.5000020476E7 6.5000021805E7 6.5000027796E7 6.5000024917E7 6.5000023446E7 6.5000021482E7 6.5000064074E7 6.5000021601E7 6.5000020203E7 6.5000020836E7 6.5000033324E7)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 175.003
Average program size in population (points): 211.795
Average percent parens in population: 0.172
Minimum age in population: 13.0
Maximum age in population: 19.57861328125
Average age in population: 17.5469580078125
Median age in population: 17.611328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.132
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 251260900
--- Timings ---
Current time: 1559324346557 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- bowling problem report - generation 13
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_143} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) (boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_mod boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) (exec_if (integer_empty boolean_yankdup boolean_yank) (boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) integer_empty) tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_yank boolean_shove) (exec_pop (integer_min boolean_or integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_143 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_not boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_gt exec_empty integer_rot boolean_shove tagged_700 integer_fromboolean integer_gt exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove) boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and boolean_flush boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub integer_dec boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod exec_while () integer_yankdup) (boolean_swap integer_gte integer_lt) (integer_mod integer_gt exec_empty integer_flush boolean_empty tagged_700 boolean_swap) boolean_swap exec_dup_times (boolean_and integer_empty) exec_eq integer_dup boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times)
Lexicase best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Lexicase best number of elite cases: 4
Lexicase best total error: 2031
Lexicase best mean error: 20.31
Lexicase best size: 235
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_143} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) (boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_mod boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap) (exec_if (integer_empty boolean_yankdup boolean_yank) (boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and)) integer_empty) tag_boolean_599 boolean_and exec_empty exec_dup_items integer_shove exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_yank boolean_shove) (exec_pop (integer_min boolean_or integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) (tagged_143 integer_mod) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_not boolean_flush) integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_gt exec_empty integer_rot boolean_shove tagged_700 integer_fromboolean integer_gt exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove) boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and boolean_flush boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub integer_dec boolean_dup_times integer_mult) exec_rot (integer_yank integer_mod exec_while () integer_yankdup) (boolean_swap integer_gte integer_lt) (integer_mod integer_gt exec_empty integer_flush boolean_empty tagged_700 boolean_swap) boolean_swap exec_dup_times (boolean_and integer_empty) exec_eq integer_dup boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times)
Zero cases best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2031
Zero cases best mean error: 20.31
Zero cases best size: 235
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 1 17 22 8 7 9 18 14 9 11 4 21 4 12 8 20 6 14 22 30 20 11 11 20 16 12 11 24 12 18 12 22 18 11 21 11 13 7 22 6 16 12 15 15 20 3 15 17 22 18 20 14 30 21 21 15 18 14 16 24 11 13 16 8 7 14 30 17 16 22 12 14 18 24 13 12 14 14 12 15 24 17 10 8 12 7 21 14 13 8 11 8 21 2 22 16 21 9)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (0 3 1 17 22 8 7 9 18 14 9 11 4 21 4 12 8 20 6 14 22 30 20 11 11 20 16 12 11 24 12 18 12 22 18 11 21 11 13 7 22 6 16 12 15 15 20 3 15 17 22 18 20 14 30 21 21 15 18 14 16 24 11 13 16 8 7 14 30 17 16 22 12 14 18 24 13 12 14 14 12 15 24 17 10 8 12 7 21 14 13 8 11 8 21 2 22 16 21 9)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_41} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_188} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush})
Best program: (integer_lte boolean_pop boolean_invert_first_then_and exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (integer_eq) (exec_when (boolean_empty exec_do*while (exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_rot) integer_gte boolean_pop integer_eq boolean_invert_second_then_and boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth exec_do*while (exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop tagged_41 integer_min exec_empty integer_inc boolean_shove exec_flush boolean_dup integer_dec boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth tagged_188 integer_yank boolean_invert_second_then_and integer_min exec_empty boolean_not integer_swap) (exec_if (integer_empty boolean_yankdup boolean_stackdepth tagged_188 boolean_and boolean_pop) (exec_dup_items boolean_xor boolean_rot integer_lte) integer_div boolean_invert_first_then_and integer_stackdepth integer_dup_times) exec_k (integer_mod exec_dup_items boolean_yankdup exec_stackdepth integer_div integer_fromboolean exec_pop (integer_stackdepth exec_y () exec_noop integer_eq in1 tagged_339 exec_flush) boolean_xor in1) (integer_pop) boolean_dup_times boolean_dup_times integer_mult exec_eq boolean_yank integer_eq integer_min boolean_xor integer_eq integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot integer_rot) (boolean_invert_second_then_and integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_dup (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank integer_mod integer_dup_items) (boolean_rot) (exec_flush))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 160
Size: 187
Percent parens: 0.144
--- Population Statistics ---
Average total errors in population: 7.2000033144E9
Median total errors in population: 2421
Error averages by case: (7.2000204018E7 7.2000065952E7 7.2000072244E7 7.2000026788E7 7.2000026464E7 7.2000028402E7 7.2000037156E7 7.2000028854E7 7.2000024958E7 7.2000025224E7 7.2000028854E7 7.2000025934E7 7.2000038622E7 7.2000025706E7 7.2000063292E7 7.2000024946E7 7.2000032582E7 7.2000027146E7 7.2000073374E7 7.200002883E7 7.200002493E7 7.2000025994E7 7.2000027146E7 7.2000036446E7 7.2000034424E7 7.2000024986E7 7.2000027466E7 7.20000279E7 7.2000032864E7 7.2000025734E7 7.200002552E7 7.2000025066E7 7.20000279E7 7.2000026464E7 7.2000025066E7 7.2000036446E7 7.2000025706E7 7.200002982E7 7.2000035078E7 7.2000037156E7 7.2000082046E7 7.2000073374E7 7.2000025022E7 7.2000033792E7 7.2000031004E7 7.2000031004E7 7.2000027146E7 7.200005637E7 7.2000031004E7 7.2000026788E7 7.2000026464E7 7.2000025066E7 7.2000024986E7 7.2000025224E7 7.2000025994E7 7.2000026314E7 7.2000026314E7 7.2000031004E7 7.2000024958E7 7.200002883E7 7.2000027466E7 7.2000025734E7 7.2000025934E7 7.2000029324E7 7.2000025022E7 7.2000030426E7 7.2000027966E7 7.2000029864E7 7.2000025994E7 7.2000026788E7 7.2000025022E7 7.200002493E7 7.20000279E7 7.2000025358E7 7.2000025066E7 7.2000025734E7 7.2000026676E7 7.2000033792E7 7.2000025224E7 7.200002883E7 7.2000024946E7 7.2000025522E7 7.2000025734E7 7.200002933E7 7.2000032228E7 7.2000028402E7 7.200002552E7 7.2000028358E7 7.2000025182E7 7.2000025358E7 7.2000026676E7 7.2000032582E7 7.200002982E7 7.2000028402E7 7.2000026314E7 7.2000067742E7 7.2000026464E7 7.2000025022E7 7.2000025706E7 7.200003788E7)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 172.686
Average program size in population (points): 208.454
Average percent parens in population: 0.170
Minimum age in population: 15.828125
Maximum age in population: 21.13427734375
Average age in population: 19.00469946289062
Median age in population: 19.0501708984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.14
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 266752700
--- Timings ---
Current time: 1559324373878 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- bowling problem report - generation 14
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_if (tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_pop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (boolean_invert_first_then_and boolean_dup_times boolean_stackdepth integer_stackdepth exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (boolean_invert_first_then_and boolean_dup_times boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup integer_lte boolean_swap in1 boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor boolean_invert_first_then_and boolean_dup_times boolean_stackdepth in1) tagged_97 integer_mod)) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times)) boolean_invert_first_then_and boolean_or integer_mult tagged_188 boolean_and boolean_pop) () exec_dup_items boolean_xor boolean_empty exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank boolean_dup_items boolean_and exec_noop boolean_empty exec_swap (integer_shove exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times integer_yank integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s () (integer_swap integer_dec) (boolean_yankdup boolean_eq) integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_dup_items integer_rot boolean_empty) tagged_700 integer_empty boolean_swap exec_dup_times (exec_dup (exec_k () (boolean_shove exec_s (integer_swap integer_dec) () ()))))
Lexicase best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Lexicase best number of elite cases: 4
Lexicase best total error: 2031
Lexicase best mean error: 20.31
Lexicase best size: 184
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_if (tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_pop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (boolean_invert_first_then_and boolean_dup_times boolean_stackdepth integer_stackdepth exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (boolean_invert_first_then_and boolean_dup_times boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup integer_lte boolean_swap in1 boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor boolean_invert_first_then_and boolean_dup_times boolean_stackdepth in1) tagged_97 integer_mod)) boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times)) boolean_invert_first_then_and boolean_or integer_mult tagged_188 boolean_and boolean_pop) () exec_dup_items boolean_xor boolean_empty exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank boolean_dup_items boolean_and exec_noop boolean_empty exec_swap (integer_shove exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times integer_yank integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s () (integer_swap integer_dec) (boolean_yankdup boolean_eq) integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_dup_items integer_rot boolean_empty) tagged_700 integer_empty boolean_swap exec_dup_times (exec_dup (exec_k () (boolean_shove exec_s (integer_swap integer_dec) () ()))))
Zero cases best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2031
Zero cases best mean error: 20.31
Zero cases best size: 184
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 2 20 22 15 11 15 12 17 15 12 9 21 2 19 12 25 18 11 15 18 25 10 6 14 19 14 11 23 17 24 14 22 24 10 21 8 12 11 19 18 22 13 23 23 25 2 23 20 22 24 14 17 18 19 19 23 12 11 19 23 12 7 22 10 16 10 18 20 22 15 14 16 24 23 12 13 17 11 19 6 23 9 12 15 17 12 15 16 12 12 8 15 19 3 22 22 21 9)
Population mean number of elite cases: 1.56
Count of perfect (error zero) individuals by case: (0 2 2 20 22 15 11 15 12 17 15 12 9 21 2 19 12 25 18 11 15 18 25 10 6 14 19 14 11 23 17 24 14 22 24 10 21 8 12 11 19 18 22 13 23 23 25 2 23 20 22 24 14 17 18 19 19 23 12 11 19 23 12 7 22 10 16 10 18 20 22 15 14 16 24 23 12 13 17 11 19 6 23 9 12 15 17 12 15 16 12 12 8 15 19 3 22 22 21 9)
Population mean number of perfect (error zero) cases: 1.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 3, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq})
Best program: (integer_gt integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items integer_eq exec_do*range (boolean_rot) boolean_yank boolean_pop integer_gt boolean_pop integer_swap integer_fromboolean integer_gte boolean_pop integer_eq integer_dup_items boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot) integer_add exec_flush boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_empty integer_min exec_empty integer_inc boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_shove) (tag_boolean_599 boolean_and) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_yank integer_shove boolean_and) exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor) (in1 tagged_97 integer_mod) boolean_dup_times) (integer_dup_times) (boolean_invert_first_then_and boolean_xor integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor integer_swap integer_dec boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor boolean_pop integer_eq exec_if (boolean_or) (exec_shove (boolean_empty boolean_dup_items exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_stackdepth exec_stackdepth integer_rot boolean_xor boolean_invert_first_then_and boolean_dup_times boolean_stackdepth exec_stackdepth integer_rot boolean_xor boolean_yank boolean_not exec_do*range () exec_if (integer_dup_times boolean_dup_times) (integer_yank exec_when (integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (boolean_frominteger boolean_dup_items boolean_xor integer_stackdepth exec_y () exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) integer_dup integer_mod) (boolean_yankdup boolean_yank integer_pop) (boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc) boolean_flush) (integer_min boolean_xor boolean_shove exec_empty) (exec_s (integer_swap integer_dec) (exec_while (integer_dec exec_while (boolean_eq) boolean_not integer_mod)) () integer_empty exec_flush)) integer_pop boolean_yankdup boolean_yank integer_pop) boolean_dup_times boolean_dup_times) integer_dup_times boolean_invert_first_then_and exec_k_when_autoconstructing (exec_eq integer_inc boolean_flush) (tagged_339 exec_flush) boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times integer_inc boolean_invert_first_then_and integer_dup integer_mult exec_eq exec_dup (boolean_flush) integer_min exec_flush exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq)) ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 231
Size: 279
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 8.000003090592E9
Median total errors in population: 2421
Error averages by case: (8.0000200266E7 8.0000063376E7 8.0000069522E7 8.0000024498E7 8.0000024186E7 8.0000026104E7 8.0000034942E7 8.0000026576E7 8.0000022826E7 8.000002299E7 8.0000026576E7 8.0000023668E7 8.0000036404E7 8.0000023442E7 8.0000060782E7 8.0000022868E7 8.0000030378E7 8.000002485E7 8.0000069836E7 8.000002672E7 8.0000022832E7 8.000002405E7 8.000002485E7 8.0000034242E7 8.0000032234E7 8.0000022942E7 8.000002541E7 8.000002582E7 8.0000030578E7 8.000002379E7 8.0000023258E7 8.0000023044E7 8.000002582E7 8.0000024186E7 8.0000023044E7 8.0000034242E7 8.0000023442E7 8.0000027594E7 8.0000032886E7 8.0000034942E7 8.0000078404E7 8.0000069836E7 8.0000022844E7 8.0000031594E7 8.000002877E7 8.000002877E7 8.000002485E7 8.0000053992E7 8.000002877E7 8.0000024498E7 8.0000024186E7 8.0000023044E7 8.0000022942E7 8.000002299E7 8.000002405E7 8.0000024346E7 8.0000024346E7 8.000002877E7 8.0000022826E7 8.000002672E7 8.000002541E7 8.000002379E7 8.0000023668E7 8.0000027078E7 8.0000022844E7 8.0000028228E7 8.0000025662E7 8.0000027706E7 8.000002405E7 8.0000024498E7 8.0000022844E7 8.0000022832E7 8.000002582E7 8.0000023108E7 8.0000023044E7 8.000002379E7 8.000002468E7 8.0000031594E7 8.000002299E7 8.000002672E7 8.0000022868E7 8.0000023576E7 8.000002379E7 8.0000027204E7 8.0000029956E7 8.0000026104E7 8.0000023258E7 8.0000026258E7 8.0000023194E7 8.0000023108E7 8.000002468E7 8.0000030378E7 8.0000027594E7 8.0000026104E7 8.0000024346E7 8.0000065118E7 8.0000024186E7 8.0000022844E7 8.0000023442E7 8.0000035664E7)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 171.887
Average program size in population (points): 207.206
Average percent parens in population: 0.170
Minimum age in population: 17.6953125
Maximum age in population: 22.394287109375
Average age in population: 20.40378942871094
Median age in population: 20.4853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.142
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 284863900
--- Timings ---
Current time: 1559324390846 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- bowling problem report - generation 15
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty exec_flush boolean_shove integer_mult integer_yank integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) exec_eq boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) boolean_swap exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and integer_eq boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_yankdup) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_yank integer_rot exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (integer_mult tagged_188 boolean_and boolean_pop) () (exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank boolean_dup_items boolean_and)) exec_noop exec_yank integer_mult exec_eq integer_gte boolean_flush) integer_min integer_inc boolean_flush) (integer_min boolean_xor integer_swap exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not exec_s_when_autoconstructing (integer_swap integer_lte) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) (integer_pop integer_lt) (exec_dup (integer_lt) integer_mod integer_gt boolean_pop integer_min boolean_xor exec_yankdup exec_empty) exec_s_when_autoconstructing (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush) () integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_eq exec_empty boolean_dup_items boolean_rot exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Lexicase best errors: [236 84 91 30 29 34 49 35 20 23 35 27 51 26 81 18 42 31 54 4 19 11 31 48 45 17 7 6 3 12 25 16 6 29 16 48 26 37 46 49 64 54 21 44 0 0 31 73 0 30 29 16 17 23 11 10 10 0 20 4 7 12 27 36 21 1 33 2 11 30 21 19 6 24 16 12 9 44 23 4 18 13 12 3 2 34 25 5 15 24 9 42 37 34 10 86 29 21 26 50]
Lexicase best number of elite cases: 4
Lexicase best total error: 2807
Lexicase best mean error: 28.07
Lexicase best size: 223
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty exec_flush boolean_shove integer_mult integer_yank integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) exec_eq boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) boolean_swap exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and integer_eq boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_yankdup) exec_y_when_autoconstructing (exec_s (exec_rot (exec_s_when_autoconstructing (boolean_shove) (exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_yank integer_rot exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) exec_y_when_autoconstructing (exec_s (integer_mult tagged_188 boolean_and boolean_pop) () (exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank boolean_dup_items boolean_and)) exec_noop exec_yank integer_mult exec_eq integer_gte boolean_flush) integer_min integer_inc boolean_flush) (integer_min boolean_xor integer_swap exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not exec_s_when_autoconstructing (integer_swap integer_lte) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush)) (integer_pop integer_lt) (exec_dup (integer_lt) integer_mod integer_gt boolean_pop integer_min boolean_xor exec_yankdup exec_empty) exec_s_when_autoconstructing (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty) (exec_flush) () integer_pop integer_lt) exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_eq exec_empty boolean_dup_items boolean_rot exec_flush boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Zero cases best errors: [236 84 91 30 29 34 49 35 20 23 35 27 51 26 81 18 42 31 54 4 19 11 31 48 45 17 7 6 3 12 25 16 6 29 16 48 26 37 46 49 64 54 21 44 0 0 31 73 0 30 29 16 17 23 11 10 10 0 20 4 7 12 27 36 21 1 33 2 11 30 21 19 6 24 16 12 9 44 23 4 18 13 12 3 2 34 25 5 15 24 9 42 37 34 10 86 29 21 26 50]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2807
Zero cases best mean error: 28.07
Zero cases best size: 223
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 4 18 29 8 7 9 18 16 9 15 6 19 3 22 12 10 10 21 14 23 10 7 7 17 17 17 9 28 16 13 17 29 13 7 19 18 11 7 34 10 26 11 12 12 10 2 12 18 29 13 17 16 23 19 19 12 18 21 17 28 15 13 26 8 20 16 23 18 26 14 17 20 13 28 11 11 16 21 22 12 28 6 5 8 16 10 13 20 11 12 18 8 19 1 29 26 19 7)
Population mean number of elite cases: 1.52
Count of perfect (error zero) individuals by case: (1 1 4 18 29 8 7 9 18 16 9 15 6 19 3 22 12 10 10 21 14 23 10 7 7 17 17 17 9 28 16 13 17 29 13 7 19 18 11 7 34 10 26 11 12 12 10 2 12 18 29 13 17 16 23 19 19 12 18 21 17 28 15 13 26 8 20 16 23 18 26 14 17 20 13 28 11 11 16 21 22 12 28 6 5 8 16 10 13 20 11 12 18 8 19 0 29 26 19 7)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop})
Best program: (integer_lte integer_dup_times integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq exec_pop (integer_dup tagged_753 boolean_swap in1 exec_rot (boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) (integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank integer_empty) tag_boolean_599 boolean_and)) (integer_mult boolean_stackdepth exec_stackdepth integer_rot boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) integer_add boolean_not integer_swap) exec_if (integer_empty boolean_xor boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_shove boolean_or integer_shove exec_y () exec_noop exec_yank in1 tagged_339 exec_do*range () boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_flush boolean_dup_times boolean_invert_first_then_and integer_gte integer_mult exec_eq integer_inc boolean_flush exec_rot (boolean_xor exec_yankdup exec_empty) (integer_stackdepth exec_do*count () boolean_yankdup boolean_yank exec_do*count () boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq exec_empty in1 boolean_frominteger exec_flush) boolean_not integer_mod integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_empty tagged_700 integer_fromboolean boolean_swap exec_when (boolean_and) exec_k () (integer_yankdup integer_dup) boolean_shove exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 boolean_xor boolean_swap boolean_dup integer_rot exec_yankdup integer_pop)
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 162
Size: 192
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 6.000003066608E9
Median total errors in population: 2353
Error averages by case: (6.0000204408E7 6.0000063998E7 6.000007031E7 6.000002415E7 6.0000023806E7 6.0000025814E7 6.0000034818E7 6.0000026292E7 6.0000022374E7 6.0000022548E7 6.0000026292E7 6.0000023258E7 6.0000036268E7 6.0000023026E7 6.0000061314E7 6.0000022442E7 6.0000030172E7 6.000002453E7 6.0000069218E7 6.0000026456E7 6.0000022394E7 6.000002367E7 6.000002453E7 6.0000034114E7 6.000003207E7 6.0000022534E7 6.0000025108E7 6.0000025528E7 6.000003047E7 6.0000023398E7 6.0000022832E7 6.000002266E7 6.0000025528E7 6.0000023806E7 6.000002266E7 6.0000034114E7 6.0000023026E7 6.000002731E7 6.0000032736E7 6.0000034818E7 6.0000077638E7 6.0000069218E7 6.000002239E7 6.0000031418E7 6.0000028636E7 6.0000028636E7 6.000002453E7 6.0000054278E7 6.0000028636E7 6.000002415E7 6.0000023806E7 6.000002266E7 6.0000022534E7 6.0000022548E7 6.000002367E7 6.0000023988E7 6.0000023988E7 6.0000028636E7 6.0000022374E7 6.0000026456E7 6.0000025108E7 6.0000023398E7 6.0000023258E7 6.0000026788E7 6.000002239E7 6.000002806E7 6.0000025352E7 6.00000275E7 6.000002367E7 6.000002415E7 6.000002239E7 6.0000022394E7 6.0000025528E7 6.000002267E7 6.000002266E7 6.0000023398E7 6.0000024344E7 6.0000031418E7 6.0000022548E7 6.0000026456E7 6.0000022442E7 6.0000023182E7 6.0000023398E7 6.0000026972E7 6.0000029848E7 6.0000025814E7 6.0000022832E7 6.0000025982E7 6.0000022812E7 6.000002267E7 6.0000024344E7 6.0000030172E7 6.000002731E7 6.0000025814E7 6.0000023988E7 6.00000658E7 6.0000023806E7 6.000002239E7 6.0000023026E7 6.0000035536E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 168.77
Average program size in population (points): 202.878
Average percent parens in population: 0.167
Minimum age in population: 18.718994140625
Maximum age in population: 23.884521484375
Average age in population: 21.82022686767578
Median age in population: 21.9019775390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.141
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 302897300
--- Timings ---
Current time: 1559324407800 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- bowling problem report - generation 16
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush})
Lexicase best program: (integer_lte integer_dup_times integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_pop integer_swap boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_yankdup) boolean_empty boolean_eq exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop tag_boolean_599 boolean_and integer_mult boolean_stackdepth exec_stackdepth integer_rot boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) integer_add boolean_not integer_swap exec_if (integer_empty boolean_xor boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_shove boolean_or integer_shove exec_y () exec_noop exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times integer_gte boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_pop boolean_flush integer_min boolean_xor exec_yankdup boolean_flush boolean_yankdup boolean_yank integer_pop exec_s (integer_swap integer_dec) (exec_while (in1 tagged_339 exec_flush)) ())
Lexicase best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Lexicase best number of elite cases: 4
Lexicase best total error: 2031
Lexicase best mean error: 20.31
Lexicase best size: 124
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush})
Zero cases best program: (integer_lte integer_dup_times integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_pop integer_swap boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_yankdup) boolean_empty boolean_eq exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop tag_boolean_599 boolean_and integer_mult boolean_stackdepth exec_stackdepth integer_rot boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) integer_add boolean_not integer_swap exec_if (integer_empty boolean_xor boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_shove boolean_or integer_shove exec_y () exec_noop exec_yank in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times integer_gte boolean_invert_first_then_and integer_dup integer_mult exec_eq boolean_pop boolean_flush integer_min boolean_xor exec_yankdup boolean_flush boolean_yankdup boolean_yank integer_pop exec_s (integer_swap integer_dec) (exec_while (in1 tagged_339 exec_flush)) ())
Zero cases best errors: [224 72 79 18 17 22 37 23 8 11 23 15 39 14 69 6 30 19 66 8 7 1 19 36 33 5 5 6 15 0 13 4 6 17 4 36 14 25 34 37 76 66 9 32 12 12 19 61 12 18 17 4 5 11 1 2 2 12 8 8 5 0 15 24 9 11 21 10 1 18 9 7 6 12 4 0 3 32 11 8 6 1 0 9 14 22 13 7 3 12 3 30 25 22 2 74 17 9 14 38]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2031
Zero cases best mean error: 20.31
Zero cases best size: 124
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 1 1 15 22 19 12 12 12 18 12 9 6 16 1 13 9 12 4 10 15 20 12 10 10 13 11 22 11 16 20 24 22 22 24 10 16 11 16 12 25 4 25 10 23 23 12 2 23 15 22 24 13 18 20 16 16 23 12 10 11 16 9 11 25 11 18 3 20 15 25 15 22 14 24 16 11 10 18 10 13 18 16 10 13 19 20 14 6 14 11 9 11 19 16 2 22 25 16 8)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (4 1 1 15 22 19 12 12 12 18 12 9 6 16 0 13 9 12 4 10 15 20 12 10 10 13 11 22 11 16 20 24 22 22 24 10 16 11 16 12 25 4 25 10 23 23 12 2 23 15 22 24 13 18 20 16 16 23 12 10 11 16 9 11 25 11 18 3 20 15 25 15 22 14 24 16 11 10 18 10 13 18 16 10 13 19 20 14 6 14 11 9 11 19 16 0 22 25 16 8)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_690} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_700} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty integer_dup_times exec_stackdepth boolean_or integer_lte exec_flush boolean_dup) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop) integer_stackdepth integer_lte exec_eq exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_sub) exec_dup_times (integer_empty boolean_yankdup boolean_stackdepth integer_yank exec_when (tag_integer_690 exec_yank) integer_lt tagged_753 boolean_swap integer_empty boolean_yankdup boolean_stackdepth integer_empty) tag_boolean_599 integer_sub) (exec_empty exec_dup_items integer_shove) integer_flush boolean_dup_times) boolean_and boolean_flush boolean_or integer_mult tagged_188 boolean_and boolean_pop exec_dup_items boolean_xor integer_sub in1 integer_swap boolean_pop boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop boolean_pop exec_dup (integer_lt) exec_k () (exec_eq integer_dup boolean_shove boolean_dup integer_sub exec_yankdup integer_pop exec_when (tag_integer_634 exec_yank integer_min exec_s_when_autoconstructing () (exec_yankdup exec_empty) (boolean_stackdepth exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup integer_sub) exec_k (integer_swap integer_dec) (exec_while (boolean_eq boolean_not integer_mod)) integer_empty exec_k () () integer_pop integer_lt) exec_dup (integer_lt) integer_div exec_yankdup) boolean_dup exec_do*times () boolean_invert_second_then_and integer_gte integer_pop integer_lt exec_dup (integer_lt) boolean_dup_times integer_gt exec_empty integer_rot integer_yankdup tagged_700 boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop)
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 170
Size: 203
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 6.300003023125E9
Median total errors in population: 2421
Error averages by case: (6.3000201045E7 6.3000063133E7 6.3000069328E7 6.3000023535E7 6.3000023244E7 6.3000024999E7 6.300003386E7 6.3000025454E7 6.3000022081E7 6.3000022168E7 6.3000025454E7 6.3000022776E7 6.3000035366E7 6.3000022573E7 6.3000060504E7 6.3000022189E7 6.3000029221E7 6.3000023856E7 6.3000071379E7 6.3000026217E7 6.300002212E7 6.3000023468E7 6.3000023856E7 6.3000033139E7 6.3000031088E7 6.3000022284E7 6.3000024874E7 6.3000025283E7 6.3000030138E7 6.3000023197E7 6.3000022402E7 6.3000022405E7 6.3000025283E7 6.3000023244E7 6.3000022405E7 6.3000033139E7 6.3000022573E7 6.3000026434E7 6.3000031747E7 6.300003386E7 6.3000080069E7 6.3000071379E7 6.3000022066E7 6.3000030449E7 6.3000028315E7 6.3000028315E7 6.3000023856E7 6.3000053538E7 6.3000028315E7 6.3000023535E7 6.3000023244E7 6.3000022405E7 6.3000022284E7 6.3000022168E7 6.3000023468E7 6.3000023779E7 6.3000023779E7 6.3000028315E7 6.3000022081E7 6.3000026217E7 6.3000024874E7 6.3000023197E7 6.3000022776E7 6.3000025933E7 6.3000022066E7 6.3000027766E7 6.3000024582E7 6.3000027239E7 6.3000023468E7 6.3000023535E7 6.3000022066E7 6.300002212E7 6.3000025283E7 6.3000022271E7 6.3000022405E7 6.3000023197E7 6.3000024122E7 6.3000030449E7 6.3000022168E7 6.3000026217E7 6.3000022189E7 6.3000022958E7 6.3000023197E7 6.3000026718E7 6.3000029511E7 6.3000024999E7 6.3000022402E7 6.3000025736E7 6.3000022574E7 6.3000022271E7 6.3000024122E7 6.3000029221E7 6.3000026434E7 6.3000024999E7 6.3000023779E7 6.3000064895E7 6.3000023244E7 6.3000022066E7 6.3000022573E7 6.3000034605E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 167.483
Average program size in population (points): 201.057
Average percent parens in population: 0.165
Minimum age in population: 19.90625
Maximum age in population: 25.12716674804688
Average age in population: 23.25963525390625
Median age in population: 23.34159851074219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.141
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 318574800
--- Timings ---
Current time: 1559324423287 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- bowling problem report - generation 17
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_872} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) integer_swap boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty boolean_yankdup boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (boolean_shove) integer_mult integer_lte integer_dup_times exec_k () () integer_yank exec_when (tag_integer_634 exec_yank)) integer_lt boolean_yank boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth) (integer_empty) tag_boolean_599 integer_max integer_lte integer_dup_times exec_k () (integer_dup_items exec_when (tag_integer_634 exec_yank) boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (exec_y_when_autoconstructing (exec_yank) integer_lt boolean_yank) boolean_yank boolean_shove exec_dup_times (integer_rot exec_eq boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop) boolean_invert_second_then_and integer_rot boolean_dup_times boolean_dup integer_rot exec_yankdup integer_mult exec_eq exec_k (boolean_flush) (integer_min integer_dup tagged_872 boolean_swap in1 boolean_empty exec_yankdup integer_pop) boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty integer_lt integer_swap integer_dec exec_while (boolean_eq) boolean_not integer_mod integer_empty integer_stackdepth integer_pop integer_lt exec_dup (boolean_xor) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700)
Lexicase best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Lexicase best number of elite cases: 4
Lexicase best total error: 1833
Lexicase best mean error: 18.33
Lexicase best size: 176
Percent parens: 0.153
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_872} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) integer_swap boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty boolean_yankdup boolean_shove integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (boolean_shove) integer_mult integer_lte integer_dup_times exec_k () () integer_yank exec_when (tag_integer_634 exec_yank)) integer_lt boolean_yank boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_yankdup boolean_stackdepth) (integer_empty) tag_boolean_599 integer_max integer_lte integer_dup_times exec_k () (integer_dup_items exec_when (tag_integer_634 exec_yank) boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (exec_y_when_autoconstructing (exec_yank) integer_lt boolean_yank) boolean_yank boolean_shove exec_dup_times (integer_rot exec_eq boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop) boolean_invert_second_then_and integer_rot boolean_dup_times boolean_dup integer_rot exec_yankdup integer_mult exec_eq exec_k (boolean_flush) (integer_min integer_dup tagged_872 boolean_swap in1 boolean_empty exec_yankdup integer_pop) boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty integer_lt integer_swap integer_dec exec_while (boolean_eq) boolean_not integer_mod integer_empty integer_stackdepth integer_pop integer_lt exec_dup (boolean_xor) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700)
Zero cases best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1833
Zero cases best mean error: 18.33
Zero cases best size: 176
Percent parens: 0.153
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 1 21 11 20 8 17 21 26 17 18 8 16 3 16 13 22 10 23 17 22 22 10 9 18 14 9 10 17 7 29 9 11 29 10 16 18 3 8 24 10 21 11 28 28 22 2 28 21 11 29 18 26 22 14 14 28 21 23 14 17 18 9 21 11 16 8 22 21 21 17 9 21 29 17 14 11 26 23 16 12 17 10 13 20 7 14 9 21 14 13 18 20 14 2 11 21 16 5)
Population mean number of elite cases: 1.58
Count of perfect (error zero) individuals by case: (2 3 0 21 11 20 8 17 21 26 17 18 8 16 0 16 13 22 10 23 17 22 22 10 9 18 14 9 10 17 7 29 9 11 29 10 16 18 3 8 24 10 21 11 28 28 22 2 28 21 11 29 18 26 22 14 14 28 21 23 14 17 18 9 21 11 16 8 22 21 21 17 9 21 29 17 14 11 26 23 16 12 17 10 13 20 7 14 9 21 14 13 18 20 14 2 11 21 16 5)
Population mean number of perfect (error zero) cases: 1.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_650} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_599} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 2, :instruction in1} {:close 0, :instruction tagged_97} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 2, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction boolean_dup})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_stackdepth integer_rot boolean_xor exec_flush) (boolean_dup) boolean_eq boolean_yank integer_dup tagged_650 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) boolean_flush integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 boolean_invert_second_then_and) integer_lt boolean_yank) boolean_yank boolean_not integer_swap exec_if (exec_empty integer_div boolean_or integer_mult tagged_188 boolean_and boolean_pop) (exec_dup_items integer_lt boolean_yank boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_shove) (tag_boolean_599 boolean_and) boolean_and boolean_flush boolean_or boolean_yankdup boolean_stackdepth integer_empty integer_rot boolean_and integer_empty boolean_or boolean_and exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_or boolean_eq exec_y () exec_noop exec_yank in1 tagged_339 in1 tagged_339 exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times exec_dup_times (integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty) exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) boolean_xor boolean_empty integer_lt exec_dup (exec_swap () (integer_mod integer_gt exec_empty integer_rot integer_empty tagged_700 integer_fromboolean exec_empty integer_rot boolean_empty tagged_700 boolean_dup)))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 150
Size: 173
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 5.300002941953E9
Median total errors in population: 2375
Error averages by case: (5.3000205996E7 5.300006356E7 5.3000070061E7 5.3000022852E7 5.3000022541E7 5.3000024464E7 5.3000033923E7 5.3000024951E7 5.3000020944E7 5.3000021167E7 5.3000024951E7 5.3000021973E7 5.3000035447E7 5.300002173E7 5.3000060847E7 5.3000020984E7 5.3000029012E7 5.3000023205E7 5.3000069624E7 5.3000024856E7 5.3000020947E7 5.3000022193E7 5.3000023205E7 5.3000033182E7 5.3000031033E7 5.3000021053E7 5.3000023571E7 5.3000023978E7 5.3000028847E7 5.3000021932E7 5.3000021519E7 5.3000021158E7 5.3000023978E7 5.3000022541E7 5.3000021158E7 5.3000033182E7 5.300002173E7 5.3000026011E7 5.3000031744E7 5.3000033923E7 5.3000078324E7 5.3000069624E7 5.3000020983E7 5.300003034E7 5.3000026966E7 5.3000026966E7 5.3000023205E7 5.3000053735E7 5.3000026966E7 5.3000022852E7 5.3000022541E7 5.3000021158E7 5.3000021053E7 5.3000021167E7 5.3000022193E7 5.3000022498E7 5.3000022498E7 5.3000026966E7 5.3000020944E7 5.3000024856E7 5.3000023571E7 5.3000021932E7 5.3000021973E7 5.3000025472E7 5.3000020983E7 5.3000026409E7 5.3000024017E7 5.3000025874E7 5.3000022193E7 5.3000022852E7 5.3000020983E7 5.3000020947E7 5.3000023978E7 5.3000021322E7 5.3000021158E7 5.3000021932E7 5.3000022831E7 5.300003034E7 5.3000021167E7 5.3000024856E7 5.3000020984E7 5.3000021705E7 5.3000021932E7 5.3000025355E7 5.30000282E7 5.3000024464E7 5.3000021519E7 5.3000024403E7 5.3000021321E7 5.3000021322E7 5.3000022831E7 5.3000029012E7 5.3000026011E7 5.3000024464E7 5.3000022498E7 5.30000654E7 5.3000022541E7 5.3000020983E7 5.300002173E7 5.300003468E7)
Error minima by case: (0 0 2 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 165.552
Average program size in population (points): 198.463
Average percent parens in population: 0.164
Minimum age in population: 21.09375
Maximum age in population: 26.69281005859375
Average age in population: 24.74453146362305
Median age in population: 24.83509826660156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.128
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 332054000
--- Timings ---
Current time: 1559324438097 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- bowling problem report - generation 18
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod exec_noop boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when () boolean_empty boolean_eq exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup exec_stackdepth integer_rot boolean_xor boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 exec_empty integer_min exec_empty integer_inc boolean_and integer_mult integer_min exec_empty integer_inc boolean_xor boolean_pop in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_y (boolean_and exec_dup (exec_do*times () integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_swap integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (integer_swap exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank exec_do*range (exec_y_when_autoconstructing ())) () ())
Lexicase best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Lexicase best number of elite cases: 4
Lexicase best total error: 1833
Lexicase best mean error: 18.33
Lexicase best size: 174
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod exec_noop boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when () boolean_empty boolean_eq exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_eq boolean_yank integer_dup exec_stackdepth integer_rot boolean_xor boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 exec_empty integer_min exec_empty integer_inc boolean_and integer_mult integer_min exec_empty integer_inc boolean_xor boolean_pop in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) () integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_y (boolean_and exec_dup (exec_do*times () integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_k () (exec_eq integer_dup) boolean_shove boolean_dup integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_empty) boolean_swap integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (integer_swap exec_flush exec_eq integer_pop) () integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult exec_rot (integer_yank exec_do*range (exec_y_when_autoconstructing ())) () ())
Zero cases best errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1833
Zero cases best mean error: 18.33
Zero cases best size: 174
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 1 12 21 17 6 12 15 14 12 13 6 24 1 16 15 10 7 19 18 19 10 8 9 20 14 21 6 21 11 22 21 21 22 8 24 11 8 6 21 7 22 13 16 16 10 5 16 12 21 22 20 14 19 23 23 16 15 19 14 21 13 6 22 12 4 12 19 12 22 18 21 10 22 21 8 13 14 19 16 15 21 15 13 17 11 14 19 10 8 15 11 17 23 2 21 22 24 5)
Population mean number of elite cases: 1.46
Count of perfect (error zero) individuals by case: (1 3 1 12 21 17 6 12 15 14 12 13 6 24 1 16 15 10 7 19 18 19 10 8 9 20 14 21 6 21 11 22 21 21 22 8 24 11 8 6 21 7 22 13 16 16 10 5 16 12 21 22 20 14 19 23 23 16 15 19 14 21 13 6 22 12 4 12 19 12 22 18 21 10 22 21 8 13 14 19 16 15 21 15 13 17 11 14 19 10 8 15 11 17 23 2 21 22 24 5)
Population mean number of perfect (error zero) cases: 1.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_662} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_690} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_exec_587} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_303} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_lte exec_do*while () integer_gte boolean_pop boolean_dup_times exec_dup_times (integer_mod exec_dup_times (integer_mod integer_shove exec_stackdepth boolean_invert_first_then_and) boolean_flush boolean_rot) integer_gte boolean_pop integer_eq tag_exec_662 (boolean_or) exec_when (boolean_empty boolean_rot exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank boolean_invert_first_then_and tagged_753 boolean_swap boolean_yank boolean_yank integer_yankdup integer_swap exec_if (integer_empty boolean_yankdup integer_mod integer_empty) (tag_boolean_599 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc integer_yank exec_when (tag_integer_690 exec_yank) exec_pop (tagged_753 boolean_swap in1 boolean_yankdup boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) in1 integer_lte integer_dup_times boolean_rot) integer_yank exec_when (exec_empty exec_yank) integer_lt boolean_yank boolean_yank boolean_not integer_swap exec_if (integer_empty boolean_flush boolean_or integer_mult tagged_188 tagged_97 integer_mod) (boolean_yankdup integer_rot integer_pop) boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup integer_mult integer_add exec_y () exec_noop exec_yankdup in1 tagged_339 exec_flush boolean_xor exec_flush boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times boolean_invert_first_then_and integer_dup exec_pop (exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (exec_while (integer_lt) integer_mod integer_gt exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean integer_sub boolean_pop boolean_invert_second_then_and integer_rot integer_stackdepth boolean_empty) (boolean_invert_second_then_and integer_empty) boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop) () integer_empty exec_do*range (exec_pop (exec_yank integer_sub) tag_exec_587 (boolean_dup_times boolean_empty boolean_invert_second_then_and integer_empty) boolean_invert_first_then_and) exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_pop integer_empty integer_mult exec_pop (exec_yank integer_sub) integer_dec boolean_dup_times integer_mult) () exec_rot () (integer_yank exec_do*times (boolean_dup_items) boolean_rot) (exec_flush) boolean_empty exec_y () integer_max tag_boolean_303 boolean_dup_items exec_do*range (exec_y_when_autoconstructing ()))
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 186
Size: 220
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 5.500003487283E9
Median total errors in population: 2461
Error averages by case: (5.5000209407E7 5.5000068007E7 5.500007438E7 5.5000028765E7 5.5000028412E7 5.5000030381E7 5.5000039202E7 5.500003084E7 5.5000026589E7 5.5000026928E7 5.500003084E7 5.5000027804E7 5.5000040658E7 5.5000027533E7 5.5000065326E7 5.5000026543E7 5.5000034557E7 5.5000029142E7 5.5000074871E7 5.5000030083E7 5.5000026548E7 5.5000027506E7 5.5000029142E7 5.5000038491E7 5.5000036438E7 5.500002657E7 5.500002881E7 5.5000029197E7 5.5000034102E7 5.5000027265E7 5.500002731E7 5.5000026637E7 5.5000029197E7 5.5000028412E7 5.5000026637E7 5.5000038491E7 5.5000027533E7 5.5000031818E7 5.5000037109E7 5.5000039202E7 5.5000083587E7 5.5000074871E7 5.500002666E7 5.5000035785E7 5.5000032225E7 5.5000032225E7 5.5000029142E7 5.5000058352E7 5.5000032225E7 5.5000028765E7 5.5000028412E7 5.5000026637E7 5.500002657E7 5.5000026928E7 5.5000027506E7 5.5000027785E7 5.5000027785E7 5.5000032225E7 5.5000026589E7 5.5000030083E7 5.500002881E7 5.5000027265E7 5.5000027804E7 5.5000031323E7 5.500002666E7 5.5000031652E7 5.5000029956E7 5.5000031103E7 5.5000027506E7 5.5000028765E7 5.500002666E7 5.5000026548E7 5.5000029197E7 5.5000027109E7 5.5000026637E7 5.5000027265E7 5.500002811E7 5.5000035785E7 5.5000026928E7 5.5000030083E7 5.5000026543E7 5.5000027066E7 5.5000027265E7 5.5000030578E7 5.5000033453E7 5.5000030381E7 5.500002731E7 5.5000029626E7 5.5000026748E7 5.5000027109E7 5.500002811E7 5.5000034557E7 5.5000031818E7 5.5000030381E7 5.5000027785E7 5.5000069817E7 5.5000028412E7 5.500002666E7 5.5000027533E7 5.5000039925E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 165.086
Average program size in population (points): 197.746
Average percent parens in population: 0.164
Minimum age in population: 22.458984375
Maximum age in population: 28.128173828125
Average age in population: 26.10731548309326
Median age in population: 26.22740936279297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.991
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.991
Total error diversity:				 0.143
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 346092000
--- Timings ---
Current time: 1559324452462 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- bowling problem report - generation 19
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_boolean_512} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_boolean_599} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_exec_664} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_stackdepth integer_dup_items integer_mult exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) exec_stackdepth) boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_do*range (boolean_rot) integer_gte boolean_pop tag_boolean_512 boolean_and) () exec_empty exec_dup_items integer_shove integer_flush integer_mod) boolean_and boolean_flush boolean_or tag_boolean_599 integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt integer_lt boolean_yank) integer_mod boolean_not integer_swap exec_if (integer_empty boolean_yankdup exec_noop boolean_and) (exec_empty boolean_shove) integer_mult integer_lte integer_pop boolean_invert_second_then_and integer_min exec_empty integer_fromboolean boolean_shove integer_mult integer_lte exec_while (exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) exec_yank) integer_lt boolean_yank boolean_yank boolean_not boolean_not exec_if (integer_empty boolean_yank) (boolean_yank exec_noop integer_swap) exec_if (integer_empty boolean_yankdup exec_eq exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_swap integer_fromboolean integer_dup integer_mult exec_eq integer_inc exec_empty tag_exec_664 (exec_s (exec_yankdup boolean_and integer_yankdup) (exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) integer_shove exec_s () (exec_rot (exec_dup (boolean_shove exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_shove () exec_noop exec_eq integer_inc exec_empty) integer_min boolean_invert_first_then_and exec_yankdup exec_empty) integer_fromboolean boolean_swap) (exec_dup_times (boolean_and) exec_k () (integer_yankdup integer_dup) boolean_shove boolean_dup) (integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot exec_eq integer_inc boolean_flush) ()) ()))
Lexicase best errors: [236 84 91 30 29 34 49 35 20 23 35 27 51 26 81 18 42 31 54 4 19 11 31 48 45 17 7 6 3 12 25 16 6 29 16 48 26 37 46 49 64 54 21 44 0 0 31 73 0 30 29 16 17 23 11 10 10 0 20 4 7 12 27 36 21 1 33 2 11 30 21 19 6 24 16 12 9 44 23 4 18 13 12 3 2 34 25 5 15 24 9 42 37 34 10 86 29 21 26 50]
Lexicase best number of elite cases: 4
Lexicase best total error: 2807
Lexicase best mean error: 28.07
Lexicase best size: 216
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_boolean_512} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_boolean_599} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_exec_664} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_stackdepth integer_dup_items integer_mult exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) exec_stackdepth) boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove boolean_dup exec_stackdepth integer_dup_items boolean_invert_first_then_and) exec_do*range (boolean_rot) exec_do*range (boolean_rot) integer_gte boolean_pop tag_boolean_512 boolean_and) () exec_empty exec_dup_items integer_shove integer_flush integer_mod) boolean_and boolean_flush boolean_or tag_boolean_599 integer_mult integer_lte integer_dup_times exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt integer_lt boolean_yank) integer_mod boolean_not integer_swap exec_if (integer_empty boolean_yankdup exec_noop boolean_and) (exec_empty boolean_shove) integer_mult integer_lte integer_pop boolean_invert_second_then_and integer_min exec_empty integer_fromboolean boolean_shove integer_mult integer_lte exec_while (exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) exec_yank) integer_lt boolean_yank boolean_yank boolean_not boolean_not exec_if (integer_empty boolean_yank) (boolean_yank exec_noop integer_swap) exec_if (integer_empty boolean_yankdup exec_eq exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_swap integer_fromboolean integer_dup integer_mult exec_eq integer_inc exec_empty tag_exec_664 (exec_s (exec_yankdup boolean_and integer_yankdup) (exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) integer_shove exec_s () (exec_rot (exec_dup (boolean_shove exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_shove () exec_noop exec_eq integer_inc exec_empty) integer_min boolean_invert_first_then_and exec_yankdup exec_empty) integer_fromboolean boolean_swap) (exec_dup_times (boolean_and) exec_k () (integer_yankdup integer_dup) boolean_shove boolean_dup) (integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot exec_eq integer_inc boolean_flush) ()) ()))
Zero cases best errors: [236 84 91 30 29 34 49 35 20 23 35 27 51 26 81 18 42 31 54 4 19 11 31 48 45 17 7 6 3 12 25 16 6 29 16 48 26 37 46 49 64 54 21 44 0 0 31 73 0 30 29 16 17 23 11 10 10 0 20 4 7 12 27 36 21 1 33 2 11 30 21 19 6 24 16 12 9 44 23 4 18 13 12 3 2 34 25 5 15 24 9 42 37 34 10 86 29 21 26 50]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2807
Zero cases best mean error: 28.07
Zero cases best size: 216
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 3 14 18 16 11 18 13 20 18 13 5 15 2 14 9 23 7 14 15 22 23 6 7 13 19 22 13 28 10 27 22 18 27 6 15 17 10 11 26 7 20 9 21 21 23 6 21 14 18 27 13 20 22 19 19 21 13 14 19 28 13 7 20 7 11 10 22 14 20 15 22 18 27 28 19 9 20 14 14 7 28 9 11 16 10 10 9 18 19 9 17 16 19 2 18 20 15 4)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (3 4 3 14 18 16 11 18 13 20 18 13 5 15 2 14 9 23 7 14 15 22 23 6 7 13 19 22 13 28 10 27 22 18 27 6 15 17 10 11 26 7 20 9 21 21 23 6 21 14 18 27 13 20 22 19 19 21 13 14 19 28 13 7 20 7 11 10 22 14 20 15 22 18 27 28 19 9 20 14 14 7 28 9 11 16 10 10 9 18 19 9 17 16 19 2 18 20 15 4)
Population mean number of perfect (error zero) cases: 1.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_749} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_670} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_flush})
Best program: (integer_lte boolean_pop integer_swap exec_noop tag_integer_749 exec_do*range (boolean_pop integer_lte integer_lte boolean_pop integer_swap exec_noop tag_integer_670 exec_do*range (exec_k (exec_dup_times (exec_yankdup integer_shove integer_eq exec_if (boolean_not) (exec_when (boolean_empty boolean_empty exec_stackdepth exec_s_when_autoconstructing (boolean_xor exec_flush) (boolean_dup) (integer_swap boolean_yank integer_dup tagged_753 integer_stackdepth in1 integer_pop boolean_invert_second_then_and integer_min boolean_invert_second_then_and integer_min exec_empty in1 boolean_or) boolean_yank boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) boolean_frominteger boolean_yank integer_dup exec_empty exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_eq boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush) (integer_min in1 boolean_yankdup boolean_yank integer_pop) boolean_dup_times boolean_dup_times) boolean_eq) boolean_not integer_mod integer_empty exec_flush integer_pop integer_lt exec_dup (integer_lt) boolean_and integer_gt boolean_eq integer_rot boolean_empty tagged_700 integer_fromboolean boolean_swap exec_dup_times (boolean_and exec_noop exec_yank in1 tagged_339 boolean_shove) boolean_xor in1 tagged_97 integer_mod boolean_yankdup boolean_yank boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 exec_k_when_autoconstructing () () exec_empty exec_dup_items integer_shove exec_shove (boolean_dup_times integer_mult exec_eq integer_inc boolean_flush) integer_min boolean_xor exec_yankdup exec_empty exec_s (integer_swap integer_dec) (in1) (tagged_97 integer_mod) boolean_yankdup boolean_yank boolean_pop exec_shove (boolean_dup_times) boolean_invert_first_then_and integer_dup integer_mult exec_eq integer_inc boolean_flush)
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 138
Size: 159
Percent parens: 0.132
--- Population Statistics ---
Average total errors in population: 6.100002969705E9
Median total errors in population: 2375
Error averages by case: (6.100020335E7 6.100006291E7 6.1000069233E7 6.1000023426E7 6.1000023111E7 6.1000024994E7 6.1000033991E7 6.1000025455E7 6.1000021518E7 6.1000021777E7 6.1000025455E7 6.1000022567E7 6.1000035457E7 6.1000022328E7 6.1000060255E7 6.1000021494E7 6.1000029332E7 6.1000023769E7 6.1000069746E7 6.100002503E7 6.1000021491E7 6.1000022383E7 6.1000023769E7 6.1000033284E7 6.1000031239E7 6.1000021525E7 6.1000023689E7 6.10000241E7 6.1000028999E7 6.1000022154E7 6.1000022119E7 6.1000021582E7 6.10000241E7 6.1000023111E7 6.1000021582E7 6.1000033284E7 6.1000022328E7 6.1000026463E7 6.1000031904E7 6.1000033991E7 6.1000078398E7 6.1000069746E7 6.1000021571E7 6.1000030588E7 6.100002715E7 6.100002715E7 6.1000023769E7 6.1000053265E7 6.100002715E7 6.1000023426E7 6.1000023111E7 6.1000021582E7 6.1000021525E7 6.1000021777E7 6.1000022383E7 6.1000022656E7 6.1000022656E7 6.100002715E7 6.1000021518E7 6.100002503E7 6.1000023689E7 6.1000022154E7 6.1000022567E7 6.1000025952E7 6.1000021571E7 6.1000026595E7 6.1000024565E7 6.1000026054E7 6.1000022383E7 6.1000023426E7 6.1000021571E7 6.1000021491E7 6.10000241E7 6.100002193E7 6.1000021582E7 6.1000022154E7 6.1000022967E7 6.1000030588E7 6.1000021777E7 6.100002503E7 6.1000021494E7 6.1000021981E7 6.1000022154E7 6.1000025533E7 6.1000028362E7 6.1000024994E7 6.1000022119E7 6.1000024555E7 6.1000021693E7 6.100002193E7 6.1000022967E7 6.1000029332E7 6.1000026463E7 6.1000024994E7 6.1000022656E7 6.1000064706E7 6.1000023111E7 6.1000021571E7 6.1000022328E7 6.100003472E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 163.041
Average program size in population (points): 194.892
Average percent parens in population: 0.162
Minimum age in population: 23.458984375
Maximum age in population: 29.73395156860352
Average age in population: 27.53909505462646
Median age in population: 27.6243896484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.133
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 360648500
--- Timings ---
Current time: 1559324467564 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- bowling problem report - generation 20
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_515} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_lte boolean_pop integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if () (exec_shove () exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) exec_k (boolean_yank integer_dup) (in1 integer_pop boolean_invert_second_then_and integer_min boolean_flush integer_fromboolean) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and exec_when (tag_integer_634 exec_yank) exec_if (boolean_yank) (exec_eq boolean_not integer_swap) exec_if (integer_empty tag_integer_634 exec_yank) (exec_if (boolean_yank) (exec_eq) boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) boolean_swap exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and integer_eq boolean_or integer_mult tagged_188 exec_s (boolean_pop) (exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_shove) exec_y_when_autoconstructing (exec_s (exec_flush) (boolean_invert_second_then_and in1 tagged_97 integer_mod) (boolean_yankdup boolean_yank exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) tagged_97 boolean_yank integer_pop) boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq exec_while (boolean_flush) tagged_515 integer_mult integer_pop) boolean_dup_times boolean_dup_times boolean_invert_first_then_and boolean_not exec_while (boolean_eq) boolean_not integer_mod integer_empty boolean_pop integer_pop integer_rot exec_dup (boolean_eq) boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean exec_empty integer_rot boolean_empty tagged_700 boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times)
Lexicase best errors: [207 55 62 1 0 5 20 6 9 6 6 2 22 3 52 11 13 2 83 25 10 18 2 19 16 12 22 23 32 17 4 13 23 0 13 19 3 8 17 20 93 83 8 15 29 29 2 44 29 1 0 13 12 6 18 19 19 29 9 25 22 17 2 7 8 28 4 27 18 1 8 10 23 5 13 17 20 15 6 25 11 16 17 26 31 5 4 24 14 5 20 13 8 5 19 57 0 8 3 21]
Lexicase best number of elite cases: 4
Lexicase best total error: 1947
Lexicase best mean error: 19.47
Lexicase best size: 196
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction tagged_515} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_700} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_lte boolean_pop integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_if () (exec_shove () exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min exec_empty integer_inc boolean_shove) exec_k (boolean_yank integer_dup) (in1 integer_pop boolean_invert_second_then_and integer_min boolean_flush integer_fromboolean) boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and exec_when (tag_integer_634 exec_yank) exec_if (boolean_yank) (exec_eq boolean_not integer_swap) exec_if (integer_empty tag_integer_634 exec_yank) (exec_if (boolean_yank) (exec_eq) boolean_not integer_swap) exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 boolean_and) boolean_swap exec_dup_items integer_shove integer_flush boolean_dup_times) boolean_and integer_eq boolean_or integer_mult tagged_188 exec_s (boolean_pop) (exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_shove) exec_y_when_autoconstructing (exec_s (exec_flush) (boolean_invert_second_then_and in1 tagged_97 integer_mod) (boolean_yankdup boolean_yank exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_noop exec_yank in1 tagged_339 exec_flush) boolean_xor in1) tagged_97 boolean_yank integer_pop) boolean_dup_times boolean_dup_times) (boolean_invert_first_then_and integer_dup integer_mult exec_eq exec_while (boolean_flush) tagged_515 integer_mult integer_pop) boolean_dup_times boolean_dup_times boolean_invert_first_then_and boolean_not exec_while (boolean_eq) boolean_not integer_mod integer_empty boolean_pop integer_pop integer_rot exec_dup (boolean_eq) boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_empty integer_rot boolean_empty tagged_700 integer_fromboolean exec_empty integer_rot boolean_empty tagged_700 boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times)
Zero cases best errors: [207 55 62 1 0 5 20 6 9 6 6 2 22 3 52 11 13 2 83 25 10 18 2 19 16 12 22 23 32 17 4 13 23 0 13 19 3 8 17 20 93 83 8 15 29 29 2 44 29 1 0 13 12 6 18 19 19 29 9 25 22 17 2 7 8 28 4 27 18 1 8 10 23 5 13 17 20 15 6 25 11 16 17 26 31 5 4 24 14 5 20 13 8 5 19 57 0 8 3 21]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1947
Zero cases best mean error: 19.47
Zero cases best size: 196
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 7 2 21 19 26 22 11 15 12 11 13 12 12 2 13 7 22 9 17 21 12 22 6 9 21 17 23 15 22 21 16 23 19 16 6 12 11 9 22 25 9 18 13 18 18 22 1 18 21 19 16 21 12 12 15 15 18 15 17 17 22 13 12 18 6 11 11 12 21 18 21 23 15 16 22 10 13 12 17 13 14 22 14 6 26 21 6 14 15 10 7 11 26 15 3 19 18 12 7)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (2 7 2 21 19 26 22 11 15 12 11 13 12 12 2 13 7 22 9 17 21 12 22 6 9 21 17 23 15 22 21 16 23 19 16 6 12 11 9 22 25 9 18 13 18 18 22 1 18 21 19 16 21 12 12 15 15 18 15 17 17 22 13 12 18 6 11 11 12 21 18 21 23 15 16 22 10 13 12 17 13 14 22 14 6 26 21 6 14 15 10 7 11 26 15 3 19 18 12 7)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_670} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_235} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_451} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_empty})
Best program: (integer_lte integer_lte boolean_pop integer_swap exec_noop tag_integer_670 exec_do*range (exec_k (exec_dup_times (integer_mod integer_shove exec_if (boolean_or) (exec_when (exec_dup (exec_if (exec_stackdepth integer_rot boolean_xor exec_flush) (boolean_dup) exec_do*range (integer_eq) integer_gte boolean_pop) integer_eq exec_if (boolean_or) (exec_when (boolean_stackdepth boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup) integer_flush boolean_yank integer_dup integer_sub boolean_swap in1 integer_min) boolean_invert_second_then_and integer_min boolean_and)) exec_empty exec_dup_items exec_yankdup exec_dup_items boolean_dup_times) (boolean_and integer_add boolean_or integer_mult tagged_235 boolean_and boolean_pop) integer_mod boolean_xor exec_empty exec_dup_items integer_shove exec_y_when_autoconstructing (tagged_451 exec_flush) integer_swap in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_dup_times integer_min integer_dup integer_mult integer_yank exec_yank in1 tagged_339 exec_eq integer_dup boolean_shove boolean_dup integer_rot exec_yankdup integer_pop boolean_pop boolean_swap exec_dup_times (boolean_and exec_do*count () exec_eq exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_dup) boolean_eq exec_eq boolean_swap exec_yank boolean_dup_items boolean_and exec_noop exec_yank in1 integer_empty boolean_yankdup boolean_stackdepth integer_empty integer_mult boolean_and boolean_rot boolean_and integer_shove integer_flush boolean_dup_times integer_pop integer_lt boolean_empty)
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 125
Size: 144
Percent parens: 0.132
--- Population Statistics ---
Average total errors in population: 5.900002983907E9
Median total errors in population: 2397
Error averages by case: (5.9000203423E7 5.9000062655E7 5.9000068974E7 5.9000023255E7 5.9000022964E7 5.9000024769E7 5.900003358E7 5.9000025234E7 5.9000021683E7 5.9000021856E7 5.9000025234E7 5.9000022482E7 5.9000035068E7 5.9000022279E7 5.900006002E7 5.9000021731E7 5.9000029037E7 5.9000023588E7 5.9000070255E7 5.9000025613E7 5.9000021686E7 5.9000022936E7 5.9000023588E7 5.9000032887E7 5.9000030882E7 5.9000021802E7 5.9000024282E7 5.9000024691E7 5.9000029594E7 5.9000022663E7 5.90000221E7 5.9000021915E7 5.9000024691E7 5.9000022964E7 5.9000021915E7 5.9000032887E7 5.9000022279E7 5.9000026232E7 5.9000031535E7 5.900003358E7 5.9000079025E7 5.9000070255E7 5.900002171E7 5.9000030247E7 5.9000027757E7 5.9000027757E7 5.9000023588E7 5.9000053112E7 5.9000027757E7 5.9000023255E7 5.9000022964E7 5.9000021915E7 5.9000021802E7 5.9000021856E7 5.9000022936E7 5.9000023233E7 5.9000023233E7 5.9000027757E7 5.9000021683E7 5.9000025613E7 5.9000024282E7 5.9000022663E7 5.9000022482E7 5.9000025721E7 5.900002171E7 5.9000027194E7 5.9000024356E7 5.9000026643E7 5.9000022936E7 5.9000023255E7 5.900002171E7 5.9000021686E7 5.9000024691E7 5.9000021963E7 5.9000021915E7 5.9000022663E7 5.900002356E7 5.9000030247E7 5.9000021856E7 5.9000025613E7 5.9000021731E7 5.9000022434E7 5.9000022663E7 5.9000026114E7 5.9000028969E7 5.9000024769E7 5.90000221E7 5.9000025146E7 5.900002206E7 5.9000021963E7 5.900002356E7 5.9000029037E7 5.9000026232E7 5.9000024769E7 5.9000023233E7 5.9000064447E7 5.9000022964E7 5.900002171E7 5.9000022279E7 5.9000034317E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 161.09
Average program size in population (points): 192.468
Average percent parens in population: 0.162
Minimum age in population: 25.18994140625
Maximum age in population: 30.82543754577637
Average age in population: 28.88727452278137
Median age in population: 28.9528923034668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.14
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 378643000
--- Timings ---
Current time: 1559324485639 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- bowling problem report - generation 21
Test total error for best: 14301
Test mean error for best: 14.30100
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 85
Correct output:    148 | Program output: 85
Correct output:    155 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     99 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    115 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    145 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:    109 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     61 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:    112 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:    110 | Program output: 85
Correct output:    113 | Program output: 85
Correct output:      0 | Program output: 85
Correct output:     10 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     95 | Program output: 85
Correct output:    137 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     81 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:     64 | Program output: 85
Correct output:     84 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     71 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     91 | Program output: 85
Correct output:    100 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     65 | Program output: 85
Correct output:     97 | Program output: 85
Correct output:     66 | Program output: 85
Correct output:     75 | Program output: 85
Correct output:     94 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     83 | Program output: 85
Correct output:     70 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     80 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    108 | Program output: 85
Correct output:     87 | Program output: 85
Correct output:     68 | Program output: 85
Correct output:     82 | Program output: 85
Correct output:     77 | Program output: 85
Correct output:     76 | Program output: 85
Correct output:     67 | Program output: 85
Correct output:     62 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     89 | Program output: 85
Correct output:     69 | Program output: 85
Correct output:     79 | Program output: 85
Correct output:     88 | Program output: 85
Correct output:     73 | Program output: 85
Correct output:    106 | Program output: 85
Correct output:    101 | Program output: 85
Correct output:     98 | Program output: 85
Correct output:     74 | Program output: 85
Correct output:    150 | Program output: 85
Correct output:     93 | Program output: 85
Correct output:     85 | Program output: 85
Correct output:     90 | Program output: 85
Correct output:    114 | Program output: 85
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_753} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_753} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_exec_664} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_lte boolean_pop integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 exec_rot (boolean_invert_second_then_and integer_min) (boolean_stackdepth exec_dup_items) (integer_lte integer_flush) integer_flush boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) exec_when () boolean_eq boolean_yank integer_dec tagged_753 tagged_753 boolean_swap in1 integer_pop boolean_dup integer_min exec_empty integer_inc boolean_shove integer_mult integer_lte integer_pop boolean_invert_second_then_and integer_min boolean_and integer_fromboolean boolean_shove integer_mult integer_lte exec_while (exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) exec_yank) integer_lt boolean_yank boolean_yank boolean_not boolean_not exec_if (integer_empty boolean_yank) (boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup exec_eq exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_swap integer_fromboolean integer_dup integer_mult exec_eq integer_inc exec_empty tag_exec_664 (boolean_invert_first_then_and exec_yankdup boolean_and integer_yankdup) exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) integer_shove boolean_xor exec_rot (exec_dup (boolean_shove exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_shove () exec_noop exec_eq integer_inc exec_empty) integer_min boolean_invert_first_then_and exec_yankdup exec_empty) integer_fromboolean boolean_swap) (exec_dup_times (boolean_and) exec_k () (integer_yankdup integer_dup) boolean_shove boolean_dup) (integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_dup integer_rot exec_yankdup integer_pop boolean_dup_items boolean_invert_second_then_and integer_rot boolean_dup_times)
Lexicase best errors: [207 55 62 1 0 5 20 6 9 6 6 2 22 3 52 11 13 2 83 25 10 18 2 19 16 12 22 23 32 17 4 13 23 0 13 19 3 8 17 20 93 83 8 15 29 29 2 44 29 1 0 13 12 6 18 19 19 29 9 25 22 17 2 7 8 28 4 27 18 1 8 10 23 5 13 17 20 15 6 25 11 16 17 26 31 5 4 24 14 5 20 13 8 5 19 57 0 8 3 21]
Lexicase best number of elite cases: 4
Lexicase best total error: 1947
Lexicase best mean error: 19.47
Lexicase best size: 189
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_753} {:close 1, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_753} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_634} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_exec_664} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_lte boolean_pop integer_swap boolean_rot integer_gte boolean_pop integer_eq exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup boolean_eq boolean_yank integer_dup tagged_753 boolean_swap in1 exec_rot (boolean_invert_second_then_and integer_min) (boolean_stackdepth exec_dup_items) (integer_lte integer_flush) integer_flush boolean_or exec_when (boolean_empty boolean_stackdepth exec_stackdepth integer_rot boolean_xor exec_flush) exec_when () boolean_eq boolean_yank integer_dec tagged_753 tagged_753 boolean_swap in1 integer_pop boolean_dup integer_min exec_empty integer_inc boolean_shove integer_mult integer_lte integer_pop boolean_invert_second_then_and integer_min boolean_and integer_fromboolean boolean_shove integer_mult integer_lte exec_while (exec_k () (integer_yank exec_when (tag_integer_634 exec_yank) integer_lt boolean_yank) exec_yank) integer_lt boolean_yank boolean_yank boolean_not boolean_not exec_if (integer_empty boolean_yank) (boolean_yank boolean_not integer_swap) exec_if (integer_empty boolean_yankdup exec_eq exec_noop exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank integer_pop boolean_dup_times boolean_swap integer_fromboolean integer_dup integer_mult exec_eq integer_inc exec_empty tag_exec_664 (boolean_invert_first_then_and exec_yankdup boolean_and integer_yankdup) exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank integer_rot boolean_and) integer_shove boolean_xor exec_rot (exec_dup (boolean_shove exec_pop (boolean_dup_items boolean_xor integer_stackdepth exec_shove () exec_noop exec_eq integer_inc exec_empty) integer_min boolean_invert_first_then_and exec_yankdup exec_empty) integer_fromboolean boolean_swap) (exec_dup_times (boolean_and) exec_k () (integer_yankdup integer_dup) boolean_shove boolean_dup) (integer_rot exec_yankdup integer_pop) boolean_pop boolean_invert_second_then_and integer_rot boolean_dup_times boolean_dup integer_rot exec_yankdup integer_pop boolean_dup_items boolean_invert_second_then_and integer_rot boolean_dup_times)
Zero cases best errors: [207 55 62 1 0 5 20 6 9 6 6 2 22 3 52 11 13 2 83 25 10 18 2 19 16 12 22 23 32 17 4 13 23 0 13 19 3 8 17 20 93 83 8 15 29 29 2 44 29 1 0 13 12 6 18 19 19 29 9 25 22 17 2 7 8 28 4 27 18 1 8 10 23 5 13 17 20 15 6 25 11 16 17 26 31 5 4 24 14 5 20 13 8 5 19 57 0 8 3 21]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 1947
Zero cases best mean error: 19.47
Zero cases best size: 189
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 1 16 18 12 8 14 15 19 14 14 4 23 2 14 13 14 9 11 15 15 14 10 15 20 15 24 11 24 18 17 24 18 17 10 23 5 9 8 28 9 20 5 24 24 14 5 24 16 18 17 20 19 15 20 20 24 15 11 15 24 14 13 20 14 6 8 15 16 20 15 24 19 17 24 15 5 19 11 14 9 24 17 11 12 18 7 12 19 15 13 5 12 20 3 18 20 23 9)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (3 4 1 16 18 12 8 14 15 19 14 14 4 23 2 14 13 14 9 11 15 15 14 10 15 20 15 24 11 24 18 17 24 18 17 10 23 5 9 8 28 9 20 5 24 24 14 5 24 16 18 17 20 19 15 20 20 24 15 11 15 24 14 13 20 14 6 8 15 16 20 15 24 19 17 24 15 5 19 11 14 9 24 17 11 12 18 7 12 19 15 13 5 12 20 3 18 20 23 9)
Population mean number of perfect (error zero) cases: 1.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_753} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_339} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction tagged_97} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_188} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_599} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_188} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_476} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_592} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank})
Best program: (integer_lte integer_lte boolean_pop integer_swap exec_stackdepth integer_dup_items boolean_invert_first_then_and exec_do*range (boolean_rot) integer_gte boolean_pop integer_eq exec_if (boolean_or) (exec_when (boolean_empty boolean_flush exec_stackdepth integer_rot boolean_xor exec_flush) boolean_dup_times) integer_swap boolean_yank integer_dup tagged_753 boolean_swap in1 integer_pop boolean_invert_second_then_and integer_min in1 boolean_not integer_swap boolean_eq boolean_yank integer_dup exec_if (integer_empty boolean_yankdup boolean_stackdepth integer_empty) (tag_boolean_599 integer_rot boolean_invert_second_then_and integer_min exec_empty exec_while (boolean_shove) integer_mult integer_lte exec_empty) exec_dup_items integer_shove integer_swap exec_if (exec_while () integer_stackdepth exec_y () integer_mod exec_yank in1 tagged_339 exec_flush) (boolean_xor in1) tagged_97 integer_mod boolean_yankdup boolean_yank tagged_188 exec_dup_items boolean_pop exec_dup_items boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap boolean_eq integer_mult boolean_swap) exec_yank integer_rot integer_dup_times) boolean_yankdup boolean_stackdepth integer_empty tag_boolean_599 boolean_rot exec_empty exec_noop integer_shove integer_flush boolean_dup_times boolean_and boolean_flush boolean_frominteger integer_mult tagged_188 boolean_and boolean_pop exec_k (boolean_xor exec_y_when_autoconstructing (exec_do*while (boolean_eq integer_mult boolean_swap) exec_yank exec_yank boolean_and) integer_dec) (exec_while (boolean_eq) boolean_not integer_mod) integer_empty exec_flush integer_pop integer_lt exec_dup (integer_div) integer_mod integer_gt exec_empty integer_rot boolean_empty integer_rot exec_yankdup exec_do*range () boolean_pop boolean_invert_second_then_and tag_exec_476 (boolean_dup_times) boolean_empty boolean_invert_second_then_and integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing (tagged_592 exec_flush exec_eq integer_yank) ())
Errors: [215 63 70 9 8 13 28 14 1 2 14 6 30 5 60 3 21 10 75 17 2 10 10 27 24 4 14 15 24 9 4 5 15 8 5 27 5 16 25 28 85 75 0 23 21 21 10 52 21 9 8 5 4 2 10 11 11 21 1 17 14 9 6 15 0 20 12 19 10 9 0 2 15 3 5 9 12 23 2 17 3 8 9 18 23 13 4 16 6 3 12 21 16 13 11 65 8 0 5 29]
Total: 1833
Mean: 18.33
Genome size: 145
Size: 169
Percent parens: 0.142
--- Population Statistics ---
Average total errors in population: 6.300003023375E9
Median total errors in population: 2491
Error averages by case: (6.3000204123E7 6.3000063635E7 6.300007001E7 6.3000024041E7 6.3000023694E7 6.3000025693E7 6.3000034508E7 6.3000026156E7 6.3000022037E7 6.3000022268E7 6.3000026156E7 6.3000023088E7 6.3000035972E7 6.3000022821E7 6.3000060966E7 6.3000022045E7 6.3000029923E7 6.300002442E7 6.3000069185E7 6.3000025529E7 6.3000022026E7 6.3000023036E7 6.300002442E7 6.3000033801E7 6.3000031778E7 6.3000022092E7 6.3000024288E7 6.3000024665E7 6.300002935E7 6.3000022801E7 6.30000226E7 6.3000022179E7 6.3000024665E7 6.3000023694E7 6.3000022179E7 6.3000033801E7 6.3000022821E7 6.3000027164E7 6.3000032437E7 6.3000034508E7 6.3000077727E7 6.3000069185E7 6.3000022078E7 6.3000031149E7 6.3000027535E7 6.3000027535E7 6.300002442E7 6.3000053968E7 6.3000027535E7 6.3000024041E7 6.3000023694E7 6.3000022179E7 6.3000022092E7 6.3000022268E7 6.3000023036E7 6.3000023301E7 6.3000023301E7 6.3000027535E7 6.3000022037E7 6.3000025529E7 6.3000024288E7 6.3000022801E7 6.3000023088E7 6.3000026647E7 6.3000022078E7 6.3000026996E7 6.3000025254E7 6.3000026485E7 6.3000023036E7 6.3000024041E7 6.3000022078E7 6.3000022026E7 6.3000024665E7 6.3000022415E7 6.3000022179E7 6.3000022801E7 6.3000023606E7 6.3000031149E7 6.3000022268E7 6.3000025529E7 6.3000022045E7 6.3000022614E7 6.3000022801E7 6.300002599E7 6.3000028725E7 6.3000025693E7 6.30000226E7 6.300002509E7 6.30000223E7 6.3000022415E7 6.3000023606E7 6.3000029923E7 6.3000027164E7 6.3000025693E7 6.3000023301E7 6.3000065441E7 6.3000023694E7 6.3000022078E7 6.3000022821E7 6.3000035231E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 160.785
Average program size in population (points): 191.892
Average percent parens in population: 0.161
Minimum age in population: 26.18994140625
Maximum age in population: 32.3659782409668
Average age in population: 30.31598355197906
Median age in population: 30.44083118438721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 397107900
--- Timings ---
Current time: 1559324503519 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
