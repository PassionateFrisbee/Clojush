Command line args: clojush.problems.software.tic_tac_toe
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (X won O won No winner #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7bdb4d69 clojush.instructions.tag$tag_instruction_erc$fn__2160@7bdb4d69] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x361fa478 clojush.instructions.tag$tagged_instruction_erc$fn__2166@361fa478] in1 print_newline boolean_pop string_fromchar string_flush boolean_swap exec_y string_butlast string_conjchar boolean_or boolean_empty print_vector_string exec_s_when_autoconstructing char_iswhitespace vector_string_replacefirst string_first exec_do*while exec_string_iterate vector_string_eq exec_empty exec_rot vector_string_concat char_pop exec_dup vector_string_flush boolean_flush char_isdigit string_reverse exec_k char_rot print_char boolean_xor string_replacefirst vector_string_dup string_last print_boolean boolean_rot vector_string_rest string_concat vector_string_butlast vector_string_rot exec_k_when_autoconstructing char_swap vector_string_remove string_eq boolean_dup vector_string_swap exec_eq string_emptystring string_swap exec_while exec_swap string_replacechar char_allfromstring string_pop vector_string_last vector_string_pop exec_if boolean_invert_first_then_and print_string vector_string_first char_isletter boolean_eq string_replacefirstchar string_replace char_dup exec_y_when_autoconstructing char_eq vector_string_conj boolean_not exec_do*vector_string string_empty char_empty exec_pop string_removechar vector_string_replace char_flush vector_string_emptyvector exec_s string_containschar vector_string_pushall exec_noop string_split string_fromboolean string_rest string_rot string_parse_to_chars print_exec string_contains vector_string_contains vector_string_reverse boolean_and exec_flush vector_string_empty exec_when boolean_invert_second_then_and string_dup)
error-function = #object[clojush.problems.software.tic_tac_toe$make_tic_tac_toe_error_function_from_cases$the_actual_tic_tac_toe_error_function__7486 0x3b4f1eb clojush.problems.software.tic_tac_toe$make_tic_tac_toe_error_function_from_cases$the_actual_tic_tac_toe_error_function__7486@3b4f1eb]
evalpush-limit = 600
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 300
max-genome-size-in-initial-program = 400
max-points = 1200
parent-selection = :lexicase
population-size = 1000
problem-specific-initial-report = #object[clojush.problems.software.tic_tac_toe$tic_tac_toe_initial_report 0x22bfd4b clojush.problems.software.tic_tac_toe$tic_tac_toe_initial_report@22bfd4b]
problem-specific-report = #object[clojush.problems.software.tic_tac_toe$tic_tac_toe_report 0x5fa9247b clojush.problems.software.tic_tac_toe$tic_tac_toe_report@5fa9247b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [["." "." "." "." "." "." "." "." "."] "No winner"]
Train Case:   1 | Input/Output: [["X" "O" "X" "O" "X" "O" "X" "O" "X"] "X won"]
Train Case:   2 | Input/Output: [["O" "X" "X" "X" "O" "O" "O" "X" "X"] "No winner"]
Train Case:   3 | Input/Output: [["." "." "." "." "O" "." "." "." "."] "No winner"]
Train Case:   4 | Input/Output: [["X" "." "." "X" "O" "O" "X" "O" "."] "X won"]
Train Case:   5 | Input/Output: [["X" "." "." "X" "O" "O" "X" "O" "."] "X won"]
Train Case:   6 | Input/Output: [["." "X" "." "O" "O" "O" "X" "." "X"] "O won"]
Train Case:   7 | Input/Output: [["X" "." "X" "X" "X" "O" "O" "X" "O"] "No winner"]
Train Case:   8 | Input/Output: [["X" "." "O" "X" "O" "." "O" "." "X"] "O won"]
Train Case:   9 | Input/Output: [["X" "O" "X" "X" "O" "X" "O" "X" "O"] "No winner"]
Train Case:  10 | Input/Output: [["O" "X" "O" "O" "." "." "X" "O" "O"] "No winner"]
Train Case:  11 | Input/Output: [["X" "O" "X" "O" "X" "X" "O" "O" "O"] "O won"]
Train Case:  12 | Input/Output: [["." "." "." "O" "." "." "O" "." "O"] "No winner"]
Train Case:  13 | Input/Output: [["O" "." "O" "." "X" "." "X" "O" "."] "No winner"]
Train Case:  14 | Input/Output: [["." "X" "." "X" "X" "X" "." "O" "."] "X won"]
Train Case:  15 | Input/Output: [["X" "O" "O" "O" "O" "." "." "." "X"] "No winner"]
Train Case:  16 | Input/Output: [["X" "O" "O" "X" "O" "." "X" "." "."] "X won"]
Train Case:  17 | Input/Output: [["." "." "." "X" "O" "." "." "." "O"] "No winner"]
Train Case:  18 | Input/Output: [["." "X" "." "X" "O" "." "X" "." "O"] "No winner"]
Train Case:  19 | Input/Output: [["O" "O" "O" "O" "O" "O" "X" "." "O"] "O won"]
Train Case:  20 | Input/Output: [["X" "X" "O" "O" "X" "." "X" "X" "O"] "X won"]
Train Case:  21 | Input/Output: [["." "." "X" "X" "X" "." "O" "X" "O"] "No winner"]
Train Case:  22 | Input/Output: [["." "O" "." "." "." "X" "." "X" "."] "No winner"]
Train Case:  23 | Input/Output: [["." "O" "O" "." "X" "O" "." "O" "O"] "O won"]
Train Case:  24 | Input/Output: [["X" "." "X" "O" "X" "O" "O" "O" "X"] "X won"]
Train Case:  25 | Input/Output: [["X" "X" "O" "X" "O" "X" "." "O" "."] "No winner"]
Train Case:  26 | Input/Output: [["." "X" "O" "." "." "." "X" "." "O"] "No winner"]
Train Case:  27 | Input/Output: [["X" "." "." "X" "X" "." "X" "." "."] "X won"]
Train Case:  28 | Input/Output: [["O" "X" "." "O" "O" "X" "O" "." "."] "O won"]
Train Case:  29 | Input/Output: [["X" "." "." "O" "X" "O" "." "X" "."] "No winner"]
Train Case:  30 | Input/Output: [["O" "X" "." "O" "X" "." "O" "X" "."] "O won"]
Train Case:  31 | Input/Output: [["O" "O" "O" "." "." "." "." "." "X"] "O won"]
Train Case:  32 | Input/Output: [["O" "." "X" "." "." "." "X" "X" "."] "No winner"]
Train Case:  33 | Input/Output: [["." "X" "X" "O" "." "O" "X" "O" "X"] "No winner"]
Train Case:  34 | Input/Output: [["X" "." "X" "." "X" "X" "." "X" "O"] "No winner"]
Train Case:  35 | Input/Output: [["X" "O" "X" "." "X" "O" "X" "O" "."] "X won"]
Train Case:  36 | Input/Output: [["O" "." "O" "X" "O" "O" "O" "O" "O"] "O won"]
Train Case:  37 | Input/Output: [["O" "O" "X" "O" "X" "." "." "O" "."] "No winner"]
Train Case:  38 | Input/Output: [["O" "." "." "X" "O" "X" "." "." "X"] "No winner"]
Train Case:  39 | Input/Output: [["O" "X" "O" "." "." "." "X" "O" "."] "No winner"]
Train Case:  40 | Input/Output: [["X" "O" "." "X" "O" "X" "X" "." "X"] "X won"]
Train Case:  41 | Input/Output: [["." "X" "." "X" "." "." "X" "." "X"] "No winner"]
Train Case:  42 | Input/Output: [["O" "X" "O" "." "." "O" "O" "." "O"] "O won"]
Train Case:  43 | Input/Output: [["O" "X" "." "X" "." "O" "." "O" "X"] "No winner"]
Train Case:  44 | Input/Output: [["." "X" "O" "O" "X" "." "X" "O" "X"] "No winner"]
Train Case:  45 | Input/Output: [["O" "X" "O" "X" "X" "O" "O" "." "X"] "No winner"]
Train Case:  46 | Input/Output: [["O" "O" "O" "X" "X" "." "O" "X" "."] "O won"]
Train Case:  47 | Input/Output: [["O" "." "X" "." "X" "O" "." "O" "O"] "No winner"]
Train Case:  48 | Input/Output: [["X" "O" "." "X" "." "O" "O" "X" "X"] "No winner"]
Train Case:  49 | Input/Output: [["." "." "X" "." "X" "X" "." "O" "X"] "X won"]
Train Case:  50 | Input/Output: [["X" "O" "X" "X" "O" "X" "." "." "O"] "No winner"]
Train Case:  51 | Input/Output: [["." "X" "X" "." "." "X" "O" "X" "O"] "No winner"]
Train Case:  52 | Input/Output: [["." "X" "X" "O" "X" "." "O" "X" "X"] "X won"]
Train Case:  53 | Input/Output: [["O" "O" "." "." "X" "." "X" "O" "X"] "No winner"]
Train Case:  54 | Input/Output: [["O" "." "O" "." "." "O" "." "X" "."] "No winner"]
Train Case:  55 | Input/Output: [["." "O" "." "X" "O" "O" "." "O" "."] "O won"]
Train Case:  56 | Input/Output: [["X" "X" "X" "O" "X" "O" "." "O" "."] "X won"]
Train Case:  57 | Input/Output: [["X" "O" "O" "O" "X" "X" "O" "X" "X"] "X won"]
Train Case:  58 | Input/Output: [["X" "X" "O" "O" "O" "O" "." "." "O"] "O won"]
Train Case:  59 | Input/Output: [["." "O" "X" "O" "O" "O" "." "O" "X"] "O won"]
Train Case:  60 | Input/Output: [["." "O" "." "." "X" "O" "." "." "X"] "No winner"]
Train Case:  61 | Input/Output: [["." "." "." "." "O" "." "X" "X" "X"] "X won"]
Train Case:  62 | Input/Output: [["." "." "X" "X" "." "X" "O" "X" "O"] "No winner"]
Train Case:  63 | Input/Output: [["O" "X" "." "." "." "X" "." "X" "O"] "No winner"]
Train Case:  64 | Input/Output: [["O" "." "O" "O" "." "O" "X" "." "X"] "No winner"]
Train Case:  65 | Input/Output: [["." "X" "O" "O" "X" "O" "." "." "O"] "O won"]
Train Case:  66 | Input/Output: [["X" "O" "O" "X" "." "O" "." "." "X"] "No winner"]
Train Case:  67 | Input/Output: [["O" "X" "O" "X" "O" "." "O" "." "X"] "O won"]
Train Case:  68 | Input/Output: [["O" "X" "." "O" "." "X" "X" "X" "."] "No winner"]
Train Case:  69 | Input/Output: [["." "." "O" "." "X" "." "X" "O" "."] "No winner"]
Train Case:  70 | Input/Output: [["." "O" "O" "." "." "O" "X" "." "X"] "No winner"]
Train Case:  71 | Input/Output: [["." "O" "X" "X" "." "X" "X" "X" "X"] "X won"]
Train Case:  72 | Input/Output: [["O" "." "O" "O" "." "O" "." "." "."] "No winner"]
Train Case:  73 | Input/Output: [["." "." "." "O" "." "X" "O" "O" "X"] "No winner"]
Train Case:  74 | Input/Output: [["X" "X" "O" "X" "." "." "O" "." "."] "No winner"]
Train Case:  75 | Input/Output: [["O" "." "X" "X" "O" "X" "X" "." "O"] "O won"]
Train Case:  76 | Input/Output: [["O" "X" "." "X" "." "O" "." "." "O"] "No winner"]
Train Case:  77 | Input/Output: [["O" "." "O" "O" "O" "O" "O" "O" "X"] "O won"]
Train Case:  78 | Input/Output: [["X" "X" "O" "O" "X" "." "." "." "X"] "X won"]
Train Case:  79 | Input/Output: [["O" "O" "X" "X" "X" "O" "X" "." "X"] "X won"]
Train Case:  80 | Input/Output: [["O" "X" "." "." "X" "." "X" "X" "O"] "X won"]
Train Case:  81 | Input/Output: [["O" "X" "." "." "O" "O" "." "." "."] "No winner"]
Train Case:  82 | Input/Output: [["O" "O" "." "X" "O" "X" "." "X" "."] "No winner"]
Train Case:  83 | Input/Output: [["O" "." "." "O" "." "X" "O" "X" "X"] "O won"]
Train Case:  84 | Input/Output: [["O" "O" "X" "X" "X" "." "." "." "X"] "No winner"]
Train Case:  85 | Input/Output: [["O" "O" "X" "O" "O" "O" "." "O" "O"] "O won"]
Train Case:  86 | Input/Output: [["O" "." "X" "X" "X" "X" "." "X" "."] "X won"]
Train Case:  87 | Input/Output: [["." "O" "." "O" "X" "." "." "." "O"] "No winner"]
Train Case:  88 | Input/Output: [["O" "O" "O" "O" "O" "X" "X" "X" "O"] "O won"]
Train Case:  89 | Input/Output: [["." "X" "." "X" "O" "O" "O" "." "."] "No winner"]
Train Case:  90 | Input/Output: [["O" "X" "." "." "X" "." "X" "O" "O"] "No winner"]
Train Case:  91 | Input/Output: [["O" "." "." "O" "." "X" "O" "." "X"] "O won"]
Train Case:  92 | Input/Output: [["X" "X" "X" "." "X" "X" "O" "O" "X"] "X won"]
Train Case:  93 | Input/Output: [["X" "O" "." "." "." "X" "." "." "."] "No winner"]
Train Case:  94 | Input/Output: [["O" "." "." "." "X" "X" "O" "X" "X"] "No winner"]
Train Case:  95 | Input/Output: [["X" "O" "X" "X" "X" "X" "X" "." "."] "X won"]
Train Case:  96 | Input/Output: [["X" "." "X" "X" "." "O" "O" "X" "O"] "No winner"]
Train Case:  97 | Input/Output: [["O" "O" "O" "." "O" "." "." "X" "."] "O won"]
Train Case:  98 | Input/Output: [["X" "X" "X" "X" "." "." "O" "X" "X"] "X won"]
Train Case:  99 | Input/Output: [["X" "O" "O" "O" "O" "O" "O" "." "X"] "O won"]
Test Case:   0 | Input/Output: [["X" "O" "." "X" "O" "O" "X" "X" "."] "X won"]
Test Case:   1 | Input/Output: [["X" "O" "X" "." "O" "." "X" "." "X"] "No winner"]
Test Case:   2 | Input/Output: [["." "O" "O" "O" "." "." "O" "X" "."] "No winner"]
Test Case:   3 | Input/Output: [["." "O" "O" "X" "X" "." "." "X" "X"] "No winner"]
Test Case:   4 | Input/Output: [["." "O" "." "X" "X" "." "O" "." "."] "No winner"]
Test Case:   5 | Input/Output: [["O" "O" "X" "X" "." "X" "O" "." "."] "No winner"]
Test Case:   6 | Input/Output: [["X" "X" "O" "X" "O" "." "X" "X" "O"] "X won"]
Test Case:   7 | Input/Output: [["X" "." "." "." "O" "." "." "X" "O"] "No winner"]
Test Case:   8 | Input/Output: [["O" "O" "." "O" "." "." "O" "X" "X"] "O won"]
Test Case:   9 | Input/Output: [["." "X" "X" "." "O" "." "." "." "."] "No winner"]
Test Case:  10 | Input/Output: [["." "." "." "O" "." "O" "." "X" "X"] "No winner"]
Test Case:  11 | Input/Output: [["." "O" "O" "." "X" "X" "O" "." "."] "No winner"]
Test Case:  12 | Input/Output: [["O" "O" "X" "X" "X" "." "X" "O" "X"] "X won"]
Test Case:  13 | Input/Output: [["." "X" "O" "O" "X" "." "O" "X" "O"] "X won"]
Test Case:  14 | Input/Output: [["X" "X" "." "O" "O" "X" "O" "X" "."] "No winner"]
Test Case:  15 | Input/Output: [["X" "O" "." "." "X" "." "X" "." "X"] "X won"]
Test Case:  16 | Input/Output: [["O" "." "X" "X" "." "." "X" "O" "."] "No winner"]
Test Case:  17 | Input/Output: [["X" "." "." "." "X" "." "." "O" "X"] "X won"]
Test Case:  18 | Input/Output: [["O" "X" "O" "." "X" "." "X" "." "O"] "No winner"]
Test Case:  19 | Input/Output: [["." "X" "." "X" "X" "X" "O" "X" "O"] "X won"]
Test Case:  20 | Input/Output: [["X" "." "X" "O" "O" "." "X" "." "O"] "No winner"]
Test Case:  21 | Input/Output: [["." "." "O" "O" "X" "O" "." "." "."] "No winner"]
Test Case:  22 | Input/Output: [["O" "O" "." "O" "X" "O" "X" "X" "X"] "X won"]
Test Case:  23 | Input/Output: [["." "." "." "X" "X" "O" "O" "." "O"] "No winner"]
Test Case:  24 | Input/Output: [["X" "O" "X" "O" "O" "O" "X" "O" "."] "O won"]
Test Case:  25 | Input/Output: [["X" "X" "." "." "X" "." "X" "X" "."] "X won"]
Test Case:  26 | Input/Output: [["O" "X" "O" "X" "X" "O" "X" "." "O"] "O won"]
Test Case:  27 | Input/Output: [["O" "X" "X" "O" "X" "X" "." "X" "O"] "X won"]
Test Case:  28 | Input/Output: [["." "X" "." "O" "X" "O" "O" "." "O"] "No winner"]
Test Case:  29 | Input/Output: [["." "O" "." "X" "." "X" "." "O" "."] "No winner"]
Test Case:  30 | Input/Output: [["." "X" "O" "O" "X" "." "X" "X" "O"] "X won"]
Test Case:  31 | Input/Output: [["X" "." "." "X" "X" "X" "X" "." "."] "X won"]
Test Case:  32 | Input/Output: [["O" "X" "O" "." "X" "X" "." "." "X"] "No winner"]
Test Case:  33 | Input/Output: [["." "X" "X" "." "X" "O" "." "X" "X"] "X won"]
Test Case:  34 | Input/Output: [["O" "." "." "." "." "." "X" "X" "O"] "No winner"]
Test Case:  35 | Input/Output: [["O" "O" "X" "X" "O" "O" "X" "X" "O"] "O won"]
Test Case:  36 | Input/Output: [["X" "." "X" "O" "X" "X" "O" "X" "."] "No winner"]
Test Case:  37 | Input/Output: [["." "." "X" "X" "X" "X" "O" "." "."] "X won"]
Test Case:  38 | Input/Output: [["X" "." "." "X" "." "O" "O" "X" "."] "No winner"]
Test Case:  39 | Input/Output: [["." "O" "X" "." "X" "X" "X" "X" "."] "X won"]
Test Case:  40 | Input/Output: [["X" "O" "." "O" "X" "O" "O" "." "O"] "No winner"]
Test Case:  41 | Input/Output: [["X" "X" "." "O" "." "X" "X" "X" "."] "No winner"]
Test Case:  42 | Input/Output: [["O" "." "O" "O" "O" "." "X" "X" "."] "No winner"]
Test Case:  43 | Input/Output: [["O" "X" "O" "X" "O" "X" "O" "O" "O"] "O won"]
Test Case:  44 | Input/Output: [["X" "X" "X" "O" "O" "O" "." "O" "O"] "X won"]
Test Case:  45 | Input/Output: [["." "O" "O" "X" "O" "O" "." "X" "X"] "No winner"]
Test Case:  46 | Input/Output: [["O" "O" "O" "X" "O" "O" "." "X" "O"] "O won"]
Test Case:  47 | Input/Output: [["." "." "." "." "." "O" "O" "X" "X"] "No winner"]
Test Case:  48 | Input/Output: [["X" "X" "." "O" "." "." "O" "." "O"] "No winner"]
Test Case:  49 | Input/Output: [["O" "O" "X" "." "X" "O" "X" "X" "O"] "X won"]
Test Case:  50 | Input/Output: [["X" "X" "X" "." "X" "O" "." "O" "X"] "X won"]
Test Case:  51 | Input/Output: [["O" "." "." "O" "X" "X" "O" "X" "O"] "O won"]
Test Case:  52 | Input/Output: [["." "O" "O" "." "O" "X" "." "X" "O"] "No winner"]
Test Case:  53 | Input/Output: [["X" "." "X" "X" "." "." "." "O" "."] "No winner"]
Test Case:  54 | Input/Output: [["." "X" "X" "." "X" "O" "." "." "X"] "No winner"]
Test Case:  55 | Input/Output: [["O" "X" "X" "O" "X" "O" "X" "." "X"] "X won"]
Test Case:  56 | Input/Output: [["O" "O" "O" "X" "." "O" "." "O" "O"] "O won"]
Test Case:  57 | Input/Output: [["O" "X" "." "O" "." "." "X" "X" "O"] "No winner"]
Test Case:  58 | Input/Output: [["O" "." "O" "X" "." "." "." "X" "."] "No winner"]
Test Case:  59 | Input/Output: [["O" "." "O" "X" "." "X" "O" "." "."] "No winner"]
Test Case:  60 | Input/Output: [["X" "O" "." "O" "X" "O" "O" "O" "."] "No winner"]
Test Case:  61 | Input/Output: [["X" "." "O" "O" "." "O" "O" "." "X"] "No winner"]
Test Case:  62 | Input/Output: [["O" "X" "X" "." "O" "X" "." "O" "."] "No winner"]
Test Case:  63 | Input/Output: [["." "X" "." "O" "." "X" "." "O" "X"] "No winner"]
Test Case:  64 | Input/Output: [["O" "O" "X" "O" "O" "." "X" "." "."] "No winner"]
Test Case:  65 | Input/Output: [["X" "X" "O" "." "X" "." "." "." "."] "No winner"]
Test Case:  66 | Input/Output: [["." "O" "." "X" "." "O" "O" "X" "."] "No winner"]
Test Case:  67 | Input/Output: [["X" "." "." "." "X" "." "X" "O" "."] "No winner"]
Test Case:  68 | Input/Output: [["X" "O" "." "O" "X" "O" "." "X" "X"] "X won"]
Test Case:  69 | Input/Output: [["X" "X" "." "O" "." "O" "O" "O" "X"] "No winner"]
Test Case:  70 | Input/Output: [["X" "O" "O" "X" "X" "O" "." "X" "O"] "O won"]
Test Case:  71 | Input/Output: [["X" "X" "X" "O" "." "O" "X" "O" "X"] "X won"]
Test Case:  72 | Input/Output: [["O" "." "O" "X" "." "O" "X" "." "O"] "O won"]
Test Case:  73 | Input/Output: [["X" "." "." "O" "." "O" "O" "." "."] "No winner"]
Test Case:  74 | Input/Output: [["X" "O" "." "O" "X" "." "." "O" "X"] "X won"]
Test Case:  75 | Input/Output: [["." "X" "X" "O" "." "." "." "." "."] "No winner"]
Test Case:  76 | Input/Output: [["O" "X" "X" "X" "X" "O" "." "." "."] "No winner"]
Test Case:  77 | Input/Output: [["X" "O" "." "O" "X" "." "O" "X" "X"] "X won"]
Test Case:  78 | Input/Output: [["X" "X" "X" "." "O" "O" "." "O" "."] "X won"]
Test Case:  79 | Input/Output: [["O" "." "X" "." "X" "." "." "O" "."] "No winner"]
Test Case:  80 | Input/Output: [["O" "O" "." "O" "O" "." "O" "O" "O"] "O won"]
Test Case:  81 | Input/Output: [["O" "." "." "." "." "X" "." "X" "O"] "No winner"]
Test Case:  82 | Input/Output: [["O" "." "." "X" "X" "." "O" "." "O"] "No winner"]
Test Case:  83 | Input/Output: [["." "." "X" "O" "O" "O" "." "X" "."] "O won"]
Test Case:  84 | Input/Output: [["X" "." "X" "X" "O" "O" "O" "X" "X"] "No winner"]
Test Case:  85 | Input/Output: [["X" "." "O" "O" "O" "O" "O" "O" "."] "O won"]
Test Case:  86 | Input/Output: [["." "X" "O" "O" "." "." "." "." "O"] "No winner"]
Test Case:  87 | Input/Output: [["." "." "X" "." "O" "." "." "O" "."] "No winner"]
Test Case:  88 | Input/Output: [["X" "X" "O" "O" "." "." "X" "O" "O"] "No winner"]
Test Case:  89 | Input/Output: [["X" "X" "." "." "X" "X" "X" "X" "X"] "X won"]
Test Case:  90 | Input/Output: [["." "." "X" "X" "O" "." "X" "." "X"] "No winner"]
Test Case:  91 | Input/Output: [["O" "X" "X" "O" "O" "X" "O" "." "O"] "O won"]
Test Case:  92 | Input/Output: [["X" "O" "." "." "X" "X" "X" "X" "."] "No winner"]
Test Case:  93 | Input/Output: [["O" "." "X" "." "." "X" "." "O" "O"] "No winner"]
Test Case:  94 | Input/Output: [["." "." "." "." "." "X" "X" "O" "X"] "No winner"]
Test Case:  95 | Input/Output: [["X" "." "O" "." "." "X" "O" "." "."] "No winner"]
Test Case:  96 | Input/Output: [["O" "O" "X" "." "." "." "O" "." "."] "No winner"]
Test Case:  97 | Input/Output: [["X" "X" "X" "X" "." "X" "." "." "X"] "X won"]
Test Case:  98 | Input/Output: [["O" "O" "X" "O" "O" "." "O" "X" "."] "O won"]
Test Case:  99 | Input/Output: [["O" "." "." "." "O" "O" "O" "X" "O"] "O won"]
Test Case: 100 | Input/Output: [["." "O" "X" "O" "." "O" "X" "." "X"] "No winner"]
Test Case: 101 | Input/Output: [["." "." "X" "X" "X" "O" "X" "." "X"] "X won"]
Test Case: 102 | Input/Output: [["X" "X" "O" "O" "." "O" "O" "." "O"] "O won"]
Test Case: 103 | Input/Output: [["O" "." "." "O" "O" "X" "." "O" "."] "No winner"]
Test Case: 104 | Input/Output: [["X" "." "." "." "." "." "X" "O" "."] "No winner"]
Test Case: 105 | Input/Output: [["X" "X" "X" "." "." "X" "." "." "O"] "X won"]
Test Case: 106 | Input/Output: [["O" "X" "O" "X" "." "O" "X" "X" "X"] "X won"]
Test Case: 107 | Input/Output: [["O" "X" "." "O" "." "X" "O" "X" "."] "O won"]
Test Case: 108 | Input/Output: [["." "X" "O" "X" "O" "." "O" "X" "."] "O won"]
Test Case: 109 | Input/Output: [["X" "O" "X" "O" "O" "O" "X" "O" "O"] "O won"]
Test Case: 110 | Input/Output: [["." "." "X" "X" "O" "O" "." "O" "O"] "No winner"]
Test Case: 111 | Input/Output: [["." "." "." "O" "X" "." "X" "X" "."] "No winner"]
Test Case: 112 | Input/Output: [["X" "X" "." "X" "O" "X" "O" "O" "."] "No winner"]
Test Case: 113 | Input/Output: [["X" "X" "X" "O" "." "." "O" "O" "X"] "X won"]
Test Case: 114 | Input/Output: [["O" "X" "." "." "X" "." "X" "O" "O"] "No winner"]
Test Case: 115 | Input/Output: [["X" "X" "." "X" "." "." "X" "X" "X"] "X won"]
Test Case: 116 | Input/Output: [["O" "." "X" "." "X" "O" "." "O" "O"] "No winner"]
Test Case: 117 | Input/Output: [["X" "." "O" "." "X" "O" "." "X" "."] "No winner"]
Test Case: 118 | Input/Output: [["O" "." "O" "X" "." "." "X" "O" "."] "No winner"]
Test Case: 119 | Input/Output: [["X" "X" "." "O" "." "X" "O" "X" "O"] "No winner"]
Test Case: 120 | Input/Output: [["." "X" "O" "O" "." "." "X" "." "."] "No winner"]
Test Case: 121 | Input/Output: [["." "X" "X" "." "O" "." "." "O" "O"] "No winner"]
Test Case: 122 | Input/Output: [["." "." "X" "." "O" "O" "X" "X" "X"] "X won"]
Test Case: 123 | Input/Output: [["O" "O" "O" "O" "O" "." "X" "X" "X"] "O won"]
Test Case: 124 | Input/Output: [["X" "." "." "." "X" "O" "O" "X" "."] "No winner"]
Test Case: 125 | Input/Output: [["." "X" "." "." "O" "O" "." "X" "."] "No winner"]
Test Case: 126 | Input/Output: [["." "O" "O" "." "." "X" "X" "O" "O"] "No winner"]
Test Case: 127 | Input/Output: [["X" "X" "." "O" "X" "X" "X" "X" "O"] "X won"]
Test Case: 128 | Input/Output: [["O" "X" "O" "." "." "." "X" "." "O"] "No winner"]
Test Case: 129 | Input/Output: [["O" "X" "O" "." "X" "." "." "X" "."] "X won"]
Test Case: 130 | Input/Output: [["." "." "X" "O" "." "O" "O" "." "."] "No winner"]
Test Case: 131 | Input/Output: [["O" "X" "." "X" "X" "O" "O" "." "O"] "No winner"]
Test Case: 132 | Input/Output: [["." "." "X" "X" "X" "O" "." "X" "."] "No winner"]
Test Case: 133 | Input/Output: [["." "X" "X" "O" "." "O" "." "O" "O"] "No winner"]
Test Case: 134 | Input/Output: [["O" "O" "O" "X" "X" "." "O" "X" "."] "O won"]
Test Case: 135 | Input/Output: [["O" "O" "X" "O" "X" "." "X" "X" "."] "X won"]
Test Case: 136 | Input/Output: [["X" "O" "." "." "X" "X" "X" "X" "O"] "No winner"]
Test Case: 137 | Input/Output: [["." "X" "O" "." "X" "O" "X" "O" "X"] "No winner"]
Test Case: 138 | Input/Output: [["O" "X" "." "X" "X" "X" "." "X" "X"] "X won"]
Test Case: 139 | Input/Output: [["." "O" "." "X" "." "." "." "O" "X"] "No winner"]
Test Case: 140 | Input/Output: [["O" "O" "X" "." "O" "." "." "X" "X"] "No winner"]
Test Case: 141 | Input/Output: [["X" "X" "X" "." "." "." "X" "O" "X"] "X won"]
Test Case: 142 | Input/Output: [["X" "O" "O" "O" "." "X" "O" "X" "O"] "No winner"]
Test Case: 143 | Input/Output: [["." "." "O" "." "O" "O" "X" "O" "."] "No winner"]
Test Case: 144 | Input/Output: [["O" "X" "O" "O" "X" "X" "O" "O" "O"] "O won"]
Test Case: 145 | Input/Output: [["O" "." "." "." "O" "." "O" "X" "."] "No winner"]
Test Case: 146 | Input/Output: [["O" "O" "." "." "X" "." "X" "." "O"] "No winner"]
Test Case: 147 | Input/Output: [["." "O" "X" "O" "O" "." "X" "X" "X"] "X won"]
Test Case: 148 | Input/Output: [["X" "O" "X" "X" "X" "O" "O" "O" "."] "No winner"]
Test Case: 149 | Input/Output: [["." "X" "X" "O" "." "X" "." "X" "X"] "X won"]
Test Case: 150 | Input/Output: [["." "O" "X" "X" "X" "." "." "X" "O"] "No winner"]
Test Case: 151 | Input/Output: [["O" "O" "X" "." "." "X" "O" "O" "."] "No winner"]
Test Case: 152 | Input/Output: [["O" "O" "." "O" "." "." "." "." "."] "No winner"]
Test Case: 153 | Input/Output: [["X" "O" "X" "O" "." "O" "X" "O" "."] "No winner"]
Test Case: 154 | Input/Output: [["X" "X" "." "." "O" "O" "X" "X" "O"] "No winner"]
Test Case: 155 | Input/Output: [["." "O" "." "O" "." "X" "O" "X" "O"] "No winner"]
Test Case: 156 | Input/Output: [["X" "." "O" "." "." "." "." "X" "X"] "No winner"]
Test Case: 157 | Input/Output: [["." "." "X" "X" "." "O" "X" "." "O"] "No winner"]
Test Case: 158 | Input/Output: [["O" "O" "X" "X" "." "." "X" "." "."] "No winner"]
Test Case: 159 | Input/Output: [["O" "." "." "O" "." "." "." "." "O"] "No winner"]
Test Case: 160 | Input/Output: [["X" "O" "X" "." "." "O" "O" "O" "X"] "No winner"]
Test Case: 161 | Input/Output: [["X" "." "X" "X" "O" "O" "." "O" "O"] "No winner"]
Test Case: 162 | Input/Output: [["." "O" "O" "X" "." "." "O" "." "O"] "No winner"]
Test Case: 163 | Input/Output: [["X" "X" "O" "X" "O" "." "." "X" "X"] "No winner"]
Test Case: 164 | Input/Output: [["." "." "O" "." "." "O" "X" "." "."] "No winner"]
Test Case: 165 | Input/Output: [["O" "O" "." "X" "O" "O" "." "O" "O"] "O won"]
Test Case: 166 | Input/Output: [["." "O" "O" "X" "." "." "O" "O" "."] "No winner"]
Test Case: 167 | Input/Output: [["O" "." "." "O" "O" "." "." "X" "O"] "O won"]
Test Case: 168 | Input/Output: [["X" "X" "O" "X" "X" "O" "O" "." "X"] "X won"]
Test Case: 169 | Input/Output: [["X" "X" "O" "X" "O" "." "X" "O" "X"] "X won"]
Test Case: 170 | Input/Output: [["." "X" "." "O" "X" "X" "." "." "O"] "No winner"]
Test Case: 171 | Input/Output: [["." "X" "X" "." "O" "O" "." "X" "."] "No winner"]
Test Case: 172 | Input/Output: [["O" "." "." "." "X" "X" "." "X" "O"] "No winner"]
Test Case: 173 | Input/Output: [["O" "." "X" "O" "." "." "." "X" "."] "No winner"]
Test Case: 174 | Input/Output: [["O" "O" "O" "X" "." "O" "X" "X" "."] "O won"]
Test Case: 175 | Input/Output: [["X" "O" "." "O" "O" "X" "X" "X" "X"] "X won"]
Test Case: 176 | Input/Output: [["X" "." "O" "X" "." "O" "." "X" "X"] "No winner"]
Test Case: 177 | Input/Output: [["." "X" "O" "O" "." "X" "O" "O" "."] "No winner"]
Test Case: 178 | Input/Output: [["X" "." "O" "." "X" "O" "O" "X" "."] "No winner"]
Test Case: 179 | Input/Output: [["X" "O" "." "O" "X" "X" "X" "." "."] "No winner"]
Test Case: 180 | Input/Output: [["O" "." "." "X" "X" "O" "X" "X" "X"] "X won"]
Test Case: 181 | Input/Output: [["X" "O" "X" "O" "." "X" "O" "O" "X"] "X won"]
Test Case: 182 | Input/Output: [["." "X" "X" "O" "O" "." "X" "X" "."] "No winner"]
Test Case: 183 | Input/Output: [["O" "X" "O" "O" "." "." "O" "X" "."] "O won"]
Test Case: 184 | Input/Output: [["X" "." "X" "." "O" "O" "." "." "X"] "No winner"]
Test Case: 185 | Input/Output: [["O" "O" "." "X" "X" "." "." "O" "O"] "No winner"]
Test Case: 186 | Input/Output: [["." "X" "X" "X" "X" "X" "O" "O" "X"] "X won"]
Test Case: 187 | Input/Output: [["O" "." "X" "O" "." "." "X" "." "."] "No winner"]
Test Case: 188 | Input/Output: [["X" "X" "O" "X" "O" "X" "O" "." "."] "O won"]
Test Case: 189 | Input/Output: [["X" "O" "." "X" "." "X" "O" "." "."] "No winner"]
Test Case: 190 | Input/Output: [["O" "O" "." "X" "O" "." "X" "O" "O"] "O won"]
Test Case: 191 | Input/Output: [["." "X" "." "O" "X" "." "O" "X" "O"] "X won"]
Test Case: 192 | Input/Output: [["O" "X" "." "X" "X" "X" "O" "X" "."] "X won"]
Test Case: 193 | Input/Output: [["." "X" "O" "." "X" "O" "O" "O" "X"] "No winner"]
Test Case: 194 | Input/Output: [["X" "." "O" "X" "." "X" "." "." "X"] "No winner"]
Test Case: 195 | Input/Output: [["." "X" "." "O" "." "O" "X" "O" "X"] "No winner"]
Test Case: 196 | Input/Output: [["X" "O" "X" "X" "O" "X" "X" "O" "O"] "X won"]
Test Case: 197 | Input/Output: [["O" "O" "." "." "X" "O" "." "X" "X"] "No winner"]
Test Case: 198 | Input/Output: [["X" "." "O" "O" "." "X" "X" "." "."] "No winner"]
Test Case: 199 | Input/Output: [["O" "X" "O" "X" "O" "O" "X" "." "O"] "O won"]
Test Case: 200 | Input/Output: [["X" "O" "." "X" "O" "O" "X" "X" "O"] "X won"]
Test Case: 201 | Input/Output: [["." "X" "X" "O" "." "." "X" "O" "O"] "No winner"]
Test Case: 202 | Input/Output: [["O" "X" "X" "." "." "." "X" "." "."] "No winner"]
Test Case: 203 | Input/Output: [["O" "X" "." "X" "X" "O" "O" "X" "."] "X won"]
Test Case: 204 | Input/Output: [["O" "O" "X" "X" "." "O" "O" "." "X"] "No winner"]
Test Case: 205 | Input/Output: [["." "." "X" "." "O" "." "O" "." "O"] "No winner"]
Test Case: 206 | Input/Output: [["X" "." "O" "O" "X" "O" "." "O" "X"] "X won"]
Test Case: 207 | Input/Output: [["X" "." "O" "X" "." "." "O" "." "O"] "No winner"]
Test Case: 208 | Input/Output: [["X" "." "O" "X" "X" "X" "X" "O" "X"] "X won"]
Test Case: 209 | Input/Output: [["O" "." "X" "X" "O" "X" "." "X" "O"] "O won"]
Test Case: 210 | Input/Output: [["X" "." "." "X" "X" "." "X" "." "."] "X won"]
Test Case: 211 | Input/Output: [["O" "O" "X" "O" "." "." "O" "O" "X"] "O won"]
Test Case: 212 | Input/Output: [["X" "." "X" "O" "O" "." "O" "O" "O"] "O won"]
Test Case: 213 | Input/Output: [["X" "X" "." "." "." "X" "X" "O" "."] "No winner"]
Test Case: 214 | Input/Output: [["X" "." "X" "X" "X" "O" "." "O" "."] "No winner"]
Test Case: 215 | Input/Output: [["X" "O" "." "X" "." "X" "X" "X" "X"] "X won"]
Test Case: 216 | Input/Output: [["O" "O" "." "X" "O" "O" "X" "." "O"] "O won"]
Test Case: 217 | Input/Output: [["X" "." "O" "." "O" "O" "X" "O" "X"] "No winner"]
Test Case: 218 | Input/Output: [["O" "O" "X" "." "X" "O" "O" "O" "O"] "O won"]
Test Case: 219 | Input/Output: [["." "." "." "X" "O" "X" "." "X" "O"] "No winner"]
Test Case: 220 | Input/Output: [["O" "." "." "O" "O" "O" "O" "O" "O"] "O won"]
Test Case: 221 | Input/Output: [["O" "." "O" "." "." "O" "." "O" "."] "No winner"]
Test Case: 222 | Input/Output: [["." "X" "." "O" "." "." "X" "X" "O"] "No winner"]
Test Case: 223 | Input/Output: [["O" "X" "." "O" "O" "X" "." "X" "."] "No winner"]
Test Case: 224 | Input/Output: [["X" "." "." "." "X" "X" "O" "." "O"] "No winner"]
Test Case: 225 | Input/Output: [["." "O" "O" "X" "O" "." "." "." "X"] "No winner"]
Test Case: 226 | Input/Output: [["." "." "O" "O" "O" "." "O" "O" "X"] "O won"]
Test Case: 227 | Input/Output: [["O" "O" "." "O" "O" "." "." "O" "."] "O won"]
Test Case: 228 | Input/Output: [["O" "O" "X" "X" "X" "X" "." "X" "O"] "X won"]
Test Case: 229 | Input/Output: [["O" "O" "." "O" "." "O" "X" "X" "."] "No winner"]
Test Case: 230 | Input/Output: [["." "O" "X" "O" "O" "X" "." "O" "."] "O won"]
Test Case: 231 | Input/Output: [["." "X" "." "O" "O" "." "O" "O" "X"] "No winner"]
Test Case: 232 | Input/Output: [["." "." "." "O" "." "." "X" "." "O"] "No winner"]
Test Case: 233 | Input/Output: [["X" "X" "X" "O" "X" "." "X" "." "."] "X won"]
Test Case: 234 | Input/Output: [["X" "X" "O" "." "." "X" "." "." "X"] "No winner"]
Test Case: 235 | Input/Output: [["O" "." "O" "." "." "O" "O" "." "X"] "No winner"]
Test Case: 236 | Input/Output: [["." "O" "X" "O" "O" "." "X" "O" "O"] "O won"]
Test Case: 237 | Input/Output: [["X" "." "X" "." "O" "X" "O" "X" "X"] "X won"]
Test Case: 238 | Input/Output: [["O" "O" "X" "X" "X" "X" "X" "O" "X"] "X won"]
Test Case: 239 | Input/Output: [["O" "O" "." "O" "X" "O" "." "." "O"] "No winner"]
Test Case: 240 | Input/Output: [["X" "X" "." "." "." "." "X" "O" "X"] "No winner"]
Test Case: 241 | Input/Output: [["X" "O" "." "X" "." "X" "X" "O" "O"] "X won"]
Test Case: 242 | Input/Output: [["." "." "." "." "O" "O" "O" "." "."] "No winner"]
Test Case: 243 | Input/Output: [["O" "." "X" "X" "X" "O" "X" "." "O"] "X won"]
Test Case: 244 | Input/Output: [["." "O" "O" "O" "O" "O" "." "X" "X"] "O won"]
Test Case: 245 | Input/Output: [["O" "X" "O" "O" "." "O" "." "X" "."] "No winner"]
Test Case: 246 | Input/Output: [["." "X" "O" "X" "." "O" "X" "O" "X"] "No winner"]
Test Case: 247 | Input/Output: [["X" "O" "O" "." "X" "O" "." "." "."] "No winner"]
Test Case: 248 | Input/Output: [["O" "O" "." "O" "X" "." "O" "O" "X"] "O won"]
Test Case: 249 | Input/Output: [["." "." "X" "." "X" "O" "O" "X" "."] "No winner"]
Test Case: 250 | Input/Output: [["O" "." "X" "." "O" "X" "." "X" "O"] "O won"]
Test Case: 251 | Input/Output: [["O" "O" "X" "O" "X" "." "O" "O" "."] "O won"]
Test Case: 252 | Input/Output: [["X" "." "O" "." "." "O" "X" "O" "."] "No winner"]
Test Case: 253 | Input/Output: [["." "O" "O" "." "O" "." "X" "." "O"] "No winner"]
Test Case: 254 | Input/Output: [["." "." "X" "O" "O" "X" "X" "O" "."] "No winner"]
Test Case: 255 | Input/Output: [["X" "X" "O" "X" "O" "X" "X" "O" "O"] "X won"]
Test Case: 256 | Input/Output: [["O" "X" "O" "X" "X" "O" "." "." "X"] "No winner"]
Test Case: 257 | Input/Output: [["X" "O" "O" "." "." "O" "O" "." "O"] "O won"]
Test Case: 258 | Input/Output: [["O" "O" "O" "X" "." "." "O" "." "."] "O won"]
Test Case: 259 | Input/Output: [["X" "O" "X" "O" "." "X" "X" "." "X"] "X won"]
Test Case: 260 | Input/Output: [["." "." "." "X" "." "." "X" "X" "."] "No winner"]
Test Case: 261 | Input/Output: [["O" "X" "X" "X" "." "." "O" "." "."] "No winner"]
Test Case: 262 | Input/Output: [["O" "X" "O" "." "O" "O" "." "O" "."] "No winner"]
Test Case: 263 | Input/Output: [["X" "X" "X" "." "O" "O" "O" "O" "X"] "X won"]
Test Case: 264 | Input/Output: [["." "O" "." "X" "." "." "X" "." "X"] "No winner"]
Test Case: 265 | Input/Output: [["X" "." "X" "O" "." "O" "." "." "O"] "No winner"]
Test Case: 266 | Input/Output: [["X" "." "X" "O" "O" "." "O" "O" "O"] "O won"]
Test Case: 267 | Input/Output: [["X" "." "X" "O" "." "X" "X" "X" "X"] "X won"]
Test Case: 268 | Input/Output: [["X" "." "X" "X" "." "." "." "." "."] "No winner"]
Test Case: 269 | Input/Output: [["O" "." "." "O" "O" "X" "." "O" "."] "No winner"]
Test Case: 270 | Input/Output: [["O" "X" "X" "." "X" "." "X" "." "."] "X won"]
Test Case: 271 | Input/Output: [["X" "X" "." "X" "O" "." "O" "O" "X"] "No winner"]
Test Case: 272 | Input/Output: [["O" "X" "." "X" "X" "O" "." "O" "O"] "No winner"]
Test Case: 273 | Input/Output: [["." "X" "X" "X" "X" "X" "O" "X" "O"] "X won"]
Test Case: 274 | Input/Output: [["O" "O" "." "X" "O" "X" "." "X" "X"] "No winner"]
Test Case: 275 | Input/Output: [["X" "X" "X" "X" "X" "." "." "." "X"] "X won"]
Test Case: 276 | Input/Output: [["X" "." "O" "O" "O" "O" "O" "." "X"] "O won"]
Test Case: 277 | Input/Output: [["O" "X" "." "O" "X" "O" "X" "O" "."] "No winner"]
Test Case: 278 | Input/Output: [["X" "X" "." "." "X" "X" "X" "." "."] "No winner"]
Test Case: 279 | Input/Output: [["." "O" "O" "O" "." "." "O" "O" "X"] "No winner"]
Test Case: 280 | Input/Output: [["." "X" "." "." "X" "O" "O" "." "X"] "No winner"]
Test Case: 281 | Input/Output: [["O" "O" "X" "O" "O" "O" "." "O" "."] "O won"]
Test Case: 282 | Input/Output: [["." "." "." "O" "." "O" "." "X" "O"] "No winner"]
Test Case: 283 | Input/Output: [["O" "O" "." "O" "." "X" "." "." "."] "No winner"]
Test Case: 284 | Input/Output: [["O" "X" "X" "X" "X" "O" "O" "O" "X"] "No winner"]
Test Case: 285 | Input/Output: [["." "O" "O" "O" "X" "." "X" "X" "O"] "No winner"]
Test Case: 286 | Input/Output: [["." "." "." "." "O" "O" "." "O" "X"] "No winner"]
Test Case: 287 | Input/Output: [["." "." "O" "X" "X" "O" "O" "." "X"] "No winner"]
Test Case: 288 | Input/Output: [["." "X" "." "O" "O" "." "." "O" "X"] "No winner"]
Test Case: 289 | Input/Output: [["." "." "O" "O" "." "O" "O" "X" "."] "No winner"]
Test Case: 290 | Input/Output: [["." "X" "X" "X" "O" "." "X" "O" "X"] "No winner"]
Test Case: 291 | Input/Output: [["O" "." "O" "O" "." "O" "." "O" "."] "No winner"]
Test Case: 292 | Input/Output: [["." "." "O" "X" "." "X" "X" "O" "X"] "No winner"]
Test Case: 293 | Input/Output: [["X" "." "X" "." "O" "X" "X" "O" "."] "No winner"]
Test Case: 294 | Input/Output: [["O" "O" "X" "." "." "X" "." "." "O"] "No winner"]
Test Case: 295 | Input/Output: [["X" "O" "." "O" "X" "X" "X" "." "."] "No winner"]
Test Case: 296 | Input/Output: [["O" "X" "O" "." "X" "O" "X" "O" "."] "No winner"]
Test Case: 297 | Input/Output: [["O" "O" "X" "O" "." "X" "O" "O" "."] "O won"]
Test Case: 298 | Input/Output: [["X" "O" "O" "X" "." "O" "." "X" "O"] "O won"]
Test Case: 299 | Input/Output: [["." "." "O" "X" "X" "X" "O" "X" "X"] "X won"]
Test Case: 300 | Input/Output: [["O" "." "O" "O" "X" "X" "O" "X" "."] "O won"]
Test Case: 301 | Input/Output: [["O" "X" "O" "O" "." "X" "O" "O" "O"] "O won"]
Test Case: 302 | Input/Output: [["." "X" "." "X" "O" "X" "X" "O" "."] "No winner"]
Test Case: 303 | Input/Output: [["O" "." "O" "." "." "." "O" "O" "O"] "O won"]
Test Case: 304 | Input/Output: [["." "." "O" "X" "." "." "." "X" "O"] "No winner"]
Test Case: 305 | Input/Output: [["O" "." "." "O" "." "X" "X" "O" "X"] "No winner"]
Test Case: 306 | Input/Output: [["O" "X" "." "O" "O" "X" "." "O" "X"] "No winner"]
Test Case: 307 | Input/Output: [["." "O" "." "." "O" "." "O" "X" "O"] "No winner"]
Test Case: 308 | Input/Output: [["." "." "X" "." "." "." "X" "X" "X"] "X won"]
Test Case: 309 | Input/Output: [["O" "X" "X" "." "." "X" "O" "O" "X"] "X won"]
Test Case: 310 | Input/Output: [["O" "." "." "O" "X" "." "X" "O" "."] "No winner"]
Test Case: 311 | Input/Output: [["." "." "." "O" "." "X" "O" "." "."] "No winner"]
Test Case: 312 | Input/Output: [["O" "." "O" "." "X" "X" "X" "O" "X"] "No winner"]
Test Case: 313 | Input/Output: [["O" "." "X" "X" "O" "X" "X" "O" "O"] "O won"]
Test Case: 314 | Input/Output: [["." "O" "X" "X" "." "." "O" "." "."] "No winner"]
Test Case: 315 | Input/Output: [["." "X" "O" "O" "." "." "X" "." "O"] "No winner"]
Test Case: 316 | Input/Output: [["." "X" "." "X" "O" "." "O" "X" "."] "No winner"]
Test Case: 317 | Input/Output: [["X" "X" "." "O" "X" "." "." "." "O"] "No winner"]
Test Case: 318 | Input/Output: [["O" "X" "O" "O" "X" "X" "X" "O" "O"] "No winner"]
Test Case: 319 | Input/Output: [["O" "O" "X" "." "X" "X" "O" "." "."] "No winner"]
Test Case: 320 | Input/Output: [["O" "X" "O" "X" "X" "X" "X" "." "X"] "X won"]
Test Case: 321 | Input/Output: [["." "." "." "O" "X" "X" "X" "X" "."] "No winner"]
Test Case: 322 | Input/Output: [["O" "X" "." "." "O" "O" "O" "X" "."] "No winner"]
Test Case: 323 | Input/Output: [["O" "." "O" "." "O" "O" "." "O" "X"] "No winner"]
Test Case: 324 | Input/Output: [["X" "." "." "X" "X" "O" "." "X" "X"] "X won"]
Test Case: 325 | Input/Output: [["X" "." "." "O" "." "X" "X" "O" "O"] "No winner"]
Test Case: 326 | Input/Output: [["O" "O" "X" "." "O" "X" "O" "." "X"] "X won"]
Test Case: 327 | Input/Output: [["." "O" "." "X" "X" "O" "O" "X" "O"] "No winner"]
Test Case: 328 | Input/Output: [["." "O" "O" "X" "." "X" "O" "." "O"] "No winner"]
Test Case: 329 | Input/Output: [["O" "X" "O" "X" "X" "." "O" "." "."] "No winner"]
Test Case: 330 | Input/Output: [["X" "O" "O" "O" "O" "O" "." "X" "X"] "O won"]
Test Case: 331 | Input/Output: [["." "." "X" "." "." "X" "." "." "X"] "X won"]
Test Case: 332 | Input/Output: [["." "X" "X" "X" "O" "X" "X" "O" "."] "No winner"]
Test Case: 333 | Input/Output: [["O" "X" "X" "O" "X" "O" "O" "X" "."] "O won"]
Test Case: 334 | Input/Output: [["." "X" "." "X" "X" "." "." "." "X"] "No winner"]
Test Case: 335 | Input/Output: [["." "." "X" "O" "O" "." "X" "O" "X"] "No winner"]
Test Case: 336 | Input/Output: [["." "." "X" "X" "X" "O" "." "O" "X"] "No winner"]
Test Case: 337 | Input/Output: [["." "X" "X" "O" "X" "." "." "O" "."] "No winner"]
Test Case: 338 | Input/Output: [["O" "." "O" "O" "O" "." "." "." "X"] "No winner"]
Test Case: 339 | Input/Output: [["O" "O" "." "." "." "O" "O" "." "X"] "No winner"]
Test Case: 340 | Input/Output: [["X" "." "X" "O" "O" "." "." "O" "O"] "No winner"]
Test Case: 341 | Input/Output: [["X" "X" "O" "X" "X" "." "X" "." "X"] "X won"]
Test Case: 342 | Input/Output: [["X" "X" "O" "X" "X" "X" "X" "." "."] "X won"]
Test Case: 343 | Input/Output: [["X" "X" "." "O" "X" "X" "." "." "O"] "No winner"]
Test Case: 344 | Input/Output: [["X" "." "X" "X" "X" "O" "O" "." "."] "No winner"]
Test Case: 345 | Input/Output: [["." "." "." "X" "." "." "." "." "O"] "No winner"]
Test Case: 346 | Input/Output: [["." "." "O" "." "O" "X" "X" "O" "X"] "No winner"]
Test Case: 347 | Input/Output: [["X" "X" "O" "X" "X" "O" "X" "X" "X"] "X won"]
Test Case: 348 | Input/Output: [["X" "O" "X" "." "X" "O" "X" "O" "."] "X won"]
Test Case: 349 | Input/Output: [["X" "O" "O" "X" "." "." "X" "." "."] "X won"]
Test Case: 350 | Input/Output: [["." "." "O" "O" "X" "O" "X" "O" "X"] "No winner"]
Test Case: 351 | Input/Output: [["O" "X" "." "O" "O" "." "X" "." "X"] "No winner"]
Test Case: 352 | Input/Output: [["X" "." "O" "X" "O" "." "." "X" "X"] "No winner"]
Test Case: 353 | Input/Output: [["X" "X" "O" "." "." "X" "X" "O" "O"] "No winner"]
Test Case: 354 | Input/Output: [["." "." "." "." "." "O" "." "X" "."] "No winner"]
Test Case: 355 | Input/Output: [["X" "O" "X" "X" "O" "." "O" "X" "O"] "No winner"]
Test Case: 356 | Input/Output: [["O" "X" "X" "." "." "O" "O" "." "X"] "No winner"]
Test Case: 357 | Input/Output: [["X" "X" "." "." "." "X" "." "O" "."] "No winner"]
Test Case: 358 | Input/Output: [["X" "." "X" "." "X" "." "." "." "O"] "No winner"]
Test Case: 359 | Input/Output: [["O" "O" "X" "O" "X" "." "." "." "X"] "No winner"]
Test Case: 360 | Input/Output: [["O" "X" "O" "." "." "." "." "O" "."] "No winner"]
Test Case: 361 | Input/Output: [["." "X" "O" "O" "." "X" "." "." "X"] "No winner"]
Test Case: 362 | Input/Output: [["O" "." "O" "X" "O" "." "." "X" "X"] "No winner"]
Test Case: 363 | Input/Output: [["X" "O" "O" "O" "X" "O" "O" "X" "O"] "O won"]
Test Case: 364 | Input/Output: [["O" "O" "." "O" "." "O" "X" "O" "."] "No winner"]
Test Case: 365 | Input/Output: [["." "O" "X" "O" "O" "O" "X" "O" "X"] "O won"]
Test Case: 366 | Input/Output: [["." "X" "O" "O" "." "." "O" "X" "X"] "No winner"]
Test Case: 367 | Input/Output: [["X" "O" "O" "." "X" "O" "O" "." "O"] "O won"]
Test Case: 368 | Input/Output: [["X" "." "." "." "." "X" "X" "O" "."] "No winner"]
Test Case: 369 | Input/Output: [["O" "O" "X" "O" "O" "." "." "O" "O"] "O won"]
Test Case: 370 | Input/Output: [["." "." "O" "O" "X" "." "." "O" "X"] "No winner"]
Test Case: 371 | Input/Output: [["O" "X" "X" "X" "." "." "." "O" "O"] "No winner"]
Test Case: 372 | Input/Output: [["." "X" "X" "O" "." "X" "." "." "."] "No winner"]
Test Case: 373 | Input/Output: [["O" "O" "O" "." "O" "X" "." "O" "."] "O won"]
Test Case: 374 | Input/Output: [["." "O" "." "X" "O" "." "O" "." "X"] "No winner"]
Test Case: 375 | Input/Output: [["." "X" "O" "X" "." "." "." "O" "."] "No winner"]
Test Case: 376 | Input/Output: [["O" "X" "X" "." "." "X" "O" "." "O"] "No winner"]
Test Case: 377 | Input/Output: [["." "X" "." "X" "O" "O" "O" "O" "O"] "O won"]
Test Case: 378 | Input/Output: [["O" "X" "X" "X" "O" "X" "X" "X" "."] "No winner"]
Test Case: 379 | Input/Output: [["." "." "O" "O" "." "O" "O" "." "."] "No winner"]
Test Case: 380 | Input/Output: [["O" "X" "." "." "O" "." "X" "." "X"] "No winner"]
Test Case: 381 | Input/Output: [["O" "X" "O" "X" "O" "X" "X" "O" "O"] "O won"]
Test Case: 382 | Input/Output: [["O" "O" "X" "O" "X" "O" "O" "." "X"] "O won"]
Test Case: 383 | Input/Output: [["." "X" "O" "X" "." "X" "X" "X" "X"] "X won"]
Test Case: 384 | Input/Output: [["O" "X" "X" "." "O" "X" "." "X" "."] "No winner"]
Test Case: 385 | Input/Output: [["X" "." "X" "O" "X" "O" "." "X" "."] "No winner"]
Test Case: 386 | Input/Output: [["X" "X" "." "O" "X" "O" "X" "." "O"] "No winner"]
Test Case: 387 | Input/Output: [["." "X" "X" "." "O" "O" "." "O" "."] "No winner"]
Test Case: 388 | Input/Output: [["X" "." "X" "O" "O" "." "X" "O" "X"] "No winner"]
Test Case: 389 | Input/Output: [["X" "O" "." "." "O" "O" "X" "O" "X"] "O won"]
Test Case: 390 | Input/Output: [["O" "O" "X" "." "O" "." "." "O" "O"] "O won"]
Test Case: 391 | Input/Output: [["." "X" "." "." "O" "O" "." "X" "."] "No winner"]
Test Case: 392 | Input/Output: [["." "X" "O" "O" "O" "O" "O" "O" "X"] "O won"]
Test Case: 393 | Input/Output: [["X" "." "." "O" "O" "O" "X" "X" "X"] "O won"]
Test Case: 394 | Input/Output: [["O" "O" "X" "." "." "." "O" "O" "O"] "O won"]
Test Case: 395 | Input/Output: [["." "X" "O" "O" "." "O" "O" "X" "."] "No winner"]
Test Case: 396 | Input/Output: [["X" "." "." "O" "." "." "X" "X" "."] "No winner"]
Test Case: 397 | Input/Output: [["O" "." "O" "X" "X" "X" "." "O" "O"] "X won"]
Test Case: 398 | Input/Output: [["." "X" "X" "O" "X" "." "X" "X" "X"] "X won"]
Test Case: 399 | Input/Output: [["." "X" "." "." "X" "X" "." "X" "O"] "X won"]
Test Case: 400 | Input/Output: [["X" "." "." "X" "." "." "O" "O" "X"] "No winner"]
Test Case: 401 | Input/Output: [["X" "." "O" "O" "X" "O" "X" "." "X"] "X won"]
Test Case: 402 | Input/Output: [["O" "X" "O" "O" "O" "X" "X" "X" "X"] "X won"]
Test Case: 403 | Input/Output: [["." "O" "O" "X" "X" "X" "." "." "."] "X won"]
Test Case: 404 | Input/Output: [["." "." "O" "X" "X" "." "O" "." "."] "No winner"]
Test Case: 405 | Input/Output: [["." "X" "X" "." "O" "." "X" "O" "O"] "No winner"]
Test Case: 406 | Input/Output: [["X" "X" "X" "." "X" "X" "X" "X" "X"] "X won"]
Test Case: 407 | Input/Output: [["." "X" "X" "X" "O" "O" "O" "O" "O"] "O won"]
Test Case: 408 | Input/Output: [["O" "X" "X" "O" "O" "O" "X" "." "X"] "O won"]
Test Case: 409 | Input/Output: [["." "X" "." "." "O" "X" "X" "O" "O"] "No winner"]
Test Case: 410 | Input/Output: [["." "." "X" "." "O" "X" "." "X" "."] "No winner"]
Test Case: 411 | Input/Output: [["O" "." "X" "X" "O" "X" "X" "X" "X"] "X won"]
Test Case: 412 | Input/Output: [["O" "X" "X" "O" "X" "O" "X" "." "O"] "X won"]
Test Case: 413 | Input/Output: [["O" "." "X" "X" "X" "O" "O" "." "O"] "No winner"]
Test Case: 414 | Input/Output: [["O" "O" "O" "." "." "X" "." "O" "X"] "O won"]
Test Case: 415 | Input/Output: [["X" "X" "O" "." "." "O" "." "O" "O"] "O won"]
Test Case: 416 | Input/Output: [["X" "." "." "." "O" "." "X" "." "X"] "No winner"]
Test Case: 417 | Input/Output: [["." "." "O" "O" "." "X" "." "X" "X"] "No winner"]
Test Case: 418 | Input/Output: [["O" "O" "O" "O" "O" "X" "X" "." "."] "O won"]
Test Case: 419 | Input/Output: [["O" "." "O" "O" "." "." "X" "." "."] "No winner"]
Test Case: 420 | Input/Output: [["O" "." "X" "X" "X" "." "." "O" "X"] "No winner"]
Test Case: 421 | Input/Output: [["X" "X" "O" "X" "X" "O" "O" "X" "O"] "X won"]
Test Case: 422 | Input/Output: [["." "X" "X" "O" "X" "." "." "O" "X"] "No winner"]
Test Case: 423 | Input/Output: [["X" "O" "O" "." "." "." "X" "X" "O"] "No winner"]
Test Case: 424 | Input/Output: [["O" "." "." "O" "O" "O" "X" "X" "."] "O won"]
Test Case: 425 | Input/Output: [["X" "X" "O" "X" "O" "X" "O" "." "X"] "O won"]
Test Case: 426 | Input/Output: [["X" "." "X" "O" "." "O" "." "O" "O"] "No winner"]
Test Case: 427 | Input/Output: [["X" "X" "X" "X" "O" "X" "." "O" "X"] "X won"]
Test Case: 428 | Input/Output: [["." "X" "." "." "O" "." "O" "O" "O"] "O won"]
Test Case: 429 | Input/Output: [["." "X" "O" "O" "." "O" "O" "." "O"] "O won"]
Test Case: 430 | Input/Output: [["X" "X" "O" "O" "." "." "." "O" "."] "No winner"]
Test Case: 431 | Input/Output: [["." "." "." "." "X" "O" "." "O" "O"] "No winner"]
Test Case: 432 | Input/Output: [["O" "O" "O" "X" "X" "O" "X" "O" "X"] "O won"]
Test Case: 433 | Input/Output: [["O" "." "." "." "." "O" "." "." "."] "No winner"]
Test Case: 434 | Input/Output: [["." "O" "." "." "." "O" "X" "O" "O"] "No winner"]
Test Case: 435 | Input/Output: [["." "." "X" "." "O" "X" "O" "." "."] "No winner"]
Test Case: 436 | Input/Output: [["X" "O" "." "X" "X" "." "X" "X" "."] "X won"]
Test Case: 437 | Input/Output: [["X" "X" "O" "O" "." "O" "X" "O" "O"] "O won"]
Test Case: 438 | Input/Output: [["." "X" "O" "O" "X" "." "X" "." "X"] "No winner"]
Test Case: 439 | Input/Output: [["X" "." "." "." "." "O" "O" "X" "O"] "No winner"]
Test Case: 440 | Input/Output: [["." "O" "." "O" "X" "." "." "X" "."] "No winner"]
Test Case: 441 | Input/Output: [["O" "O" "." "O" "O" "." "X" "O" "."] "O won"]
Test Case: 442 | Input/Output: [["." "O" "X" "." "X" "X" "." "." "X"] "X won"]
Test Case: 443 | Input/Output: [["." "." "X" "." "X" "." "." "O" "X"] "No winner"]
Test Case: 444 | Input/Output: [["X" "X" "O" "O" "." "." "O" "X" "O"] "No winner"]
Test Case: 445 | Input/Output: [["." "." "." "O" "O" "." "O" "O" "."] "No winner"]
Test Case: 446 | Input/Output: [["." "O" "O" "X" "X" "O" "X" "O" "."] "No winner"]
Test Case: 447 | Input/Output: [["." "O" "X" "." "X" "O" "O" "X" "O"] "No winner"]
Test Case: 448 | Input/Output: [["." "O" "." "." "O" "O" "." "X" "X"] "No winner"]
Test Case: 449 | Input/Output: [["O" "." "O" "O" "O" "O" "O" "O" "X"] "O won"]
Test Case: 450 | Input/Output: [["X" "." "O" "O" "." "X" "O" "O" "X"] "No winner"]
Test Case: 451 | Input/Output: [["O" "O" "X" "O" "." "." "." "X" "O"] "No winner"]
Test Case: 452 | Input/Output: [["X" "O" "X" "X" "O" "X" "." "." "X"] "X won"]
Test Case: 453 | Input/Output: [["X" "O" "O" "O" "O" "X" "X" "." "O"] "No winner"]
Test Case: 454 | Input/Output: [["X" "X" "X" "O" "." "." "O" "O" "."] "X won"]
Test Case: 455 | Input/Output: [["X" "." "X" "." "." "." "O" "O" "O"] "O won"]
Test Case: 456 | Input/Output: [["O" "O" "X" "X" "O" "O" "X" "O" "."] "O won"]
Test Case: 457 | Input/Output: [["O" "X" "O" "." "." "X" "." "O" "."] "No winner"]
Test Case: 458 | Input/Output: [["X" "." "O" "X" "O" "X" "O" "." "X"] "O won"]
Test Case: 459 | Input/Output: [["O" "O" "X" "O" "X" "O" "X" "O" "X"] "X won"]
Test Case: 460 | Input/Output: [["X" "X" "." "." "X" "X" "X" "." "."] "No winner"]
Test Case: 461 | Input/Output: [["O" "X" "O" "." "O" "O" "." "." "X"] "No winner"]
Test Case: 462 | Input/Output: [["." "O" "O" "." "." "O" "O" "X" "O"] "O won"]
Test Case: 463 | Input/Output: [["." "." "O" "O" "." "." "X" "O" "X"] "No winner"]
Test Case: 464 | Input/Output: [["O" "." "O" "." "." "." "O" "." "X"] "No winner"]
Test Case: 465 | Input/Output: [["X" "." "X" "X" "O" "X" "X" "." "O"] "X won"]
Test Case: 466 | Input/Output: [["X" "." "X" "O" "O" "O" "X" "." "O"] "O won"]
Test Case: 467 | Input/Output: [["O" "." "." "." "X" "X" "." "." "X"] "No winner"]
Test Case: 468 | Input/Output: [["." "O" "X" "X" "X" "." "X" "O" "X"] "X won"]
Test Case: 469 | Input/Output: [["X" "X" "X" "O" "X" "X" "X" "O" "."] "X won"]
Test Case: 470 | Input/Output: [["O" "." "X" "." "O" "O" "X" "X" "."] "No winner"]
Test Case: 471 | Input/Output: [["." "." "X" "O" "X" "." "X" "." "X"] "X won"]
Test Case: 472 | Input/Output: [["." "." "." "." "." "." "." "O" "."] "No winner"]
Test Case: 473 | Input/Output: [["." "." "O" "X" "X" "." "O" "O" "."] "No winner"]
Test Case: 474 | Input/Output: [["." "O" "O" "X" "." "O" "O" "O" "X"] "No winner"]
Test Case: 475 | Input/Output: [["." "." "O" "." "X" "." "." "O" "O"] "No winner"]
Test Case: 476 | Input/Output: [["." "O" "O" "X" "O" "." "X" "O" "."] "O won"]
Test Case: 477 | Input/Output: [["." "X" "." "." "O" "." "." "O" "."] "No winner"]
Test Case: 478 | Input/Output: [["O" "X" "O" "X" "X" "." "X" "." "X"] "No winner"]
Test Case: 479 | Input/Output: [["O" "X" "." "." "X" "X" "O" "O" "X"] "No winner"]
Test Case: 480 | Input/Output: [["X" "O" "X" "O" "O" "O" "X" "X" "X"] "O won"]
Test Case: 481 | Input/Output: [["X" "." "O" "X" "X" "X" "X" "X" "."] "X won"]
Test Case: 482 | Input/Output: [["O" "X" "X" "." "O" "X" "O" "." "."] "No winner"]
Test Case: 483 | Input/Output: [["X" "X" "." "." "." "." "." "O" "O"] "No winner"]
Test Case: 484 | Input/Output: [["O" "X" "X" "O" "O" "X" "O" "O" "X"] "O won"]
Test Case: 485 | Input/Output: [["O" "." "O" "." "O" "X" "X" "X" "X"] "X won"]
Test Case: 486 | Input/Output: [["O" "O" "O" "O" "X" "O" "." "X" "."] "O won"]
Test Case: 487 | Input/Output: [["X" "O" "X" "." "X" "O" "." "." "X"] "X won"]
Test Case: 488 | Input/Output: [["." "X" "O" "X" "." "X" "X" "X" "X"] "X won"]
Test Case: 489 | Input/Output: [["O" "O" "O" "O" "X" "X" "O" "O" "."] "O won"]
Test Case: 490 | Input/Output: [["O" "X" "." "." "X" "O" "O" "." "X"] "No winner"]
Test Case: 491 | Input/Output: [["O" "." "." "X" "." "X" "O" "." "."] "No winner"]
Test Case: 492 | Input/Output: [["X" "." "O" "X" "." "X" "." "X" "."] "No winner"]
Test Case: 493 | Input/Output: [["." "X" "X" "X" "O" "X" "O" "O" "X"] "X won"]
Test Case: 494 | Input/Output: [["X" "O" "." "X" "O" "." "O" "O" "X"] "O won"]
Test Case: 495 | Input/Output: [["X" "X" "." "." "." "." "O" "." "O"] "No winner"]
Test Case: 496 | Input/Output: [["." "O" "X" "X" "O" "O" "O" "X" "X"] "No winner"]
Test Case: 497 | Input/Output: [["O" "." "." "X" "X" "X" "O" "X" "."] "X won"]
Test Case: 498 | Input/Output: [["O" "X" "O" "O" "O" "." "O" "X" "."] "O won"]
Test Case: 499 | Input/Output: [["O" "X" "X" "X" "O" "X" "O" "O" "O"] "O won"]
Test Case: 500 | Input/Output: [["." "." "X" "." "." "O" "O" "O" "X"] "No winner"]
Test Case: 501 | Input/Output: [["." "X" "X" "O" "." "O" "X" "X" "X"] "X won"]
Test Case: 502 | Input/Output: [["X" "O" "X" "X" "O" "X" "O" "O" "O"] "O won"]
Test Case: 503 | Input/Output: [["X" "O" "X" "." "X" "." "." "O" "."] "No winner"]
Test Case: 504 | Input/Output: [["O" "X" "O" "." "X" "X" "O" "." "X"] "No winner"]
Test Case: 505 | Input/Output: [["O" "X" "." "X" "X" "." "X" "X" "O"] "X won"]
Test Case: 506 | Input/Output: [["." "O" "O" "O" "." "." "O" "O" "."] "No winner"]
Test Case: 507 | Input/Output: [["O" "X" "." "X" "X" "X" "O" "O" "O"] "X won"]
Test Case: 508 | Input/Output: [["." "." "X" "X" "." "." "X" "X" "."] "No winner"]
Test Case: 509 | Input/Output: [["X" "." "X" "O" "." "O" "O" "." "X"] "No winner"]
Test Case: 510 | Input/Output: [["X" "O" "X" "X" "O" "X" "." "O" "O"] "O won"]
Test Case: 511 | Input/Output: [["." "X" "X" "." "." "O" "X" "O" "."] "No winner"]
Test Case: 512 | Input/Output: [["." "O" "O" "." "O" "X" "." "." "."] "No winner"]
Test Case: 513 | Input/Output: [["O" "X" "." "." "." "." "O" "O" "X"] "No winner"]
Test Case: 514 | Input/Output: [["O" "X" "." "." "X" "O" "." "X" "."] "X won"]
Test Case: 515 | Input/Output: [["." "." "O" "X" "X" "." "." "X" "O"] "No winner"]
Test Case: 516 | Input/Output: [["." "O" "." "X" "." "O" "O" "." "X"] "No winner"]
Test Case: 517 | Input/Output: [["." "." "X" "O" "X" "X" "X" "O" "O"] "X won"]
Test Case: 518 | Input/Output: [["X" "X" "." "." "O" "." "O" "O" "X"] "No winner"]
Test Case: 519 | Input/Output: [["." "O" "X" "X" "O" "O" "X" "O" "O"] "O won"]
Test Case: 520 | Input/Output: [["X" "." "O" "O" "X" "X" "O" "O" "X"] "X won"]
Test Case: 521 | Input/Output: [["." "X" "O" "." "O" "O" "O" "O" "O"] "O won"]
Test Case: 522 | Input/Output: [["O" "O" "O" "." "." "." "O" "X" "O"] "O won"]
Test Case: 523 | Input/Output: [["." "O" "O" "." "." "X" "." "O" "."] "No winner"]
Test Case: 524 | Input/Output: [["X" "O" "O" "." "O" "." "O" "O" "."] "O won"]
Test Case: 525 | Input/Output: [["." "X" "O" "." "X" "X" "." "." "X"] "No winner"]
Test Case: 526 | Input/Output: [["X" "." "." "O" "O" "." "." "." "."] "No winner"]
Test Case: 527 | Input/Output: [["X" "." "." "X" "X" "O" "X" "O" "."] "X won"]
Test Case: 528 | Input/Output: [["O" "." "." "O" "X" "X" "O" "." "O"] "O won"]
Test Case: 529 | Input/Output: [["." "X" "." "." "X" "O" "." "X" "O"] "X won"]
Test Case: 530 | Input/Output: [["." "O" "X" "X" "." "." "." "O" "."] "No winner"]
Test Case: 531 | Input/Output: [["X" "." "O" "." "." "." "O" "O" "O"] "O won"]
Test Case: 532 | Input/Output: [["X" "X" "O" "O" "O" "X" "O" "." "."] "O won"]
Test Case: 533 | Input/Output: [["." "X" "X" "O" "O" "." "X" "O" "."] "No winner"]
Test Case: 534 | Input/Output: [["." "X" "." "O" "." "O" "." "O" "O"] "No winner"]
Test Case: 535 | Input/Output: [["X" "X" "X" "X" "." "O" "X" "X" "X"] "X won"]
Test Case: 536 | Input/Output: [["." "O" "O" "X" "X" "X" "X" "O" "."] "X won"]
Test Case: 537 | Input/Output: [["O" "O" "O" "." "X" "." "." "." "O"] "O won"]
Test Case: 538 | Input/Output: [["X" "O" "O" "." "O" "." "." "." "O"] "No winner"]
Test Case: 539 | Input/Output: [["O" "O" "X" "O" "O" "O" "X" "." "O"] "O won"]
Test Case: 540 | Input/Output: [["." "X" "X" "." "O" "." "O" "X" "O"] "No winner"]
Test Case: 541 | Input/Output: [["." "O" "." "." "O" "." "." "O" "O"] "O won"]
Test Case: 542 | Input/Output: [["." "X" "O" "." "X" "O" "." "." "X"] "No winner"]
Test Case: 543 | Input/Output: [["X" "O" "X" "O" "X" "X" "X" "X" "X"] "X won"]
Test Case: 544 | Input/Output: [["O" "." "X" "O" "X" "." "X" "." "X"] "X won"]
Test Case: 545 | Input/Output: [["." "O" "O" "X" "O" "O" "." "." "O"] "O won"]
Test Case: 546 | Input/Output: [["X" "O" "O" "O" "." "." "O" "X" "O"] "No winner"]
Test Case: 547 | Input/Output: [["O" "." "." "O" "O" "." "O" "O" "."] "O won"]
Test Case: 548 | Input/Output: [["." "X" "X" "X" "." "X" "." "O" "."] "No winner"]
Test Case: 549 | Input/Output: [["O" "." "." "X" "O" "." "X" "O" "O"] "O won"]
Test Case: 550 | Input/Output: [["." "X" "O" "X" "O" "X" "O" "X" "X"] "O won"]
Test Case: 551 | Input/Output: [["X" "X" "O" "." "O" "." "O" "X" "."] "O won"]
Test Case: 552 | Input/Output: [["." "." "O" "X" "O" "." "O" "O" "O"] "O won"]
Test Case: 553 | Input/Output: [["." "." "X" "." "X" "X" "X" "O" "."] "X won"]
Test Case: 554 | Input/Output: [["X" "O" "." "." "X" "O" "X" "." "."] "No winner"]
Test Case: 555 | Input/Output: [["O" "X" "." "X" "O" "O" "O" "O" "X"] "No winner"]
Test Case: 556 | Input/Output: [["X" "O" "X" "X" "X" "." "X" "." "X"] "X won"]
Test Case: 557 | Input/Output: [["." "X" "X" "." "X" "X" "." "X" "."] "X won"]
Test Case: 558 | Input/Output: [["X" "O" "O" "O" "O" "." "O" "O" "X"] "O won"]
Test Case: 559 | Input/Output: [["X" "." "O" "X" "O" "." "." "." "."] "No winner"]
Test Case: 560 | Input/Output: [["O" "O" "." "X" "X" "." "O" "." "X"] "No winner"]
Test Case: 561 | Input/Output: [["X" "O" "." "O" "." "." "O" "O" "O"] "O won"]
Test Case: 562 | Input/Output: [["X" "X" "X" "X" "O" "X" "." "." "X"] "X won"]
Test Case: 563 | Input/Output: [["X" "O" "." "." "." "." "O" "." "."] "No winner"]
Test Case: 564 | Input/Output: [["O" "." "O" "." "O" "O" "X" "." "."] "No winner"]
Test Case: 565 | Input/Output: [["O" "." "." "O" "." "O" "O" "O" "X"] "O won"]
Test Case: 566 | Input/Output: [["X" "O" "X" "O" "." "O" "X" "." "."] "No winner"]
Test Case: 567 | Input/Output: [["X" "O" "." "X" "X" "." "." "X" "."] "No winner"]
Test Case: 568 | Input/Output: [["X" "." "." "." "O" "O" "O" "." "."] "No winner"]
Test Case: 569 | Input/Output: [["X" "X" "X" "O" "." "." "X" "X" "O"] "X won"]
Test Case: 570 | Input/Output: [["." "." "." "X" "O" "." "." "O" "."] "No winner"]
Test Case: 571 | Input/Output: [["X" "X" "." "O" "." "O" "." "O" "."] "No winner"]
Test Case: 572 | Input/Output: [["." "." "X" "X" "X" "." "." "X" "X"] "No winner"]
Test Case: 573 | Input/Output: [["X" "X" "." "X" "X" "X" "." "." "O"] "X won"]
Test Case: 574 | Input/Output: [["X" "." "." "." "O" "." "O" "." "X"] "No winner"]
Test Case: 575 | Input/Output: [["O" "X" "O" "O" "X" "O" "O" "." "."] "O won"]
Test Case: 576 | Input/Output: [["X" "X" "." "." "." "X" "X" "X" "."] "No winner"]
Test Case: 577 | Input/Output: [["." "." "." "O" "X" "O" "X" "O" "X"] "No winner"]
Test Case: 578 | Input/Output: [["X" "X" "." "O" "." "O" "." "O" "O"] "No winner"]
Test Case: 579 | Input/Output: [["." "X" "O" "X" "." "O" "O" "O" "."] "No winner"]
Test Case: 580 | Input/Output: [["X" "." "X" "." "O" "X" "X" "X" "X"] "X won"]
Test Case: 581 | Input/Output: [["." "." "X" "." "." "X" "." "X" "O"] "No winner"]
Test Case: 582 | Input/Output: [["X" "." "." "." "O" "." "." "X" "X"] "No winner"]
Test Case: 583 | Input/Output: [["." "." "O" "O" "." "O" "O" "X" "."] "No winner"]
Test Case: 584 | Input/Output: [["." "O" "." "O" "O" "O" "." "." "X"] "O won"]
Test Case: 585 | Input/Output: [["O" "O" "X" "X" "." "X" "." "X" "O"] "No winner"]
Test Case: 586 | Input/Output: [["X" "." "." "X" "O" "X" "O" "X" "."] "No winner"]
Test Case: 587 | Input/Output: [["." "O" "." "." "X" "X" "O" "X" "X"] "No winner"]
Test Case: 588 | Input/Output: [["O" "O" "O" "X" "." "." "." "X" "X"] "O won"]
Test Case: 589 | Input/Output: [["O" "O" "." "." "." "X" "X" "O" "."] "No winner"]
Test Case: 590 | Input/Output: [["O" "X" "X" "O" "X" "." "O" "O" "O"] "O won"]
Test Case: 591 | Input/Output: [["." "." "O" "O" "X" "." "." "O" "."] "No winner"]
Test Case: 592 | Input/Output: [["O" "." "O" "O" "O" "X" "X" "." "O"] "O won"]
Test Case: 593 | Input/Output: [["O" "O" "O" "X" "." "O" "X" "X" "."] "O won"]
Test Case: 594 | Input/Output: [["O" "O" "X" "O" "O" "O" "O" "O" "O"] "O won"]
Test Case: 595 | Input/Output: [["O" "O" "." "X" "O" "X" "O" "X" "O"] "O won"]
Test Case: 596 | Input/Output: [["O" "O" "O" "." "O" "O" "O" "." "X"] "O won"]
Test Case: 597 | Input/Output: [["O" "." "O" "O" "X" "X" "X" "X" "."] "No winner"]
Test Case: 598 | Input/Output: [["O" "X" "X" "O" "." "X" "." "." "."] "No winner"]
Test Case: 599 | Input/Output: [["." "." "." "X" "." "X" "X" "O" "X"] "No winner"]
Test Case: 600 | Input/Output: [["X" "." "O" "X" "O" "X" "O" "X" "O"] "O won"]
Test Case: 601 | Input/Output: [["." "O" "O" "X" "X" "." "X" "X" "."] "No winner"]
Test Case: 602 | Input/Output: [["." "O" "O" "." "O" "O" "X" "." "O"] "O won"]
Test Case: 603 | Input/Output: [["O" "O" "O" "X" "." "X" "." "." "."] "O won"]
Test Case: 604 | Input/Output: [["X" "." "X" "X" "X" "O" "." "." "."] "No winner"]
Test Case: 605 | Input/Output: [["O" "X" "." "X" "O" "." "O" "X" "."] "No winner"]
Test Case: 606 | Input/Output: [["X" "." "." "O" "O" "X" "." "O" "O"] "No winner"]
Test Case: 607 | Input/Output: [["." "X" "." "X" "." "X" "." "." "."] "No winner"]
Test Case: 608 | Input/Output: [["O" "X" "." "O" "X" "X" "." "X" "."] "X won"]
Test Case: 609 | Input/Output: [["X" "X" "X" "O" "." "." "." "." "O"] "X won"]
Test Case: 610 | Input/Output: [["." "." "X" "." "." "O" "X" "X" "."] "No winner"]
Test Case: 611 | Input/Output: [["O" "X" "X" "O" "X" "X" "." "O" "X"] "X won"]
Test Case: 612 | Input/Output: [["." "O" "X" "X" "O" "O" "O" "." "."] "No winner"]
Test Case: 613 | Input/Output: [["O" "." "X" "." "O" "." "O" "X" "."] "No winner"]
Test Case: 614 | Input/Output: [["X" "O" "X" "X" "." "X" "." "O" "X"] "X won"]
Test Case: 615 | Input/Output: [["O" "X" "." "O" "." "X" "O" "X" "X"] "O won"]
Test Case: 616 | Input/Output: [["." "X" "O" "." "X" "O" "O" "O" "."] "No winner"]
Test Case: 617 | Input/Output: [["O" "X" "O" "X" "O" "X" "." "X" "O"] "O won"]
Test Case: 618 | Input/Output: [["X" "O" "X" "O" "X" "X" "." "." "."] "No winner"]
Test Case: 619 | Input/Output: [["O" "." "." "." "X" "O" "." "O" "X"] "No winner"]
Test Case: 620 | Input/Output: [["X" "O" "X" "." "X" "." "X" "X" "O"] "X won"]
Test Case: 621 | Input/Output: [["O" "." "X" "X" "X" "." "." "O" "."] "No winner"]
Test Case: 622 | Input/Output: [["O" "X" "." "." "X" "." "O" "O" "."] "No winner"]
Test Case: 623 | Input/Output: [["O" "X" "O" "O" "X" "." "X" "X" "O"] "X won"]
Test Case: 624 | Input/Output: [["." "X" "." "X" "O" "." "." "." "X"] "No winner"]
Test Case: 625 | Input/Output: [["O" "O" "O" "X" "." "." "O" "O" "."] "O won"]
Test Case: 626 | Input/Output: [["O" "." "X" "." "X" "X" "O" "X" "."] "No winner"]
Test Case: 627 | Input/Output: [["X" "." "." "." "O" "O" "." "O" "X"] "No winner"]
Test Case: 628 | Input/Output: [["O" "O" "X" "O" "O" "O" "O" "X" "."] "O won"]
Test Case: 629 | Input/Output: [["X" "O" "O" "O" "X" "X" "O" "." "X"] "X won"]
Test Case: 630 | Input/Output: [["." "O" "O" "." "O" "." "O" "O" "O"] "O won"]
Test Case: 631 | Input/Output: [["." "." "X" "." "O" "X" "." "X" "X"] "X won"]
Test Case: 632 | Input/Output: [["X" "X" "O" "O" "." "O" "O" "O" "."] "No winner"]
Test Case: 633 | Input/Output: [["O" "." "X" "O" "O" "X" "O" "O" "X"] "O won"]
Test Case: 634 | Input/Output: [["X" "." "X" "." "O" "." "." "O" "."] "No winner"]
Test Case: 635 | Input/Output: [["X" "O" "X" "." "O" "O" "." "X" "X"] "No winner"]
Test Case: 636 | Input/Output: [["O" "O" "X" "O" "X" "." "X" "O" "O"] "X won"]
Test Case: 637 | Input/Output: [["X" "O" "O" "." "O" "O" "X" "." "."] "No winner"]
Test Case: 638 | Input/Output: [["X" "O" "O" "O" "X" "X" "." "O" "X"] "X won"]
Test Case: 639 | Input/Output: [["X" "." "X" "." "X" "X" "X" "." "O"] "X won"]
Test Case: 640 | Input/Output: [["." "." "O" "X" "O" "." "O" "O" "."] "O won"]
Test Case: 641 | Input/Output: [["O" "." "O" "X" "." "X" "." "X" "."] "No winner"]
Test Case: 642 | Input/Output: [["O" "X" "." "X" "X" "." "." "O" "X"] "No winner"]
Test Case: 643 | Input/Output: [["O" "O" "X" "X" "O" "O" "O" "." "X"] "No winner"]
Test Case: 644 | Input/Output: [["O" "O" "X" "O" "X" "X" "X" "X" "X"] "X won"]
Test Case: 645 | Input/Output: [["." "O" "O" "X" "O" "." "." "O" "O"] "O won"]
Test Case: 646 | Input/Output: [["X" "." "X" "." "O" "O" "X" "X" "X"] "X won"]
Test Case: 647 | Input/Output: [["X" "." "." "O" "X" "." "." "X" "O"] "No winner"]
Test Case: 648 | Input/Output: [["X" "X" "X" "O" "." "X" "X" "X" "."] "X won"]
Test Case: 649 | Input/Output: [["O" "O" "X" "O" "." "X" "X" "." "O"] "No winner"]
Test Case: 650 | Input/Output: [["." "O" "X" "X" "O" "O" "X" "O" "X"] "O won"]
Test Case: 651 | Input/Output: [["O" "O" "X" "." "." "O" "X" "O" "."] "No winner"]
Test Case: 652 | Input/Output: [["." "O" "O" "." "O" "X" "." "." "O"] "No winner"]
Test Case: 653 | Input/Output: [["." "." "O" "." "O" "O" "X" "O" "X"] "No winner"]
Test Case: 654 | Input/Output: [["X" "O" "O" "." "X" "X" "." "X" "X"] "X won"]
Test Case: 655 | Input/Output: [["O" "X" "X" "X" "O" "X" "X" "X" "."] "No winner"]
Test Case: 656 | Input/Output: [["." "X" "X" "." "X" "." "X" "." "."] "X won"]
Test Case: 657 | Input/Output: [["." "O" "X" "." "X" "X" "O" "X" "X"] "X won"]
Test Case: 658 | Input/Output: [["X" "X" "." "X" "." "." "." "." "."] "No winner"]
Test Case: 659 | Input/Output: [["O" "O" "X" "." "O" "X" "." "O" "."] "O won"]
Test Case: 660 | Input/Output: [["X" "." "O" "O" "." "." "X" "X" "."] "No winner"]
Test Case: 661 | Input/Output: [["X" "X" "." "X" "." "." "." "X" "X"] "No winner"]
Test Case: 662 | Input/Output: [["X" "X" "." "O" "O" "." "O" "." "."] "No winner"]
Test Case: 663 | Input/Output: [["O" "X" "O" "." "." "X" "." "." "."] "No winner"]
Test Case: 664 | Input/Output: [["X" "." "O" "X" "O" "O" "X" "O" "X"] "X won"]
Test Case: 665 | Input/Output: [["X" "X" "." "." "X" "O" "X" "X" "O"] "X won"]
Test Case: 666 | Input/Output: [["." "." "O" "X" "X" "X" "O" "X" "O"] "X won"]
Test Case: 667 | Input/Output: [["." "X" "X" "." "X" "X" "X" "." "."] "X won"]
Test Case: 668 | Input/Output: [["O" "." "X" "O" "X" "." "." "X" "."] "No winner"]
Test Case: 669 | Input/Output: [["O" "X" "X" "X" "X" "." "O" "." "O"] "No winner"]
Test Case: 670 | Input/Output: [["O" "O" "O" "O" "O" "." "." "." "X"] "O won"]
Test Case: 671 | Input/Output: [["X" "X" "O" "O" "O" "O" "." "X" "."] "O won"]
Test Case: 672 | Input/Output: [["O" "O" "O" "O" "O" "." "." "." "."] "O won"]
Test Case: 673 | Input/Output: [["X" "." "O" "O" "X" "X" "X" "O" "."] "No winner"]
Test Case: 674 | Input/Output: [["X" "O" "X" "X" "." "." "." "X" "X"] "No winner"]
Test Case: 675 | Input/Output: [["O" "X" "." "X" "." "X" "." "." "O"] "No winner"]
Test Case: 676 | Input/Output: [["." "X" "." "X" "O" "." "." "X" "O"] "No winner"]
Test Case: 677 | Input/Output: [["." "." "X" "." "O" "X" "O" "." "."] "No winner"]
Test Case: 678 | Input/Output: [["." "." "X" "." "X" "." "." "X" "X"] "No winner"]
Test Case: 679 | Input/Output: [["X" "X" "O" "O" "." "." "X" "." "O"] "No winner"]
Test Case: 680 | Input/Output: [["O" "." "O" "." "O" "." "O" "O" "O"] "O won"]
Test Case: 681 | Input/Output: [["." "." "X" "." "X" "." "O" "O" "X"] "No winner"]
Test Case: 682 | Input/Output: [["." "." "." "." "." "." "." "." "."] "No winner"]
Test Case: 683 | Input/Output: [["X" "X" "O" "X" "O" "O" "O" "O" "X"] "O won"]
Test Case: 684 | Input/Output: [["." "O" "." "." "O" "." "O" "." "."] "No winner"]
Test Case: 685 | Input/Output: [["O" "O" "O" "." "O" "X" "O" "O" "."] "O won"]
Test Case: 686 | Input/Output: [["." "." "O" "X" "O" "X" "X" "O" "."] "No winner"]
Test Case: 687 | Input/Output: [["X" "O" "." "O" "X" "X" "." "." "."] "No winner"]
Test Case: 688 | Input/Output: [["O" "O" "O" "X" "O" "." "." "X" "X"] "O won"]
Test Case: 689 | Input/Output: [["X" "." "O" "X" "." "X" "O" "X" "."] "No winner"]
Test Case: 690 | Input/Output: [["O" "." "X" "O" "X" "." "." "O" "."] "No winner"]
Test Case: 691 | Input/Output: [["." "." "." "X" "X" "X" "." "O" "."] "X won"]
Test Case: 692 | Input/Output: [["X" "." "." "." "." "X" "." "." "."] "No winner"]
Test Case: 693 | Input/Output: [["O" "." "." "." "." "X" "O" "." "."] "No winner"]
Test Case: 694 | Input/Output: [["O" "X" "X" "." "O" "." "X" "O" "."] "No winner"]
Test Case: 695 | Input/Output: [["." "X" "." "." "O" "." "X" "X" "X"] "X won"]
Test Case: 696 | Input/Output: [["O" "X" "X" "O" "." "." "O" "X" "O"] "O won"]
Test Case: 697 | Input/Output: [["." "O" "O" "O" "." "O" "O" "O" "O"] "O won"]
Test Case: 698 | Input/Output: [["." "O" "O" "X" "O" "X" "." "." "O"] "No winner"]
Test Case: 699 | Input/Output: [["O" "." "." "X" "X" "X" "." "." "."] "X won"]
Test Case: 700 | Input/Output: [["X" "X" "X" "X" "." "O" "." "X" "X"] "X won"]
Test Case: 701 | Input/Output: [["O" "." "X" "X" "O" "O" "O" "O" "."] "No winner"]
Test Case: 702 | Input/Output: [["." "O" "O" "O" "." "." "O" "." "X"] "No winner"]
Test Case: 703 | Input/Output: [["O" "." "O" "X" "O" "X" "." "." "X"] "No winner"]
Test Case: 704 | Input/Output: [["." "." "X" "." "." "O" "O" "." "."] "No winner"]
Test Case: 705 | Input/Output: [["O" "O" "." "O" "O" "O" "X" "O" "."] "O won"]
Test Case: 706 | Input/Output: [["." "." "X" "X" "O" "X" "X" "O" "X"] "X won"]
Test Case: 707 | Input/Output: [["X" "X" "." "." "X" "X" "." "." "O"] "No winner"]
Test Case: 708 | Input/Output: [["X" "O" "O" "O" "X" "O" "O" "O" "X"] "X won"]
Test Case: 709 | Input/Output: [["." "." "." "O" "X" "O" "." "O" "O"] "No winner"]
Test Case: 710 | Input/Output: [["X" "." "O" "X" "." "X" "O" "." "."] "No winner"]
Test Case: 711 | Input/Output: [["O" "X" "O" "." "X" "." "." "X" "O"] "X won"]
Test Case: 712 | Input/Output: [["X" "." "." "." "X" "X" "X" "X" "."] "No winner"]
Test Case: 713 | Input/Output: [["X" "." "O" "." "." "." "O" "O" "O"] "O won"]
Test Case: 714 | Input/Output: [["O" "X" "X" "." "O" "." "." "." "O"] "O won"]
Test Case: 715 | Input/Output: [["O" "X" "." "O" "X" "X" "." "." "O"] "No winner"]
Test Case: 716 | Input/Output: [["O" "X" "X" "O" "O" "O" "." "O" "O"] "O won"]
Test Case: 717 | Input/Output: [["X" "X" "O" "X" "X" "O" "X" "." "X"] "X won"]
Test Case: 718 | Input/Output: [["O" "O" "." "O" "O" "O" "." "O" "X"] "O won"]
Test Case: 719 | Input/Output: [["X" "." "." "X" "X" "." "O" "O" "X"] "X won"]
Test Case: 720 | Input/Output: [["O" "." "O" "X" "." "." "X" "X" "O"] "No winner"]
Test Case: 721 | Input/Output: [["O" "O" "O" "O" "." "O" "X" "X" "O"] "O won"]
Test Case: 722 | Input/Output: [["X" "X" "X" "." "X" "O" "O" "." "."] "X won"]
Test Case: 723 | Input/Output: [["O" "O" "." "O" "X" "." "X" "X" "X"] "X won"]
Test Case: 724 | Input/Output: [["O" "X" "O" "X" "." "O" "O" "O" "."] "No winner"]
Test Case: 725 | Input/Output: [["O" "X" "O" "." "X" "X" "." "O" "."] "No winner"]
Test Case: 726 | Input/Output: [["X" "O" "." "." "." "." "X" "." "O"] "No winner"]
Test Case: 727 | Input/Output: [["O" "O" "." "X" "O" "O" "X" "O" "X"] "O won"]
Test Case: 728 | Input/Output: [["." "." "." "X" "X" "." "." "O" "."] "No winner"]
Test Case: 729 | Input/Output: [["O" "." "X" "O" "O" "X" "." "X" "."] "No winner"]
Test Case: 730 | Input/Output: [["O" "." "." "X" "X" "." "X" "O" "."] "No winner"]
Test Case: 731 | Input/Output: [["X" "O" "O" "X" "O" "." "X" "." "O"] "X won"]
Test Case: 732 | Input/Output: [["X" "X" "." "." "." "X" "O" "X" "."] "No winner"]
Test Case: 733 | Input/Output: [["X" "X" "X" "X" "." "O" "O" "O" "."] "X won"]
Test Case: 734 | Input/Output: [["O" "X" "O" "X" "." "X" "." "." "X"] "No winner"]
Test Case: 735 | Input/Output: [["O" "." "." "O" "O" "." "O" "O" "O"] "O won"]
Test Case: 736 | Input/Output: [["O" "O" "." "." "." "." "O" "." "O"] "No winner"]
Test Case: 737 | Input/Output: [["O" "." "." "." "X" "X" "X" "." "X"] "No winner"]
Test Case: 738 | Input/Output: [["X" "X" "O" "X" "X" "X" "." "O" "O"] "X won"]
Test Case: 739 | Input/Output: [["O" "X" "X" "O" "O" "X" "X" "X" "."] "No winner"]
Test Case: 740 | Input/Output: [["O" "O" "O" "." "." "." "O" "X" "O"] "O won"]
Test Case: 741 | Input/Output: [["X" "O" "." "O" "." "X" "X" "." "X"] "No winner"]
Test Case: 742 | Input/Output: [["O" "O" "." "O" "O" "." "." "X" "X"] "No winner"]
Test Case: 743 | Input/Output: [["X" "O" "X" "O" "." "." "." "O" "X"] "No winner"]
Test Case: 744 | Input/Output: [["O" "X" "." "O" "." "X" "X" "X" "O"] "No winner"]
Test Case: 745 | Input/Output: [["O" "." "O" "O" "O" "." "." "O" "."] "No winner"]
Test Case: 746 | Input/Output: [["." "X" "." "X" "X" "X" "O" "O" "X"] "X won"]
Test Case: 747 | Input/Output: [["." "O" "O" "X" "." "O" "." "O" "X"] "No winner"]
Test Case: 748 | Input/Output: [["." "O" "." "." "O" "O" "X" "O" "O"] "O won"]
Test Case: 749 | Input/Output: [["X" "O" "." "X" "X" "X" "." "O" "O"] "X won"]
Test Case: 750 | Input/Output: [["O" "X" "." "O" "X" "O" "X" "X" "."] "X won"]
Test Case: 751 | Input/Output: [["." "." "O" "." "O" "." "X" "X" "X"] "X won"]
Test Case: 752 | Input/Output: [["X" "X" "." "O" "X" "." "." "O" "X"] "X won"]
Test Case: 753 | Input/Output: [["O" "." "X" "X" "X" "." "." "." "."] "No winner"]
Test Case: 754 | Input/Output: [["X" "." "O" "." "O" "." "O" "." "."] "O won"]
Test Case: 755 | Input/Output: [["." "." "X" "O" "X" "." "X" "." "O"] "X won"]
Test Case: 756 | Input/Output: [["." "X" "O" "." "O" "X" "O" "." "."] "O won"]
Test Case: 757 | Input/Output: [["O" "O" "O" "." "X" "X" "X" "X" "."] "O won"]
Test Case: 758 | Input/Output: [["." "O" "O" "O" "X" "O" "." "X" "X"] "No winner"]
Test Case: 759 | Input/Output: [["X" "." "X" "X" "O" "O" "." "X" "X"] "No winner"]
Test Case: 760 | Input/Output: [["O" "." "." "O" "O" "." "O" "." "O"] "O won"]
Test Case: 761 | Input/Output: [["." "O" "O" "O" "O" "X" "O" "X" "O"] "O won"]
Test Case: 762 | Input/Output: [["X" "." "." "O" "X" "X" "O" "O" "O"] "O won"]
Test Case: 763 | Input/Output: [["." "O" "O" "X" "X" "X" "X" "O" "."] "X won"]
Test Case: 764 | Input/Output: [["." "X" "X" "O" "X" "." "O" "X" "O"] "X won"]
Test Case: 765 | Input/Output: [["X" "X" "." "X" "." "." "X" "." "."] "X won"]
Test Case: 766 | Input/Output: [["." "O" "." "O" "X" "X" "O" "." "."] "No winner"]
Test Case: 767 | Input/Output: [["O" "X" "O" "." "O" "O" "O" "." "X"] "O won"]
Test Case: 768 | Input/Output: [["X" "." "." "O" "X" "O" "O" "O" "O"] "O won"]
Test Case: 769 | Input/Output: [["O" "X" "X" "O" "X" "O" "X" "O" "."] "X won"]
Test Case: 770 | Input/Output: [["X" "O" "." "X" "O" "X" "X" "O" "."] "X won"]
Test Case: 771 | Input/Output: [["X" "X" "." "O" "O" "." "." "X" "X"] "No winner"]
Test Case: 772 | Input/Output: [["O" "." "X" "X" "X" "X" "." "X" "."] "X won"]
Test Case: 773 | Input/Output: [["O" "." "O" "X" "X" "O" "." "O" "X"] "No winner"]
Test Case: 774 | Input/Output: [["X" "O" "O" "X" "." "O" "X" "X" "O"] "X won"]
Test Case: 775 | Input/Output: [["." "O" "X" "." "O" "X" "." "X" "X"] "X won"]
Test Case: 776 | Input/Output: [["X" "X" "O" "O" "O" "." "." "O" "X"] "No winner"]
Test Case: 777 | Input/Output: [["O" "." "." "O" "X" "X" "." "." "X"] "No winner"]
Test Case: 778 | Input/Output: [["X" "X" "X" "X" "X" "X" "O" "O" "X"] "X won"]
Test Case: 779 | Input/Output: [["O" "." "." "." "." "." "." "." "."] "No winner"]
Test Case: 780 | Input/Output: [["O" "." "X" "." "." "X" "X" "." "X"] "X won"]
Test Case: 781 | Input/Output: [["O" "." "O" "O" "." "." "O" "X" "O"] "O won"]
Test Case: 782 | Input/Output: [["X" "O" "X" "." "X" "O" "X" "X" "."] "X won"]
Test Case: 783 | Input/Output: [["X" "." "O" "X" "O" "X" "O" "O" "X"] "O won"]
Test Case: 784 | Input/Output: [["O" "." "." "." "X" "O" "O" "." "."] "No winner"]
Test Case: 785 | Input/Output: [["X" "O" "X" "." "O" "X" "." "X" "X"] "X won"]
Test Case: 786 | Input/Output: [["." "X" "O" "O" "X" "O" "O" "X" "."] "X won"]
Test Case: 787 | Input/Output: [["O" "X" "O" "." "." "O" "." "O" "X"] "No winner"]
Test Case: 788 | Input/Output: [["X" "." "X" "X" "O" "." "." "." "X"] "No winner"]
Test Case: 789 | Input/Output: [["O" "O" "O" "O" "." "X" "." "." "O"] "O won"]
Test Case: 790 | Input/Output: [["X" "." "X" "." "O" "X" "X" "X" "X"] "X won"]
Test Case: 791 | Input/Output: [["O" "O" "." "O" "." "O" "." "X" "."] "No winner"]
Test Case: 792 | Input/Output: [["X" "O" "O" "." "O" "X" "O" "X" "X"] "O won"]
Test Case: 793 | Input/Output: [["O" "O" "." "X" "O" "X" "O" "O" "O"] "O won"]
Test Case: 794 | Input/Output: [["O" "X" "O" "X" "X" "O" "X" "O" "O"] "O won"]
Test Case: 795 | Input/Output: [["." "X" "X" "O" "." "O" "X" "." "."] "No winner"]
Test Case: 796 | Input/Output: [["X" "." "X" "O" "." "X" "X" "." "X"] "X won"]
Test Case: 797 | Input/Output: [["O" "O" "O" "." "." "X" "." "." "O"] "O won"]
Test Case: 798 | Input/Output: [["." "." "X" "X" "." "X" "X" "O" "."] "No winner"]
Test Case: 799 | Input/Output: [["O" "O" "X" "." "." "." "X" "X" "X"] "X won"]
Test Case: 800 | Input/Output: [["O" "." "." "." "." "." "X" "." "."] "No winner"]
Test Case: 801 | Input/Output: [["X" "X" "O" "." "." "X" "X" "O" "."] "No winner"]
Test Case: 802 | Input/Output: [["." "." "O" "O" "X" "O" "X" "O" "X"] "No winner"]
Test Case: 803 | Input/Output: [["O" "X" "X" "O" "O" "X" "X" "O" "X"] "X won"]
Test Case: 804 | Input/Output: [["." "." "X" "." "X" "." "." "X" "."] "No winner"]
Test Case: 805 | Input/Output: [["." "O" "." "O" "." "." "." "." "O"] "No winner"]
Test Case: 806 | Input/Output: [["." "." "O" "." "X" "." "O" "O" "O"] "O won"]
Test Case: 807 | Input/Output: [["O" "." "O" "O" "O" "O" "X" "." "."] "O won"]
Test Case: 808 | Input/Output: [["X" "O" "X" "X" "X" "." "O" "." "X"] "X won"]
Test Case: 809 | Input/Output: [["X" "X" "O" "X" "X" "O" "." "O" "O"] "O won"]
Test Case: 810 | Input/Output: [["O" "." "." "O" "." "." "O" "X" "."] "O won"]
Test Case: 811 | Input/Output: [["." "." "X" "X" "." "X" "X" "O" "."] "No winner"]
Test Case: 812 | Input/Output: [["O" "O" "." "." "O" "X" "O" "." "O"] "O won"]
Test Case: 813 | Input/Output: [["O" "X" "." "O" "X" "." "X" "O" "X"] "No winner"]
Test Case: 814 | Input/Output: [["." "X" "X" "X" "X" "." "O" "O" "."] "No winner"]
Test Case: 815 | Input/Output: [["O" "." "." "X" "O" "X" "O" "X" "O"] "O won"]
Test Case: 816 | Input/Output: [["O" "X" "." "X" "." "." "X" "X" "."] "No winner"]
Test Case: 817 | Input/Output: [["O" "O" "." "X" "X" "." "X" "." "X"] "No winner"]
Test Case: 818 | Input/Output: [["O" "." "." "X" "O" "O" "." "." "X"] "No winner"]
Test Case: 819 | Input/Output: [["X" "O" "." "X" "." "O" "X" "X" "O"] "X won"]
Test Case: 820 | Input/Output: [["O" "." "X" "X" "O" "X" "O" "X" "O"] "O won"]
Test Case: 821 | Input/Output: [["O" "." "X" "O" "." "X" "O" "X" "O"] "O won"]
Test Case: 822 | Input/Output: [["X" "O" "O" "X" "O" "X" "O" "." "."] "O won"]
Test Case: 823 | Input/Output: [["O" "." "X" "X" "O" "O" "O" "X" "X"] "No winner"]
Test Case: 824 | Input/Output: [["." "." "." "." "X" "." "." "X" "."] "No winner"]
Test Case: 825 | Input/Output: [["X" "." "X" "." "." "X" "X" "X" "O"] "No winner"]
Test Case: 826 | Input/Output: [["." "." "." "X" "." "O" "." "O" "."] "No winner"]
Test Case: 827 | Input/Output: [["." "." "X" "O" "O" "O" "O" "X" "O"] "O won"]
Test Case: 828 | Input/Output: [["O" "." "." "X" "X" "X" "." "." "."] "X won"]
Test Case: 829 | Input/Output: [["X" "X" "O" "O" "X" "X" "O" "O" "O"] "O won"]
Test Case: 830 | Input/Output: [["O" "." "X" "." "." "." "O" "." "X"] "No winner"]
Test Case: 831 | Input/Output: [["X" "." "X" "X" "X" "." "X" "." "X"] "X won"]
Test Case: 832 | Input/Output: [["O" "X" "O" "O" "." "O" "O" "." "X"] "O won"]
Test Case: 833 | Input/Output: [["X" "X" "." "X" "O" "." "O" "." "."] "No winner"]
Test Case: 834 | Input/Output: [["O" "O" "X" "O" "X" "O" "X" "." "O"] "X won"]
Test Case: 835 | Input/Output: [["X" "O" "X" "O" "X" "." "X" "O" "O"] "X won"]
Test Case: 836 | Input/Output: [["." "." "O" "." "." "X" "." "O" "O"] "No winner"]
Test Case: 837 | Input/Output: [["O" "X" "O" "." "X" "O" "O" "." "X"] "No winner"]
Test Case: 838 | Input/Output: [["O" "O" "O" "." "O" "O" "." "X" "X"] "O won"]
Test Case: 839 | Input/Output: [["X" "X" "O" "." "O" "X" "O" "O" "."] "O won"]
Test Case: 840 | Input/Output: [["." "O" "O" "." "." "." "O" "O" "."] "No winner"]
Test Case: 841 | Input/Output: [["X" "O" "X" "O" "X" "O" "X" "." "X"] "X won"]
Test Case: 842 | Input/Output: [["O" "." "O" "." "X" "X" "." "." "."] "No winner"]
Test Case: 843 | Input/Output: [["O" "O" "O" "O" "X" "O" "O" "O" "."] "O won"]
Test Case: 844 | Input/Output: [["." "O" "X" "." "X" "X" "O" "O" "O"] "O won"]
Test Case: 845 | Input/Output: [["." "O" "." "X" "X" "X" "O" "X" "."] "X won"]
Test Case: 846 | Input/Output: [["X" "." "O" "." "X" "O" "X" "." "O"] "O won"]
Test Case: 847 | Input/Output: [["." "." "X" "O" "." "." "O" "X" "O"] "No winner"]
Test Case: 848 | Input/Output: [["." "O" "O" "O" "X" "X" "X" "O" "."] "No winner"]
Test Case: 849 | Input/Output: [["X" "O" "X" "O" "X" "X" "X" "O" "."] "X won"]
Test Case: 850 | Input/Output: [["O" "." "." "." "." "X" "." "X" "X"] "No winner"]
Test Case: 851 | Input/Output: [["." "X" "O" "O" "O" "." "X" "X" "O"] "No winner"]
Test Case: 852 | Input/Output: [["X" "." "X" "." "O" "." "O" "X" "."] "No winner"]
Test Case: 853 | Input/Output: [["X" "X" "." "X" "X" "O" "O" "O" "O"] "O won"]
Test Case: 854 | Input/Output: [["." "O" "." "O" "O" "." "X" "X" "."] "No winner"]
Test Case: 855 | Input/Output: [["X" "X" "O" "O" "X" "." "." "O" "O"] "No winner"]
Test Case: 856 | Input/Output: [["." "O" "O" "." "O" "O" "X" "X" "X"] "X won"]
Test Case: 857 | Input/Output: [["O" "O" "." "X" "O" "X" "O" "O" "X"] "O won"]
Test Case: 858 | Input/Output: [["O" "O" "X" "." "." "." "." "X" "X"] "No winner"]
Test Case: 859 | Input/Output: [["O" "O" "." "." "O" "." "." "X" "X"] "No winner"]
Test Case: 860 | Input/Output: [["X" "X" "O" "X" "X" "X" "X" "O" "."] "X won"]
Test Case: 861 | Input/Output: [["O" "X" "X" "." "O" "X" "O" "X" "."] "No winner"]
Test Case: 862 | Input/Output: [["." "." "O" "O" "." "X" "O" "X" "O"] "No winner"]
Test Case: 863 | Input/Output: [["." "O" "O" "X" "." "O" "." "O" "O"] "O won"]
Test Case: 864 | Input/Output: [["." "O" "X" "O" "." "X" "X" "X" "."] "No winner"]
Test Case: 865 | Input/Output: [["O" "X" "X" "." "X" "O" "." "X" "X"] "X won"]
Test Case: 866 | Input/Output: [["X" "X" "X" "X" "X" "." "O" "X" "X"] "X won"]
Test Case: 867 | Input/Output: [["." "X" "X" "X" "O" "O" "O" "O" "X"] "No winner"]
Test Case: 868 | Input/Output: [["X" "O" "O" "O" "X" "O" "X" "X" "."] "No winner"]
Test Case: 869 | Input/Output: [["O" "X" "X" "O" "." "O" "X" "O" "O"] "No winner"]
Test Case: 870 | Input/Output: [["." "O" "X" "O" "." "O" "O" "." "X"] "No winner"]
Test Case: 871 | Input/Output: [["O" "X" "X" "." "." "O" "." "X" "X"] "No winner"]
Test Case: 872 | Input/Output: [["X" "X" "." "." "X" "X" "." "X" "."] "X won"]
Test Case: 873 | Input/Output: [["." "." "O" "X" "X" "O" "X" "O" "X"] "No winner"]
Test Case: 874 | Input/Output: [["X" "O" "." "." "." "X" "O" "." "X"] "No winner"]
Test Case: 875 | Input/Output: [["O" "O" "O" "." "." "." "O" "." "X"] "O won"]
Test Case: 876 | Input/Output: [["X" "." "O" "X" "X" "." "X" "X" "."] "X won"]
Test Case: 877 | Input/Output: [["." "." "X" "X" "O" "X" "X" "O" "O"] "No winner"]
Test Case: 878 | Input/Output: [["X" "X" "O" "O" "O" "O" "X" "." "."] "O won"]
Test Case: 879 | Input/Output: [["O" "O" "X" "X" "." "." "." "X" "X"] "No winner"]
Test Case: 880 | Input/Output: [["." "." "X" "." "." "O" "O" "." "O"] "No winner"]
Test Case: 881 | Input/Output: [["O" "." "." "O" "X" "." "X" "O" "O"] "No winner"]
Test Case: 882 | Input/Output: [["." "O" "O" "X" "X" "O" "." "." "."] "No winner"]
Test Case: 883 | Input/Output: [["O" "." "." "." "." "X" "O" "O" "X"] "No winner"]
Test Case: 884 | Input/Output: [["X" "X" "O" "X" "." "O" "X" "X" "O"] "X won"]
Test Case: 885 | Input/Output: [["X" "X" "X" "X" "X" "X" "." "X" "X"] "X won"]
Test Case: 886 | Input/Output: [["O" "X" "X" "O" "O" "." "." "X" "O"] "O won"]
Test Case: 887 | Input/Output: [["." "X" "." "X" "X" "X" "X" "O" "."] "X won"]
Test Case: 888 | Input/Output: [["X" "O" "X" "." "." "X" "O" "." "X"] "X won"]
Test Case: 889 | Input/Output: [["X" "." "X" "X" "O" "X" "." "." "X"] "X won"]
Test Case: 890 | Input/Output: [["X" "." "O" "X" "O" "X" "O" "X" "."] "O won"]
Test Case: 891 | Input/Output: [["O" "." "O" "X" "O" "." "X" "O" "O"] "O won"]
Test Case: 892 | Input/Output: [["." "X" "O" "O" "." "." "." "." "."] "No winner"]
Test Case: 893 | Input/Output: [["X" "." "X" "X" "." "." "." "." "O"] "No winner"]
Test Case: 894 | Input/Output: [["X" "O" "." "X" "X" "X" "X" "." "O"] "X won"]
Test Case: 895 | Input/Output: [["X" "." "O" "." "X" "." "." "O" "."] "No winner"]
Test Case: 896 | Input/Output: [["." "." "X" "." "." "." "." "." "."] "No winner"]
Test Case: 897 | Input/Output: [["X" "X" "O" "O" "X" "O" "O" "X" "."] "X won"]
Test Case: 898 | Input/Output: [["O" "X" "X" "X" "X" "." "X" "X" "O"] "X won"]
Test Case: 899 | Input/Output: [["X" "O" "X" "." "O" "X" "X" "." "."] "No winner"]
Test Case: 900 | Input/Output: [["X" "O" "O" "O" "." "X" "." "X" "."] "No winner"]
Test Case: 901 | Input/Output: [["O" "X" "X" "X" "." "O" "." "." "O"] "No winner"]
Test Case: 902 | Input/Output: [["O" "X" "X" "X" "." "." "." "X" "O"] "No winner"]
Test Case: 903 | Input/Output: [["." "." "." "X" "O" "O" "O" "." "O"] "No winner"]
Test Case: 904 | Input/Output: [["X" "." "O" "O" "." "X" "." "X" "X"] "No winner"]
Test Case: 905 | Input/Output: [["O" "O" "X" "." "." "O" "X" "." "O"] "No winner"]
Test Case: 906 | Input/Output: [["." "X" "X" "." "O" "O" "O" "." "O"] "No winner"]
Test Case: 907 | Input/Output: [["X" "X" "O" "X" "." "X" "." "O" "."] "No winner"]
Test Case: 908 | Input/Output: [["X" "O" "O" "X" "X" "O" "O" "O" "X"] "X won"]
Test Case: 909 | Input/Output: [["." "O" "O" "X" "X" "O" "X" "O" "X"] "No winner"]
Test Case: 910 | Input/Output: [["O" "O" "X" "." "X" "O" "X" "O" "X"] "X won"]
Test Case: 911 | Input/Output: [["X" "O" "O" "." "." "X" "O" "O" "X"] "No winner"]
Test Case: 912 | Input/Output: [["O" "." "X" "." "O" "O" "O" "." "X"] "No winner"]
Test Case: 913 | Input/Output: [["X" "." "O" "X" "X" "X" "O" "." "."] "X won"]
Test Case: 914 | Input/Output: [["." "." "." "O" "O" "O" "O" "X" "."] "O won"]
Test Case: 915 | Input/Output: [["X" "X" "O" "." "X" "X" "O" "O" "O"] "O won"]
Test Case: 916 | Input/Output: [["X" "O" "O" "." "X" "X" "O" "O" "O"] "O won"]
Test Case: 917 | Input/Output: [["O" "X" "X" "O" "." "O" "O" "." "."] "O won"]
Test Case: 918 | Input/Output: [["O" "." "." "." "." "." "." "X" "X"] "No winner"]
Test Case: 919 | Input/Output: [["X" "X" "O" "O" "O" "X" "." "O" "X"] "No winner"]
Test Case: 920 | Input/Output: [["O" "O" "." "." "." "O" "O" "X" "X"] "No winner"]
Test Case: 921 | Input/Output: [["." "." "O" "X" "X" "X" "." "X" "X"] "X won"]
Test Case: 922 | Input/Output: [["O" "." "O" "X" "X" "." "X" "." "X"] "No winner"]
Test Case: 923 | Input/Output: [["." "." "O" "." "O" "." "." "X" "X"] "No winner"]
Test Case: 924 | Input/Output: [["." "X" "O" "X" "X" "X" "X" "." "."] "X won"]
Test Case: 925 | Input/Output: [["." "O" "." "O" "O" "X" "O" "." "X"] "No winner"]
Test Case: 926 | Input/Output: [["." "." "X" "O" "O" "." "." "O" "."] "No winner"]
Test Case: 927 | Input/Output: [["O" "." "X" "." "X" "X" "X" "O" "."] "X won"]
Test Case: 928 | Input/Output: [["X" "X" "X" "X" "." "X" "." "X" "O"] "X won"]
Test Case: 929 | Input/Output: [["." "O" "X" "X" "O" "." "X" "O" "O"] "O won"]
Test Case: 930 | Input/Output: [["O" "." "." "X" "." "O" "." "O" "X"] "No winner"]
Test Case: 931 | Input/Output: [["." "X" "X" "X" "X" "O" "." "O" "."] "No winner"]
Test Case: 932 | Input/Output: [["X" "." "O" "O" "X" "." "X" "X" "."] "No winner"]
Test Case: 933 | Input/Output: [["O" "O" "." "X" "O" "X" "." "O" "X"] "O won"]
Test Case: 934 | Input/Output: [["O" "." "." "." "O" "O" "X" "X" "X"] "X won"]
Test Case: 935 | Input/Output: [["." "." "O" "." "X" "O" "O" "X" "X"] "No winner"]
Test Case: 936 | Input/Output: [["O" "." "O" "." "O" "X" "." "X" "O"] "O won"]
Test Case: 937 | Input/Output: [["X" "X" "O" "X" "." "X" "X" "O" "X"] "X won"]
Test Case: 938 | Input/Output: [["X" "." "O" "." "." "." "X" "O" "X"] "No winner"]
Test Case: 939 | Input/Output: [["O" "O" "X" "O" "O" "." "O" "." "X"] "O won"]
Test Case: 940 | Input/Output: [["X" "O" "O" "X" "O" "." "O" "X" "O"] "O won"]
Test Case: 941 | Input/Output: [["." "X" "X" "X" "X" "X" "." "O" "O"] "X won"]
Test Case: 942 | Input/Output: [["." "O" "." "X" "O" "." "." "X" "O"] "No winner"]
Test Case: 943 | Input/Output: [["X" "." "O" "O" "O" "X" "." "." "."] "No winner"]
Test Case: 944 | Input/Output: [["O" "O" "." "O" "." "." "X" "X" "X"] "X won"]
Test Case: 945 | Input/Output: [["O" "X" "O" "X" "." "." "." "X" "X"] "No winner"]
Test Case: 946 | Input/Output: [["O" "X" "." "X" "O" "." "O" "." "."] "No winner"]
Test Case: 947 | Input/Output: [["O" "O" "X" "X" "." "O" "." "X" "."] "No winner"]
Test Case: 948 | Input/Output: [["." "X" "X" "." "O" "O" "X" "." "X"] "No winner"]
Test Case: 949 | Input/Output: [["X" "." "X" "X" "." "O" "." "." "O"] "No winner"]
Test Case: 950 | Input/Output: [["O" "O" "." "O" "X" "O" "." "O" "X"] "No winner"]
Test Case: 951 | Input/Output: [["." "X" "X" "X" "O" "X" "O" "X" "."] "No winner"]
Test Case: 952 | Input/Output: [["O" "." "O" "O" "." "O" "." "X" "O"] "O won"]
Test Case: 953 | Input/Output: [["O" "X" "X" "O" "X" "." "O" "X" "X"] "O won"]
Test Case: 954 | Input/Output: [["X" "X" "O" "X" "." "O" "X" "X" "."] "X won"]
Test Case: 955 | Input/Output: [["O" "X" "." "." "O" "." "O" "O" "X"] "No winner"]
Test Case: 956 | Input/Output: [["X" "O" "X" "." "O" "X" "X" "." "."] "No winner"]
Test Case: 957 | Input/Output: [["." "O" "." "O" "O" "O" "O" "O" "."] "O won"]
Test Case: 958 | Input/Output: [["O" "X" "X" "X" "." "." "X" "X" "."] "No winner"]
Test Case: 959 | Input/Output: [["X" "." "." "O" "." "X" "O" "O" "O"] "O won"]
Test Case: 960 | Input/Output: [["O" "O" "." "X" "." "." "." "O" "O"] "No winner"]
Test Case: 961 | Input/Output: [["." "O" "O" "O" "X" "O" "." "." "."] "No winner"]
Test Case: 962 | Input/Output: [["O" "O" "X" "X" "O" "." "O" "." "O"] "O won"]
Test Case: 963 | Input/Output: [["." "." "O" "." "O" "." "X" "O" "X"] "No winner"]
Test Case: 964 | Input/Output: [["X" "O" "O" "O" "O" "X" "O" "O" "."] "O won"]
Test Case: 965 | Input/Output: [["." "X" "O" "." "O" "O" "." "X" "."] "No winner"]
Test Case: 966 | Input/Output: [["." "." "O" "O" "X" "O" "X" "X" "O"] "O won"]
Test Case: 967 | Input/Output: [["X" "X" "." "X" "." "." "O" "." "O"] "No winner"]
Test Case: 968 | Input/Output: [["X" "." "." "X" "X" "X" "X" "X" "X"] "X won"]
Test Case: 969 | Input/Output: [["X" "." "." "X" "X" "." "O" "O" "O"] "O won"]
Test Case: 970 | Input/Output: [["." "." "." "." "." "." "." "X" "O"] "No winner"]
Test Case: 971 | Input/Output: [["X" "X" "X" "." "O" "." "O" "." "O"] "X won"]
Test Case: 972 | Input/Output: [["O" "X" "O" "." "." "X" "O" "." "."] "No winner"]
Test Case: 973 | Input/Output: [["X" "X" "O" "O" "X" "X" "O" "X" "X"] "X won"]
Test Case: 974 | Input/Output: [["X" "O" "." "." "." "X" "X" "X" "X"] "X won"]
Test Case: 975 | Input/Output: [["." "." "." "." "." "." "X" "." "O"] "No winner"]
Test Case: 976 | Input/Output: [["X" "X" "O" "." "X" "." "." "X" "X"] "X won"]
Test Case: 977 | Input/Output: [["." "O" "O" "X" "." "O" "." "X" "O"] "O won"]
Test Case: 978 | Input/Output: [["O" "." "X" "." "X" "." "X" "." "."] "X won"]
Test Case: 979 | Input/Output: [["." "X" "." "O" "." "O" "." "." "."] "No winner"]
Test Case: 980 | Input/Output: [["." "O" "O" "." "." "O" "O" "X" "O"] "O won"]
Test Case: 981 | Input/Output: [["X" "X" "O" "O" "O" "X" "O" "X" "."] "O won"]
Test Case: 982 | Input/Output: [["X" "O" "X" "O" "X" "." "O" "." "."] "No winner"]
Test Case: 983 | Input/Output: [["." "." "O" "O" "X" "O" "O" "X" "X"] "No winner"]
Test Case: 984 | Input/Output: [["O" "X" "." "O" "X" "X" "O" "O" "X"] "O won"]
Test Case: 985 | Input/Output: [["O" "X" "O" "X" "X" "." "X" "O" "O"] "No winner"]
Test Case: 986 | Input/Output: [["X" "X" "X" "O" "O" "X" "O" "X" "O"] "X won"]
Test Case: 987 | Input/Output: [["." "X" "O" "." "." "." "." "O" "."] "No winner"]
Test Case: 988 | Input/Output: [["X" "X" "X" "." "X" "X" "." "O" "X"] "X won"]
Test Case: 989 | Input/Output: [["." "." "X" "O" "X" "." "O" "X" "X"] "No winner"]
Test Case: 990 | Input/Output: [["X" "." "O" "X" "X" "O" "." "O" "."] "No winner"]
Test Case: 991 | Input/Output: [["O" "." "." "." "X" "O" "O" "." "X"] "No winner"]
Test Case: 992 | Input/Output: [["O" "O" "O" "." "O" "." "O" "X" "."] "O won"]
Test Case: 993 | Input/Output: [["X" "X" "." "O" "." "O" "." "O" "X"] "No winner"]
Test Case: 994 | Input/Output: [["O" "X" "O" "." "." "X" "O" "X" "."] "No winner"]
Test Case: 995 | Input/Output: [["X" "." "." "." "O" "O" "X" "X" "."] "No winner"]
Test Case: 996 | Input/Output: [["O" "O" "O" "X" "O" "O" "." "." "."] "O won"]
Test Case: 997 | Input/Output: [["O" "." "." "O" "." "O" "O" "X" "O"] "O won"]
Test Case: 998 | Input/Output: [["X" "O" "O" "O" "X" "." "X" "." "X"] "X won"]
Test Case: 999 | Input/Output: [["X" "X" "O" "O" "O" "X" "X" "." "X"] "No winner"]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 35ba1f6f26b4bf4a3bf22e92de13e0054660f326
GitHub link = https://github.com/lspector/Clojush/commit/35ba1f6f26b4bf4a3bf22e92de13e0054660f326
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (X won O won No winner #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7bdb4d69 clojush.instructions.tag$tag_instruction_erc$fn__2160@7bdb4d69] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x361fa478 clojush.instructions.tag$tagged_instruction_erc$fn__2166@361fa478] in1 print_newline boolean_pop string_fromchar string_flush boolean_swap exec_y string_butlast string_conjchar boolean_or boolean_empty print_vector_string exec_s_when_autoconstructing char_iswhitespace vector_string_replacefirst string_first exec_do*while exec_string_iterate vector_string_eq exec_empty exec_rot vector_string_concat char_pop exec_dup vector_string_flush boolean_flush char_isdigit string_reverse exec_k char_rot print_char boolean_xor string_replacefirst vector_string_dup string_last print_boolean boolean_rot vector_string_rest string_concat vector_string_butlast vector_string_rot exec_k_when_autoconstructing char_swap vector_string_remove string_eq boolean_dup vector_string_swap exec_eq string_emptystring string_swap exec_while exec_swap string_replacechar char_allfromstring string_pop vector_string_last vector_string_pop exec_if boolean_invert_first_then_and print_string vector_string_first char_isletter boolean_eq string_replacefirstchar string_replace char_dup exec_y_when_autoconstructing char_eq vector_string_conj boolean_not exec_do*vector_string string_empty char_empty exec_pop string_removechar vector_string_replace char_flush vector_string_emptyvector exec_s string_containschar vector_string_pushall exec_noop string_split string_fromboolean string_rest string_rot string_parse_to_chars print_exec string_contains vector_string_contains vector_string_reverse boolean_and exec_flush vector_string_empty exec_when boolean_invert_second_then_and string_dup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.tic_tac_toe$make_tic_tac_toe_error_function_from_cases$the_actual_tic_tac_toe_error_function__7486 0x3b4f1eb clojush.problems.software.tic_tac_toe$make_tic_tac_toe_error_function_from_cases$the_actual_tic_tac_toe_error_function__7486@3b4f1eb]
error-threshold = 0
evalpush-limit = 600
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 300
max-genome-size-in-initial-program = 400
max-point-evaluations = 1.0E101
max-points = 1200
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.problems.software.tic_tac_toe$tic_tac_toe_initial_report 0x22bfd4b clojush.problems.software.tic_tac_toe$tic_tac_toe_initial_report@22bfd4b]
problem-specific-report = #object[clojush.problems.software.tic_tac_toe$tic_tac_toe_report 0x5fa9247b clojush.problems.software.tic_tac_toe$tic_tac_toe_report@5fa9247b]
random-screen = false
random-seed = -56 53 -119 -42 -43 37 102 2 93 -23 63 42 12 -64 36 -24
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Tic Tac Toe problem report - generation 0
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction string_eq} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction string_empty} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_dup} {:close 1, :instruction char_rot} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_contains} {:close 1, :instruction exec_swap} {:close 1, :instruction char_isdigit} {:close 1, :instruction vector_string_rest} {:close 0, :instruction vector_string_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction string_contains} {:close 0, :instruction char_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_string_last} {:close 1, :instruction char_eq} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_while} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 1, :instruction char_empty} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_isletter} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_flush} {:close 0, :instruction char_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_rest} {:close 0, :instruction char_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_contains} {:close 1, :instruction exec_flush} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_eq} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_exec} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_or} {:close 0, :instruction string_flush} {:close 0, :instruction vector_string_flush} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_char} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_char} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*vector_string} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_containschar} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_contains} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_contains} {:close 2, :instruction vector_string_flush} {:close 0, :instruction string_emptystring} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_char} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_iswhitespace})
Lexicase best program: (exec_swap (exec_when () exec_when () string_eq char_rot boolean_or) (string_empty "No winner" exec_dup (char_rot) char_flush vector_string_pop exec_swap () (boolean_eq string_contains exec_swap () (char_isdigit) vector_string_rest) vector_string_eq exec_s (print_string string_swap boolean_and exec_rot (string_contains char_pop exec_do*while ()) (exec_rot (vector_string_emptyvector vector_string_conj string_replacefirst string_replace) (vector_string_butlast) (vector_string_replace print_vector_string exec_empty string_replacefirst boolean_xor char_allfromstring string_fromboolean boolean_flush vector_string_last char_eq) print_vector_string) (exec_while (vector_string_flush) string_rot) string_reverse char_empty) (string_replacefirstchar boolean_and) (exec_do*vector_string (exec_y (string_split boolean_and vector_string_replace string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_last exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" string_replacefirstchar vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) string_swap "No winner") string_conjchar char_isletter char_iswhitespace in1 boolean_eq exec_k_when_autoconstructing (exec_if (vector_string_pop print_vector_string) (vector_string_reverse boolean_not) vector_string_swap vector_string_remove exec_k () (string_parse_to_chars exec_string_iterate (boolean_empty char_flush char_flush exec_pop () string_eq) vector_string_rest char_empty boolean_pop string_contains exec_flush) string_parse_to_chars vector_string_eq vector_string_remove print_exec (string_reverse boolean_or string_flush vector_string_flush char_isletter boolean_dup print_char boolean_eq print_char vector_string_last vector_string_replacefirst char_swap exec_y_when_autoconstructing (string_butlast exec_when (boolean_swap exec_do*vector_string () exec_rot (vector_string_reverse string_fromboolean vector_string_concat string_containschar exec_do*while () boolean_xor string_contains string_flush) (vector_string_contains vector_string_flush) () string_emptystring vector_string_remove print_char exec_string_iterate (char_iswhitespace))))) ())
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 190
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction string_eq} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction string_empty} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_dup} {:close 1, :instruction char_rot} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_contains} {:close 1, :instruction exec_swap} {:close 1, :instruction char_isdigit} {:close 1, :instruction vector_string_rest} {:close 0, :instruction vector_string_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction string_contains} {:close 0, :instruction char_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_string_last} {:close 1, :instruction char_eq} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_while} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 1, :instruction char_empty} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_isletter} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_flush} {:close 0, :instruction char_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_rest} {:close 0, :instruction char_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_contains} {:close 1, :instruction exec_flush} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_eq} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_exec} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_or} {:close 0, :instruction string_flush} {:close 0, :instruction vector_string_flush} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_char} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_char} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*vector_string} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_containschar} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_contains} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_contains} {:close 2, :instruction vector_string_flush} {:close 0, :instruction string_emptystring} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_char} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_iswhitespace})
Zero cases best program: (exec_swap (exec_when () exec_when () string_eq char_rot boolean_or) (string_empty "No winner" exec_dup (char_rot) char_flush vector_string_pop exec_swap () (boolean_eq string_contains exec_swap () (char_isdigit) vector_string_rest) vector_string_eq exec_s (print_string string_swap boolean_and exec_rot (string_contains char_pop exec_do*while ()) (exec_rot (vector_string_emptyvector vector_string_conj string_replacefirst string_replace) (vector_string_butlast) (vector_string_replace print_vector_string exec_empty string_replacefirst boolean_xor char_allfromstring string_fromboolean boolean_flush vector_string_last char_eq) print_vector_string) (exec_while (vector_string_flush) string_rot) string_reverse char_empty) (string_replacefirstchar boolean_and) (exec_do*vector_string (exec_y (string_split boolean_and vector_string_replace string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_last exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" string_replacefirstchar vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) string_swap "No winner") string_conjchar char_isletter char_iswhitespace in1 boolean_eq exec_k_when_autoconstructing (exec_if (vector_string_pop print_vector_string) (vector_string_reverse boolean_not) vector_string_swap vector_string_remove exec_k () (string_parse_to_chars exec_string_iterate (boolean_empty char_flush char_flush exec_pop () string_eq) vector_string_rest char_empty boolean_pop string_contains exec_flush) string_parse_to_chars vector_string_eq vector_string_remove print_exec (string_reverse boolean_or string_flush vector_string_flush char_isletter boolean_dup print_char boolean_eq print_char vector_string_last vector_string_replacefirst char_swap exec_y_when_autoconstructing (string_butlast exec_when (boolean_swap exec_do*vector_string () exec_rot (vector_string_reverse string_fromboolean vector_string_concat string_containschar exec_do*while () boolean_xor string_contains string_flush) (vector_string_contains vector_string_flush) () string_emptystring vector_string_remove print_char exec_string_iterate (char_iswhitespace))))) ())
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 190
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 1 8 8 1 1 4 8 4 8 8 4 8 8 1 8 1 8 8 4 1 8 8 4 1 8 8 1 4 8 4 4 8 8 8 1 4 8 8 8 1 8 4 8 8 8 4 8 8 1 8 8 1 8 8 4 1 1 4 4 8 1 8 8 8 4 8 4 8 8 8 1 8 8 8 4 8 4 1 1 1 8 8 4 8 4 1 8 4 8 8 4 1 8 8 1 8 4 1 4)
Population mean number of elite cases: 0.54
Count of perfect (error zero) individuals by case: (8 1 8 8 1 1 4 8 4 8 8 4 8 8 1 8 1 8 8 4 1 8 8 4 1 8 8 1 4 8 4 4 8 8 8 1 4 8 8 8 1 8 4 8 8 8 4 8 8 1 8 8 1 8 8 4 1 1 4 4 8 1 8 8 8 4 8 4 8 8 8 1 8 8 8 4 8 4 1 1 1 8 8 4 8 4 1 8 4 8 8 4 1 8 8 1 8 4 1 4)
Population mean number of perfect (error zero) cases: 0.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 1, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_dup} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_not} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_removechar})
Best program: (string_dup vector_string_pushall string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) (exec_do*while (vector_string_last) vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_dup vector_string_swap print_string char_flush in1) boolean_swap) string_replacechar exec_string_iterate (boolean_not string_parse_to_chars string_flush exec_y_when_autoconstructing (boolean_rot exec_if () (string_parse_to_chars string_rot in1) boolean_rot vector_string_replacefirst) string_emptystring string_removechar)) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 13541.503
Median total errors in population: 712
Error averages by case: (133.906 136.623 138.599 133.906 136.627 136.627 131.909 138.601 136.627 138.601 138.601 136.613 133.901 138.608 131.92 138.603 136.633 133.901 133.901 131.911 131.927 133.903 133.904 131.915 136.623 133.901 133.911 136.633 136.618 138.601 136.626 131.92 138.608 133.899 138.606 136.629 136.612 133.903 138.601 138.608 136.629 133.901 136.619 138.601 133.901 138.601 131.915 138.604 138.604 131.926 138.601 133.906 131.923 133.908 138.606 131.908 131.918 136.622 131.912 131.908 133.904 131.932 133.901 138.606 138.601 131.909 138.603 136.621 138.606 133.908 133.906 131.917 138.599 133.899 133.901 136.614 138.601 136.613 131.927 131.921 136.636 138.604 133.896 136.616 133.903 131.909 136.625 133.901 131.911 133.897 138.606 136.617 131.922 138.604 138.604 136.623 138.601 131.92 131.925 136.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 194.446
Average program size in population (points): 247.389
Average percent parens in population: 0.220
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.267
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 14912224
--- Timings ---
Current time: 1559313178130 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Tic Tac Toe problem report - generation 1
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rot} {:close 0, :instruction string_concat} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_conj} {:close 1, :instruction string_rot} {:close 2, :instruction exec_when} {:close 0, :instruction string_fromboolean} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_while} {:close 1, :instruction string_removechar} {:close 1, :instruction print_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction string_replacefirst} {:close 0, :instruction char_isdigit} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_flush} {:close 0, :instruction string_split} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_last} {:close 1, :instruction exec_noop} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction vector_string_eq} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction "O won"} {:close 0, :instruction print_exec} {:close 0, :instruction string_replacefirst} {:close 3, :instruction tagged_831} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction print_boolean} {:close 0, :instruction string_fromchar} {:close 0, :instruction vector_string_replace} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction exec_y} {:close 0, :instruction char_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_swap} {:close 0, :instruction string_first} {:close 2, :instruction char_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction char_isdigit} {:close 1, :instruction string_concat} {:close 1, :instruction string_emptystring} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction print_string} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromboolean} {:close 1, :instruction exec_flush} {:close 0, :instruction string_split} {:close 1, :instruction string_replacechar} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction string_split} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_dup} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 1, :instruction string_last} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_pop} {:close 1, :instruction string_butlast} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_exec} {:close 0, :instruction string_flush} {:close 0, :instruction string_conjchar} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_pop} {:close 0, :instruction string_flush} {:close 0, :instruction char_pop} {:close 0, :instruction string_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_401} {:close 0, :instruction char_allfromstring} {:close 0, :instruction "X won"} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction vector_string_butlast} {:close 0, :instruction char_dup} {:close 1, :instruction char_empty} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_contains} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*vector_string} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_remove} {:close 1, :instruction string_dup} {:close 0, :instruction string_emptystring} {:close 1, :instruction string_butlast} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction vector_string_contains} {:close 1, :instruction string_removechar} {:close 0, :instruction "No winner"} {:close 1, :instruction string_contains} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction string_split} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_first} {:close 0, :instruction vector_string_swap} {:close 0, :instruction string_contains} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (string_rot string_concat exec_when (vector_string_conj string_rot) exec_when () string_fromboolean "No winner" boolean_flush exec_if () (boolean_dup exec_while () string_removechar) print_string vector_string_reverse string_replacefirst char_isdigit print_vector_string exec_flush string_split exec_do*while (vector_string_remove vector_string_butlast vector_string_replacefirst string_last) exec_noop char_rot boolean_and boolean_dup vector_string_eq string_rot boolean_or vector_string_eq exec_do*vector_string (exec_empty "O won" print_exec (string_replacefirst tagged_831)) exec_k_when_autoconstructing (string_replacefirstchar) (print_boolean string_fromchar vector_string_replace char_iswhitespace exec_y () char_swap boolean_flush string_swap string_first char_swap) boolean_or char_isdigit string_concat string_emptystring vector_string_replacefirst vector_string_pop string_parse_to_chars boolean_eq string_parse_to_chars vector_string_emptyvector print_string char_eq string_fromboolean exec_flush string_split string_replacechar boolean_invert_second_then_and exec_if (string_split) (string_rest boolean_swap boolean_flush) char_allfromstring char_dup string_parse_to_chars string_replace string_last exec_string_iterate (char_pop string_butlast) vector_string_last print_exec (string_flush string_conjchar boolean_not string_replacechar exec_do*while (string_pop string_flush char_pop string_pop in1 tagged_401) char_allfromstring "X won" string_parse_to_chars vector_string_butlast) char_dup char_empty vector_string_reverse vector_string_contains vector_string_emptyvector exec_dup (exec_do*vector_string ()) boolean_or exec_flush vector_string_remove string_dup string_emptystring string_butlast exec_string_iterate (vector_string_contains string_removechar) "No winner" string_contains print_exec (boolean_invert_first_then_and exec_pop () exec_s (print_exec (string_split vector_string_replacefirst string_first) vector_string_swap string_contains exec_swap (exec_while (boolean_invert_second_then_and)) ()) () ()))
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 158
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rot} {:close 0, :instruction string_concat} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_conj} {:close 1, :instruction string_rot} {:close 2, :instruction exec_when} {:close 0, :instruction string_fromboolean} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_while} {:close 1, :instruction string_removechar} {:close 1, :instruction print_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction string_replacefirst} {:close 0, :instruction char_isdigit} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_flush} {:close 0, :instruction string_split} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_last} {:close 1, :instruction exec_noop} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction vector_string_eq} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction "O won"} {:close 0, :instruction print_exec} {:close 0, :instruction string_replacefirst} {:close 3, :instruction tagged_831} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction print_boolean} {:close 0, :instruction string_fromchar} {:close 0, :instruction vector_string_replace} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction exec_y} {:close 0, :instruction char_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_swap} {:close 0, :instruction string_first} {:close 2, :instruction char_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction char_isdigit} {:close 1, :instruction string_concat} {:close 1, :instruction string_emptystring} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction print_string} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromboolean} {:close 1, :instruction exec_flush} {:close 0, :instruction string_split} {:close 1, :instruction string_replacechar} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction string_split} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_dup} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 1, :instruction string_last} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_pop} {:close 1, :instruction string_butlast} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_exec} {:close 0, :instruction string_flush} {:close 0, :instruction string_conjchar} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_pop} {:close 0, :instruction string_flush} {:close 0, :instruction char_pop} {:close 0, :instruction string_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_401} {:close 0, :instruction char_allfromstring} {:close 0, :instruction "X won"} {:close 0, :instruction string_parse_to_chars} {:close 2, :instruction vector_string_butlast} {:close 0, :instruction char_dup} {:close 1, :instruction char_empty} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_contains} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_do*vector_string} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_remove} {:close 1, :instruction string_dup} {:close 0, :instruction string_emptystring} {:close 1, :instruction string_butlast} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction vector_string_contains} {:close 1, :instruction string_removechar} {:close 0, :instruction "No winner"} {:close 1, :instruction string_contains} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction string_split} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_first} {:close 0, :instruction vector_string_swap} {:close 0, :instruction string_contains} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (string_rot string_concat exec_when (vector_string_conj string_rot) exec_when () string_fromboolean "No winner" boolean_flush exec_if () (boolean_dup exec_while () string_removechar) print_string vector_string_reverse string_replacefirst char_isdigit print_vector_string exec_flush string_split exec_do*while (vector_string_remove vector_string_butlast vector_string_replacefirst string_last) exec_noop char_rot boolean_and boolean_dup vector_string_eq string_rot boolean_or vector_string_eq exec_do*vector_string (exec_empty "O won" print_exec (string_replacefirst tagged_831)) exec_k_when_autoconstructing (string_replacefirstchar) (print_boolean string_fromchar vector_string_replace char_iswhitespace exec_y () char_swap boolean_flush string_swap string_first char_swap) boolean_or char_isdigit string_concat string_emptystring vector_string_replacefirst vector_string_pop string_parse_to_chars boolean_eq string_parse_to_chars vector_string_emptyvector print_string char_eq string_fromboolean exec_flush string_split string_replacechar boolean_invert_second_then_and exec_if (string_split) (string_rest boolean_swap boolean_flush) char_allfromstring char_dup string_parse_to_chars string_replace string_last exec_string_iterate (char_pop string_butlast) vector_string_last print_exec (string_flush string_conjchar boolean_not string_replacechar exec_do*while (string_pop string_flush char_pop string_pop in1 tagged_401) char_allfromstring "X won" string_parse_to_chars vector_string_butlast) char_dup char_empty vector_string_reverse vector_string_contains vector_string_emptyvector exec_dup (exec_do*vector_string ()) boolean_or exec_flush vector_string_remove string_dup string_emptystring string_butlast exec_string_iterate (vector_string_contains string_removechar) "No winner" string_contains print_exec (boolean_invert_first_then_and exec_pop () exec_s (print_exec (string_split vector_string_replacefirst string_first) vector_string_swap string_contains exec_swap (exec_while (boolean_invert_second_then_and)) ()) () ()))
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 158
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (411 168 411 411 168 168 158 411 158 411 411 158 411 411 168 411 168 411 411 158 168 411 411 158 168 411 411 168 158 411 158 158 411 411 411 168 158 411 411 411 168 411 158 411 411 411 158 411 411 168 411 411 168 411 411 158 168 168 158 158 411 168 411 411 411 158 411 158 411 411 411 168 411 411 411 158 411 158 168 168 168 411 411 158 411 158 168 411 158 411 411 158 168 411 411 168 411 158 168 158)
Population mean number of elite cases: 29.44
Count of perfect (error zero) individuals by case: (411 168 411 411 168 168 158 411 158 411 411 158 411 411 168 411 168 411 411 158 168 411 411 158 168 411 411 168 158 411 158 158 411 411 411 168 158 411 411 411 168 411 158 411 411 411 158 411 411 168 411 411 168 411 411 158 168 168 158 158 411 168 411 411 411 158 411 158 411 411 411 168 411 411 411 158 411 158 168 168 168 411 411 158 411 158 168 411 158 411 411 158 168 411 411 168 411 158 168 158)
Population mean number of perfect (error zero) cases: 29.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction string_eq} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction string_empty} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_dup} {:close 1, :instruction char_rot} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_contains} {:close 1, :instruction exec_swap} {:close 1, :instruction char_isdigit} {:close 1, :instruction vector_string_rest} {:close 0, :instruction vector_string_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction string_contains} {:close 0, :instruction char_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_string_last} {:close 1, :instruction char_eq} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_while} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 1, :instruction char_empty} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_isletter} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_flush} {:close 0, :instruction char_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_rest} {:close 0, :instruction char_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_contains} {:close 1, :instruction exec_flush} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_eq} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_exec} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_or} {:close 0, :instruction string_flush} {:close 0, :instruction vector_string_flush} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_char} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_char} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*vector_string} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_containschar} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_contains} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_contains} {:close 2, :instruction vector_string_flush} {:close 0, :instruction string_emptystring} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_char} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_iswhitespace})
Best program: (exec_swap (exec_when () exec_when () string_eq char_rot boolean_or) (string_empty "No winner" exec_dup (char_rot) char_flush vector_string_pop exec_swap () (boolean_eq string_contains exec_swap () (char_isdigit) vector_string_rest) vector_string_eq exec_s (print_string string_swap boolean_and exec_rot (string_contains char_pop exec_do*while ()) (exec_rot (vector_string_emptyvector vector_string_conj string_replacefirst string_replace) (vector_string_butlast) (vector_string_replace print_vector_string exec_empty string_replacefirst boolean_xor char_allfromstring string_fromboolean boolean_flush vector_string_last char_eq) print_vector_string) (exec_while (vector_string_flush) string_rot) string_reverse char_empty) (string_replacefirstchar boolean_and) (exec_do*vector_string (exec_y (string_split boolean_and vector_string_replace string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_last exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" string_replacefirstchar vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) string_swap "No winner") string_conjchar char_isletter char_iswhitespace in1 boolean_eq exec_k_when_autoconstructing (exec_if (vector_string_pop print_vector_string) (vector_string_reverse boolean_not) vector_string_swap vector_string_remove exec_k () (string_parse_to_chars exec_string_iterate (boolean_empty char_flush char_flush exec_pop () string_eq) vector_string_rest char_empty boolean_pop string_contains exec_flush) string_parse_to_chars vector_string_eq vector_string_remove print_exec (string_reverse boolean_or string_flush vector_string_flush char_isletter boolean_dup print_char boolean_eq print_char vector_string_last vector_string_replacefirst char_swap exec_y_when_autoconstructing (string_butlast exec_when (boolean_swap exec_do*vector_string () exec_rot (vector_string_reverse string_fromboolean vector_string_concat string_containschar exec_do*while () boolean_xor string_contains string_flush) (vector_string_contains vector_string_flush) () string_emptystring vector_string_remove print_char exec_string_iterate (char_iswhitespace))))) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 144
Size: 190
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 2759.406
Median total errors in population: 341
Error averages by case: (27.465 27.729 27.465 27.465 27.731 27.731 27.752 27.465 27.751 27.465 27.465 27.749 27.465 27.465 27.731 27.465 27.731 27.465 27.465 27.746 27.729 27.465 27.465 27.748 27.729 27.465 27.465 27.731 27.75 27.465 27.75 27.747 27.465 27.465 27.465 27.73 27.748 27.465 27.465 27.465 27.73 27.465 27.748 27.465 27.465 27.465 27.747 27.465 27.465 27.731 27.465 27.465 27.729 27.465 27.465 27.75 27.728 27.73 27.75 27.75 27.465 27.732 27.465 27.465 27.465 27.75 27.465 27.749 27.465 27.465 27.465 27.731 27.465 27.465 27.465 27.749 27.465 27.749 27.728 27.731 27.731 27.465 27.465 27.75 27.465 27.747 27.732 27.465 27.746 27.465 27.465 27.75 27.727 27.465 27.465 27.73 27.465 27.747 27.727 27.749)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 131.971
Average program size in population (points): 171.167
Average percent parens in population: 0.228
Minimum age in population: 0.0
Maximum age in population: 2.0
Average age in population: 1.403
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.085
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 25906709
--- Timings ---
Current time: 1559313195244 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Tic Tac Toe problem report - generation 2
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 1, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_dup} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_not} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_removechar})
Lexicase best program: (string_dup vector_string_pushall string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) (exec_do*while (vector_string_last) vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_dup vector_string_swap print_string char_flush in1) boolean_swap) string_replacechar exec_string_iterate (print_string char_flush in1) boolean_swap) (string_replacechar exec_string_iterate (boolean_not string_parse_to_chars string_flush exec_y_when_autoconstructing (boolean_rot exec_if () (string_parse_to_chars string_rot in1) boolean_rot vector_string_replacefirst) string_emptystring string_removechar)))
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 1, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_dup} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_not} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_removechar})
Zero cases best program: (string_dup vector_string_pushall string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) (exec_do*while (vector_string_last) vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_dup vector_string_swap print_string char_flush in1) boolean_swap) string_replacechar exec_string_iterate (print_string char_flush in1) boolean_swap) (string_replacechar exec_string_iterate (boolean_not string_parse_to_chars string_flush exec_y_when_autoconstructing (boolean_rot exec_if () (string_parse_to_chars string_rot in1) boolean_rot vector_string_replacefirst) string_emptystring string_removechar)))
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (429 194 429 429 194 194 184 429 184 429 429 184 429 429 194 429 194 429 429 184 194 429 429 184 194 429 429 194 184 429 184 184 429 429 429 194 184 429 429 429 194 429 184 429 429 429 184 429 429 194 429 429 194 429 429 184 194 194 184 184 429 194 429 429 429 184 429 184 429 429 429 194 429 429 429 184 429 184 194 194 194 429 429 184 429 184 194 429 184 429 429 184 194 429 429 194 429 184 194 184)
Population mean number of elite cases: 31.61
Count of perfect (error zero) individuals by case: (429 194 429 429 194 194 184 429 184 429 429 184 429 429 194 429 194 429 429 184 194 429 429 184 194 429 429 194 184 429 184 184 429 429 429 194 184 429 429 429 194 429 184 429 429 429 184 429 429 194 429 429 194 429 429 184 194 194 184 184 429 194 429 429 429 184 429 184 429 429 429 194 429 429 429 184 429 184 194 194 194 429 429 184 429 184 194 429 184 429 429 184 194 429 429 194 429 184 194 184)
Population mean number of perfect (error zero) cases: 31.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction vector_string_swap} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction string_contains} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_concat} {:close 1, :instruction string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_last} {:close 0, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_string} {:close 0, :instruction vector_string_contains} {:close 0, :instruction string_fromboolean} {:close 0, :instruction char_allfromstring} {:close 1, :instruction string_rest} {:close 0, :instruction string_swap} {:close 0, :instruction exec_s} {:close 0, :instruction string_last} {:close 0, :instruction char_dup} {:close 0, :instruction string_reverse} {:close 1, :instruction string_fromchar} {:close 1, :instruction string_replacechar} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_emptyvector} {:close 1, :instruction print_vector_string} {:close 0, :instruction "No winner"} {:close 1, :instruction tagged_934} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_do*vector_string} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_swap} {:close 2, :instruction boolean_dup} {:close 1, :instruction tag_string_360} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction string_containschar} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_or} {:close 0, :instruction char_isletter} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rest} {:close 0, :instruction char_isdigit} {:close 0, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction string_replace} {:close 1, :instruction print_vector_string} {:close 0, :instruction string_rot} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_replace} {:close 2, :instruction exec_flush} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_contains} {:close 0, :instruction char_eq} {:close 0, :instruction char_pop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_replace} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction exec_flush} {:close 0, :instruction string_pop} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction print_newline} {:close 0, :instruction "No winner"} {:close 1, :instruction string_fromboolean} {:close 0, :instruction string_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction char_flush} {:close 0, :instruction "O won"} {:close 1, :instruction string_fromchar} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_vector_string} {:close 0, :instruction print_vector_string} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_first} {:close 0, :instruction tagged_270} {:close 0, :instruction string_pop} {:close 0, :instruction vector_string_rot} {:close 1, :instruction string_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction char_isletter} {:close 1, :instruction string_last} {:close 0, :instruction exec_swap})
Best program: (exec_while (vector_string_swap string_replacefirstchar) string_replacefirst vector_string_replacefirst print_string string_swap string_contains vector_string_rot string_concat string_replace string_replacefirst string_last string_concat "No winner" tag_vector_string_478 vector_string_replace exec_s_when_autoconstructing (print_string) (vector_string_contains string_fromboolean char_allfromstring string_rest) (string_swap exec_s (string_last char_dup string_reverse string_fromchar) (string_replacechar) (boolean_invert_second_then_and "No winner" exec_when (boolean_invert_first_then_and vector_string_pop) exec_string_iterate (exec_do*vector_string (vector_string_emptyvector print_vector_string) "No winner" tagged_934) exec_do*vector_string (exec_do*vector_string () string_replacefirstchar exec_s_when_autoconstructing (string_replacefirstchar vector_string_reverse vector_string_swap boolean_dup) () (tag_string_360) boolean_invert_second_then_and string_containschar) vector_string_rot string_replacefirstchar boolean_or) char_isletter char_isletter string_rest char_isdigit "No winner" string_conjchar exec_rot (exec_eq string_replace) (print_vector_string) (string_rot string_flush) vector_string_replace exec_flush) vector_string_eq boolean_not vector_string_conj string_contains char_eq char_pop char_allfromstring exec_eq vector_string_replace boolean_pop exec_k_when_autoconstructing (boolean_dup exec_flush boolean_not vector_string_swap print_string exec_flush string_pop vector_string_emptyvector print_newline "No winner" string_fromboolean) (string_swap exec_s_when_autoconstructing (char_flush "O won" string_fromchar) (exec_y_when_autoconstructing () print_vector_string) (print_vector_string char_isdigit vector_string_first tagged_270 string_pop vector_string_rot string_swap) exec_y_when_autoconstructing (exec_if (char_isletter string_last) (exec_swap () ()))))
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 110
Size: 140
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 2149.166
Median total errors in population: 341
Error averages by case: (21.355 21.638 21.355 21.355 21.638 21.638 21.654 21.355 21.654 21.355 21.355 21.653 21.355 21.355 21.637 21.355 21.638 21.355 21.355 21.653 21.637 21.355 21.355 21.653 21.638 21.355 21.355 21.638 21.654 21.355 21.654 21.653 21.355 21.355 21.355 21.638 21.654 21.355 21.355 21.355 21.638 21.355 21.654 21.355 21.355 21.355 21.653 21.355 21.355 21.638 21.355 21.355 21.637 21.355 21.355 21.653 21.637 21.638 21.654 21.653 21.355 21.638 21.355 21.355 21.355 21.654 21.355 21.654 21.355 21.355 21.355 21.638 21.355 21.355 21.355 21.654 21.355 21.654 21.637 21.638 21.637 21.355 21.355 21.654 21.355 21.653 21.638 21.355 21.653 21.355 21.355 21.654 21.637 21.355 21.355 21.638 21.355 21.653 21.637 21.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 115.543
Average program size in population (points): 150.628
Average percent parens in population: 0.227
Minimum age in population: 0.0
Maximum age in population: 4.0
Average age in population: 2.9775
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.063
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 37243209
--- Timings ---
Current time: 1559313210730 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Tic Tac Toe problem report - generation 3
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction print_string} {:close 0, :instruction string_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_last} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_empty} {:close 0, :instruction char_pop} {:close 0, :instruction string_butlast} {:close 1, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 1, :instruction vector_string_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction "O won"} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction string_concat} {:close 0, :instruction boolean_and} {:close 0, :instruction char_isletter} {:close 1, :instruction "X won"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction tagged_583} {:close 0, :instruction exec_swap} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_swap} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction boolean_rot} {:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_concat} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_replace} {:close 1, :instruction vector_string_eq} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_dup} {:close 1, :instruction string_fromboolean} {:close 1, :instruction vector_string_dup} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction exec_when} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_concat} {:close 1, :instruction vector_string_swap} {:close 0, :instruction string_reverse} {:close 1, :instruction boolean_pop} {:close 0, :instruction string_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction char_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction string_flush} {:close 0, :instruction string_replace} {:close 0, :instruction exec_when} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_rest} {:close 1, :instruction char_rot} {:close 0, :instruction char_isletter} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_butlast} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_replace} {:close 0, :instruction string_replace} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_string_empty} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_replace} {:close 0, :instruction char_empty} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction vector_string_flush} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_replace} {:close 1, :instruction char_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction string_flush} {:close 0, :instruction print_exec} {:close 0, :instruction vector_string_pop} {:close 0, :instruction print_vector_string} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_string_first} {:close 0, :instruction exec_if} {:close 0, :instruction string_concat} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction string_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction vector_string_remove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction print_vector_string} {:close 0, :instruction string_replacechar} {:close 1, :instruction char_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction string_last} {:close 1, :instruction vector_string_conj} {:close 0, :instruction char_rot} {:close 1, :instruction exec_do*vector_string} {:close 1, :instruction exec_rot} {:close 0, :instruction char_swap} {:close 0, :instruction string_rest} {:close 0, :instruction char_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction string_first} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rest} {:close 0, :instruction char_empty} {:close 2, :instruction print_char} {:close 0, :instruction char_allfromstring} {:close 2, :instruction char_iswhitespace} {:close 0, :instruction string_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_contains} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction print_vector_string} {:close 0, :instruction string_flush} {:close 0, :instruction print_vector_string} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_emptyvector} {:close 0, :instruction boolean_swap} {:close 1, :instruction string_removechar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction exec_y} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_concat} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_flush} {:close 0, :instruction in1} {:close 0, :instruction char_dup} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace})
Lexicase best program: (print_string "No winner" print_string string_flush char_allfromstring string_last string_containschar exec_eq vector_string_empty char_pop string_butlast string_emptystring string_first char_eq vector_string_dup exec_flush vector_string_replace string_empty boolean_not exec_s_when_autoconstructing ("O won" boolean_rot exec_pop (exec_when (string_concat) boolean_and char_isletter "X won") boolean_invert_second_then_and string_parse_to_chars tagged_583) (exec_swap (string_first char_eq string_fromchar char_swap char_iswhitespace) (exec_do*vector_string (boolean_rot vector_string_concat vector_string_swap exec_do*while (vector_string_concat char_isdigit string_replace vector_string_eq) char_swap exec_y_when_autoconstructing (char_rot) boolean_or boolean_not vector_string_dup string_fromboolean) vector_string_dup) vector_string_pushall) (exec_when (print_vector_string) vector_string_first string_replacefirstchar vector_string_concat vector_string_swap) string_reverse boolean_pop string_swap char_empty exec_noop boolean_not char_flush exec_noop exec_swap (exec_k () (string_flush string_replace exec_when ("No winner" boolean_xor string_replacechar string_rest char_rot) char_isletter char_iswhitespace) string_butlast boolean_swap exec_s_when_autoconstructing (exec_eq vector_string_pop string_butlast vector_string_butlast) (string_replace string_replace exec_flush exec_empty vector_string_empty vector_string_rest vector_string_replace char_empty exec_do*vector_string (vector_string_flush) char_dup vector_string_replace char_pop) (exec_noop string_flush print_exec (vector_string_pop print_vector_string string_split string_replace string_split vector_string_eq boolean_or vector_string_first exec_if (string_concat string_empty exec_dup (string_eq exec_do*while () vector_string_remove string_fromchar string_emptystring string_first print_vector_string string_replacechar char_flush) boolean_invert_first_then_and string_last) (vector_string_conj) char_rot exec_do*vector_string () exec_rot () (char_swap string_rest char_eq exec_k (exec_k_when_autoconstructing (string_first boolean_invert_second_then_and) (exec_pop (exec_swap (vector_string_flush) (string_rest) char_empty print_char)) char_allfromstring char_iswhitespace) () string_flush exec_y_when_autoconstructing (string_contains string_replacefirstchar print_vector_string) string_flush print_vector_string boolean_invert_first_then_and vector_string_emptyvector) (boolean_swap string_removechar) char_iswhitespace exec_y (string_parse_to_chars vector_string_replacefirst string_concat) string_concat vector_string_flush in1 char_dup string_replacefirst string_replace))) ())
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 207
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction print_string} {:close 0, :instruction string_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_last} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_empty} {:close 0, :instruction char_pop} {:close 0, :instruction string_butlast} {:close 1, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 1, :instruction vector_string_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction "O won"} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction string_concat} {:close 0, :instruction boolean_and} {:close 0, :instruction char_isletter} {:close 1, :instruction "X won"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction tagged_583} {:close 0, :instruction exec_swap} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_swap} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction boolean_rot} {:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_concat} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_replace} {:close 1, :instruction vector_string_eq} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_dup} {:close 1, :instruction string_fromboolean} {:close 1, :instruction vector_string_dup} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction exec_when} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_concat} {:close 1, :instruction vector_string_swap} {:close 0, :instruction string_reverse} {:close 1, :instruction boolean_pop} {:close 0, :instruction string_swap} {:close 0, :instruction char_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction char_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction string_flush} {:close 0, :instruction string_replace} {:close 0, :instruction exec_when} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_rest} {:close 1, :instruction char_rot} {:close 0, :instruction char_isletter} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_butlast} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_replace} {:close 0, :instruction string_replace} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_string_empty} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_replace} {:close 0, :instruction char_empty} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction vector_string_flush} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_replace} {:close 1, :instruction char_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction string_flush} {:close 0, :instruction print_exec} {:close 0, :instruction vector_string_pop} {:close 0, :instruction print_vector_string} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_string_first} {:close 0, :instruction exec_if} {:close 0, :instruction string_concat} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction string_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction vector_string_remove} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction print_vector_string} {:close 0, :instruction string_replacechar} {:close 1, :instruction char_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction string_last} {:close 1, :instruction vector_string_conj} {:close 0, :instruction char_rot} {:close 1, :instruction exec_do*vector_string} {:close 1, :instruction exec_rot} {:close 0, :instruction char_swap} {:close 0, :instruction string_rest} {:close 0, :instruction char_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction string_first} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rest} {:close 0, :instruction char_empty} {:close 2, :instruction print_char} {:close 0, :instruction char_allfromstring} {:close 2, :instruction char_iswhitespace} {:close 0, :instruction string_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_contains} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction print_vector_string} {:close 0, :instruction string_flush} {:close 0, :instruction print_vector_string} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_emptyvector} {:close 0, :instruction boolean_swap} {:close 1, :instruction string_removechar} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction exec_y} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_concat} {:close 0, :instruction string_concat} {:close 0, :instruction vector_string_flush} {:close 0, :instruction in1} {:close 0, :instruction char_dup} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace})
Zero cases best program: (print_string "No winner" print_string string_flush char_allfromstring string_last string_containschar exec_eq vector_string_empty char_pop string_butlast string_emptystring string_first char_eq vector_string_dup exec_flush vector_string_replace string_empty boolean_not exec_s_when_autoconstructing ("O won" boolean_rot exec_pop (exec_when (string_concat) boolean_and char_isletter "X won") boolean_invert_second_then_and string_parse_to_chars tagged_583) (exec_swap (string_first char_eq string_fromchar char_swap char_iswhitespace) (exec_do*vector_string (boolean_rot vector_string_concat vector_string_swap exec_do*while (vector_string_concat char_isdigit string_replace vector_string_eq) char_swap exec_y_when_autoconstructing (char_rot) boolean_or boolean_not vector_string_dup string_fromboolean) vector_string_dup) vector_string_pushall) (exec_when (print_vector_string) vector_string_first string_replacefirstchar vector_string_concat vector_string_swap) string_reverse boolean_pop string_swap char_empty exec_noop boolean_not char_flush exec_noop exec_swap (exec_k () (string_flush string_replace exec_when ("No winner" boolean_xor string_replacechar string_rest char_rot) char_isletter char_iswhitespace) string_butlast boolean_swap exec_s_when_autoconstructing (exec_eq vector_string_pop string_butlast vector_string_butlast) (string_replace string_replace exec_flush exec_empty vector_string_empty vector_string_rest vector_string_replace char_empty exec_do*vector_string (vector_string_flush) char_dup vector_string_replace char_pop) (exec_noop string_flush print_exec (vector_string_pop print_vector_string string_split string_replace string_split vector_string_eq boolean_or vector_string_first exec_if (string_concat string_empty exec_dup (string_eq exec_do*while () vector_string_remove string_fromchar string_emptystring string_first print_vector_string string_replacechar char_flush) boolean_invert_first_then_and string_last) (vector_string_conj) char_rot exec_do*vector_string () exec_rot () (char_swap string_rest char_eq exec_k (exec_k_when_autoconstructing (string_first boolean_invert_second_then_and) (exec_pop (exec_swap (vector_string_flush) (string_rest) char_empty print_char)) char_allfromstring char_iswhitespace) () string_flush exec_y_when_autoconstructing (string_contains string_replacefirstchar print_vector_string) string_flush print_vector_string boolean_invert_first_then_and vector_string_emptyvector) (boolean_swap string_removechar) char_iswhitespace exec_y (string_parse_to_chars vector_string_replacefirst string_concat) string_concat vector_string_flush in1 char_dup string_replacefirst string_replace))) ())
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 207
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 182 463 463 182 182 175 463 175 463 463 175 463 463 182 463 182 463 463 175 182 463 463 175 182 463 463 182 175 463 175 175 463 463 463 182 175 463 463 463 182 463 175 463 463 463 175 463 463 182 463 463 182 463 463 175 182 182 175 175 463 182 463 463 463 175 463 175 463 463 463 182 463 463 463 175 463 175 182 182 182 463 463 175 463 175 182 463 175 463 463 175 182 463 463 182 463 175 182 175)
Population mean number of elite cases: 32.92
Count of perfect (error zero) individuals by case: (463 182 463 463 182 182 175 463 175 463 463 175 463 463 182 463 182 463 463 175 182 463 463 175 182 463 463 182 175 463 175 175 463 463 463 182 175 463 463 463 182 463 175 463 463 463 175 463 463 182 463 463 182 463 463 175 182 182 175 175 463 182 463 463 463 175 463 175 463 463 463 182 463 463 463 175 463 175 182 182 182 463 463 175 463 175 182 463 175 463 463 175 182 463 463 182 463 175 182 175)
Population mean number of perfect (error zero) cases: 32.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction string_flush} {:close 1, :instruction string_fromboolean} {:close 2, :instruction string_empty} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_last} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_contains} {:close 1, :instruction "No winner"} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_string} {:close 1, :instruction string_pop} {:close 0, :instruction char_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction vector_string_pushall} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_eq} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_first} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_string_last} {:close 1, :instruction char_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 1, :instruction char_empty} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_isletter} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_flush} {:close 0, :instruction char_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_rest} {:close 0, :instruction char_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_contains} {:close 1, :instruction exec_flush} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_eq} {:close 0, :instruction vector_string_remove} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_pop} {:close 1, :instruction exec_k} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_replacechar} {:close 2, :instruction boolean_xor} {:close 0, :instruction vector_string_rest} {:close 0, :instruction string_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction string_concat} {:close 1, :instruction vector_string_last} {:close 1, :instruction string_removechar} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction vector_string_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction string_emptystring} {:close 1, :instruction char_allfromstring} {:close 0, :instruction exec_flush} {:close 0, :instruction string_removechar} {:close 0, :instruction char_pop} {:close 1, :instruction exec_when} {:close 0, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction "X won"} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_empty} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_first} {:close 0, :instruction exec_dup} {:close 0, :instruction char_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup})
Best program: (string_flush string_fromboolean string_empty vector_string_replace exec_s_when_autoconstructing (vector_string_reverse vector_string_last char_rot boolean_dup char_dup vector_string_rest vector_string_contains "No winner") (vector_string_last print_string string_pop) (char_swap boolean_swap) vector_string_pushall exec_rot () (vector_string_remove vector_string_eq exec_string_iterate (char_pop vector_string_first exec_rot (vector_string_emptyvector vector_string_conj string_replacefirst string_replace) (vector_string_butlast) (vector_string_replace print_vector_string exec_empty string_replacefirst boolean_xor char_allfromstring string_fromboolean boolean_flush vector_string_last char_eq) exec_s () (exec_while (vector_string_flush) string_rot) (string_reverse char_empty) string_replacefirstchar boolean_and) exec_do*vector_string (exec_y (string_split boolean_and vector_string_replace string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_last exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" string_replacefirstchar vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) (string_swap "No winner") string_conjchar char_isletter char_iswhitespace in1 boolean_eq exec_k_when_autoconstructing (exec_if (vector_string_pop print_vector_string) (vector_string_reverse boolean_not) vector_string_swap vector_string_remove exec_k () (string_parse_to_chars exec_string_iterate (boolean_empty char_flush char_flush exec_pop () string_eq) vector_string_rest char_empty boolean_pop string_contains exec_flush) string_parse_to_chars vector_string_eq vector_string_remove print_exec (exec_s_when_autoconstructing (string_pop exec_k () (vector_string_emptyvector vector_string_eq string_replacechar boolean_xor)) (vector_string_rest string_dup exec_rot () (string_concat vector_string_last) (string_removechar) exec_empty vector_string_butlast vector_string_replace vector_string_rot exec_flush) (vector_string_replace string_emptystring) char_allfromstring) exec_flush string_removechar char_pop exec_when () print_newline exec_s_when_autoconstructing () (exec_eq) (print_exec (exec_pop (string_fromchar "X won" vector_string_swap char_empty vector_string_dup vector_string_first exec_dup (char_dup boolean_invert_first_then_and exec_while (print_newline boolean_xor boolean_dup)))))) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 152
Size: 200
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 3263.402
Median total errors in population: 341
Error averages by case: (32.318 32.983 32.318 32.318 32.983 32.983 32.998 32.318 32.998 32.318 32.318 32.998 32.318 32.318 32.984 32.318 32.983 32.318 32.318 32.997 32.983 32.318 32.318 32.998 32.983 32.318 32.318 32.983 32.997 32.318 32.997 32.996 32.318 32.318 32.318 32.983 32.997 32.318 32.318 32.318 32.983 32.318 32.996 32.318 32.318 32.318 32.997 32.318 32.318 32.984 32.318 32.318 32.984 32.318 32.318 32.998 32.983 32.983 32.998 32.998 32.318 32.984 32.318 32.318 32.318 32.998 32.318 32.997 32.318 32.318 32.318 32.984 32.318 32.318 32.318 32.997 32.318 32.996 32.983 32.984 32.984 32.318 32.318 32.997 32.318 32.997 32.984 32.318 32.996 32.318 32.318 32.997 32.983 32.318 32.318 32.982 32.318 32.997 32.983 32.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 108.617
Average program size in population (points): 141.201
Average percent parens in population: 0.225
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.47075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.07
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 49257165
--- Timings ---
Current time: 1559313227425 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Tic Tac Toe problem report - generation 4
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction string_eq} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction string_empty} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_dup} {:close 1, :instruction char_rot} {:close 0, :instruction print_vector_string} {:close 0, :instruction vector_string_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_contains} {:close 1, :instruction exec_swap} {:close 1, :instruction char_isdigit} {:close 1, :instruction vector_string_rest} {:close 0, :instruction vector_string_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction print_vector_string} {:close 1, :instruction char_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_string_last} {:close 1, :instruction char_eq} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_while} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction char_empty} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_isletter} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_string_iterate})
Lexicase best program: (exec_swap (exec_when () exec_when () string_eq char_rot boolean_or) (string_empty "No winner" exec_dup (char_rot) print_vector_string vector_string_pop exec_swap () (boolean_eq string_contains exec_swap () (char_isdigit) vector_string_rest) vector_string_eq exec_s (print_string string_swap boolean_and exec_rot (print_vector_string char_pop) (exec_do*while ()) (exec_rot (vector_string_emptyvector vector_string_conj string_replacefirst string_replace) (vector_string_butlast) (vector_string_replace print_vector_string exec_empty string_replacefirst boolean_xor char_allfromstring string_fromboolean boolean_flush vector_string_last char_eq) print_vector_string) exec_while (vector_string_flush) string_rot) (string_reverse char_empty string_replacefirstchar boolean_and exec_do*vector_string (exec_y (string_split boolean_and vector_string_replace string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_last exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" vector_string_pop vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) (string_swap "No winner") string_conjchar char_isletter char_iswhitespace in1 boolean_eq) exec_k_when_autoconstructing (exec_if () (vector_string_pop print_vector_string) vector_string_reverse boolean_not) (vector_string_swap vector_string_remove exec_k () (string_parse_to_chars exec_string_iterate ())))
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 133
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 1, :instruction exec_when} {:close 0, :instruction string_eq} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction string_empty} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_dup} {:close 1, :instruction char_rot} {:close 0, :instruction print_vector_string} {:close 0, :instruction vector_string_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_contains} {:close 1, :instruction exec_swap} {:close 1, :instruction char_isdigit} {:close 1, :instruction vector_string_rest} {:close 0, :instruction vector_string_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction print_vector_string} {:close 1, :instruction char_pop} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_replace} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_string_last} {:close 1, :instruction char_eq} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_while} {:close 1, :instruction vector_string_flush} {:close 1, :instruction string_rot} {:close 0, :instruction string_reverse} {:close 0, :instruction char_empty} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_last} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction char_isletter} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_string_iterate})
Zero cases best program: (exec_swap (exec_when () exec_when () string_eq char_rot boolean_or) (string_empty "No winner" exec_dup (char_rot) print_vector_string vector_string_pop exec_swap () (boolean_eq string_contains exec_swap () (char_isdigit) vector_string_rest) vector_string_eq exec_s (print_string string_swap boolean_and exec_rot (print_vector_string char_pop) (exec_do*while ()) (exec_rot (vector_string_emptyvector vector_string_conj string_replacefirst string_replace) (vector_string_butlast) (vector_string_replace print_vector_string exec_empty string_replacefirst boolean_xor char_allfromstring string_fromboolean boolean_flush vector_string_last char_eq) print_vector_string) exec_while (vector_string_flush) string_rot) (string_reverse char_empty string_replacefirstchar boolean_and exec_do*vector_string (exec_y (string_split boolean_and vector_string_replace string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_last exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" vector_string_pop vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) (string_swap "No winner") string_conjchar char_isletter char_iswhitespace in1 boolean_eq) exec_k_when_autoconstructing (exec_if () (vector_string_pop print_vector_string) vector_string_reverse boolean_not) (vector_string_swap vector_string_remove exec_k () (string_parse_to_chars exec_string_iterate ())))
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 133
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 173 461 461 173 173 209 461 209 461 461 209 461 461 173 461 173 461 461 209 173 461 461 209 173 461 461 173 209 461 209 209 461 461 461 173 209 461 461 461 173 461 209 461 461 461 209 461 461 173 461 461 173 461 461 209 173 173 209 209 461 173 461 461 461 209 461 209 461 461 461 173 461 461 461 209 461 209 173 173 173 461 461 209 461 209 173 461 209 461 461 209 173 461 461 173 461 209 173 209)
Population mean number of elite cases: 33.43
Count of perfect (error zero) individuals by case: (461 173 461 461 173 173 209 461 209 461 461 209 461 461 173 461 173 461 461 209 173 461 461 209 173 461 461 173 209 461 209 209 461 461 461 173 209 461 461 461 173 461 209 461 461 461 209 461 461 173 461 461 173 461 461 209 173 173 209 209 461 173 461 461 461 209 461 209 461 461 461 173 461 461 461 209 461 209 173 173 173 461 461 209 461 209 173 461 209 461 461 209 173 461 461 173 461 209 173 209)
Population mean number of perfect (error zero) cases: 33.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction string_flush} {:close 0, :instruction tagged_651} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromchar} {:close 0, :instruction exec_swap} {:close 1, :instruction "No winner"} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction char_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 1, :instruction print_string} {:close 1, :instruction vector_string_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_remove} {:close 2, :instruction string_removechar} {:close 1, :instruction string_butlast} {:close 0, :instruction string_rot} {:close 0, :instruction vector_string_empty} {:close 1, :instruction vector_string_replace} {:close 1, :instruction string_eq} {:close 0, :instruction string_containschar} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_empty} {:close 1, :instruction tag_char_210} {:close 0, :instruction string_eq} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_rest} {:close 0, :instruction string_rest} {:close 0, :instruction char_isdigit} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_swap} {:close 1, :instruction string_replace} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction string_swap} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction char_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction string_pop} {:close 0, :instruction "X won"} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction vector_string_contains} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_eq} {:close 1, :instruction vector_string_last} {:close 1, :instruction string_rest} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 1, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_conj} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 1, :instruction string_first} {:close 0, :instruction exec_pop} {:close 1, :instruction string_replace})
Best program: (string_flush tagged_651 char_eq string_fromchar exec_swap ("No winner") (exec_while () boolean_eq) string_conjchar string_replacefirstchar char_swap exec_do*while (string_containschar exec_empty boolean_pop exec_s (print_string) (vector_string_swap) (print_boolean char_dup vector_string_remove string_removechar)) string_butlast string_rot vector_string_empty vector_string_replace string_eq string_containschar boolean_eq string_empty tag_char_210 string_eq vector_string_butlast vector_string_rest string_rest char_isdigit boolean_invert_first_then_and boolean_swap string_replace exec_do*vector_string (string_swap exec_string_iterate (char_dup exec_rot (string_pop "X won" exec_string_iterate (vector_string_contains boolean_not) vector_string_eq vector_string_last) (string_rest) (exec_y_when_autoconstructing () exec_k_when_autoconstructing () (exec_do*while () vector_string_emptyvector) vector_string_conj boolean_empty exec_y (string_first) exec_pop (string_replace)))))
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 62
Size: 82
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 1701.435
Median total errors in population: 341
Error averages by case: (16.731 17.34 16.731 16.731 17.34 17.34 17.328 16.731 17.328 16.731 16.731 17.328 16.731 16.731 17.34 16.731 17.34 16.731 16.731 17.328 17.34 16.731 16.731 17.328 17.34 16.731 16.731 17.34 17.328 16.731 17.328 17.328 16.731 16.731 16.731 17.34 17.328 16.731 16.731 16.731 17.34 16.731 17.328 16.731 16.731 16.731 17.328 16.731 16.731 17.34 16.731 16.731 17.34 16.731 16.731 17.328 17.34 17.34 17.328 17.328 16.731 17.34 16.731 16.731 16.731 17.328 16.731 17.328 16.731 16.731 16.731 17.34 16.731 16.731 16.731 17.328 16.731 17.328 17.34 17.34 17.34 16.731 16.731 17.328 16.731 17.328 17.34 16.731 17.328 16.731 16.731 17.328 17.34 16.731 16.731 17.34 16.731 17.328 17.34 17.328)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 101.679
Average program size in population (points): 131.995
Average percent parens in population: 0.224
Minimum age in population: 0.0
Maximum age in population: 7.75
Average age in population: 5.97975
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.064
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 62416065
--- Timings ---
Current time: 1559313243267 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Tic Tac Toe problem report - generation 5
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rot} {:close 0, :instruction string_concat} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_conj} {:close 1, :instruction string_rot} {:close 2, :instruction exec_when} {:close 0, :instruction string_fromboolean} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_while} {:close 1, :instruction string_removechar} {:close 1, :instruction print_string} {:close 0, :instruction string_fromchar} {:close 1, :instruction string_replacefirst} {:close 0, :instruction char_isdigit} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_flush} {:close 0, :instruction string_split} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_last} {:close 1, :instruction exec_noop} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction vector_string_eq} {:close 0, :instruction string_eq})
Lexicase best program: (string_rot string_concat exec_when (vector_string_conj string_rot) exec_when () string_fromboolean "No winner" boolean_flush exec_if () (boolean_dup exec_while () string_removechar) print_string string_fromchar string_replacefirst char_isdigit print_vector_string exec_flush string_split exec_do*while (vector_string_remove vector_string_butlast vector_string_replacefirst string_last) exec_noop string_fromboolean boolean_and boolean_dup vector_string_eq string_rot boolean_or vector_string_eq string_eq)
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rot} {:close 0, :instruction string_concat} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_conj} {:close 1, :instruction string_rot} {:close 2, :instruction exec_when} {:close 0, :instruction string_fromboolean} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_while} {:close 1, :instruction string_removechar} {:close 1, :instruction print_string} {:close 0, :instruction string_fromchar} {:close 1, :instruction string_replacefirst} {:close 0, :instruction char_isdigit} {:close 0, :instruction print_vector_string} {:close 0, :instruction exec_flush} {:close 0, :instruction string_split} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction string_last} {:close 1, :instruction exec_noop} {:close 0, :instruction string_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction vector_string_eq} {:close 0, :instruction string_eq})
Zero cases best program: (string_rot string_concat exec_when (vector_string_conj string_rot) exec_when () string_fromboolean "No winner" boolean_flush exec_if () (boolean_dup exec_while () string_removechar) print_string string_fromchar string_replacefirst char_isdigit print_vector_string exec_flush string_split exec_do*while (vector_string_remove vector_string_butlast vector_string_replacefirst string_last) exec_noop string_fromboolean boolean_and boolean_dup vector_string_eq string_rot boolean_or vector_string_eq string_eq)
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 193 475 475 193 193 180 475 180 475 475 180 475 475 193 475 193 475 475 180 193 475 475 180 193 475 475 193 180 475 180 180 475 475 475 193 180 475 475 475 193 475 180 475 475 475 180 475 475 193 475 475 193 475 475 180 193 193 180 180 475 193 475 475 475 180 475 180 475 475 475 193 475 475 475 180 475 180 193 193 193 475 475 180 475 180 193 475 180 475 475 180 193 475 475 193 475 180 193 180)
Population mean number of elite cases: 33.93
Count of perfect (error zero) individuals by case: (475 193 475 475 193 193 180 475 180 475 475 180 475 475 193 475 193 475 475 180 193 475 475 180 193 475 475 193 180 475 180 180 475 475 475 193 180 475 475 475 193 475 180 475 475 475 180 475 475 193 475 475 193 475 475 180 193 193 180 180 475 193 475 475 475 180 475 180 475 475 475 193 475 475 475 180 475 180 193 193 193 475 475 180 475 180 193 475 180 475 475 180 193 475 475 193 475 180 193 180)
Population mean number of perfect (error zero) cases: 33.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction print_string} {:close 0, :instruction string_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_last} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_empty} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_flush} {:close 1, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 1, :instruction vector_string_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction "O won"} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction string_concat} {:close 0, :instruction boolean_and} {:close 0, :instruction char_isletter} {:close 1, :instruction "X won"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction tagged_583} {:close 0, :instruction exec_swap} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromchar} {:close 0, :instruction char_swap} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction boolean_rot} {:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_concat} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_replace} {:close 1, :instruction vector_string_eq} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_dup} {:close 1, :instruction string_fromboolean} {:close 1, :instruction vector_string_dup} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction exec_when} {:close 1, :instruction print_vector_string} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_dup} {:close 1, :instruction vector_string_swap} {:close 0, :instruction string_reverse} {:close 1, :instruction boolean_pop} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction char_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction string_flush} {:close 0, :instruction string_replace} {:close 0, :instruction exec_when} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_rest} {:close 1, :instruction char_rot} {:close 0, :instruction print_string} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_pop} {:close 0, :instruction string_butlast} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_replace} {:close 0, :instruction string_replace} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_string_empty} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_replace} {:close 0, :instruction char_empty} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction vector_string_flush} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_replace} {:close 1, :instruction char_pop} {:close 0, :instruction exec_noop})
Best program: (print_string "No winner" print_string string_flush char_allfromstring string_last string_containschar exec_eq vector_string_empty char_pop vector_string_flush string_emptystring string_first char_eq vector_string_dup exec_flush vector_string_replace string_empty boolean_not exec_s_when_autoconstructing ("O won" boolean_rot exec_pop (exec_when (string_concat) boolean_and char_isletter "X won") boolean_invert_second_then_and string_parse_to_chars tagged_583) (exec_swap (string_first char_eq string_fromchar char_swap char_iswhitespace) (exec_do*vector_string (boolean_rot vector_string_concat vector_string_swap exec_do*while (vector_string_concat char_isdigit string_replace vector_string_eq) char_swap exec_y_when_autoconstructing (char_rot) boolean_or boolean_not vector_string_dup string_fromboolean) vector_string_dup) vector_string_pushall) (exec_when (print_vector_string) string_fromchar string_replacefirstchar vector_string_dup vector_string_swap) string_reverse boolean_pop string_swap boolean_invert_second_then_and exec_noop boolean_not char_flush exec_noop exec_swap (exec_k () (string_flush string_replace exec_when ("No winner" boolean_xor string_replacechar string_rest char_rot) print_string char_iswhitespace) exec_y (boolean_swap exec_s_when_autoconstructing (exec_eq vector_string_pop string_butlast vector_string_butlast) (string_replace string_replace exec_flush exec_empty vector_string_empty vector_string_rest vector_string_replace char_empty exec_do*vector_string (vector_string_flush) char_dup vector_string_replace char_pop) (exec_noop))) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 102
Size: 124
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 1482.325
Median total errors in population: 341
Error averages by case: (14.484 15.191 14.484 14.484 15.191 15.191 15.22 14.484 15.22 14.484 14.484 15.22 14.484 14.484 15.191 14.484 15.191 14.484 14.484 15.22 15.191 14.484 14.484 15.22 15.191 14.484 14.484 15.191 15.22 14.484 15.22 15.22 14.484 14.484 14.484 15.191 15.22 14.484 14.484 14.484 15.191 14.484 15.22 14.484 14.484 14.484 15.22 14.484 14.484 15.191 14.484 14.484 15.191 14.484 14.484 15.22 15.191 15.191 15.22 15.22 14.484 15.191 14.484 14.484 14.484 15.22 14.484 15.22 14.484 14.484 14.484 15.191 14.484 14.484 14.484 15.22 14.484 15.22 15.191 15.191 15.191 14.484 14.484 15.22 14.484 15.22 15.191 14.484 15.22 14.484 14.484 15.22 15.191 14.484 14.484 15.191 14.484 15.22 15.191 15.22)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 98.842
Average program size in population (points): 128.186
Average percent parens in population: 0.224
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.4918125
Median age in population: 7.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.056
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 75248865
--- Timings ---
Current time: 1559313257599 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Tic Tac Toe problem report - generation 6
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_flush} {:close 1, :instruction string_fromboolean} {:close 2, :instruction string_empty} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_last} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_contains} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_string} {:close 1, :instruction string_pop} {:close 0, :instruction char_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction vector_string_pushall} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_rest} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_first} {:close 1, :instruction string_contains} {:close 1, :instruction string_replacefirstchar} {:close 2, :instruction char_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction string_replacechar} {:close 2, :instruction boolean_empty} {:close 1, :instruction string_last} {:close 0, :instruction tagged_597} {:close 0, :instruction "No winner"} {:close 1, :instruction print_newline} {:close 0, :instruction string_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction vector_string_concat} {:close 1, :instruction exec_eq} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction string_empty} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction print_string} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction string_first} {:close 0, :instruction exec_k} {:close 0, :instruction vector_string_last} {:close 2, :instruction string_concat} {:close 1, :instruction vector_string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_y} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*vector_string} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_containschar} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_contains} {:close 0, :instruction boolean_xor} {:close 1, :instruction string_conjchar} {:close 1, :instruction exec_noop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_reverse})
Lexicase best program: (string_flush string_fromboolean string_empty vector_string_replace exec_s_when_autoconstructing (vector_string_reverse vector_string_last char_rot boolean_dup char_isdigit vector_string_rest vector_string_contains "No winner" vector_string_last print_string string_pop) (char_swap boolean_swap) (vector_string_pushall exec_rot () (vector_string_remove vector_string_eq string_rest char_pop vector_string_first string_contains) (string_replacefirstchar) char_dup) exec_flush string_replacechar boolean_empty string_last tagged_597 "No winner" print_newline string_empty print_boolean vector_string_concat exec_eq string_dup boolean_xor string_empty vector_string_replacefirst print_string string_removechar exec_k_when_autoconstructing (string_first exec_k (vector_string_last string_concat) () vector_string_rot) (char_eq exec_y_when_autoconstructing (vector_string_pushall char_rot boolean_rot string_replacefirstchar string_parse_to_chars) exec_y (string_replacechar boolean_xor string_replacefirstchar boolean_and) exec_do*vector_string (exec_y (string_split boolean_and boolean_rot string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_replacefirst exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" string_replacefirstchar vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) string_swap "No winner" string_conjchar string_butlast char_iswhitespace in1 boolean_eq exec_k_when_autoconstructing (exec_if (vector_string_pop print_vector_string) (vector_string_reverse boolean_not) vector_string_swap vector_string_remove exec_k () (string_butlast exec_when (boolean_swap exec_do*vector_string () exec_rot (vector_string_reverse string_fromboolean vector_string_concat string_containschar exec_do*while () boolean_xor string_contains boolean_xor string_conjchar) (exec_noop) (char_allfromstring "No winner" vector_string_reverse)))) ())
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 158
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_flush} {:close 1, :instruction string_fromboolean} {:close 2, :instruction string_empty} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_last} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_isdigit} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_contains} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_string} {:close 1, :instruction string_pop} {:close 0, :instruction char_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction vector_string_pushall} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_string_remove} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_rest} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_first} {:close 1, :instruction string_contains} {:close 1, :instruction string_replacefirstchar} {:close 2, :instruction char_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction string_replacechar} {:close 2, :instruction boolean_empty} {:close 1, :instruction string_last} {:close 0, :instruction tagged_597} {:close 0, :instruction "No winner"} {:close 1, :instruction print_newline} {:close 0, :instruction string_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction vector_string_concat} {:close 1, :instruction exec_eq} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_xor} {:close 2, :instruction string_empty} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction print_string} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction string_first} {:close 0, :instruction exec_k} {:close 0, :instruction vector_string_last} {:close 2, :instruction string_concat} {:close 1, :instruction vector_string_rot} {:close 0, :instruction char_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_y} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_y} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction string_pop} {:close 0, :instruction string_last} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction exec_when} {:close 0, :instruction string_pop} {:close 0, :instruction string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 3, :instruction "X won"} {:close 0, :instruction "No winner"} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_contains} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction string_split} {:close 0, :instruction "No winner"} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction string_swap} {:close 1, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_butlast} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_pop} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_reverse} {:close 1, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction vector_string_remove} {:close 1, :instruction exec_k} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*vector_string} {:close 0, :instruction exec_rot} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_concat} {:close 0, :instruction string_containschar} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_contains} {:close 0, :instruction boolean_xor} {:close 1, :instruction string_conjchar} {:close 1, :instruction exec_noop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_reverse})
Zero cases best program: (string_flush string_fromboolean string_empty vector_string_replace exec_s_when_autoconstructing (vector_string_reverse vector_string_last char_rot boolean_dup char_isdigit vector_string_rest vector_string_contains "No winner" vector_string_last print_string string_pop) (char_swap boolean_swap) (vector_string_pushall exec_rot () (vector_string_remove vector_string_eq string_rest char_pop vector_string_first string_contains) (string_replacefirstchar) char_dup) exec_flush string_replacechar boolean_empty string_last tagged_597 "No winner" print_newline string_empty print_boolean vector_string_concat exec_eq string_dup boolean_xor string_empty vector_string_replacefirst print_string string_removechar exec_k_when_autoconstructing (string_first exec_k (vector_string_last string_concat) () vector_string_rot) (char_eq exec_y_when_autoconstructing (vector_string_pushall char_rot boolean_rot string_replacefirstchar string_parse_to_chars) exec_y (string_replacechar boolean_xor string_replacefirstchar boolean_and) exec_do*vector_string (exec_y (string_split boolean_and boolean_rot string_replacefirstchar string_pop) string_last vector_string_replace string_butlast boolean_rot exec_if (boolean_not) (vector_string_replacefirst exec_when (string_pop string_contains exec_do*while (boolean_dup "X won"))) "No winner" string_replacefirstchar vector_string_contains exec_k_when_autoconstructing () ()) char_eq string_split "No winner" vector_string_butlast) string_swap "No winner" string_conjchar string_butlast char_iswhitespace in1 boolean_eq exec_k_when_autoconstructing (exec_if (vector_string_pop print_vector_string) (vector_string_reverse boolean_not) vector_string_swap vector_string_remove exec_k () (string_butlast exec_when (boolean_swap exec_do*vector_string () exec_rot (vector_string_reverse string_fromboolean vector_string_concat string_containschar exec_do*while () boolean_xor string_contains boolean_xor string_conjchar) (exec_noop) (char_allfromstring "No winner" vector_string_reverse)))) ())
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 158
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 178 485 485 178 178 191 485 191 485 485 191 485 485 178 485 178 485 485 191 178 485 485 191 178 485 485 178 191 485 191 191 485 485 485 178 191 485 485 485 178 485 191 485 485 485 191 485 485 178 485 485 178 485 485 191 178 178 191 191 485 178 485 485 485 191 485 191 485 485 485 178 485 485 485 191 485 191 178 178 178 485 485 191 485 191 178 485 191 485 485 191 178 485 485 178 485 191 178 191)
Population mean number of elite cases: 34.38
Count of perfect (error zero) individuals by case: (485 178 485 485 178 178 191 485 191 485 485 191 485 485 178 485 178 485 485 191 178 485 485 191 178 485 485 178 191 485 191 191 485 485 485 178 191 485 485 485 178 485 191 485 485 485 191 485 485 178 485 485 178 485 485 191 178 178 191 191 485 178 485 485 485 191 485 191 485 485 485 178 485 485 485 191 485 191 178 178 178 485 485 191 485 191 178 485 191 485 485 191 178 485 485 178 485 191 178 191)
Population mean number of perfect (error zero) cases: 34.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_string_rest} {:close 0, :instruction string_emptystring} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction char_isletter} {:close 0, :instruction string_containschar} {:close 0, :instruction string_reverse} {:close 1, :instruction string_flush} {:close 1, :instruction string_fromboolean} {:close 2, :instruction string_empty} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_last} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_dup} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_contains} {:close 2, :instruction "No winner"} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_string} {:close 1, :instruction string_pop} {:close 0, :instruction char_swap} {:close 0, :instruction string_containschar} {:close 0, :instruction string_reverse} {:close 0, :instruction "O won"} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_contains} {:close 1, :instruction exec_if} {:close 2, :instruction char_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction string_replacechar} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction boolean_rot} {:close 0, :instruction char_isletter} {:close 1, :instruction vector_string_reverse} {:close 0, :instruction string_first} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction char_eq} {:close 0, :instruction print_boolean})
Best program: (vector_string_rest string_emptystring boolean_invert_second_then_and char_isletter string_containschar string_reverse string_flush string_fromboolean string_empty vector_string_replace exec_s_when_autoconstructing (vector_string_reverse vector_string_last char_rot boolean_dup char_dup vector_string_rest vector_string_contains "No winner") () (vector_string_last print_string string_pop) char_swap string_containschar string_reverse "O won" vector_string_first string_fromchar string_replacefirst boolean_eq string_contains exec_if () (char_dup) exec_flush string_replacechar boolean_empty exec_empty exec_do*vector_string (boolean_rot char_isletter vector_string_reverse) string_first vector_string_replacefirst vector_string_pushall boolean_rot exec_y_when_autoconstructing (char_eq print_boolean))
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 48
Size: 56
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 1894.419
Median total errors in population: 341
Error averages by case: (18.568 19.373 18.568 18.568 19.373 19.373 19.364 18.568 19.364 18.568 18.568 19.364 18.568 18.568 19.373 18.568 19.373 18.568 18.568 19.364 19.373 18.568 18.568 19.364 19.373 18.568 18.568 19.373 19.364 18.568 19.364 19.364 18.568 18.568 18.568 19.373 19.364 18.568 18.568 18.568 19.373 18.568 19.364 18.568 18.568 18.568 19.364 18.568 18.568 19.373 18.568 18.568 19.373 18.568 18.568 19.364 19.373 19.373 19.364 19.364 18.568 19.373 18.568 18.568 18.568 19.364 18.568 19.364 18.568 18.568 18.568 19.373 18.568 18.568 18.568 19.364 18.568 19.364 19.373 19.373 19.373 18.568 18.568 19.364 18.568 19.364 19.373 18.568 19.364 18.568 18.568 19.364 19.373 18.568 18.568 19.373 18.568 19.364 19.373 19.364)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.863
Average program size in population (points): 116.476
Average percent parens in population: 0.223
Minimum age in population: 6.0
Maximum age in population: 10.78125
Average age in population: 8.93184375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.062
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 87854265
--- Timings ---
Current time: 1559313272010 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Tic Tac Toe problem report - generation 7
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction string_last} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 2, :instruction exec_rot} {:close 1, :instruction vector_string_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction vector_string_contains} {:close 0, :instruction char_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_last} {:close 1, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_string} {:close 0, :instruction vector_string_contains} {:close 0, :instruction string_fromboolean} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_dup} {:close 0, :instruction string_reverse} {:close 1, :instruction string_fromchar} {:close 2, :instruction string_replacechar} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_emptyvector} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_if} {:close 0, :instruction tag_char_348} {:close 0, :instruction print_char} {:close 0, :instruction exec_s} {:close 0, :instruction vector_string_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor})
Lexicase best program: (string_last string_fromchar string_replacefirst exec_s_when_autoconstructing () (exec_do*while (exec_dup () exec_rot () () (vector_string_swap) exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and) (vector_string_contains char_swap string_replacefirst string_last string_concat) ("No winner" tag_vector_string_478 vector_string_replace exec_s_when_autoconstructing (print_string vector_string_contains string_fromboolean char_allfromstring char_dup string_reverse string_fromchar) (string_replacechar) () boolean_invert_second_then_and "No winner" exec_when (boolean_invert_first_then_and vector_string_pop) exec_string_iterate (exec_do*vector_string (vector_string_emptyvector print_vector_string) exec_if (tag_char_348 print_char exec_s (vector_string_eq exec_s_when_autoconstructing () () (exec_flush exec_string_iterate (boolean_flush boolean_xor))) () ()) ())))) ())
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 74
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction string_last} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 2, :instruction exec_rot} {:close 1, :instruction vector_string_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction vector_string_contains} {:close 0, :instruction char_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_last} {:close 1, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_string} {:close 0, :instruction vector_string_contains} {:close 0, :instruction string_fromboolean} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_dup} {:close 0, :instruction string_reverse} {:close 1, :instruction string_fromchar} {:close 2, :instruction string_replacechar} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_emptyvector} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_if} {:close 0, :instruction tag_char_348} {:close 0, :instruction print_char} {:close 0, :instruction exec_s} {:close 0, :instruction vector_string_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor})
Zero cases best program: (string_last string_fromchar string_replacefirst exec_s_when_autoconstructing () (exec_do*while (exec_dup () exec_rot () () (vector_string_swap) exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and) (vector_string_contains char_swap string_replacefirst string_last string_concat) ("No winner" tag_vector_string_478 vector_string_replace exec_s_when_autoconstructing (print_string vector_string_contains string_fromboolean char_allfromstring char_dup string_reverse string_fromchar) (string_replacechar) () boolean_invert_second_then_and "No winner" exec_when (boolean_invert_first_then_and vector_string_pop) exec_string_iterate (exec_do*vector_string (vector_string_emptyvector print_vector_string) exec_if (tag_char_348 print_char exec_s (vector_string_eq exec_s_when_autoconstructing () () (exec_flush exec_string_iterate (boolean_flush boolean_xor))) () ()) ())))) ())
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 74
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 173 462 462 173 173 209 462 209 462 462 209 462 462 173 462 173 462 462 209 173 462 462 209 173 462 462 173 209 462 209 209 462 462 462 173 209 462 462 462 173 462 209 462 462 462 209 462 462 173 462 462 173 462 462 209 173 173 209 209 462 173 462 462 462 209 462 209 462 462 462 173 462 462 462 209 462 209 173 173 173 462 462 209 462 209 173 462 209 462 462 209 173 462 462 173 462 209 173 209)
Population mean number of elite cases: 33.48
Count of perfect (error zero) individuals by case: (462 173 462 462 173 173 209 462 209 462 462 209 462 462 173 462 173 462 462 209 173 462 462 209 173 462 462 173 209 462 209 209 462 462 462 173 209 462 462 462 173 462 209 462 462 462 209 462 462 173 462 462 173 462 462 209 173 173 209 209 462 173 462 462 462 209 462 209 462 462 462 173 462 462 462 209 462 209 173 173 173 462 462 209 462 209 173 462 209 462 462 209 173 462 462 173 462 209 173 209)
Population mean number of perfect (error zero) cases: 33.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 1, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction print_string} {:close 1, :instruction string_swap} {:close 0, :instruction string_butlast} {:close 0, :instruction tagged_121} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_contains} {:close 0, :instruction print_exec} {:close 0, :instruction string_first} {:close 0, :instruction vector_string_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction string_conjchar} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_empty} {:close 1, :instruction "No winner"} {:close 0, :instruction vector_string_last} {:close 0, :instruction print_string} {:close 1, :instruction string_pop} {:close 0, :instruction char_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction vector_string_pushall} {:close 1, :instruction exec_rot} {:close 1, :instruction char_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction boolean_swap} {:close 1, :instruction string_butlast} {:close 0, :instruction string_fromboolean} {:close 0, :instruction string_fromchar} {:close 1, :instruction "X won"} {:close 0, :instruction vector_string_contains} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_rest} {:close 1, :instruction exec_noop} {:close 0, :instruction print_string} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_string_concat} {:close 0, :instruction string_conjchar} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_fromchar} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (string_dup vector_string_pushall string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) (exec_do*while (vector_string_last) vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_conjchar print_string string_swap) string_butlast tagged_121 exec_when (exec_rot (exec_y () exec_empty string_parse_to_chars vector_string_contains print_exec (string_first vector_string_pop exec_y_when_autoconstructing (exec_k_when_autoconstructing () (string_conjchar) boolean_swap string_parse_to_chars exec_empty "No winner") vector_string_last print_string string_pop) char_swap boolean_swap) (vector_string_pushall exec_rot () (char_dup) (exec_noop vector_string_pushall) boolean_swap string_butlast) (string_fromboolean string_fromchar "X won") vector_string_contains vector_string_reverse vector_string_rest exec_noop) print_string boolean_eq boolean_and vector_string_concat) string_conjchar vector_string_reverse string_fromchar exec_eq boolean_invert_first_then_and char_swap exec_rot (boolean_and boolean_invert_second_then_and boolean_invert_first_then_and) () ()) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 76
Size: 100
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 1260.299
Median total errors in population: 341
Error averages by case: (12.319 12.936 12.319 12.319 12.936 12.936 12.911 12.319 12.911 12.319 12.319 12.911 12.319 12.319 12.936 12.319 12.936 12.319 12.319 12.911 12.936 12.319 12.319 12.911 12.936 12.319 12.319 12.936 12.911 12.319 12.911 12.911 12.319 12.319 12.319 12.936 12.911 12.319 12.319 12.319 12.936 12.319 12.911 12.319 12.319 12.319 12.911 12.319 12.319 12.936 12.319 12.319 12.936 12.319 12.319 12.911 12.936 12.936 12.911 12.911 12.319 12.936 12.319 12.319 12.319 12.911 12.319 12.911 12.319 12.319 12.319 12.936 12.319 12.319 12.319 12.911 12.319 12.911 12.936 12.936 12.936 12.319 12.319 12.911 12.319 12.911 12.936 12.319 12.911 12.319 12.319 12.911 12.936 12.319 12.319 12.936 12.319 12.911 12.936 12.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.07
Average program size in population (points): 111.703
Average percent parens in population: 0.224
Minimum age in population: 8.125
Maximum age in population: 12.078125
Average age in population: 10.395140625
Median age in population: 10.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.052
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 100486165
--- Timings ---
Current time: 1559313286852 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Tic Tac Toe problem report - generation 8
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_337} {:close 0, :instruction char_flush} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_contains} {:close 0, :instruction boolean_pop} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_if} {:close 1, :instruction char_isletter} {:close 0, :instruction vector_string_concat} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_string_iterate} {:close 2, :instruction vector_string_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_rot} {:close 2, :instruction char_pop} {:close 0, :instruction print_string} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_emptystring} {:close 0, :instruction char_rot} {:close 1, :instruction string_rest} {:close 0, :instruction string_swap} {:close 1, :instruction exec_s} {:close 0, :instruction string_last} {:close 0, :instruction char_dup} {:close 0, :instruction string_reverse} {:close 1, :instruction string_fromchar} {:close 1, :instruction vector_string_emptyvector} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_emptyvector} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_if} {:close 0, :instruction tag_char_348} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_pushall} {:close 1, :instruction string_dup} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction string_replacefirst} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_removechar} {:close 0, :instruction vector_string_contains} {:close 0, :instruction exec_y} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 1, :instruction string_replace} {:close 1, :instruction print_vector_string} {:close 0, :instruction string_rot} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_contains} {:close 0, :instruction char_eq} {:close 0, :instruction char_pop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_replace} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_rest})
Lexicase best program: (boolean_swap tagged_337 char_flush "No winner" vector_string_contains boolean_pop vector_string_replacefirst print_string "No winner" exec_if (char_isletter) (vector_string_concat exec_s_when_autoconstructing (exec_string_iterate (vector_string_rot)) (exec_y_when_autoconstructing (vector_string_reverse string_rot char_pop)) (print_string exec_y () boolean_invert_second_then_and) exec_y_when_autoconstructing () exec_do*while (string_emptystring char_rot string_rest) string_swap exec_s () (string_last char_dup string_reverse string_fromchar) (vector_string_emptyvector) boolean_invert_second_then_and "No winner" exec_when (boolean_invert_first_then_and vector_string_pop) exec_string_iterate (exec_do*vector_string (vector_string_emptyvector print_vector_string) exec_if (tag_char_348 vector_string_pushall) (string_containschar vector_string_pushall string_dup) "No winner" boolean_invert_second_then_and boolean_xor char_swap string_replacefirst boolean_and exec_do*vector_string (exec_k_when_autoconstructing () (boolean_not string_rot exec_y_when_autoconstructing (string_replacefirst) exec_y_when_autoconstructing (exec_s (boolean_swap string_removechar vector_string_contains exec_y (string_conjchar exec_rot (exec_eq) (string_replace) (print_vector_string) string_rot string_flush) vector_string_replace exec_flush vector_string_eq boolean_not vector_string_conj string_contains char_eq char_pop char_allfromstring exec_if (vector_string_replace boolean_pop exec_k_when_autoconstructing (exec_flush boolean_not vector_string_swap print_string exec_flush vector_string_replace string_replacefirst char_pop vector_string_last string_fromboolean vector_string_pop vector_string_rest) ()) ()) () ()))))))
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 134
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_337} {:close 0, :instruction char_flush} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_contains} {:close 0, :instruction boolean_pop} {:close 0, :instruction vector_string_replacefirst} {:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_if} {:close 1, :instruction char_isletter} {:close 0, :instruction vector_string_concat} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_string_iterate} {:close 2, :instruction vector_string_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction string_rot} {:close 2, :instruction char_pop} {:close 0, :instruction print_string} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_emptystring} {:close 0, :instruction char_rot} {:close 1, :instruction string_rest} {:close 0, :instruction string_swap} {:close 1, :instruction exec_s} {:close 0, :instruction string_last} {:close 0, :instruction char_dup} {:close 0, :instruction string_reverse} {:close 1, :instruction string_fromchar} {:close 1, :instruction vector_string_emptyvector} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_emptyvector} {:close 1, :instruction print_vector_string} {:close 0, :instruction exec_if} {:close 0, :instruction tag_char_348} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_pushall} {:close 1, :instruction string_dup} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction char_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*vector_string} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction string_replacefirst} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_removechar} {:close 0, :instruction vector_string_contains} {:close 0, :instruction exec_y} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 1, :instruction string_replace} {:close 1, :instruction print_vector_string} {:close 0, :instruction string_rot} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_contains} {:close 0, :instruction char_eq} {:close 0, :instruction char_pop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_if} {:close 0, :instruction vector_string_replace} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_rest})
Zero cases best program: (boolean_swap tagged_337 char_flush "No winner" vector_string_contains boolean_pop vector_string_replacefirst print_string "No winner" exec_if (char_isletter) (vector_string_concat exec_s_when_autoconstructing (exec_string_iterate (vector_string_rot)) (exec_y_when_autoconstructing (vector_string_reverse string_rot char_pop)) (print_string exec_y () boolean_invert_second_then_and) exec_y_when_autoconstructing () exec_do*while (string_emptystring char_rot string_rest) string_swap exec_s () (string_last char_dup string_reverse string_fromchar) (vector_string_emptyvector) boolean_invert_second_then_and "No winner" exec_when (boolean_invert_first_then_and vector_string_pop) exec_string_iterate (exec_do*vector_string (vector_string_emptyvector print_vector_string) exec_if (tag_char_348 vector_string_pushall) (string_containschar vector_string_pushall string_dup) "No winner" boolean_invert_second_then_and boolean_xor char_swap string_replacefirst boolean_and exec_do*vector_string (exec_k_when_autoconstructing () (boolean_not string_rot exec_y_when_autoconstructing (string_replacefirst) exec_y_when_autoconstructing (exec_s (boolean_swap string_removechar vector_string_contains exec_y (string_conjchar exec_rot (exec_eq) (string_replace) (print_vector_string) string_rot string_flush) vector_string_replace exec_flush vector_string_eq boolean_not vector_string_conj string_contains char_eq char_pop char_allfromstring exec_if (vector_string_replace boolean_pop exec_k_when_autoconstructing (exec_flush boolean_not vector_string_swap print_string exec_flush vector_string_replace string_replacefirst char_pop vector_string_last string_fromboolean vector_string_pop vector_string_rest) ()) ()) () ()))))))
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 134
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 172 479 479 172 172 206 479 206 479 479 206 479 479 172 479 172 479 479 206 172 479 479 206 172 479 479 172 206 479 206 206 479 479 479 172 206 479 479 479 172 479 206 479 479 479 206 479 479 172 479 479 172 479 479 206 172 172 206 206 479 172 479 479 479 206 479 206 479 479 479 172 479 479 479 206 479 206 172 172 172 479 479 206 479 206 172 479 206 479 479 206 172 479 479 172 479 206 172 206)
Population mean number of elite cases: 34.29
Count of perfect (error zero) individuals by case: (479 172 479 479 172 172 206 479 206 479 479 206 479 479 172 479 172 479 479 206 172 479 479 206 172 479 479 172 206 479 206 206 479 479 479 172 206 479 479 479 172 479 206 479 479 479 206 479 479 172 479 479 172 479 479 206 172 172 206 206 479 172 479 479 479 206 479 206 479 479 479 172 479 479 479 206 479 206 172 172 172 479 479 206 479 206 172 479 206 479 479 206 172 479 479 172 479 206 172 206)
Population mean number of perfect (error zero) cases: 34.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction vector_string_swap} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction vector_string_dup} {:close 0, :instruction string_swap} {:close 0, :instruction string_contains} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_concat} {:close 1, :instruction string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_last} {:close 1, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_string} {:close 1, :instruction vector_string_contains} {:close 0, :instruction string_fromboolean} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction boolean_rot} {:close 0, :instruction vector_string_concat} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_concat} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_replace} {:close 1, :instruction vector_string_eq} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_rot})
Best program: (exec_while (vector_string_swap string_replacefirstchar) string_replacefirst vector_string_replacefirst vector_string_dup string_swap string_contains vector_string_rot string_concat string_replace string_replacefirst string_last string_concat "No winner" tag_vector_string_478 vector_string_emptyvector exec_s_when_autoconstructing (print_string vector_string_contains) (string_fromboolean char_iswhitespace) (exec_do*vector_string (boolean_rot vector_string_concat vector_string_swap exec_do*while (vector_string_concat char_isdigit string_replace vector_string_eq) char_swap exec_y_when_autoconstructing (char_rot))))
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 2099.975
Median total errors in population: 341
Error averages by case: (20.662 21.384 20.662 20.662 21.384 21.384 21.378 20.662 21.378 20.662 20.662 21.378 20.662 20.662 21.384 20.662 21.384 20.662 20.662 21.377 21.384 20.662 20.662 21.378 21.384 20.662 20.662 21.384 21.377 20.662 21.377 21.377 20.662 20.662 20.662 21.384 21.377 20.662 20.662 20.662 21.384 20.662 21.377 20.662 20.662 20.662 21.377 20.662 20.662 21.384 20.662 20.662 21.384 20.662 20.662 21.378 21.384 21.384 21.378 21.378 20.662 21.384 20.662 20.662 20.662 21.378 20.662 21.377 20.662 20.662 20.662 21.384 20.662 20.662 20.662 21.377 20.662 21.377 21.384 21.384 21.384 20.662 20.662 21.377 20.662 21.377 21.384 20.662 21.377 20.662 20.662 21.377 21.384 20.662 20.662 21.384 20.662 21.377 21.384 21.378)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.584
Average program size in population (points): 107.198
Average percent parens in population: 0.223
Minimum age in population: 9.125
Maximum age in population: 14.0078125
Average age in population: 11.910203125
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.057
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 113308765
--- Timings ---
Current time: 1559313301566 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Tic Tac Toe problem report - generation 9
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction print_string} {:close 0, :instruction string_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_last} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_empty} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_flush} {:close 2, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 1, :instruction vector_string_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction "O won"} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_rest} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction char_allfromstring} {:close 1, :instruction string_last} {:close 0, :instruction exec_empty} {:close 0, :instruction "X won"} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_string} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_containschar} {:close 2, :instruction char_allfromstring} {:close 0, :instruction char_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_171} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction "No winner"} {:close 1, :instruction tagged_934} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_swap} {:close 2, :instruction boolean_dup} {:close 1, :instruction tag_string_360} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_or} {:close 0, :instruction char_isletter} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rest} {:close 0, :instruction char_isdigit} {:close 0, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction string_replace} {:close 1, :instruction print_vector_string} {:close 1, :instruction string_rot} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction exec_flush} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_contains} {:close 0, :instruction char_eq} {:close 0, :instruction char_pop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_replace} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_string_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_rest} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_newline} {:close 0, :instruction string_empty} {:close 0, :instruction tagged_220} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_694} {:close 0, :instruction print_boolean} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_string_eq} {:close 1, :instruction vector_string_remove} {:close 0, :instruction print_newline} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction string_replacechar} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_first} {:close 1, :instruction exec_while} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_rot} {:close 1, :instruction vector_string_first} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction print_string} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_pop} {:close 1, :instruction exec_k} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_replacechar} {:close 2, :instruction exec_noop} {:close 0, :instruction vector_string_rest} {:close 0, :instruction string_dup} {:close 1, :instruction exec_rot} {:close 1, :instruction string_concat} {:close 2, :instruction vector_string_last} {:close 1, :instruction string_removechar} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction vector_string_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction vector_string_replace} {:close 0, :instruction string_emptystring} {:close 1, :instruction char_allfromstring} {:close 0, :instruction exec_flush} {:close 0, :instruction string_removechar} {:close 0, :instruction vector_string_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction "X won"} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_empty} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_first} {:close 0, :instruction exec_dup} {:close 0, :instruction char_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup})
Lexicase best program: (print_string "No winner" print_string string_flush char_allfromstring string_last string_containschar exec_eq vector_string_empty char_pop vector_string_flush string_emptystring string_first char_eq vector_string_dup exec_flush vector_string_replace string_empty boolean_empty exec_s_when_autoconstructing ("O won" boolean_dup exec_pop (exec_when (vector_string_rest exec_y (exec_rot (exec_while (char_allfromstring string_last) exec_empty "X won" exec_do*vector_string (exec_s_when_autoconstructing (print_string) (string_swap boolean_and) (char_iswhitespace string_containschar char_allfromstring)) char_rot exec_rot (string_parse_to_chars tagged_171 vector_string_pop vector_string_last string_pop exec_noop) (exec_s () (boolean_and "No winner" tagged_934) (exec_do*vector_string (exec_do*vector_string (string_replacefirstchar exec_s_when_autoconstructing (string_replacefirstchar vector_string_reverse vector_string_swap boolean_dup) () (tag_string_360) boolean_invert_second_then_and string_containschar vector_string_rot string_replacefirstchar boolean_or) char_isletter char_isletter string_rest char_isdigit "No winner" string_conjchar exec_rot (boolean_and string_replace) (print_vector_string) (string_rot) string_flush) vector_string_replace exec_flush) vector_string_eq boolean_not vector_string_conj string_contains char_eq char_pop char_allfromstring exec_eq vector_string_replace boolean_pop exec_k_when_autoconstructing () (boolean_dup exec_flush boolean_not vector_string_swap) exec_s_when_autoconstructing (exec_flush vector_string_replace string_replacefirst char_pop vector_string_last string_fromboolean vector_string_pop vector_string_rest exec_y_when_autoconstructing (boolean_invert_first_then_and print_newline string_empty tagged_220 exec_rot () (boolean_invert_second_then_and) (string_swap exec_dup (tagged_694 print_boolean string_swap boolean_dup boolean_not vector_string_eq) vector_string_remove) print_newline string_containschar exec_eq string_replacechar "No winner" vector_string_first exec_while () string_eq) vector_string_rot vector_string_first) (exec_do*vector_string (print_string exec_s_when_autoconstructing (string_pop exec_k () (vector_string_emptyvector vector_string_eq string_replacechar exec_noop)) (vector_string_rest string_dup exec_rot () (string_concat) (vector_string_last)) (string_removechar) exec_empty vector_string_butlast vector_string_replace vector_string_rot exec_flush) vector_string_replace) (string_emptystring char_allfromstring) exec_flush string_removechar vector_string_dup exec_when (print_newline exec_s_when_autoconstructing () (exec_eq) (print_exec (exec_pop (string_fromchar "X won" vector_string_swap char_empty vector_string_dup vector_string_first exec_dup (char_dup boolean_invert_first_then_and string_empty print_newline boolean_xor boolean_dup)))))) ()) () ())))) () ())
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 231
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_string} {:close 0, :instruction "No winner"} {:close 0, :instruction print_string} {:close 0, :instruction string_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_last} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_empty} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_flush} {:close 2, :instruction string_emptystring} {:close 0, :instruction string_first} {:close 0, :instruction char_eq} {:close 1, :instruction vector_string_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction "O won"} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction vector_string_rest} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction char_allfromstring} {:close 1, :instruction string_last} {:close 0, :instruction exec_empty} {:close 0, :instruction "X won"} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_string} {:close 0, :instruction string_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_containschar} {:close 2, :instruction char_allfromstring} {:close 0, :instruction char_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_171} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction "No winner"} {:close 1, :instruction tagged_934} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_swap} {:close 2, :instruction boolean_dup} {:close 1, :instruction tag_string_360} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_containschar} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_or} {:close 0, :instruction char_isletter} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rest} {:close 0, :instruction char_isdigit} {:close 0, :instruction "No winner"} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction string_replace} {:close 1, :instruction print_vector_string} {:close 1, :instruction string_rot} {:close 1, :instruction string_flush} {:close 0, :instruction vector_string_replace} {:close 1, :instruction exec_flush} {:close 0, :instruction vector_string_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_contains} {:close 0, :instruction char_eq} {:close 0, :instruction char_pop} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_eq} {:close 0, :instruction vector_string_replace} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_string_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction vector_string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_fromboolean} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_rest} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_newline} {:close 0, :instruction string_empty} {:close 0, :instruction tagged_220} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_694} {:close 0, :instruction print_boolean} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_string_eq} {:close 1, :instruction vector_string_remove} {:close 0, :instruction print_newline} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction string_replacechar} {:close 0, :instruction "No winner"} {:close 0, :instruction vector_string_first} {:close 1, :instruction exec_while} {:close 1, :instruction string_eq} {:close 0, :instruction vector_string_rot} {:close 1, :instruction vector_string_first} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction print_string} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction string_pop} {:close 1, :instruction exec_k} {:close 0, :instruction vector_string_emptyvector} {:close 0, :instruction vector_string_eq} {:close 0, :instruction string_replacechar} {:close 2, :instruction exec_noop} {:close 0, :instruction vector_string_rest} {:close 0, :instruction string_dup} {:close 1, :instruction exec_rot} {:close 1, :instruction string_concat} {:close 2, :instruction vector_string_last} {:close 1, :instruction string_removechar} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_string_butlast} {:close 0, :instruction vector_string_replace} {:close 0, :instruction vector_string_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction vector_string_replace} {:close 0, :instruction string_emptystring} {:close 1, :instruction char_allfromstring} {:close 0, :instruction exec_flush} {:close 0, :instruction string_removechar} {:close 0, :instruction vector_string_dup} {:close 0, :instruction exec_when} {:close 0, :instruction print_newline} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction string_fromchar} {:close 0, :instruction "X won"} {:close 0, :instruction vector_string_swap} {:close 0, :instruction char_empty} {:close 0, :instruction vector_string_dup} {:close 0, :instruction vector_string_first} {:close 0, :instruction exec_dup} {:close 0, :instruction char_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup})
Zero cases best program: (print_string "No winner" print_string string_flush char_allfromstring string_last string_containschar exec_eq vector_string_empty char_pop vector_string_flush string_emptystring string_first char_eq vector_string_dup exec_flush vector_string_replace string_empty boolean_empty exec_s_when_autoconstructing ("O won" boolean_dup exec_pop (exec_when (vector_string_rest exec_y (exec_rot (exec_while (char_allfromstring string_last) exec_empty "X won" exec_do*vector_string (exec_s_when_autoconstructing (print_string) (string_swap boolean_and) (char_iswhitespace string_containschar char_allfromstring)) char_rot exec_rot (string_parse_to_chars tagged_171 vector_string_pop vector_string_last string_pop exec_noop) (exec_s () (boolean_and "No winner" tagged_934) (exec_do*vector_string (exec_do*vector_string (string_replacefirstchar exec_s_when_autoconstructing (string_replacefirstchar vector_string_reverse vector_string_swap boolean_dup) () (tag_string_360) boolean_invert_second_then_and string_containschar vector_string_rot string_replacefirstchar boolean_or) char_isletter char_isletter string_rest char_isdigit "No winner" string_conjchar exec_rot (boolean_and string_replace) (print_vector_string) (string_rot) string_flush) vector_string_replace exec_flush) vector_string_eq boolean_not vector_string_conj string_contains char_eq char_pop char_allfromstring exec_eq vector_string_replace boolean_pop exec_k_when_autoconstructing () (boolean_dup exec_flush boolean_not vector_string_swap) exec_s_when_autoconstructing (exec_flush vector_string_replace string_replacefirst char_pop vector_string_last string_fromboolean vector_string_pop vector_string_rest exec_y_when_autoconstructing (boolean_invert_first_then_and print_newline string_empty tagged_220 exec_rot () (boolean_invert_second_then_and) (string_swap exec_dup (tagged_694 print_boolean string_swap boolean_dup boolean_not vector_string_eq) vector_string_remove) print_newline string_containschar exec_eq string_replacechar "No winner" vector_string_first exec_while () string_eq) vector_string_rot vector_string_first) (exec_do*vector_string (print_string exec_s_when_autoconstructing (string_pop exec_k () (vector_string_emptyvector vector_string_eq string_replacechar exec_noop)) (vector_string_rest string_dup exec_rot () (string_concat) (vector_string_last)) (string_removechar) exec_empty vector_string_butlast vector_string_replace vector_string_rot exec_flush) vector_string_replace) (string_emptystring char_allfromstring) exec_flush string_removechar vector_string_dup exec_when (print_newline exec_s_when_autoconstructing () (exec_eq) (print_exec (exec_pop (string_fromchar "X won" vector_string_swap char_empty vector_string_dup vector_string_first exec_dup (char_dup boolean_invert_first_then_and string_empty print_newline boolean_xor boolean_dup)))))) ()) () ())))) () ())
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 231
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (465 187 465 465 187 187 213 465 213 465 465 213 465 465 187 465 187 465 465 213 187 465 465 213 187 465 465 187 213 465 213 213 465 465 465 187 213 465 465 465 187 465 213 465 465 465 213 465 465 187 465 465 187 465 465 213 187 187 213 213 465 187 465 465 465 213 465 213 465 465 465 187 465 465 465 213 465 213 187 187 187 465 465 213 465 213 187 465 213 465 465 213 187 465 465 187 465 213 187 213)
Population mean number of elite cases: 34.06
Count of perfect (error zero) individuals by case: (465 187 465 465 187 187 213 465 213 465 465 213 465 465 187 465 187 465 465 213 187 465 465 213 187 465 465 187 213 465 213 213 465 465 465 187 213 465 465 465 187 465 213 465 465 465 213 465 465 187 465 465 187 465 465 213 187 187 213 213 465 187 465 465 465 213 465 213 465 465 465 187 465 465 465 213 465 213 187 187 187 465 465 213 465 213 187 465 213 465 465 213 187 465 465 187 465 213 187 213)
Population mean number of perfect (error zero) cases: 34.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction vector_string_swap} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction string_replacefirst} {:close 1, :instruction vector_string_replacefirst} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction string_contains} {:close 0, :instruction vector_string_rot} {:close 0, :instruction string_concat} {:close 1, :instruction string_replace} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_eq} {:close 1, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_string} {:close 0, :instruction vector_string_contains} {:close 0, :instruction string_fromboolean} {:close 0, :instruction char_allfromstring} {:close 1, :instruction string_rest} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction string_last} {:close 0, :instruction char_dup} {:close 0, :instruction string_reverse} {:close 1, :instruction string_fromchar} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction vector_string_pop} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction vector_string_emptyvector} {:close 1, :instruction print_vector_string} {:close 1, :instruction "No winner"} {:close 1, :instruction tagged_934} {:close 1, :instruction exec_do*vector_string} {:close 1, :instruction boolean_or} {:close 0, :instruction char_isletter} {:close 0, :instruction char_isletter} {:close 0, :instruction string_rest})
Best program: (exec_while (vector_string_swap string_replacefirstchar) string_replacefirst vector_string_replacefirst print_string string_swap string_contains vector_string_rot string_concat string_replace string_replacefirst vector_string_eq string_concat "No winner" tag_vector_string_478 vector_string_replace exec_s_when_autoconstructing (print_string) (vector_string_contains string_fromboolean char_allfromstring string_rest) (print_boolean exec_s (string_last char_dup string_reverse string_fromchar) (string_replacechar boolean_invert_second_then_and "No winner" exec_when (boolean_invert_first_then_and vector_string_pop) exec_string_iterate (exec_do*vector_string (vector_string_emptyvector print_vector_string) "No winner") tagged_934) (exec_do*vector_string () boolean_or) char_isletter char_isletter string_rest))
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 46
Size: 58
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 2422.165
Median total errors in population: 341
Error averages by case: (23.986 24.493 23.986 23.986 24.493 24.493 24.482 23.986 24.482 23.986 23.986 24.482 23.986 23.986 24.493 23.986 24.493 23.986 23.986 24.482 24.493 23.986 23.986 24.482 24.493 23.986 23.986 24.493 24.482 23.986 24.482 24.482 23.986 23.986 23.986 24.493 24.482 23.986 23.986 23.986 24.493 23.986 24.482 23.986 23.986 23.986 24.482 23.986 23.986 24.493 23.986 23.986 24.493 23.986 23.986 24.482 24.493 24.493 24.482 24.482 23.986 24.493 23.986 23.986 23.986 24.482 23.986 24.482 23.986 23.986 23.986 24.493 23.986 23.986 23.986 24.482 23.986 24.482 24.493 24.493 24.493 23.986 23.986 24.482 23.986 24.482 24.493 23.986 24.482 23.986 23.986 24.482 24.493 23.986 23.986 24.493 23.986 24.482 24.493 24.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.213
Average program size in population (points): 104.306
Average percent parens in population: 0.224
Minimum age in population: 10.125
Maximum age in population: 15.390625
Average age in population: 13.3635703125
Median age in population: 13.43359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.051
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 125024165
--- Timings ---
Current time: 1559313315922 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Tic Tac Toe problem report - generation 10
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_emptystring} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction char_isletter} {:close 0, :instruction string_containschar} {:close 0, :instruction string_reverse} {:close 0, :instruction "O won"} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_string} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_121} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_contains} {:close 0, :instruction print_exec} {:close 0, :instruction string_first} {:close 0, :instruction vector_string_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction string_conjchar} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction char_isletter} {:close 1, :instruction "X won"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_concat} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_replace} {:close 1, :instruction vector_string_eq} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_dup} {:close 1, :instruction string_fromboolean} {:close 1, :instruction vector_string_dup} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction exec_when} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_dup} {:close 1, :instruction vector_string_swap} {:close 0, :instruction string_reverse} {:close 1, :instruction boolean_pop} {:close 0, :instruction string_swap} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 2, :instruction string_rest} {:close 0, :instruction in1} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction string_flush} {:close 0, :instruction string_replace} {:close 0, :instruction exec_when} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_rest} {:close 1, :instruction char_rot} {:close 0, :instruction char_isletter} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_319} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (vector_string_pushall string_emptystring boolean_invert_second_then_and char_isletter string_containschar string_reverse "O won" vector_string_first string_fromchar string_replacefirst boolean_eq string_concat "No winner" tag_vector_string_478 vector_string_replace exec_s_when_autoconstructing (print_string exec_y_when_autoconstructing (exec_k_when_autoconstructing () (boolean_invert_second_then_and)) boolean_swap string_parse_to_chars tagged_121 exec_when (exec_rot (exec_y () exec_empty string_parse_to_chars vector_string_contains print_exec (string_first vector_string_pop exec_y_when_autoconstructing (exec_k_when_autoconstructing () (string_conjchar) boolean_swap string_parse_to_chars char_isletter "X won") boolean_invert_second_then_and string_parse_to_chars vector_string_concat char_isdigit string_replace vector_string_eq) char_swap exec_y_when_autoconstructing (char_rot) boolean_or boolean_not vector_string_dup string_fromboolean) (vector_string_dup) (vector_string_pushall) exec_when (print_vector_string) vector_string_first string_replacefirstchar vector_string_dup vector_string_swap) string_reverse boolean_pop) (string_swap vector_string_pushall exec_noop boolean_not) (string_rest) in1 string_replacefirstchar vector_string_conj string_removechar exec_flush exec_dup (string_containschar exec_s (exec_pop (string_flush string_replace exec_when ("No winner" boolean_xor string_replacechar string_rest char_rot) char_isletter char_iswhitespace) exec_if (boolean_swap exec_s_when_autoconstructing (tagged_319 exec_k_when_autoconstructing () ()) () ()) ()) () ()))
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 122
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_emptystring} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction char_isletter} {:close 0, :instruction string_containschar} {:close 0, :instruction string_reverse} {:close 0, :instruction "O won"} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_fromchar} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_concat} {:close 0, :instruction "No winner"} {:close 0, :instruction tag_vector_string_478} {:close 0, :instruction vector_string_replace} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_string} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_121} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_contains} {:close 0, :instruction print_exec} {:close 0, :instruction string_first} {:close 0, :instruction vector_string_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction string_conjchar} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction char_isletter} {:close 1, :instruction "X won"} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_concat} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_replace} {:close 1, :instruction vector_string_eq} {:close 0, :instruction char_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction char_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_string_dup} {:close 1, :instruction string_fromboolean} {:close 1, :instruction vector_string_dup} {:close 1, :instruction vector_string_pushall} {:close 0, :instruction exec_when} {:close 1, :instruction print_vector_string} {:close 0, :instruction vector_string_first} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_dup} {:close 1, :instruction vector_string_swap} {:close 0, :instruction string_reverse} {:close 1, :instruction boolean_pop} {:close 0, :instruction string_swap} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 2, :instruction string_rest} {:close 0, :instruction in1} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction vector_string_conj} {:close 0, :instruction string_removechar} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction string_flush} {:close 0, :instruction string_replace} {:close 0, :instruction exec_when} {:close 0, :instruction "No winner"} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_rest} {:close 1, :instruction char_rot} {:close 0, :instruction char_isletter} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_319} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (vector_string_pushall string_emptystring boolean_invert_second_then_and char_isletter string_containschar string_reverse "O won" vector_string_first string_fromchar string_replacefirst boolean_eq string_concat "No winner" tag_vector_string_478 vector_string_replace exec_s_when_autoconstructing (print_string exec_y_when_autoconstructing (exec_k_when_autoconstructing () (boolean_invert_second_then_and)) boolean_swap string_parse_to_chars tagged_121 exec_when (exec_rot (exec_y () exec_empty string_parse_to_chars vector_string_contains print_exec (string_first vector_string_pop exec_y_when_autoconstructing (exec_k_when_autoconstructing () (string_conjchar) boolean_swap string_parse_to_chars char_isletter "X won") boolean_invert_second_then_and string_parse_to_chars vector_string_concat char_isdigit string_replace vector_string_eq) char_swap exec_y_when_autoconstructing (char_rot) boolean_or boolean_not vector_string_dup string_fromboolean) (vector_string_dup) (vector_string_pushall) exec_when (print_vector_string) vector_string_first string_replacefirstchar vector_string_dup vector_string_swap) string_reverse boolean_pop) (string_swap vector_string_pushall exec_noop boolean_not) (string_rest) in1 string_replacefirstchar vector_string_conj string_removechar exec_flush exec_dup (string_containschar exec_s (exec_pop (string_flush string_replace exec_when ("No winner" boolean_xor string_replacechar string_rest char_rot) char_isletter char_iswhitespace) exec_if (boolean_swap exec_s_when_autoconstructing (tagged_319 exec_k_when_autoconstructing () ()) () ()) ()) () ()))
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 122
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (469 188 469 469 188 188 218 469 218 469 469 218 469 469 188 469 188 469 469 218 188 469 469 218 188 469 469 188 218 469 218 218 469 469 469 188 218 469 469 469 188 469 218 469 469 469 218 469 469 188 469 469 188 469 469 218 188 188 218 218 469 188 469 469 469 218 469 218 469 469 469 188 469 469 469 218 469 218 188 188 188 469 469 218 469 218 188 469 218 469 469 218 188 469 469 188 469 218 188 218)
Population mean number of elite cases: 34.41
Count of perfect (error zero) individuals by case: (469 188 469 469 188 188 218 469 218 469 469 218 469 469 188 469 188 469 469 218 188 469 469 218 188 469 469 188 218 469 218 218 469 469 469 188 218 469 469 469 188 469 218 469 469 469 218 469 469 188 469 469 188 469 469 218 188 188 218 218 469 188 469 469 469 218 469 218 469 469 469 188 469 469 469 218 469 218 188 188 188 469 469 218 469 218 188 469 218 469 469 218 188 469 469 188 469 218 188 218)
Population mean number of perfect (error zero) cases: 34.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_containschar} {:close 1, :instruction vector_string_reverse} {:close 0, :instruction string_replace} {:close 0, :instruction char_isletter} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction char_eq} {:close 2, :instruction string_replacefirst} {:close 0, :instruction tag_vector_string_601} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_string_rest} {:close 0, :instruction vector_string_contains} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction string_contains} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_concat} {:close 1, :instruction string_replace} {:close 0, :instruction "No winner"} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 1, :instruction vector_string_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction string_conjchar} {:close 0, :instruction print_string} {:close 0, :instruction string_swap} {:close 0, :instruction string_butlast} {:close 0, :instruction tagged_121} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction vector_string_contains} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction vector_string_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction string_conjchar} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_containschar} {:close 1, :instruction vector_string_last} {:close 0, :instruction string_fromboolean} {:close 1, :instruction print_char} {:close 1, :instruction boolean_and} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_s} {:close 0, :instruction vector_string_eq} {:close 0, :instruction "No winner"} {:close 1, :instruction tagged_1042} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction exec_do*vector_string} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction char_flush} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction vector_string_swap} {:close 2, :instruction boolean_dup} {:close 1, :instruction tag_string_360})
Best program: (string_flush exec_do*while (string_containschar vector_string_reverse) string_replace char_isletter exec_k_when_autoconstructing (char_eq string_replacefirst) () tag_vector_string_601 boolean_xor vector_string_rest vector_string_contains exec_rot (exec_while (string_contains boolean_invert_second_then_and) string_concat string_replace) ("No winner" exec_noop exec_s (vector_string_empty) (exec_y_when_autoconstructing (string_conjchar print_string string_swap string_butlast tagged_121 exec_when (exec_rot (exec_y () exec_empty) (string_parse_to_chars vector_string_contains print_exec (exec_k_when_autoconstructing (vector_string_pop exec_y_when_autoconstructing (exec_k_when_autoconstructing () (string_conjchar boolean_swap string_parse_to_chars string_containschar vector_string_last) string_fromboolean print_char) boolean_and) (vector_string_last string_pop exec_noop exec_s () (vector_string_eq "No winner" tagged_1042) (exec_do*vector_string (exec_do*vector_string (string_replacefirstchar exec_s_when_autoconstructing (char_flush vector_string_reverse vector_string_swap boolean_dup) () (tag_string_360))))))) ()))) ()) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 64
Size: 95
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 1714.408
Median total errors in population: 341
Error averages by case: (16.889 17.438 16.889 16.889 17.438 17.438 17.426 16.889 17.426 16.889 16.889 17.426 16.889 16.889 17.439 16.889 17.438 16.889 16.889 17.425 17.438 16.889 16.889 17.426 17.438 16.889 16.889 17.438 17.425 16.889 17.425 17.425 16.889 16.889 16.889 17.438 17.425 16.889 16.889 16.889 17.438 16.889 17.425 16.889 16.889 16.889 17.425 16.889 16.889 17.439 16.889 16.889 17.439 16.889 16.889 17.426 17.438 17.438 17.426 17.426 16.889 17.439 16.889 16.889 16.889 17.426 16.889 17.425 16.889 16.889 16.889 17.439 16.889 16.889 16.889 17.425 16.889 17.425 17.438 17.439 17.439 16.889 16.889 17.425 16.889 17.425 17.439 16.889 17.425 16.889 16.889 17.425 17.438 16.889 16.889 17.438 16.889 17.425 17.438 17.426)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.429
Average program size in population (points): 97.015
Average percent parens in population: 0.225
Minimum age in population: 11.4375
Maximum age in population: 16.90234375
Average age in population: 14.819705078125
Median age in population: 14.87109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.05
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 135936434
--- Timings ---
Current time: 1559313330174 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Tic Tac Toe problem report - generation 11
Test total error for best: 2694
Test mean error for best: 2.69400
;;------------------------------
Outputs of best individual on training cases:
| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "No winner"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

| Correct output: "X won"
| Program output: "No winner"

| Correct output: "O won"
| Program output: "No winner"

;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction string_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 1, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_dup} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_not} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_flush})
Lexicase best program: (string_dup string_pop string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) (exec_do*while (vector_string_last) vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_dup vector_string_swap print_string char_flush in1) boolean_swap) string_replacechar exec_string_iterate (boolean_not string_parse_to_chars string_flush)) ())
Lexicase best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Lexicase best number of elite cases: 53
Lexicase best total error: 282
Lexicase best mean error: 2.82
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction string_pop} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 1, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 1, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_dup} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_not} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_flush})
Zero cases best program: (string_dup string_pop string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) (exec_do*while (vector_string_last) vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_dup vector_string_swap print_string char_flush in1) boolean_swap) string_replacechar exec_string_iterate (boolean_not string_parse_to_chars string_flush)) ())
Zero cases best errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Zero cases best number of elite cases: 53
Zero cases best number of zero cases: 53
Zero cases best total error: 282
Zero cases best mean error: 2.82
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 184 453 453 184 184 224 453 224 453 453 224 453 453 184 453 184 453 453 224 184 453 453 224 184 453 453 184 224 453 224 224 453 453 453 184 224 453 453 453 184 453 224 453 453 453 224 453 453 184 453 453 184 453 453 224 184 184 224 224 453 184 453 453 453 224 453 224 453 453 453 184 453 453 453 224 453 224 184 184 184 453 453 224 453 224 184 453 224 453 453 224 184 453 453 184 453 224 184 224)
Population mean number of elite cases: 33.62
Count of perfect (error zero) individuals by case: (453 184 453 453 184 184 224 453 224 453 453 224 453 453 184 453 184 453 453 224 184 453 453 224 184 453 453 184 224 453 224 224 453 453 453 184 224 453 453 453 184 453 224 453 453 453 224 453 453 184 453 453 184 453 453 224 184 184 224 224 453 184 453 453 453 224 453 224 453 453 453 184 453 453 453 224 453 224 184 184 184 453 453 224 453 224 184 453 224 453 453 224 184 453 453 184 453 224 184 224)
Population mean number of perfect (error zero) cases: 33.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_dup} {:close 0, :instruction vector_string_pushall} {:close 0, :instruction string_reverse} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction vector_string_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_string_iterate} {:close 0, :instruction vector_string_conj} {:close 2, :instruction vector_string_contains} {:close 0, :instruction exec_do*while} {:close 0, :instruction vector_string_last} {:close 0, :instruction vector_string_replacefirst} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction "No winner"} {:close 0, :instruction string_dup} {:close 0, :instruction vector_string_swap} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction char_rot} {:close 0, :instruction string_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction vector_string_butlast} {:close 0, :instruction vector_string_rest} {:close 0, :instruction string_rest} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_conjchar} {:close 0, :instruction vector_string_reverse} {:close 0, :instruction char_flush} {:close 1, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_not} {:close 0, :instruction string_containschar} {:close 2, :instruction char_allfromstring} {:close 0, :instruction char_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction print_string} {:close 0, :instruction vector_string_pop} {:close 0, :instruction vector_string_last} {:close 0, :instruction string_pop})
Best program: (string_dup vector_string_pushall string_reverse boolean_flush print_char string_replacefirst vector_string_swap exec_swap (exec_do*while (exec_rot (boolean_eq boolean_eq exec_string_iterate ()) (vector_string_conj vector_string_contains) () exec_do*while (vector_string_last vector_string_replacefirst string_removechar boolean_rot boolean_swap "No winner" string_dup vector_string_swap print_string char_flush exec_if () (boolean_swap) string_replacechar string_replace boolean_not char_rot string_flush exec_y_when_autoconstructing (boolean_rot exec_if () (string_parse_to_chars vector_string_butlast) vector_string_rest string_rest char_isdigit string_conjchar vector_string_reverse char_flush in1) boolean_swap) string_replacechar exec_string_iterate (boolean_not string_containschar char_allfromstring)) char_rot exec_rot (string_parse_to_chars print_string vector_string_pop vector_string_last string_pop) () ()) ())
Errors: [0 6 0 0 6 6 6 0 6 0 0 6 0 0 6 0 6 0 0 6 6 0 0 6 6 0 0 6 6 0 6 6 0 0 0 6 6 0 0 0 6 0 6 0 0 0 6 0 0 6 0 0 6 0 0 6 6 6 6 6 0 6 0 0 0 6 0 6 0 0 0 6 0 0 0 6 0 6 6 6 6 0 0 6 0 6 6 0 6 0 0 6 6 0 0 6 0 6 6 6]
Total: 282
Mean: 2.82
Genome size: 58
Size: 76
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 2963.83
Median total errors in population: 341
Error averages by case: (29.421 29.891 29.421 29.421 29.891 29.891 29.876 29.421 29.876 29.421 29.421 29.876 29.421 29.421 29.891 29.421 29.891 29.421 29.421 29.876 29.891 29.421 29.421 29.876 29.891 29.421 29.421 29.891 29.876 29.421 29.876 29.876 29.421 29.421 29.421 29.891 29.876 29.421 29.421 29.421 29.891 29.421 29.876 29.421 29.421 29.421 29.876 29.421 29.421 29.891 29.421 29.421 29.891 29.421 29.421 29.876 29.891 29.891 29.876 29.876 29.421 29.891 29.421 29.421 29.421 29.876 29.421 29.876 29.421 29.421 29.421 29.891 29.421 29.421 29.421 29.876 29.421 29.876 29.891 29.891 29.891 29.421 29.421 29.876 29.421 29.876 29.891 29.421 29.876 29.421 29.421 29.876 29.891 29.421 29.421 29.891 29.421 29.876 29.891 29.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.054
Average program size in population (points): 94.04
Average percent parens in population: 0.225
Minimum age in population: 13.2265625
Maximum age in population: 18.54296875
Average age in population: 16.2809091796875
Median age in population: 16.34130859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.058
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 147424403
--- Timings ---
Current time: 1559313345225 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
