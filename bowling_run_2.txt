Command line args: clojush.problems.software.bowling
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (#object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x1acc768 clojush.instructions.tag$tag_instruction_erc$fn__2160@1acc768] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x38caad07 clojush.instructions.tag$tagged_instruction_erc$fn__2166@38caad07] in1 integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
error-function = #object[clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472 0x85c3522 clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472@85c3522]
evalpush-limit = 4000
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-points = 1600
parent-selection = :lexicase
population-size = 1000
problem-specific-initial-report = #object[clojush.problems.software.bowling$bowling_initial_report 0x129c760d clojush.problems.software.bowling$bowling_initial_report@129c760d]
problem-specific-report = #object[clojush.problems.software.bowling$bowling_report 0x180f33b2 clojush.problems.software.bowling$bowling_report@180f33b2]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[10 10 10 10 10 10 10 10 10 10 10 10] 300]
Train Case:   1 | Input/Output: [[4 6 0 1 10 3 2 4 3 3 5 7 3 10 10 5 3] 117]
Train Case:   2 | Input/Output: [[7 3 10 7 0 10 8 2 10 9 0 1 3 10 9 1 0] 146]
Train Case:   3 | Input/Output: [[8 2 6 2 10 10 10 6 2 0 8 7 0 7 3 4 2] 141]
Train Case:   4 | Input/Output: [[9 1 10 3 7 1 6 7 3 10 10 1 1 6 1 4 1] 125]
Train Case:   5 | Input/Output: [[10 4 4 10 6 3 6 3 8 1 6 3 8 0 10 2 7] 117]
Train Case:   6 | Input/Output: [[10 10 9 0 8 0 0 4 9 1 10 10 5 0 6 4 9] 153]
Train Case:   7 | Input/Output: [[0 0 8 0 9 1 2 8 10 5 0 4 1 10 1 0 3 4] 84]
Train Case:   8 | Input/Output: [[2 5 0 2 8 2 2 6 3 2 10 9 0 10 3 2 6 0] 88]
Train Case:   9 | Input/Output: [[2 5 1 9 0 1 10 3 3 10 8 1 9 0 9 0 3 6] 95]
Train Case:  10 | Input/Output: [[2 7 4 2 6 3 10 4 2 6 0 9 1 7 1 10 7 0] 101]
Train Case:  11 | Input/Output: [[3 2 3 6 1 3 10 1 4 2 8 10 1 8 8 0 2 1] 97]
Train Case:  12 | Input/Output: [[4 3 10 6 4 3 6 8 1 7 2 8 0 8 2 10 5 0] 115]
Train Case:  13 | Input/Output: [[4 5 6 4 5 5 2 4 10 10 4 0 7 0 7 0 3 6] 107]
Train Case:  14 | Input/Output: [[5 1 1 1 2 1 6 3 5 1 7 1 6 2 10 10 1 4] 83]
Train Case:  15 | Input/Output: [[6 4 10 7 1 10 3 7 7 1 9 1 9 0 0 3 1 0] 123]
Train Case:  16 | Input/Output: [[7 1 1 5 10 10 10 5 4 8 2 2 7 9 0 10 5 3] 145]
Train Case:  17 | Input/Output: [[8 1 6 3 5 3 1 7 10 10 9 1 4 2 9 0 7 2] 121]
Train Case:  18 | Input/Output: [[9 0 4 3 10 1 2 5 1 3 0 6 4 6 4 10 1 8] 105]
Train Case:  19 | Input/Output: [[10 2 6 8 2 10 6 4 7 1 0 10 4 3 8 1 4 5] 130]
Train Case:  20 | Input/Output: [[0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0] 10]
Train Case:  21 | Input/Output: [[0 6 2 2 2 8 10 5 1 9 1 1 7 2 7 10 10 7 4] 128]
Train Case:  22 | Input/Output: [[1 0 3 7 10 3 1 3 3 6 4 5 5 9 0 1 9 2 4] 106]
Train Case:  23 | Input/Output: [[1 1 0 3 1 0 9 0 2 7 5 3 4 4 10 1 9 7 2] 86]
Train Case:  24 | Input/Output: [[1 3 7 1 2 4 2 7 1 1 2 2 10 3 1 6 3 8 1] 69]
Train Case:  25 | Input/Output: [[1 3 9 1 8 2 3 6 1 9 6 3 0 8 1 4 10 7 0] 106]
Train Case:  26 | Input/Output: [[2 2 2 7 9 1 0 5 3 2 8 2 4 5 5 5 10 0 8] 102]
Train Case:  27 | Input/Output: [[2 2 9 1 0 2 4 3 1 5 0 2 5 4 10 3 0 5 0] 61]
Train Case:  28 | Input/Output: [[2 4 0 4 10 7 1 8 1 10 4 2 8 0 0 6 10 5 6] 102]
Train Case:  29 | Input/Output: [[2 7 3 2 6 4 5 2 2 1 3 3 9 0 10 9 1 5 1] 95]
Train Case:  30 | Input/Output: [[3 6 5 4 7 1 6 1 8 0 10 5 4 2 6 6 3 5 4] 95]
Train Case:  31 | Input/Output: [[3 7 3 6 10 0 8 4 0 2 6 2 4 6 0 7 3 9 0] 100]
Train Case:  32 | Input/Output: [[3 7 4 3 0 2 6 1 5 2 0 6 10 5 5 10 10 0 10] 123]
Train Case:  33 | Input/Output: [[4 2 3 7 6 0 1 9 5 2 5 3 8 1 10 2 6 3 1] 97]
Train Case:  34 | Input/Output: [[4 4 6 2 7 3 5 3 2 0 10 2 8 4 0 9 0 4 4] 96]
Train Case:  35 | Input/Output: [[4 6 0 3 4 6 10 3 2 3 7 2 0 6 4 4 6 7 1] 106]
Train Case:  36 | Input/Output: [[5 3 9 1 9 0 10 0 8 5 5 5 2 5 1 3 0 4 4] 101]
Train Case:  37 | Input/Output: [[5 5 4 2 5 2 0 10 7 3 10 3 1 7 0 9 1 0 4] 103]
Train Case:  38 | Input/Output: [[6 3 8 2 6 1 10 6 0 0 8 4 6 7 0 5 1 1 6] 99]
Train Case:  39 | Input/Output: [[7 0 0 8 0 9 2 7 3 2 10 5 0 6 0 8 0 9 0] 81]
Train Case:  40 | Input/Output: [[7 1 6 1 10 6 4 7 0 9 1 8 0 6 1 9 0 7 0] 108]
Train Case:  41 | Input/Output: [[7 2 6 1 0 8 10 2 0 7 0 9 0 7 3 4 3 5 4] 84]
Train Case:  42 | Input/Output: [[7 3 6 4 9 0 8 0 5 1 4 0 10 8 2 8 1 4 0] 113]
Train Case:  43 | Input/Output: [[7 3 10 5 1 9 1 0 4 5 5 8 0 7 3 10 10 5 10] 152]
Train Case:  44 | Input/Output: [[8 0 1 6 0 8 6 0 5 0 10 5 2 8 2 7 2 2 2] 88]
Train Case:  45 | Input/Output: [[8 2 7 0 7 0 10 4 0 7 3 0 1 1 4 5 3 6 0] 79]
Train Case:  46 | Input/Output: [[9 0 0 10 5 1 10 1 6 1 0 0 0 5 1 3 2 0 0] 66]
Train Case:  47 | Input/Output: [[9 1 4 5 4 0 10 6 0 0 2 1 1 3 2 8 0 3 3] 72]
Train Case:  48 | Input/Output: [[9 1 6 3 9 1 0 3 4 5 10 1 2 9 0 4 2 4 3] 85]
Train Case:  49 | Input/Output: [[9 1 9 1 7 1 10 4 1 1 3 6 1 10 9 0 3 7 5] 118]
Train Case:  50 | Input/Output: [[10 0 2 0 10 5 2 2 3 0 8 4 0 5 4 4 0 1 3] 70]
Train Case:  51 | Input/Output: [[10 0 4 5 4 8 0 0 5 2 5 4 5 8 2 4 4 0 2] 80]
Train Case:  52 | Input/Output: [[10 1 4 2 4 6 0 4 4 4 1 3 0 8 1 8 1 6 3] 75]
Train Case:  53 | Input/Output: [[10 3 0 6 0 4 0 6 3 6 4 0 3 1 6 4 6 3 2] 73]
Train Case:  54 | Input/Output: [[10 8 1 1 8 8 0 2 2 1 4 6 2 4 1 0 2 3 0] 72]
Train Case:  55 | Input/Output: [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] 0]
Train Case:  56 | Input/Output: [[0 0 0 0 0 0 0 0 0 0 3 7 0 0 0 0 0 0 0 0] 10]
Train Case:  57 | Input/Output: [[0 3 6 0 1 8 0 2 9 1 4 3 7 1 7 3 3 4 0 0] 69]
Train Case:  58 | Input/Output: [[0 4 9 1 2 8 5 2 1 5 9 1 2 7 5 3 8 2 3 0] 89]
Train Case:  59 | Input/Output: [[1 0 3 7 4 3 5 5 9 1 2 3 0 3 4 0 3 2 0 6] 76]
Train Case:  60 | Input/Output: [[1 7 5 2 0 8 5 3 2 4 5 3 6 4 7 0 0 8 4 4] 85]
Train Case:  61 | Input/Output: [[2 4 8 1 5 3 6 1 3 5 6 2 1 2 8 1 3 5 8 1] 75]
Train Case:  62 | Input/Output: [[2 8 10 9 1 5 5 0 9 5 4 6 1 5 2 8 1 10 0 0] 116]
Train Case:  63 | Input/Output: [[3 3 0 6 4 4 1 7 2 6 6 0 0 6 9 0 9 1 4 2] 77]
Train Case:  64 | Input/Output: [[3 3 7 1 6 0 7 3 10 4 5 0 10 9 1 1 6 6 4 1] 116]
Train Case:  65 | Input/Output: [[3 4 2 2 4 2 8 1 8 0 4 0 7 0 4 2 5 0 1 4] 61]
Train Case:  66 | Input/Output: [[4 1 1 8 8 2 5 3 2 8 5 0 2 6 9 1 2 3 4 0] 86]
Train Case:  67 | Input/Output: [[4 2 1 5 8 1 1 7 3 6 1 6 1 9 5 5 0 2 5 3] 80]
Train Case:  68 | Input/Output: [[4 2 5 3 7 0 9 1 4 6 2 8 10 5 5 8 2 8 2 8] 141]
Train Case:  69 | Input/Output: [[4 6 1 1 9 0 0 9 6 1 1 7 3 5 2 5 8 2 0 5] 76]
Train Case:  70 | Input/Output: [[5 1 8 2 1 3 5 2 4 0 2 6 1 2 2 2 4 0 4 0] 55]
Train Case:  71 | Input/Output: [[5 2 4 2 8 1 8 1 5 3 3 0 7 0 4 2 1 0 0 5] 61]
Train Case:  72 | Input/Output: [[5 3 0 7 2 6 8 2 8 1 6 4 8 1 0 6 9 0 7 1] 100]
Train Case:  73 | Input/Output: [[5 3 2 8 4 3 6 2 10 1 7 9 0 4 1 4 4 7 3 5] 100]
Train Case:  74 | Input/Output: [[5 4 4 4 7 3 7 2 1 6 0 6 3 7 6 1 8 2 3 6] 101]
Train Case:  75 | Input/Output: [[6 3 6 2 4 2 3 4 9 1 1 1 8 0 9 0 1 4 3 0] 68]
Train Case:  76 | Input/Output: [[6 4 1 7 3 6 7 1 10 2 2 2 8 6 2 6 0 10 7 3] 104]
Train Case:  77 | Input/Output: [[6 4 9 1 0 9 7 3 4 4 10 6 3 8 0 1 5 10 8 0] 120]
Train Case:  78 | Input/Output: [[7 0 5 3 3 7 2 8 6 1 0 4 7 2 6 0 7 3 0 6] 85]
Train Case:  79 | Input/Output: [[7 1 4 3 3 2 5 0 2 0 8 1 2 0 3 4 8 2 3 5] 66]
Train Case:  80 | Input/Output: [[7 1 9 1 7 3 1 9 3 3 0 0 2 3 1 7 4 1 4 4] 81]
Train Case:  81 | Input/Output: [[7 3 7 3 4 5 8 1 1 8 7 2 0 7 1 9 6 4 2 3] 107]
Train Case:  82 | Input/Output: [[8 0 6 1 6 1 2 6 6 1 6 2 5 5 1 0 4 3 4 0] 68]
Train Case:  83 | Input/Output: [[8 0 7 1 8 0 4 3 8 1 8 2 6 3 3 7 8 2 5 1] 104]
Train Case:  84 | Input/Output: [[8 1 10 5 1 2 1 4 3 3 3 6 0 4 5 7 3 10 9 2] 103]
Train Case:  85 | Input/Output: [[8 2 4 0 8 1 1 3 7 1 3 5 3 2 0 2 2 1 0 1] 58]
Train Case:  86 | Input/Output: [[8 2 5 2 5 4 1 4 2 3 7 3 3 4 7 0 5 2 3 1] 79]
Train Case:  87 | Input/Output: [[8 2 9 1 8 0 1 4 2 8 8 0 7 0 0 1 1 3 3 3] 94]
Train Case:  88 | Input/Output: [[9 1 5 5 9 1 5 0 9 1 4 5 1 0 9 1 3 1 7 1] 103]
Train Case:  89 | Input/Output: [[0 6 0 10 2 4 3 5 5 5 0 4 6 3 9 0 2 2 9 1 1] 79]
Train Case:  90 | Input/Output: [[3 1 9 1 8 2 9 0 5 5 2 5 4 4 1 0 0 1 10 4 10] 103]
Train Case:  91 | Input/Output: [[5 3 1 5 6 4 3 2 2 3 9 1 7 0 1 7 6 4 0 10 5] 94]
Train Case:  92 | Input/Output: [[5 3 7 2 5 2 8 2 7 3 4 5 9 0 3 6 7 1 9 1 3] 103]
Train Case:  93 | Input/Output: [[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5] 150]
Train Case:  94 | Input/Output: [[7 2 3 1 9 0 7 1 8 0 5 5 5 0 7 0 9 0 4 6 8] 92]
Train Case:  95 | Input/Output: [[7 3 9 0 8 1 1 3 8 0 4 6 2 2 6 2 9 1 6 4 5] 104]
Train Case:  96 | Input/Output: [[8 0 5 4 2 1 4 6 4 2 7 3 3 6 6 4 0 0 10 9 6] 97]
Train Case:  97 | Input/Output: [[9 0 0 9 1 7 4 2 8 2 9 1 9 0 6 0 6 3 10 4 5] 113]
Train Case:  98 | Input/Output: [[9 0 5 0 4 1 0 7 0 5 5 0 1 7 2 4 3 1 9 1 6] 70]
Train Case:  99 | Input/Output: [[9 1 6 0 8 0 1 1 1 8 4 5 6 1 0 10 4 4 8 2 8] 97]
Test Case:   0 | Input/Output: [[1 3 10 1 5 10 10 10 4 6 10 4 5 5 2] 155]
Test Case:   1 | Input/Output: [[10 6 1 5 3 10 10 10 7 0 10 2 2 4 2] 137]
Test Case:   2 | Input/Output: [[5 4 0 4 8 0 10 3 1 10 10 10 10 6 4 0] 155]
Test Case:   3 | Input/Output: [[9 1 10 10 10 1 0 9 1 4 4 10 8 0 0 0] 131]
Test Case:   4 | Input/Output: [[10 4 5 10 10 10 2 3 4 1 5 3 9 0 9 0] 131]
Test Case:   5 | Input/Output: [[10 7 1 1 9 3 2 5 5 10 10 10 8 2 5 1] 163]
Test Case:   6 | Input/Output: [[10 10 8 2 2 2 1 9 7 2 3 0 10 10 6 3] 147]
Test Case:   7 | Input/Output: [[0 5 4 1 10 4 3 2 1 10 10 8 1 7 2 3 0] 105]
Test Case:   8 | Input/Output: [[1 4 10 2 7 9 0 1 7 5 4 10 10 1 1 5 2] 101]
Test Case:   9 | Input/Output: [[2 6 5 1 7 0 7 3 8 1 10 8 1 10 10 5 0] 121]
Test Case:  10 | Input/Output: [[3 1 10 7 1 5 2 4 2 8 1 10 10 0 3 9 0] 97]
Test Case:  11 | Input/Output: [[5 0 3 0 10 9 0 5 0 2 1 9 0 10 10 6 3] 107]
Test Case:  12 | Input/Output: [[5 4 0 0 4 3 10 3 0 10 4 4 5 5 10 7 2] 106]
Test Case:  13 | Input/Output: [[5 4 10 1 3 9 0 10 10 6 4 0 4 2 4 5 4] 111]
Test Case:  14 | Input/Output: [[6 4 10 10 9 1 0 2 0 8 6 0 4 3 10 4 5] 130]
Test Case:  15 | Input/Output: [[7 1 10 1 6 10 10 4 0 9 0 6 2 3 4 8 0] 106]
Test Case:  16 | Input/Output: [[8 2 1 2 10 9 0 10 3 1 2 6 8 0 10 3 1] 94]
Test Case:  17 | Input/Output: [[9 0 10 1 7 8 1 7 2 10 10 9 0 0 1 6 0] 117]
Test Case:  18 | Input/Output: [[9 1 6 4 7 0 10 10 1 8 10 4 4 9 0 0 1] 125]
Test Case:  19 | Input/Output: [[10 0 2 2 4 5 2 10 9 1 3 6 10 7 3 0 2] 101]
Test Case:  20 | Input/Output: [[10 1 0 9 0 10 6 4 10 4 4 9 0 4 5 0 6] 111]
Test Case:  21 | Input/Output: [[10 1 1 10 1 9 2 5 10 7 3 9 0 9 1 1 8] 121]
Test Case:  22 | Input/Output: [[10 3 2 10 9 0 10 3 7 9 1 7 3 4 4 1 7] 134]
Test Case:  23 | Input/Output: [[10 4 3 10 4 4 1 0 0 8 7 2 10 9 1 0 4] 102]
Test Case:  24 | Input/Output: [[10 6 2 4 0 10 10 4 5 7 3 8 2 0 5 1 3] 119]
Test Case:  25 | Input/Output: [[10 6 3 5 1 10 3 3 10 6 2 8 2 0 7 6 3] 108]
Test Case:  26 | Input/Output: [[10 8 2 1 9 10 8 1 9 1 5 0 1 0 10 2 6] 126]
Test Case:  27 | Input/Output: [[10 8 2 10 3 3 0 9 10 2 1 8 0 8 2 4 2] 115]
Test Case:  28 | Input/Output: [[10 9 0 6 1 10 5 5 10 3 7 3 4 7 3 3 4] 135]
Test Case:  29 | Input/Output: [[10 9 0 10 2 5 6 4 8 1 5 3 0 8 10 9 0] 123]
Test Case:  30 | Input/Output: [[10 10 1 3 0 3 1 1 7 0 3 4 10 5 5 7 1] 103]
Test Case:  31 | Input/Output: [[10 10 2 2 2 3 7 2 4 0 6 0 10 2 6 7 1] 98]
Test Case:  32 | Input/Output: [[10 10 5 4 0 10 6 0 10 7 0 3 1 4 1 0 4] 112]
Test Case:  33 | Input/Output: [[0 0 10 8 0 10 7 3 8 2 4 2 4 4 1 9 3 4] 112]
Test Case:  34 | Input/Output: [[0 2 6 3 5 5 10 1 0 10 4 1 1 6 9 1 0 1] 81]
Test Case:  35 | Input/Output: [[0 2 10 4 2 1 0 5 4 2 4 10 8 0 0 2 9 0] 77]
Test Case:  36 | Input/Output: [[0 3 3 2 5 2 10 1 5 3 6 10 3 6 4 4 5 2] 89]
Test Case:  37 | Input/Output: [[0 4 7 3 4 3 1 8 10 10 4 0 10 4 0 10 6 7] 117]
Test Case:  38 | Input/Output: [[0 4 9 0 6 0 7 3 10 10 4 1 8 0 6 2 0 7] 106]
Test Case:  39 | Input/Output: [[0 9 10 0 8 6 1 10 0 10 0 9 0 4 4 3 5 2] 99]
Test Case:  40 | Input/Output: [[0 9 10 8 0 2 5 8 2 0 9 1 6 7 3 10 3 5] 114]
Test Case:  41 | Input/Output: [[1 0 9 0 5 0 10 10 2 6 8 0 4 1 0 0 5 4] 85]
Test Case:  42 | Input/Output: [[1 0 9 1 7 1 4 5 4 0 4 3 10 10 1 7 5 4] 102]
Test Case:  43 | Input/Output: [[1 0 10 6 3 8 2 2 5 4 3 3 0 4 3 10 1 0] 77]
Test Case:  44 | Input/Output: [[1 1 10 0 2 0 6 0 0 10 0 10 9 0 9 0 3 6] 88]
Test Case:  45 | Input/Output: [[1 2 2 5 4 1 10 6 0 8 2 7 1 10 2 0 0 2] 78]
Test Case:  46 | Input/Output: [[1 3 4 0 8 0 10 0 8 10 6 2 9 0 8 1 7 0] 93]
Test Case:  47 | Input/Output: [[1 4 2 2 7 1 2 6 8 0 10 5 3 1 1 10 1 8] 89]
Test Case:  48 | Input/Output: [[1 5 10 1 3 1 1 10 4 3 5 5 1 2 8 2 6 2] 88]
Test Case:  49 | Input/Output: [[1 6 5 2 10 10 1 6 8 1 6 4 6 1 1 4 8 0] 104]
Test Case:  50 | Input/Output: [[1 6 7 2 6 4 7 3 3 1 9 1 10 10 10 8 2 10] 168]
Test Case:  51 | Input/Output: [[1 7 9 0 3 2 8 1 0 9 4 3 10 10 10 10 7 6] 157]
Test Case:  52 | Input/Output: [[1 8 4 1 10 6 4 5 1 9 0 10 3 3 3 1 1 4] 95]
Test Case:  53 | Input/Output: [[1 8 7 0 9 0 10 0 0 5 3 10 2 2 6 3 3 2] 75]
Test Case:  54 | Input/Output: [[1 8 9 1 0 5 10 0 1 10 2 5 3 6 7 2 7 1] 86]
Test Case:  55 | Input/Output: [[1 9 10 8 1 5 1 6 4 6 3 4 3 9 0 10 3 3] 117]
Test Case:  56 | Input/Output: [[2 1 4 4 7 3 8 2 0 7 5 3 10 10 3 6 7 1] 113]
Test Case:  57 | Input/Output: [[2 1 5 3 9 0 9 1 0 8 10 7 1 1 4 10 6 0] 91]
Test Case:  58 | Input/Output: [[2 3 2 4 10 6 0 10 7 1 4 5 5 3 6 2 2 6] 92]
Test Case:  59 | Input/Output: [[2 3 10 7 1 4 5 10 5 3 0 6 9 0 4 3 1 7] 96]
Test Case:  60 | Input/Output: [[2 4 0 10 2 5 10 4 4 10 5 1 9 1 1 6 2 4] 97]
Test Case:  61 | Input/Output: [[2 5 7 3 4 0 6 0 3 0 10 9 0 10 5 2 3 3] 92]
Test Case:  62 | Input/Output: [[2 6 10 3 7 9 1 2 1 1 9 10 8 1 9 0 8 0] 127]
Test Case:  63 | Input/Output: [[2 7 4 5 5 5 1 3 10 10 6 4 5 3 2 7 0 7] 118]
Test Case:  64 | Input/Output: [[3 0 9 0 1 2 10 0 0 0 0 1 4 10 4 3 4 2] 60]
Test Case:  65 | Input/Output: [[3 0 10 6 0 5 1 4 1 6 4 4 3 4 4 10 0 2] 79]
Test Case:  66 | Input/Output: [[3 0 10 8 1 6 1 2 5 5 0 4 5 10 4 6 9 0] 107]
Test Case:  67 | Input/Output: [[3 2 1 4 6 3 10 6 2 7 1 4 2 10 4 3 8 1] 92]
Test Case:  68 | Input/Output: [[3 2 8 1 8 2 1 4 10 5 5 9 0 3 4 10 4 1] 105]
Test Case:  69 | Input/Output: [[3 2 10 3 0 5 2 3 1 5 1 0 3 10 1 9 2 1] 76]
Test Case:  70 | Input/Output: [[3 3 8 0 5 5 9 0 10 8 1 1 3 10 3 4 9 0] 107]
Test Case:  71 | Input/Output: [[3 3 10 3 4 6 0 3 7 1 4 9 1 10 8 2 6 0] 114]
Test Case:  72 | Input/Output: [[3 4 2 1 3 7 5 2 4 5 3 3 10 10 4 4 8 1] 106]
Test Case:  73 | Input/Output: [[3 5 3 3 10 0 6 3 7 2 3 3 7 10 0 10 0 8] 111]
Test Case:  74 | Input/Output: [[3 5 4 5 10 10 7 3 9 0 8 1 6 4 0 5 7 0] 123]
Test Case:  75 | Input/Output: [[3 5 8 2 10 7 3 4 1 4 5 10 3 4 3 7 6 0] 122]
Test Case:  76 | Input/Output: [[3 5 10 0 2 1 3 9 1 8 1 1 3 0 2 10 1 8] 87]
Test Case:  77 | Input/Output: [[3 5 10 10 1 5 6 2 4 5 8 0 6 0 1 6 4 2] 95]
Test Case:  78 | Input/Output: [[3 6 7 1 10 10 5 3 9 1 9 1 5 2 4 1 1 5] 120]
Test Case:  79 | Input/Output: [[3 6 8 0 4 1 9 1 10 7 0 10 0 8 9 1 1 3] 107]
Test Case:  80 | Input/Output: [[4 1 3 3 10 5 2 5 1 4 2 0 10 10 2 1 6 0] 89]
Test Case:  81 | Input/Output: [[4 2 5 5 10 9 1 10 2 2 10 9 1 5 0 7 3 0] 134]
Test Case:  82 | Input/Output: [[4 2 8 1 10 1 4 10 5 4 9 1 6 1 2 6 0 3] 97]
Test Case:  83 | Input/Output: [[4 2 10 9 0 10 7 2 2 2 8 2 2 1 8 1 9 0] 99]
Test Case:  84 | Input/Output: [[4 2 10 10 4 4 6 4 0 3 9 1 1 1 10 0 10 10] 122]
Test Case:  85 | Input/Output: [[4 3 4 2 1 8 10 5 1 0 7 6 0 10 1 1 1 4] 76]
Test Case:  86 | Input/Output: [[4 3 8 1 0 3 3 1 1 0 5 5 10 10 0 0 0 7] 81]
Test Case:  87 | Input/Output: [[4 4 2 7 8 1 10 8 1 3 5 1 4 10 1 8 0 4] 99]
Test Case:  88 | Input/Output: [[4 4 8 2 10 10 4 0 2 8 5 4 5 1 1 2 8 0] 111]
Test Case:  89 | Input/Output: [[4 5 10 6 4 10 3 6 5 4 4 3 8 0 6 1 3 4] 115]
Test Case:  90 | Input/Output: [[4 6 5 0 5 0 10 8 1 8 1 10 7 1 2 4 2 6] 102]
Test Case:  91 | Input/Output: [[4 6 9 1 6 1 3 7 0 3 0 7 10 10 1 1 1 1] 99]
Test Case:  92 | Input/Output: [[4 6 10 0 2 10 7 0 8 2 9 0 2 1 8 1 0 6] 104]
Test Case:  93 | Input/Output: [[5 0 5 3 6 3 10 6 0 10 0 1 7 2 0 3 5 3] 76]
Test Case:  94 | Input/Output: [[5 0 6 3 3 0 4 6 2 2 10 2 4 10 5 1 2 0] 79]
Test Case:  95 | Input/Output: [[5 1 3 2 10 6 3 3 0 9 1 1 9 10 6 4 4 4] 115]
Test Case:  96 | Input/Output: [[5 1 9 1 10 10 4 2 3 6 3 0 5 3 5 3 5 2] 107]
Test Case:  97 | Input/Output: [[5 1 10 2 5 9 1 10 4 1 9 0 1 4 7 1 0 0] 92]
Test Case:  98 | Input/Output: [[5 2 0 6 1 4 4 6 3 5 10 10 9 0 6 4 2 6] 116]
Test Case:  99 | Input/Output: [[5 2 2 0 5 0 4 3 10 10 9 1 2 3 3 4 1 4] 99]
Test Case: 100 | Input/Output: [[5 2 10 2 8 2 2 1 4 4 4 2 8 10 9 1 6 2] 120]
Test Case: 101 | Input/Output: [[5 3 3 2 2 8 10 7 1 6 4 7 2 10 3 6 9 0] 122]
Test Case: 102 | Input/Output: [[5 3 4 4 2 5 2 7 5 0 6 0 10 10 10 6 4 3] 132]
Test Case: 103 | Input/Output: [[5 4 2 6 0 9 10 1 0 9 0 0 9 10 0 2 7 0] 77]
Test Case: 104 | Input/Output: [[5 4 10 8 0 1 4 3 7 5 2 1 6 10 3 7 3 6] 111]
Test Case: 105 | Input/Output: [[5 5 10 3 5 10 8 2 7 1 7 1 3 1 5 0 4 3] 115]
Test Case: 106 | Input/Output: [[6 0 4 3 7 3 10 10 6 0 10 3 6 9 0 10 0 9] 137]
Test Case: 107 | Input/Output: [[6 0 9 0 3 0 10 6 2 10 6 3 2 1 5 1 0 5] 86]
Test Case: 108 | Input/Output: [[6 0 10 0 7 3 6 0 7 9 1 10 1 2 1 4 3 5] 95]
Test Case: 109 | Input/Output: [[6 1 10 2 3 5 5 4 1 8 2 4 1 6 1 10 4 2] 94]
Test Case: 110 | Input/Output: [[6 1 10 4 1 5 2 3 3 0 3 10 9 0 6 2 1 4] 84]
Test Case: 111 | Input/Output: [[6 1 10 5 3 4 6 9 0 10 4 3 5 0 8 0 6 0] 104]
Test Case: 112 | Input/Output: [[6 2 1 2 1 4 0 0 2 4 10 10 7 0 0 8 8 1] 90]
Test Case: 113 | Input/Output: [[6 2 2 3 3 2 5 3 10 4 3 5 4 2 3 10 5 4] 92]
Test Case: 114 | Input/Output: [[6 2 5 4 10 7 2 10 6 4 4 1 6 2 3 3 1 0] 99]
Test Case: 115 | Input/Output: [[6 2 10 5 1 3 1 10 4 3 4 2 4 6 1 9 5 2] 97]
Test Case: 116 | Input/Output: [[6 3 3 1 10 1 3 5 4 3 1 10 8 0 0 10 4 1] 89]
Test Case: 117 | Input/Output: [[6 3 3 3 10 10 8 2 4 4 9 0 9 1 8 0 8 0] 128]
Test Case: 118 | Input/Output: [[6 3 10 2 2 7 0 1 2 10 1 3 2 1 3 6 7 0] 74]
Test Case: 119 | Input/Output: [[6 4 2 2 10 3 4 4 0 2 5 8 0 5 4 10 2 3] 88]
Test Case: 120 | Input/Output: [[6 4 2 8 7 3 6 1 4 3 7 1 10 7 2 10 2 2] 113]
Test Case: 121 | Input/Output: [[6 4 3 0 2 8 8 2 2 7 0 2 10 4 6 10 0 1] 109]
Test Case: 122 | Input/Output: [[6 4 10 1 7 8 2 1 6 6 1 10 8 2 1 6 4 2] 115]
Test Case: 123 | Input/Output: [[7 0 2 6 10 1 7 10 8 0 7 1 4 4 9 1 8 0] 109]
Test Case: 124 | Input/Output: [[7 0 3 7 10 7 3 1 5 9 0 5 3 1 4 10 1 6] 110]
Test Case: 125 | Input/Output: [[7 0 5 5 9 0 7 0 10 9 1 10 4 1 7 1 7 1] 118]
Test Case: 126 | Input/Output: [[7 0 7 1 5 0 8 2 10 3 7 7 2 9 0 10 0 6] 117]
Test Case: 127 | Input/Output: [[7 0 10 0 8 10 2 4 10 2 6 3 6 6 0 6 4 6] 112]
Test Case: 128 | Input/Output: [[7 1 0 4 9 0 10 3 1 9 0 3 7 7 3 10 6 2] 111]
Test Case: 129 | Input/Output: [[7 1 0 9 5 4 10 5 5 0 10 7 0 3 3 10 1 2] 102]
Test Case: 130 | Input/Output: [[7 1 9 1 8 0 1 9 10 9 1 10 5 0 2 2 4 0] 122]
Test Case: 131 | Input/Output: [[7 1 10 1 4 10 8 2 1 9 10 2 4 4 5 3 7 5] 125]
Test Case: 132 | Input/Output: [[7 2 1 5 4 4 10 10 2 4 9 1 5 0 9 0 9 0] 105]
Test Case: 133 | Input/Output: [[8 0 0 3 4 1 1 3 10 0 0 6 0 2 5 10 2 1] 59]
Test Case: 134 | Input/Output: [[8 0 6 0 10 8 2 8 1 3 3 1 2 8 2 10 3 6] 118]
Test Case: 135 | Input/Output: [[8 0 6 4 2 5 10 4 2 10 0 6 1 1 3 1 5 0] 82]
Test Case: 136 | Input/Output: [[8 0 8 0 1 2 2 3 9 1 10 10 3 1 3 6 3 2] 99]
Test Case: 137 | Input/Output: [[8 0 10 0 8 9 0 6 0 5 1 6 1 2 0 10 9 0] 92]
Test Case: 138 | Input/Output: [[8 0 10 10 3 7 4 5 7 3 2 3 8 1 3 1 0 9] 113]
Test Case: 139 | Input/Output: [[8 1 1 1 10 4 1 5 3 9 0 9 0 10 9 0 1 3] 89]
Test Case: 140 | Input/Output: [[8 1 2 3 7 2 10 6 4 7 3 5 2 7 1 10 1 2] 106]
Test Case: 141 | Input/Output: [[9 0 0 4 10 0 2 10 5 1 2 2 9 1 3 3 9 0] 81]
Test Case: 142 | Input/Output: [[9 0 6 0 0 4 0 2 9 1 10 6 4 0 10 10 7 0] 115]
Test Case: 143 | Input/Output: [[9 0 10 10 9 1 8 0 6 1 5 5 5 3 3 6 8 1] 132]
Test Case: 144 | Input/Output: [[9 1 9 1 10 7 0 10 0 7 5 2 0 7 5 4 0 3] 113]
Test Case: 145 | Input/Output: [[9 1 10 9 1 2 3 10 9 0 2 3 3 0 8 2 9 0] 121]
Test Case: 146 | Input/Output: [[9 1 10 10 4 5 6 4 7 0 3 7 6 1 7 1 6 3] 136]
Test Case: 147 | Input/Output: [[9 1 10 10 5 4 7 3 8 0 6 0 10 1 6 6 4 4] 143]
Test Case: 148 | Input/Output: [[10 0 0 1 8 4 4 3 4 8 0 1 3 8 2 10 7 1] 92]
Test Case: 149 | Input/Output: [[10 0 2 1 8 3 2 0 2 8 0 10 5 3 8 2 2 7] 85]
Test Case: 150 | Input/Output: [[10 1 2 10 6 2 10 0 6 2 1 1 0 9 1 4 6 5] 97]
Test Case: 151 | Input/Output: [[10 1 7 2 3 4 2 10 0 1 1 1 4 2 10 0 10 7] 94]
Test Case: 152 | Input/Output: [[10 2 2 5 0 6 2 3 0 6 3 0 1 4 1 10 1 2] 65]
Test Case: 153 | Input/Output: [[10 2 5 0 1 1 6 10 10 0 7 9 1 2 0 10 9 3] 112]
Test Case: 154 | Input/Output: [[10 2 6 10 5 4 1 5 4 3 2 3 0 0 3 7 5 3] 95]
Test Case: 155 | Input/Output: [[10 3 0 4 0 1 1 9 0 6 0 6 4 9 0 10 7 2] 93]
Test Case: 156 | Input/Output: [[10 3 0 8 1 9 0 9 1 2 4 9 1 10 9 0 6 2] 108]
Test Case: 157 | Input/Output: [[10 3 4 10 3 7 7 3 7 3 8 2 2 0 7 3 6 2] 134]
Test Case: 158 | Input/Output: [[10 3 6 4 1 10 1 4 2 6 1 2 4 1 1 4 5 2] 81]
Test Case: 159 | Input/Output: [[10 3 7 8 2 8 2 8 0 5 5 2 3 10 1 4 7 2] 128]
Test Case: 160 | Input/Output: [[10 4 2 0 8 4 3 7 2 3 1 2 1 10 8 1 0 4] 85]
Test Case: 161 | Input/Output: [[10 4 5 7 1 3 6 9 0 5 5 1 4 10 1 5 2 1] 95]
Test Case: 162 | Input/Output: [[10 5 3 8 0 6 1 10 6 1 1 9 5 4 2 2 8 1] 102]
Test Case: 163 | Input/Output: [[10 5 4 0 2 8 2 10 8 1 0 8 0 2 8 2 0 6] 104]
Test Case: 164 | Input/Output: [[10 6 2 4 6 1 9 6 3 10 4 1 1 0 5 1 3 1] 93]
Test Case: 165 | Input/Output: [[10 7 3 4 4 3 3 10 4 3 8 0 9 1 2 0 2 1] 97]
Test Case: 166 | Input/Output: [[10 7 3 10 9 1 6 3 0 5 4 5 0 4 4 6 5 1] 124]
Test Case: 167 | Input/Output: [[10 8 0 4 0 5 0 7 3 2 2 7 1 2 2 10 8 1] 91]
Test Case: 168 | Input/Output: [[10 8 0 7 1 4 0 9 0 0 6 3 0 10 0 10 2 7] 97]
Test Case: 169 | Input/Output: [[10 9 0 2 4 10 6 1 9 1 1 3 4 5 1 1 9 0] 93]
Test Case: 170 | Input/Output: [[10 9 0 4 6 6 2 5 3 10 8 2 6 2 4 5 5 4] 122]
Test Case: 171 | Input/Output: [[10 10 1 3 5 1 6 3 5 3 9 0 2 6 4 3 5 4] 95]
Test Case: 172 | Input/Output: [[10 10 2 3 8 2 0 1 0 3 1 0 8 0 5 2 2 4] 78]
Test Case: 173 | Input/Output: [[10 10 4 3 2 3 6 1 2 7 4 4 2 4 3 4 8 1] 99]
Test Case: 174 | Input/Output: [[10 10 4 5 0 1 7 0 10 1 6 7 2 2 6 9 1 8] 119]
Test Case: 175 | Input/Output: [[10 10 5 1 1 5 0 6 0 1 5 3 1 3 5 0 4 0] 81]
Test Case: 176 | Input/Output: [[10 10 6 0 7 1 1 1 6 0 3 1 8 1 6 2 2 0] 87]
Test Case: 177 | Input/Output: [[10 10 6 2 4 5 4 5 0 10 3 5 6 4 3 2 1 1] 111]
Test Case: 178 | Input/Output: [[10 10 8 1 2 0 2 1 2 4 6 1 7 3 8 0 3 3] 106]
Test Case: 179 | Input/Output: [[10 10 9 1 3 1 7 1 1 0 5 4 5 2 10 8 2 1] 122]
Test Case: 180 | Input/Output: [[0 0 1 6 7 3 6 2 7 3 10 9 0 4 0 0 4 5 3] 95]
Test Case: 181 | Input/Output: [[0 0 2 8 6 0 7 2 9 0 9 0 3 0 10 0 8 3 1] 82]
Test Case: 182 | Input/Output: [[0 0 3 4 2 3 10 1 9 7 1 8 1 6 4 9 1 2 4] 103]
Test Case: 183 | Input/Output: [[0 0 9 0 4 5 10 2 3 2 7 9 0 6 3 7 0 2 0] 74]
Test Case: 184 | Input/Output: [[0 1 0 7 10 4 5 6 2 9 1 4 6 8 1 6 0 7 0] 98]
Test Case: 185 | Input/Output: [[0 2 1 7 5 0 8 2 10 8 1 2 0 6 4 9 0 0 2] 95]
Test Case: 186 | Input/Output: [[0 2 3 1 8 2 10 9 0 7 0 5 2 1 4 9 0 0 2] 84]
Test Case: 187 | Input/Output: [[0 3 2 3 3 1 5 4 10 9 1 7 2 5 3 8 1 5 2] 91]
Test Case: 188 | Input/Output: [[0 3 5 2 7 2 9 1 2 6 2 6 10 6 3 1 6 8 0] 90]
Test Case: 189 | Input/Output: [[0 3 6 1 10 2 8 1 3 4 0 5 1 3 5 4 5 2 0] 74]
Test Case: 190 | Input/Output: [[0 4 0 4 3 1 4 3 9 1 7 2 10 7 0 1 0 5 0] 75]
Test Case: 191 | Input/Output: [[0 4 3 7 5 3 5 1 10 3 2 1 0 6 3 7 1 5 3] 79]
Test Case: 192 | Input/Output: [[0 4 8 1 3 3 5 3 10 4 3 8 0 5 0 3 4 5 1] 77]
Test Case: 193 | Input/Output: [[0 4 8 2 10 6 2 0 10 4 5 1 8 7 3 9 0 2 5] 117]
Test Case: 194 | Input/Output: [[0 5 3 4 1 2 2 3 10 1 2 0 8 2 4 8 0 1 2] 61]
Test Case: 195 | Input/Output: [[0 5 6 1 7 2 1 2 2 1 10 1 0 2 8 0 10 4 3] 70]
Test Case: 196 | Input/Output: [[0 5 7 0 1 3 5 1 3 2 10 9 0 8 0 2 8 7 2] 89]
Test Case: 197 | Input/Output: [[0 5 8 2 1 0 5 4 1 1 4 1 10 2 0 0 7 4 3] 61]
Test Case: 198 | Input/Output: [[0 5 10 4 3 1 8 10 0 8 5 3 8 1 1 5 10 3 4] 104]
Test Case: 199 | Input/Output: [[0 6 0 0 2 2 10 3 5 3 4 4 1 10 3 5 0 10 10] 94]
Test Case: 200 | Input/Output: [[0 6 0 4 0 10 1 7 2 6 7 1 6 0 5 3 10 4 0] 77]
Test Case: 201 | Input/Output: [[0 6 0 6 10 6 4 0 4 5 2 4 2 2 3 3 7 7 0] 88]
Test Case: 202 | Input/Output: [[0 6 9 1 2 1 0 6 5 3 1 1 6 2 3 7 10 5 4] 93]
Test Case: 203 | Input/Output: [[0 6 10 0 9 6 2 3 2 7 1 2 4 9 1 0 7 0 2] 80]
Test Case: 204 | Input/Output: [[0 7 1 5 5 3 4 3 0 9 4 4 10 4 5 7 2 4 3] 89]
Test Case: 205 | Input/Output: [[0 7 5 3 7 0 10 10 7 3 7 1 5 4 1 7 7 3 1] 122]
Test Case: 206 | Input/Output: [[0 7 6 4 4 0 5 4 2 1 4 3 10 8 1 0 6 9 0] 87]
Test Case: 207 | Input/Output: [[0 8 7 0 10 7 3 2 6 9 1 3 2 8 0 8 1 6 1] 97]
Test Case: 208 | Input/Output: [[0 8 9 0 6 2 4 5 10 3 4 1 7 0 0 4 3 4 1] 78]
Test Case: 209 | Input/Output: [[0 9 2 2 5 0 4 2 3 6 10 1 5 9 1 5 4 0 5] 84]
Test Case: 210 | Input/Output: [[0 9 5 4 3 2 10 0 4 6 1 0 10 3 7 5 0 4 5] 90]
Test Case: 211 | Input/Output: [[0 10 5 0 4 0 2 0 5 5 10 4 5 6 1 7 1 1 3] 93]
Test Case: 212 | Input/Output: [[0 10 5 1 1 5 0 7 4 2 0 9 4 3 5 0 10 3 5] 87]
Test Case: 213 | Input/Output: [[0 10 7 0 8 2 10 3 6 2 7 7 2 2 2 3 0 4 3] 104]
Test Case: 214 | Input/Output: [[1 0 7 2 4 5 8 1 2 4 0 1 10 3 0 3 7 3 2] 69]
Test Case: 215 | Input/Output: [[1 0 8 2 1 6 9 0 3 6 10 9 1 2 2 0 1 9 0] 83]
Test Case: 216 | Input/Output: [[1 1 0 9 9 0 4 3 10 1 8 3 2 4 3 5 3 4 5] 84]
Test Case: 217 | Input/Output: [[1 1 2 5 3 6 8 1 3 0 5 3 10 4 5 0 6 3 5] 80]
Test Case: 218 | Input/Output: [[1 1 10 4 1 3 2 0 5 10 0 0 7 3 1 9 5 5 3] 81]
Test Case: 219 | Input/Output: [[1 3 4 4 0 7 0 1 3 3 2 0 10 2 4 8 0 9 0] 67]
Test Case: 220 | Input/Output: [[1 3 5 2 2 2 1 3 6 3 5 0 7 3 10 6 4 3 3] 92]
Test Case: 221 | Input/Output: [[1 3 8 0 2 4 6 2 10 7 3 3 0 5 4 4 6 4 0] 89]
Test Case: 222 | Input/Output: [[1 4 0 3 10 0 8 1 2 8 1 3 3 8 0 8 0 3 4] 75]
Test Case: 223 | Input/Output: [[1 4 7 3 3 3 3 1 7 3 6 4 10 8 0 2 4 2 0] 98]
Test Case: 224 | Input/Output: [[1 4 10 0 4 4 4 0 9 2 0 1 7 0 9 3 3 0 1] 66]
Test Case: 225 | Input/Output: [[1 5 3 4 1 0 3 2 0 7 8 2 1 5 9 0 10 4 3] 76]
Test Case: 226 | Input/Output: [[1 5 4 1 0 3 5 2 5 3 3 7 9 1 8 2 10 7 0] 110]
Test Case: 227 | Input/Output: [[1 5 5 2 4 4 9 0 0 6 2 1 5 0 10 8 1 4 0] 76]
Test Case: 228 | Input/Output: [[1 6 1 0 8 2 9 1 9 1 4 1 3 1 10 4 4 3 2] 100]
Test Case: 229 | Input/Output: [[1 6 9 1 7 1 10 1 1 1 9 4 0 4 5 5 3 3 0] 84]
Test Case: 230 | Input/Output: [[1 7 3 0 0 7 3 4 9 1 8 2 10 3 0 5 1 5 2] 92]
Test Case: 231 | Input/Output: [[1 7 9 1 2 8 1 1 4 2 1 3 7 1 4 2 10 4 5] 85]
Test Case: 232 | Input/Output: [[1 7 10 2 7 9 1 7 3 2 5 8 1 0 2 0 10 8 0] 109]
Test Case: 233 | Input/Output: [[1 7 10 4 3 1 6 5 4 5 2 6 4 4 5 1 3 3 4] 89]
Test Case: 234 | Input/Output: [[1 7 10 5 5 7 1 1 6 4 1 8 2 8 1 2 5 3 5] 107]
Test Case: 235 | Input/Output: [[1 8 3 2 9 0 9 1 0 4 7 0 10 2 5 8 0 9 0] 85]
Test Case: 236 | Input/Output: [[1 8 7 3 10 6 1 8 0 6 4 3 7 1 9 1 1 0 4] 102]
Test Case: 237 | Input/Output: [[1 8 10 3 6 5 3 0 9 4 0 7 3 0 5 0 1 2 2] 78]
Test Case: 238 | Input/Output: [[2 0 5 5 10 1 9 3 0 2 1 0 8 6 4 0 6 6 3] 94]
Test Case: 239 | Input/Output: [[2 0 10 7 3 1 2 9 1 5 5 0 6 6 1 7 1 7 0] 89]
Test Case: 240 | Input/Output: [[2 1 0 1 7 2 4 1 5 5 6 1 2 6 10 4 5 3 5] 85]
Test Case: 241 | Input/Output: [[2 1 5 3 7 3 6 2 5 4 1 4 10 3 2 7 0 2 7] 85]
Test Case: 242 | Input/Output: [[2 3 1 5 4 6 8 1 8 2 8 0 5 0 10 8 1 0 5] 102]
Test Case: 243 | Input/Output: [[2 3 2 6 5 3 2 6 10 6 0 3 7 6 2 0 10 1 7] 94]
Test Case: 244 | Input/Output: [[2 3 3 2 7 0 2 6 6 2 3 0 10 2 1 9 0 5 1] 67]
Test Case: 245 | Input/Output: [[2 3 4 6 6 0 3 4 7 2 6 1 2 0 8 1 10 4 0] 79]
Test Case: 246 | Input/Output: [[2 3 6 2 0 6 3 4 8 2 4 5 2 8 5 3 10 7 1] 98]
Test Case: 247 | Input/Output: [[2 3 6 3 7 0 5 1 4 2 10 2 5 2 4 1 1 1 0] 66]
Test Case: 248 | Input/Output: [[2 4 6 3 3 3 4 3 6 3 10 5 3 1 8 3 4 7 0] 86]
Test Case: 249 | Input/Output: [[2 4 9 1 0 3 10 0 8 1 4 7 2 1 5 1 4 1 8] 79]
Test Case: 250 | Input/Output: [[2 5 2 8 8 1 6 3 2 4 10 9 1 0 6 5 1 4 3] 98]
Test Case: 251 | Input/Output: [[2 5 4 3 3 2 8 0 6 4 4 2 10 3 5 5 2 9 0] 89]
Test Case: 252 | Input/Output: [[2 5 4 5 3 2 7 2 1 2 4 3 10 6 0 7 1 0 7] 77]
Test Case: 253 | Input/Output: [[2 5 8 1 2 2 3 4 5 1 10 3 7 1 3 5 0 7 1] 81]
Test Case: 254 | Input/Output: [[2 5 10 2 2 1 8 9 1 7 2 4 4 0 6 6 2 3 3] 88]
Test Case: 255 | Input/Output: [[2 5 10 5 3 3 7 2 3 1 2 3 5 1 0 1 0 3 4] 70]
Test Case: 256 | Input/Output: [[2 6 8 0 1 2 8 2 8 2 4 6 10 1 4 1 4 2 7] 105]
Test Case: 257 | Input/Output: [[2 7 4 5 3 1 4 2 10 5 1 0 1 0 9 5 0 5 4] 74]
Test Case: 258 | Input/Output: [[2 7 8 0 7 2 4 5 5 1 3 1 4 3 1 4 10 9 0] 85]
Test Case: 259 | Input/Output: [[2 8 1 0 8 2 5 4 3 0 1 8 1 1 10 2 0 0 0] 64]
Test Case: 260 | Input/Output: [[2 8 4 3 5 4 3 1 6 3 5 0 10 2 5 5 3 7 1] 88]
Test Case: 261 | Input/Output: [[2 8 4 4 0 2 10 4 1 2 0 1 7 9 0 3 3 7 0] 76]
Test Case: 262 | Input/Output: [[2 8 10 7 0 4 0 0 1 3 3 5 3 3 6 4 3 8 0] 87]
Test Case: 263 | Input/Output: [[3 0 6 1 0 2 0 8 3 1 7 1 10 3 7 6 4 2 5] 87]
Test Case: 264 | Input/Output: [[3 0 9 1 1 3 5 5 8 1 1 4 6 2 2 3 10 3 0] 79]
Test Case: 265 | Input/Output: [[3 0 10 4 0 7 0 7 1 7 2 5 0 2 4 2 7 6 3] 74]
Test Case: 266 | Input/Output: [[3 1 0 1 6 3 10 3 0 8 2 5 3 4 1 3 3 9 0] 73]
Test Case: 267 | Input/Output: [[3 1 4 3 1 5 8 0 6 3 3 2 3 3 10 2 6 7 0] 78]
Test Case: 268 | Input/Output: [[3 1 4 6 2 7 8 0 7 2 1 0 3 3 10 6 0 5 4] 80]
Test Case: 269 | Input/Output: [[3 1 5 4 7 1 1 7 2 8 0 7 10 4 5 9 0 3 4] 90]
Test Case: 270 | Input/Output: [[3 1 10 1 3 2 2 5 1 7 3 0 3 2 8 2 0 7 0] 66]
Test Case: 271 | Input/Output: [[3 2 0 4 9 1 10 7 1 0 4 2 1 6 4 3 2 1 2] 83]
Test Case: 272 | Input/Output: [[3 2 5 2 7 1 10 9 0 3 3 3 6 5 1 6 1 8 1] 85]
Test Case: 273 | Input/Output: [[3 2 5 4 8 1 7 2 10 0 5 0 0 9 0 9 0 7 1] 78]
Test Case: 274 | Input/Output: [[3 2 8 1 7 2 2 0 1 0 3 6 10 1 2 0 4 8 0] 63]
Test Case: 275 | Input/Output: [[3 2 8 2 10 6 3 9 0 4 4 6 3 6 0 1 9 1 2] 99]
Test Case: 276 | Input/Output: [[3 2 9 1 4 2 0 5 6 3 3 7 10 0 0 1 6 6 2] 84]
Test Case: 277 | Input/Output: [[3 2 10 8 0 5 1 2 7 6 3 1 2 8 1 4 0 3 4] 78]
Test Case: 278 | Input/Output: [[3 3 3 4 10 5 5 7 2 5 3 3 4 3 5 2 0 1 7] 92]
Test Case: 279 | Input/Output: [[3 3 5 1 3 3 10 4 5 9 0 8 2 3 3 0 7 7 2] 90]
Test Case: 280 | Input/Output: [[3 3 7 2 3 1 7 1 3 2 9 1 1 4 10 1 9 4 3] 89]
Test Case: 281 | Input/Output: [[3 3 8 0 1 8 0 2 6 1 10 0 9 2 6 5 1 2 6] 82]
Test Case: 282 | Input/Output: [[3 4 2 2 5 2 3 1 10 9 1 10 2 4 7 0 6 4 9] 110]
Test Case: 283 | Input/Output: [[3 4 3 2 9 1 1 1 2 8 5 4 3 2 10 2 1 5 0] 75]
Test Case: 284 | Input/Output: [[3 4 4 4 0 9 4 2 9 1 8 1 4 1 7 3 10 0 5] 102]
Test Case: 285 | Input/Output: [[3 4 9 0 3 7 9 0 2 0 2 0 10 8 1 2 3 1 8] 90]
Test Case: 286 | Input/Output: [[3 5 3 4 6 4 9 0 9 0 8 1 0 0 10 4 4 4 4] 95]
Test Case: 287 | Input/Output: [[3 5 7 3 9 0 9 1 10 2 4 0 10 6 1 4 3 1 7] 116]
Test Case: 288 | Input/Output: [[3 5 10 8 0 7 1 3 5 3 2 5 3 0 8 1 7 6 1] 86]
Test Case: 289 | Input/Output: [[3 6 0 7 1 4 7 1 10 9 0 6 1 7 0 6 4 3 1] 88]
Test Case: 290 | Input/Output: [[3 6 3 6 10 2 7 2 2 8 1 4 0 9 1 6 4 2 1] 94]
Test Case: 291 | Input/Output: [[3 6 5 0 8 1 1 6 5 3 4 3 5 0 4 3 10 5 3] 83]
Test Case: 292 | Input/Output: [[3 6 5 3 8 2 8 1 6 4 2 4 2 8 10 1 7 1 8] 117]
Test Case: 293 | Input/Output: [[3 6 9 0 0 7 5 0 7 3 9 0 3 6 8 2 10 1 2] 103]
Test Case: 294 | Input/Output: [[3 6 10 9 1 0 8 4 2 9 0 2 4 6 4 3 2 0 2] 88]
Test Case: 295 | Input/Output: [[3 7 1 0 1 1 9 1 1 6 3 6 6 2 10 0 0 7 0] 66]
Test Case: 296 | Input/Output: [[3 7 2 6 8 0 9 1 1 8 5 1 4 4 10 0 4 7 0] 87]
Test Case: 297 | Input/Output: [[3 7 5 2 7 1 10 0 0 2 4 4 0 4 4 6 3 5 3] 75]
Test Case: 298 | Input/Output: [[4 0 0 3 6 4 7 0 6 1 3 7 10 5 1 2 8 2 6] 100]
Test Case: 299 | Input/Output: [[4 1 0 6 10 7 0 4 2 4 1 5 2 2 3 2 4 6 3] 73]
Test Case: 300 | Input/Output: [[4 1 2 4 9 0 1 2 10 8 2 4 2 1 0 9 1 4 2] 84]
Test Case: 301 | Input/Output: [[4 1 4 3 8 0 9 1 4 6 10 8 0 3 2 5 3 2 0] 95]
Test Case: 302 | Input/Output: [[4 1 4 5 2 0 2 1 10 0 9 10 6 4 0 9 9 1 4] 100]
Test Case: 303 | Input/Output: [[4 1 6 2 6 4 10 0 0 10 5 2 4 5 8 2 10 4 5] 115]
Test Case: 304 | Input/Output: [[4 1 10 9 0 5 5 4 2 7 0 1 0 3 3 1 1 7 1] 77]
Test Case: 305 | Input/Output: [[4 2 6 0 9 0 3 6 10 0 1 6 4 0 1 7 3 4 3] 74]
Test Case: 306 | Input/Output: [[4 2 9 1 10 7 1 5 5 0 3 4 6 5 2 3 4 5 2] 101]
Test Case: 307 | Input/Output: [[4 2 10 3 7 0 0 6 1 4 1 3 5 9 1 1 7 1 1] 77]
Test Case: 308 | Input/Output: [[4 3 1 6 8 1 2 0 5 3 1 4 10 0 1 3 7 4 2] 70]
Test Case: 309 | Input/Output: [[4 3 3 5 7 1 1 2 1 0 3 0 1 6 6 3 10 6 3] 74]
Test Case: 310 | Input/Output: [[4 3 7 2 3 5 10 1 7 9 1 3 6 6 1 1 7 4 3] 94]
Test Case: 311 | Input/Output: [[4 3 9 1 5 2 1 4 1 1 7 3 10 1 7 8 1 5 3] 99]
Test Case: 312 | Input/Output: [[4 3 10 1 8 1 1 7 2 2 2 8 0 8 0 9 0 8 0] 83]
Test Case: 313 | Input/Output: [[4 4 3 4 1 3 9 0 3 3 2 5 8 1 10 1 8 0 2] 80]
Test Case: 314 | Input/Output: [[4 4 4 0 8 0 1 9 9 0 5 0 0 3 9 1 10 4 0] 94]
Test Case: 315 | Input/Output: [[4 4 6 4 0 3 10 5 4 1 3 6 1 2 4 6 2 5 3] 82]
Test Case: 316 | Input/Output: [[4 4 7 2 2 8 8 2 2 5 6 2 4 3 9 0 10 3 2] 98]
Test Case: 317 | Input/Output: [[4 5 0 7 2 0 4 0 10 9 0 3 0 6 3 10 10 5 2] 104]
Test Case: 318 | Input/Output: [[4 5 3 3 6 3 1 3 8 1 2 5 10 7 1 4 5 0 2] 81]
Test Case: 319 | Input/Output: [[4 5 8 2 0 9 8 2 2 7 1 2 5 0 10 5 2 4 5] 90]
Test Case: 320 | Input/Output: [[4 5 10 3 3 5 4 6 2 5 2 6 0 8 0 5 1 1 2] 78]
Test Case: 321 | Input/Output: [[4 6 2 7 1 5 2 6 3 3 1 7 2 3 10 2 4 7 1] 84]
Test Case: 322 | Input/Output: [[4 6 7 3 10 5 1 5 5 5 1 3 4 6 3 1 3 5 0] 105]
Test Case: 323 | Input/Output: [[4 6 9 0 6 1 9 0 1 5 1 8 10 9 0 0 0 8 0] 95]
Test Case: 324 | Input/Output: [[4 6 10 9 0 9 0 8 1 8 2 4 1 2 0 1 3 7 2] 100]
Test Case: 325 | Input/Output: [[5 0 3 5 4 3 5 3 7 3 1 8 2 1 10 9 0 5 3] 87]
Test Case: 326 | Input/Output: [[5 0 5 4 1 6 9 1 8 1 0 10 7 0 10 3 7 3 4] 112]
Test Case: 327 | Input/Output: [[5 0 10 5 5 1 2 10 3 0 0 0 4 6 3 2 10 4 5] 92]
Test Case: 328 | Input/Output: [[5 0 10 8 0 1 7 1 0 6 0 8 0 9 0 5 3 4 2] 77]
Test Case: 329 | Input/Output: [[5 0 10 8 0 3 6 3 4 2 7 7 2 6 3 9 1 6 3] 99]
Test Case: 330 | Input/Output: [[5 1 6 0 3 3 6 2 2 0 10 8 2 4 3 0 1 0 6] 76]
Test Case: 331 | Input/Output: [[5 1 7 2 0 2 10 9 1 1 5 9 0 4 4 7 2 1 2] 83]
Test Case: 332 | Input/Output: [[5 2 1 4 3 5 10 4 5 3 7 1 9 6 1 6 3 0 0] 91]
Test Case: 333 | Input/Output: [[5 2 1 7 10 6 2 1 9 7 1 5 5 3 6 2 7 8 1] 106]
Test Case: 334 | Input/Output: [[5 2 2 2 10 7 2 4 5 10 7 3 5 5 9 0 0 10 0] 121]
Test Case: 335 | Input/Output: [[5 2 2 6 1 3 1 8 10 6 3 7 2 10 4 6 1 9 9] 115]
Test Case: 336 | Input/Output: [[5 2 4 2 10 7 2 7 0 3 6 9 0 9 0 8 2 1 3] 90]
Test Case: 337 | Input/Output: [[5 2 6 1 0 1 1 9 8 0 3 2 0 0 0 3 10 0 5] 69]
Test Case: 338 | Input/Output: [[5 3 3 1 2 0 6 4 8 0 2 5 3 6 0 9 10 6 2] 91]
Test Case: 339 | Input/Output: [[5 3 3 6 10 7 2 9 1 5 5 5 5 7 0 6 1 0 4] 110]
Test Case: 340 | Input/Output: [[5 3 6 2 0 7 7 2 5 2 4 4 6 2 9 1 10 3 1] 93]
Test Case: 341 | Input/Output: [[5 3 9 1 9 0 8 1 10 9 1 6 3 5 3 7 3 7 0] 122]
Test Case: 342 | Input/Output: [[5 4 1 2 1 2 2 3 5 2 1 0 0 4 10 7 3 9 0] 80]
Test Case: 343 | Input/Output: [[5 4 3 0 10 2 8 7 3 6 4 8 0 7 2 2 1 2 7] 112]
Test Case: 344 | Input/Output: [[5 4 6 2 2 7 6 4 10 2 6 3 4 3 5 1 2 2 3] 95]
Test Case: 345 | Input/Output: [[5 4 6 3 8 0 6 3 9 0 3 3 10 5 5 7 3 0 9] 106]
Test Case: 346 | Input/Output: [[5 5 0 6 4 2 9 0 6 3 10 7 0 4 4 4 5 0 0] 81]
Test Case: 347 | Input/Output: [[5 5 9 0 10 0 2 0 3 8 0 3 7 9 0 8 1 8 0] 98]
Test Case: 348 | Input/Output: [[6 0 5 2 0 6 0 5 1 5 1 8 10 1 6 2 0 3 4] 72]
Test Case: 349 | Input/Output: [[6 0 7 3 10 8 2 9 0 1 6 6 3 7 3 0 10 1 3] 115]
Test Case: 350 | Input/Output: [[6 0 9 0 0 10 3 7 8 0 3 0 10 2 8 5 4 8 1] 110]
Test Case: 351 | Input/Output: [[6 0 9 0 6 4 9 1 10 1 6 6 0 2 4 3 4 0 4] 101]
Test Case: 352 | Input/Output: [[6 0 10 0 10 4 6 3 6 8 2 7 1 3 1 6 2 3 1] 103]
Test Case: 353 | Input/Output: [[6 0 10 1 6 3 1 5 0 6 4 6 2 6 1 0 5 2 7] 84]
Test Case: 354 | Input/Output: [[6 0 10 6 4 4 0 7 3 3 7 6 2 0 3 7 3 8 0] 110]
Test Case: 355 | Input/Output: [[6 1 1 2 0 10 0 6 9 0 2 4 10 7 1 4 4 3 1] 79]
Test Case: 356 | Input/Output: [[6 1 5 4 5 3 3 7 6 0 1 2 10 5 4 9 0 6 1] 93]
Test Case: 357 | Input/Output: [[6 2 1 9 10 3 7 5 3 2 4 4 5 2 1 8 1 3 0] 101]
Test Case: 358 | Input/Output: [[6 2 2 7 10 6 1 0 7 5 3 5 1 6 1 3 7 7 2] 95]
Test Case: 359 | Input/Output: [[6 2 3 1 8 0 1 2 5 4 0 3 6 1 10 3 7 2 4] 80]
Test Case: 360 | Input/Output: [[6 2 5 1 3 6 10 2 5 4 5 5 2 8 2 7 1 0 6] 94]
Test Case: 361 | Input/Output: [[6 2 5 4 5 1 9 0 2 2 3 7 6 1 9 0 10 5 3] 94]
Test Case: 362 | Input/Output: [[6 2 8 1 10 3 3 5 1 5 3 5 1 6 2 9 0 7 1] 84]
Test Case: 363 | Input/Output: [[6 2 8 2 0 10 1 1 2 7 1 1 10 1 7 7 1 1 4] 81]
Test Case: 364 | Input/Output: [[6 2 10 1 3 5 5 4 0 7 2 0 9 6 4 4 1 4 5] 90]
Test Case: 365 | Input/Output: [[6 2 10 8 1 9 1 3 0 0 0 2 3 2 0 6 4 9 0] 87]
Test Case: 366 | Input/Output: [[6 3 2 8 5 3 10 1 8 6 1 2 4 0 7 2 8 4 3] 101]
Test Case: 367 | Input/Output: [[6 3 4 1 4 0 3 6 10 3 2 9 1 0 10 0 3 1 6] 77]
Test Case: 368 | Input/Output: [[6 3 4 3 7 1 5 5 3 5 10 4 3 6 3 9 0 4 1] 92]
Test Case: 369 | Input/Output: [[6 3 7 3 2 6 7 3 7 1 1 3 2 4 10 3 3 6 1] 93]
Test Case: 370 | Input/Output: [[6 3 7 3 3 2 3 6 5 4 7 2 10 7 2 7 1 7 0] 97]
Test Case: 371 | Input/Output: [[6 3 10 0 6 4 5 0 9 10 0 4 2 5 6 1 9 1 7] 98]
Test Case: 372 | Input/Output: [[6 4 1 8 6 0 2 5 3 6 7 0 10 2 8 5 1 2 0] 92]
Test Case: 373 | Input/Output: [[6 4 3 4 7 2 10 0 3 4 5 8 2 1 3 5 3 2 6] 85]
Test Case: 374 | Input/Output: [[6 4 4 1 10 4 6 5 3 2 4 6 1 6 2 2 3 6 1] 95]
Test Case: 375 | Input/Output: [[6 4 5 2 10 7 2 2 2 3 0 3 1 0 3 2 3 6 1] 76]
Test Case: 376 | Input/Output: [[6 4 6 3 0 1 4 2 5 1 5 3 5 1 10 1 6 2 5] 83]
Test Case: 377 | Input/Output: [[6 4 10 6 3 0 2 9 1 3 2 3 3 2 6 9 1 0 0] 92]
Test Case: 378 | Input/Output: [[7 0 3 1 7 2 5 0 0 6 3 4 0 9 7 2 10 4 2] 78]
Test Case: 379 | Input/Output: [[7 0 3 4 7 2 10 8 1 4 3 1 3 0 4 3 0 8 0] 77]
Test Case: 380 | Input/Output: [[7 0 3 5 9 1 2 0 10 2 4 7 3 7 1 9 1 6 2] 100]
Test Case: 381 | Input/Output: [[7 0 9 0 6 4 10 9 0 6 2 7 1 5 4 1 5 2 5] 102]
Test Case: 382 | Input/Output: [[7 1 2 8 7 0 8 0 6 4 5 1 6 1 4 3 10 5 4] 103]
Test Case: 383 | Input/Output: [[7 1 3 0 7 1 6 3 6 4 8 2 10 5 4 0 8 5 3] 110]
Test Case: 384 | Input/Output: [[7 1 4 2 9 1 1 5 9 1 8 1 9 1 9 1 10 5 4] 125]
Test Case: 385 | Input/Output: [[7 1 5 0 0 6 5 4 4 0 6 2 2 6 4 2 10 3 0] 70]
Test Case: 386 | Input/Output: [[7 1 5 2 8 0 9 1 9 0 4 5 10 0 9 7 2 3 3] 103]
Test Case: 387 | Input/Output: [[7 1 10 5 2 9 1 9 0 7 2 6 0 10 0 2 1 9 4] 103]
Test Case: 388 | Input/Output: [[7 2 0 0 2 8 2 4 4 4 10 0 8 3 5 9 0 6 0] 84]
Test Case: 389 | Input/Output: [[7 2 1 1 3 5 1 4 10 5 3 7 3 10 6 0 8 2 4] 106]
Test Case: 390 | Input/Output: [[7 2 2 0 5 4 7 0 9 0 8 2 1 9 2 2 10 5 2] 87]
Test Case: 391 | Input/Output: [[7 2 6 4 8 2 7 1 10 1 8 5 0 7 1 0 9 5 0] 107]
Test Case: 392 | Input/Output: [[7 2 7 0 5 4 10 8 0 3 7 7 3 4 5 6 2 7 1] 107]
Test Case: 393 | Input/Output: [[7 2 7 1 2 1 8 2 10 5 5 4 6 8 1 6 2 7 2] 118]
Test Case: 394 | Input/Output: [[7 2 8 2 9 0 9 0 10 8 0 3 5 8 2 3 5 4 1] 106]
Test Case: 395 | Input/Output: [[7 3 0 4 5 4 7 3 10 4 5 4 5 5 1 0 8 5 3] 102]
Test Case: 396 | Input/Output: [[7 3 2 5 1 8 9 1 7 0 10 3 6 10 4 3 8 2 7] 121]
Test Case: 397 | Input/Output: [[7 3 4 4 0 10 8 1 3 1 7 2 10 5 5 1 7 4 5] 110]
Test Case: 398 | Input/Output: [[7 3 4 4 8 1 4 1 1 5 2 0 5 4 10 1 6 4 5] 86]
Test Case: 399 | Input/Output: [[7 3 5 0 5 3 10 3 1 9 1 6 0 8 2 5 1 7 1] 97]
Test Case: 400 | Input/Output: [[7 3 10 0 8 1 0 7 1 5 4 6 2 4 5 2 7 9 0] 99]
Test Case: 401 | Input/Output: [[8 0 1 4 0 7 10 1 5 8 1 1 9 6 0 2 0 6 3] 84]
Test Case: 402 | Input/Output: [[8 0 3 6 10 2 1 6 1 7 0 7 3 1 6 5 0 4 4] 78]
Test Case: 403 | Input/Output: [[8 0 4 6 8 1 10 0 0 3 5 6 3 3 4 8 2 0 3] 82]
Test Case: 404 | Input/Output: [[8 0 5 0 4 2 0 5 7 0 7 2 8 0 10 9 1 1 8] 88]
Test Case: 405 | Input/Output: [[8 0 5 4 0 1 10 8 2 6 3 6 2 1 5 1 3 8 0] 89]
Test Case: 406 | Input/Output: [[8 0 6 2 5 2 5 4 3 6 10 8 1 9 1 0 6 1 3] 89]
Test Case: 407 | Input/Output: [[8 0 10 9 1 8 2 10 4 4 3 6 9 1 2 6 10 3 1] 135]
Test Case: 408 | Input/Output: [[8 1 1 4 9 1 4 4 9 1 2 1 7 0 4 6 10 3 2] 98]
Test Case: 409 | Input/Output: [[8 1 3 3 4 1 10 8 1 10 7 3 4 1 0 4 10 8 1] 110]
Test Case: 410 | Input/Output: [[8 1 3 3 8 2 5 1 10 4 5 5 5 6 2 8 1 6 3] 106]
Test Case: 411 | Input/Output: [[8 1 6 0 10 7 0 0 1 1 8 2 1 3 4 0 9 3 5] 76]
Test Case: 412 | Input/Output: [[8 1 6 1 9 1 1 2 6 2 10 5 5 0 4 4 0 6 0] 82]
Test Case: 413 | Input/Output: [[8 1 10 2 7 8 2 0 5 8 2 2 2 10 0 0 4 6 6] 94]
Test Case: 414 | Input/Output: [[8 2 0 6 10 2 3 2 2 9 0 6 3 0 5 1 8 0 3] 75]
Test Case: 415 | Input/Output: [[8 2 1 2 2 0 1 4 9 1 8 0 6 0 0 10 10 2 0] 87]
Test Case: 416 | Input/Output: [[8 2 3 1 10 0 0 4 1 4 1 2 0 0 10 6 3 2 7] 73]
Test Case: 417 | Input/Output: [[8 2 3 7 10 6 3 8 0 6 2 8 2 6 0 0 1 4 4] 108]
Test Case: 418 | Input/Output: [[8 2 8 0 2 4 4 2 3 4 8 0 1 1 9 1 10 2 3] 95]
Test Case: 419 | Input/Output: [[8 2 8 0 9 1 10 0 10 0 1 4 1 9 1 6 1 2 5] 112]
Test Case: 420 | Input/Output: [[8 2 8 2 4 1 8 2 10 8 2 0 10 7 1 1 8 3 1] 125]
Test Case: 421 | Input/Output: [[8 2 10 5 3 1 7 4 6 1 4 1 5 2 8 4 6 7 2] 116]
Test Case: 422 | Input/Output: [[8 2 10 8 2 3 3 2 2 6 4 5 1 9 0 6 4 2 5] 112]
Test Case: 423 | Input/Output: [[9 0 0 8 0 7 8 1 4 2 9 1 0 4 10 5 1 6 0] 81]
Test Case: 424 | Input/Output: [[9 0 0 9 6 3 0 2 9 0 10 4 6 8 1 6 2 2 1] 96]
Test Case: 425 | Input/Output: [[9 0 1 0 4 4 10 3 4 5 4 3 2 4 5 3 6 7 0] 81]
Test Case: 426 | Input/Output: [[9 0 2 3 8 0 1 6 4 0 1 6 5 1 3 2 10 2 7] 79]
Test Case: 427 | Input/Output: [[9 0 2 5 9 0 1 9 7 0 8 1 2 1 5 5 10 9 0] 109]
Test Case: 428 | Input/Output: [[9 0 3 4 3 6 10 3 2 3 0 1 9 5 2 2 8 6 0] 92]
Test Case: 429 | Input/Output: [[9 0 3 5 6 2 1 1 1 1 10 5 4 6 4 8 2 3 6] 97]
Test Case: 430 | Input/Output: [[9 0 4 0 4 0 1 3 10 0 9 1 8 2 8 5 4 5 1] 88]
Test Case: 431 | Input/Output: [[9 0 4 3 5 3 3 6 5 3 8 2 9 0 10 8 0 6 2] 103]
Test Case: 432 | Input/Output: [[9 0 4 3 10 6 1 4 0 0 4 6 3 1 4 5 4 7 0] 78]
Test Case: 433 | Input/Output: [[9 0 6 4 3 6 6 4 9 1 5 0 10 3 3 2 6 8 1] 109]
Test Case: 434 | Input/Output: [[9 0 7 2 0 7 8 1 10 5 4 3 4 4 4 5 4 3 4] 93]
Test Case: 435 | Input/Output: [[9 0 7 3 6 2 1 2 5 5 4 5 3 6 9 1 10 7 2] 116]
Test Case: 436 | Input/Output: [[9 0 10 4 6 3 5 6 0 2 1 7 1 1 1 5 0 6 2] 82]
Test Case: 437 | Input/Output: [[9 0 10 8 1 8 0 7 1 6 4 5 4 8 0 9 1 9 0] 113]
Test Case: 438 | Input/Output: [[9 0 10 9 1 7 1 8 0 4 0 5 4 2 8 7 1 6 2] 108]
Test Case: 439 | Input/Output: [[9 1 0 4 2 1 1 2 6 4 10 1 3 4 4 8 0 1 5] 80]
Test Case: 440 | Input/Output: [[9 1 1 2 9 0 10 1 7 3 1 9 0 7 3 2 6 8 1] 91]
Test Case: 441 | Input/Output: [[9 1 1 3 0 3 10 9 1 9 1 2 3 2 8 6 0 9 0] 105]
Test Case: 442 | Input/Output: [[9 1 1 4 3 2 6 2 10 1 5 0 10 5 1 9 1 5 2] 94]
Test Case: 443 | Input/Output: [[9 1 1 6 5 3 7 1 8 0 7 1 10 1 3 0 5 1 3] 77]
Test Case: 444 | Input/Output: [[9 1 1 8 10 1 2 8 0 7 0 10 6 0 4 0 10 1 4] 92]
Test Case: 445 | Input/Output: [[9 1 2 5 3 0 8 2 2 7 10 2 4 0 9 9 1 1 2] 88]
Test Case: 446 | Input/Output: [[9 1 3 2 2 1 5 3 1 3 0 4 1 3 3 2 10 8 0] 72]
Test Case: 447 | Input/Output: [[9 1 3 7 1 0 5 2 5 3 10 8 2 3 2 7 1 3 4] 93]
Test Case: 448 | Input/Output: [[9 1 4 4 10 5 3 5 4 5 2 0 0 4 4 4 6 4 2] 92]
Test Case: 449 | Input/Output: [[9 1 6 0 1 9 10 5 5 4 6 6 0 6 1 6 4 0 5] 120]
Test Case: 450 | Input/Output: [[9 1 6 1 10 0 8 6 4 0 4 3 4 9 0 4 2 0 1] 86]
Test Case: 451 | Input/Output: [[9 1 7 0 5 5 4 1 10 4 5 3 7 5 4 1 2 9 0] 107]
Test Case: 452 | Input/Output: [[9 1 7 1 3 0 3 4 7 1 3 6 10 1 9 3 3 5 0] 96]
Test Case: 453 | Input/Output: [[9 1 8 0 8 0 0 6 2 8 10 6 1 6 4 0 8 6 2] 110]
Test Case: 454 | Input/Output: [[9 1 8 0 8 2 10 9 1 4 3 1 2 6 2 4 2 0 7] 111]
Test Case: 455 | Input/Output: [[9 1 8 2 7 0 7 1 9 0 8 2 6 3 10 0 10 3 4] 124]
Test Case: 456 | Input/Output: [[9 1 9 0 9 0 7 0 6 3 4 5 5 2 10 1 2 2 7] 94]
Test Case: 457 | Input/Output: [[9 1 10 6 0 1 9 1 1 1 9 4 1 6 0 2 7 7 1] 97]
Test Case: 458 | Input/Output: [[9 1 10 7 0 0 4 8 1 5 4 0 0 0 7 4 6 4 0] 91]
Test Case: 459 | Input/Output: [[9 1 10 8 1 0 3 3 6 8 2 1 9 8 1 5 1 6 2] 112]
Test Case: 460 | Input/Output: [[10 0 0 3 7 7 0 5 5 6 2 7 3 6 3 0 4 3 0] 90]
Test Case: 461 | Input/Output: [[10 0 9 5 2 5 4 8 0 2 2 4 4 5 5 4 2 0 1] 85]
Test Case: 462 | Input/Output: [[10 1 0 3 7 1 9 4 1 7 2 0 10 1 4 9 0 8 0] 84]
Test Case: 463 | Input/Output: [[10 1 2 8 0 3 3 3 6 5 2 3 3 9 0 3 2 2 2] 70]
Test Case: 464 | Input/Output: [[10 1 3 9 0 9 0 6 2 5 4 2 8 4 6 0 4 0 2] 83]
Test Case: 465 | Input/Output: [[10 1 8 4 0 6 4 7 3 3 7 2 6 5 3 3 0 6 2] 101]
Test Case: 466 | Input/Output: [[10 1 9 6 4 5 5 1 6 2 8 4 2 3 4 6 3 4 0] 109]
Test Case: 467 | Input/Output: [[10 2 2 1 2 6 3 9 0 6 1 3 0 10 4 4 5 5 9] 94]
Test Case: 468 | Input/Output: [[10 2 2 10 9 0 3 3 6 2 4 4 2 8 9 1 7 3 9] 123]
Test Case: 469 | Input/Output: [[10 2 6 6 4 5 0 7 2 8 1 1 8 3 3 9 0 8 1] 97]
Test Case: 470 | Input/Output: [[10 2 7 6 4 0 1 3 5 4 3 6 1 4 3 1 9 0 7] 85]
Test Case: 471 | Input/Output: [[10 2 7 7 0 7 0 3 2 7 0 3 4 5 5 8 0 0 6] 93]
Test Case: 472 | Input/Output: [[10 3 0 1 7 8 1 9 1 4 5 9 1 1 6 0 4 4 1] 83]
Test Case: 473 | Input/Output: [[10 3 1 6 1 8 1 9 1 4 6 6 1 4 3 4 6 2 5] 97]
Test Case: 474 | Input/Output: [[10 3 3 6 3 5 1 10 3 3 4 4 0 4 2 0 10 10 3] 96]
Test Case: 475 | Input/Output: [[10 3 4 2 8 5 4 3 4 8 1 8 2 8 1 8 2 6 1] 114]
Test Case: 476 | Input/Output: [[10 3 5 4 5 8 0 9 1 1 9 2 0 1 1 7 0 0 3] 80]
Test Case: 477 | Input/Output: [[10 3 6 2 2 4 6 6 1 1 1 9 1 4 5 8 0 5 2] 95]
Test Case: 478 | Input/Output: [[10 3 7 7 2 4 5 10 1 9 4 5 6 2 7 2 10 5 4] 134]
Test Case: 479 | Input/Output: [[10 4 5 5 3 10 4 5 5 4 7 1 2 5 5 0 10 2 8] 113]
Test Case: 480 | Input/Output: [[10 5 1 8 2 0 7 2 5 2 4 2 1 1 2 4 3 4 4] 73]
Test Case: 481 | Input/Output: [[10 5 1 9 1 0 9 2 5 4 1 0 8 5 5 6 2 0 2] 87]
Test Case: 482 | Input/Output: [[10 5 2 0 5 8 2 6 3 5 2 5 4 0 1 7 1 3 6] 88]
Test Case: 483 | Input/Output: [[10 5 5 6 2 3 1 9 1 0 6 4 3 8 2 3 2 3 2] 94]
Test Case: 484 | Input/Output: [[10 6 1 8 0 4 5 7 1 4 2 5 3 6 3 4 0 7 0] 83]
Test Case: 485 | Input/Output: [[10 6 3 8 0 0 5 3 6 2 1 5 5 6 1 10 8 2 6] 112]
Test Case: 486 | Input/Output: [[10 7 0 9 1 9 0 6 0 1 4 7 0 6 3 4 5 3 5] 96]
Test Case: 487 | Input/Output: [[10 8 0 0 9 6 3 2 2 1 7 6 0 0 9 3 1 7 1] 83]
Test Case: 488 | Input/Output: [[10 8 1 9 1 5 1 1 9 2 3 7 2 9 1 2 4 6 3] 102]
Test Case: 489 | Input/Output: [[10 8 2 0 3 5 0 6 0 7 1 7 0 7 0 0 7 2 2] 77]
Test Case: 490 | Input/Output: [[10 9 0 8 2 6 3 3 6 8 0 8 0 3 3 8 0 5 1] 98]
Test Case: 491 | Input/Output: [[10 9 1 5 3 0 3 5 1 0 8 1 0 6 2 3 6 7 1] 86]
Test Case: 492 | Input/Output: [[10 9 1 8 1 3 4 2 1 5 3 9 1 2 0 5 3 2 3] 92]
Test Case: 493 | Input/Output: [[0 0 1 1 9 1 7 2 1 0 5 2 5 0 9 1 1 4 1 5] 63]
Test Case: 494 | Input/Output: [[0 0 3 3 6 4 4 6 5 2 0 9 4 3 4 6 5 1 2 4] 85]
Test Case: 495 | Input/Output: [[0 1 5 4 6 0 9 1 8 2 7 2 1 9 7 1 7 2 8 1] 103]
Test Case: 496 | Input/Output: [[0 1 7 0 1 0 9 1 1 1 6 2 1 2 8 0 0 3 1 8] 53]
Test Case: 497 | Input/Output: [[0 1 8 1 2 2 9 1 2 3 2 2 2 3 8 1 7 3 9 0] 77]
Test Case: 498 | Input/Output: [[0 1 10 8 2 9 1 1 2 8 0 4 5 2 2 8 0 5 5 8] 101]
Test Case: 499 | Input/Output: [[0 2 2 0 5 0 8 0 6 0 8 0 0 3 7 1 1 8 3 6] 60]
Test Case: 500 | Input/Output: [[0 2 4 4 4 0 1 0 4 4 8 1 0 6 10 7 1 8 2 7] 81]
Test Case: 501 | Input/Output: [[0 2 7 0 9 1 5 1 9 0 5 0 6 2 9 0 9 1 6 1] 84]
Test Case: 502 | Input/Output: [[0 2 8 0 6 0 3 0 9 0 6 0 7 1 9 0 0 10 4 1] 70]
Test Case: 503 | Input/Output: [[0 3 0 4 6 2 0 6 10 0 10 4 1 2 5 6 4 10 0 6] 103]
Test Case: 504 | Input/Output: [[0 3 1 7 2 0 8 2 4 4 8 1 8 2 8 1 8 2 6 1] 94]
Test Case: 505 | Input/Output: [[0 3 1 7 9 0 5 2 9 1 3 4 9 1 9 1 9 0 8 1] 103]
Test Case: 506 | Input/Output: [[0 3 4 5 1 5 0 9 0 4 9 1 8 2 0 2 9 1 3 5] 82]
Test Case: 507 | Input/Output: [[0 3 6 1 4 6 5 4 5 1 8 2 4 6 8 1 0 1 1 0] 83]
Test Case: 508 | Input/Output: [[0 4 2 0 5 5 3 2 2 6 3 6 9 0 1 1 9 1 6 3] 77]
Test Case: 509 | Input/Output: [[0 4 2 2 4 3 0 9 10 6 4 0 9 2 8 0 1 7 3 6] 90]
Test Case: 510 | Input/Output: [[0 4 4 1 2 8 8 2 6 0 0 4 3 1 2 0 8 0 7 2] 76]
Test Case: 511 | Input/Output: [[0 4 9 0 0 0 2 5 2 2 2 6 3 6 0 9 2 3 1 5] 61]
Test Case: 512 | Input/Output: [[0 5 1 3 9 1 7 0 5 0 6 3 0 7 2 1 6 0 7 0] 70]
Test Case: 513 | Input/Output: [[0 6 2 5 5 0 6 2 1 1 5 4 8 1 3 4 0 9 8 0] 70]
Test Case: 514 | Input/Output: [[0 6 4 5 3 4 8 0 6 4 4 1 5 5 0 3 9 0 0 1] 72]
Test Case: 515 | Input/Output: [[0 6 5 5 9 1 3 2 0 8 8 1 5 1 8 0 3 6 8 1] 92]
Test Case: 516 | Input/Output: [[0 6 6 2 9 1 0 5 3 1 1 3 3 2 6 3 5 1 3 1] 61]
Test Case: 517 | Input/Output: [[0 6 7 0 0 8 6 4 2 8 2 7 2 6 3 1 5 4 4 2] 81]
Test Case: 518 | Input/Output: [[0 7 4 1 9 0 8 1 0 2 7 1 9 1 5 4 8 1 0 7] 80]
Test Case: 519 | Input/Output: [[0 7 9 1 6 4 10 7 2 7 1 9 0 9 1 4 6 10 7 9] 148]
Test Case: 520 | Input/Output: [[0 8 1 9 8 1 4 3 0 5 4 0 9 0 2 1 1 6 3 2] 75]
Test Case: 521 | Input/Output: [[0 8 2 6 1 0 5 5 9 0 7 1 7 3 7 0 4 5 8 0] 94]
Test Case: 522 | Input/Output: [[0 8 4 4 3 6 3 6 8 1 6 3 0 0 7 1 8 2 5 4] 84]
Test Case: 523 | Input/Output: [[0 8 6 1 1 6 6 4 3 0 10 1 8 6 4 2 4 6 4 1] 95]
Test Case: 524 | Input/Output: [[0 8 8 0 6 2 1 1 8 0 0 8 3 0 7 1 0 4 6 1] 64]
Test Case: 525 | Input/Output: [[0 9 2 5 5 2 8 2 7 1 9 0 1 4 6 3 7 1 8 1] 88]
Test Case: 526 | Input/Output: [[0 9 5 1 4 2 6 0 2 6 0 10 5 3 4 4 0 3 3 3] 75]
Test Case: 527 | Input/Output: [[0 9 5 2 0 8 9 1 0 3 4 3 5 3 1 3 7 0 3 6] 72]
Test Case: 528 | Input/Output: [[0 9 7 1 9 1 8 1 3 4 2 2 0 2 8 2 4 6 2 5] 90]
Test Case: 529 | Input/Output: [[0 10 8 0 2 3 1 7 2 1 3 1 1 3 7 3 3 5 2 3] 76]
Test Case: 530 | Input/Output: [[0 10 9 1 8 2 7 2 8 2 2 7 7 1 2 2 5 1 8 1] 111]
Test Case: 531 | Input/Output: [[1 0 0 0 1 9 5 3 4 0 4 0 1 0 7 2 8 0 6 3] 59]
Test Case: 532 | Input/Output: [[1 0 4 2 3 5 9 1 10 9 0 7 0 0 4 8 2 7 3 10] 111]
Test Case: 533 | Input/Output: [[1 0 9 0 10 7 0 5 0 2 0 7 2 0 8 0 4 10 7 3] 82]
Test Case: 534 | Input/Output: [[1 1 4 1 9 0 8 2 9 0 9 1 4 2 1 1 8 2 0 8] 84]
Test Case: 535 | Input/Output: [[1 1 5 1 3 7 9 1 7 1 1 2 0 3 2 0 4 3 7 1] 75]
Test Case: 536 | Input/Output: [[1 1 5 5 4 6 8 0 9 1 5 2 6 2 5 2 2 3 6 0] 90]
Test Case: 537 | Input/Output: [[1 2 0 9 8 1 7 1 0 0 0 1 3 5 2 1 5 0 0 3] 49]
Test Case: 538 | Input/Output: [[1 2 2 4 4 6 5 3 9 0 8 1 0 4 9 0 1 5 6 1] 76]
Test Case: 539 | Input/Output: [[1 2 3 4 2 1 1 0 6 0 5 1 6 1 9 0 3 2 8 1] 56]
Test Case: 540 | Input/Output: [[1 2 3 6 0 2 0 3 5 2 1 0 1 9 5 3 9 0 6 3] 66]
Test Case: 541 | Input/Output: [[1 2 4 6 8 1 1 5 5 0 0 9 2 5 8 0 0 8 7 1] 81]
Test Case: 542 | Input/Output: [[1 2 7 1 6 0 0 9 1 5 7 2 7 0 0 0 7 1 0 6] 62]
Test Case: 543 | Input/Output: [[1 2 7 2 3 2 5 0 6 1 2 8 1 4 7 0 7 0 5 4] 68]
Test Case: 544 | Input/Output: [[1 2 10 1 6 9 1 5 1 1 6 2 8 3 2 7 1 4 6 8] 99]
Test Case: 545 | Input/Output: [[1 3 0 2 5 4 7 3 2 0 9 0 0 0 2 2 1 5 4 1] 53]
Test Case: 546 | Input/Output: [[1 3 0 3 5 3 10 7 1 3 4 5 4 4 5 4 2 6 4 8] 90]
Test Case: 547 | Input/Output: [[1 3 5 2 1 4 10 0 0 6 1 6 1 8 2 4 4 0 10 6] 78]
Test Case: 548 | Input/Output: [[1 3 8 1 1 1 3 3 6 2 1 4 2 7 9 1 4 6 3 0] 73]
Test Case: 549 | Input/Output: [[1 4 0 1 2 4 0 2 2 1 6 3 3 5 9 1 7 2 4 5] 69]
Test Case: 550 | Input/Output: [[1 4 1 1 8 0 3 4 9 1 4 6 3 0 3 5 0 9 3 6] 78]
Test Case: 551 | Input/Output: [[1 4 5 1 9 1 4 3 1 4 9 1 5 2 9 0 2 5 2 2] 79]
Test Case: 552 | Input/Output: [[1 4 6 1 9 0 6 4 6 3 1 5 3 7 7 3 0 4 6 1] 90]
Test Case: 553 | Input/Output: [[1 4 8 0 9 0 8 1 8 0 2 7 6 4 10 9 0 1 9 4] 110]
Test Case: 554 | Input/Output: [[1 5 1 2 0 4 6 4 6 2 7 3 0 7 9 1 8 0 4 5] 89]
Test Case: 555 | Input/Output: [[1 5 1 4 5 1 1 8 0 2 7 1 8 0 4 3 0 7 3 2] 63]
Test Case: 556 | Input/Output: [[1 6 4 4 2 0 7 2 2 6 7 3 6 3 6 4 0 5 2 0] 76]
Test Case: 557 | Input/Output: [[1 6 8 0 4 6 2 6 4 2 6 4 2 2 1 8 6 0 1 2] 75]
Test Case: 558 | Input/Output: [[1 7 1 2 1 7 0 5 5 1 1 1 9 0 7 1 8 2 8 0] 75]
Test Case: 559 | Input/Output: [[1 7 1 5 6 1 8 1 5 2 6 3 2 3 8 1 8 1 2 2] 73]
Test Case: 560 | Input/Output: [[1 7 3 2 9 0 4 0 2 5 2 8 4 4 5 3 2 7 1 1] 74]
Test Case: 561 | Input/Output: [[1 7 4 0 0 7 0 9 6 1 7 1 4 6 9 0 7 1 3 3] 85]
Test Case: 562 | Input/Output: [[1 7 5 2 2 0 6 4 3 6 8 2 4 3 9 1 3 5 3 6] 90]
Test Case: 563 | Input/Output: [[1 7 7 0 4 6 0 10 7 2 6 0 0 1 0 5 1 4 5 4] 77]
Test Case: 564 | Input/Output: [[1 8 0 4 3 2 0 9 7 2 2 8 7 3 8 2 1 1 4 4] 92]
Test Case: 565 | Input/Output: [[1 8 3 4 6 1 5 4 5 3 2 6 6 4 5 2 3 4 3 2] 82]
Test Case: 566 | Input/Output: [[1 8 6 2 5 4 4 6 9 1 9 1 6 1 4 1 4 0 0 0] 96]
Test Case: 567 | Input/Output: [[1 8 7 1 5 4 4 5 4 2 4 0 9 1 3 3 5 2 0 9] 80]
Test Case: 568 | Input/Output: [[1 9 9 0 7 1 7 3 6 2 2 4 9 0 3 1 0 9 0 1] 89]
Test Case: 569 | Input/Output: [[1 9 9 1 0 4 3 1 6 4 1 2 10 1 4 0 0 7 3 1] 82]
Test Case: 570 | Input/Output: [[2 0 4 0 0 8 3 5 9 1 6 2 1 4 2 1 4 6 9 0] 82]
Test Case: 571 | Input/Output: [[2 1 1 9 7 0 4 4 3 3 7 0 10 1 4 0 7 3 7 7] 92]
Test Case: 572 | Input/Output: [[2 1 1 9 7 1 10 5 5 5 0 9 0 7 3 6 3 2 8 7] 119]
Test Case: 573 | Input/Output: [[2 1 2 0 8 1 0 5 1 1 2 2 8 2 9 1 8 0 4 3] 77]
Test Case: 574 | Input/Output: [[2 1 7 2 5 0 5 4 0 1 9 1 3 3 8 0 2 3 0 1] 60]
Test Case: 575 | Input/Output: [[2 1 10 1 3 7 1 7 3 3 6 9 0 8 1 3 1 10 8 2] 93]
Test Case: 576 | Input/Output: [[2 1 10 1 3 8 2 9 1 4 4 8 2 7 3 1 9 10 6 6] 132]
Test Case: 577 | Input/Output: [[2 2 0 0 4 6 9 0 3 5 4 0 8 1 5 4 9 1 5 1] 83]
Test Case: 578 | Input/Output: [[2 2 1 7 7 0 5 3 7 3 9 0 0 5 5 3 1 5 5 4] 83]
Test Case: 579 | Input/Output: [[2 2 3 2 2 4 3 1 3 7 4 2 9 0 4 2 4 4 0 9] 71]
Test Case: 580 | Input/Output: [[2 2 9 0 9 1 1 3 10 4 0 9 1 1 8 0 3 10 2 1] 82]
Test Case: 581 | Input/Output: [[2 2 10 0 0 1 5 5 3 7 2 9 1 3 0 8 2 4 6 0] 77]
Test Case: 582 | Input/Output: [[2 3 1 1 4 4 0 4 6 2 1 1 2 4 2 2 8 0 4 5] 56]
Test Case: 583 | Input/Output: [[2 3 2 0 0 3 6 4 4 3 5 4 5 4 8 0 2 5 1 6] 71]
Test Case: 584 | Input/Output: [[2 3 2 3 7 2 9 1 9 1 3 1 6 2 7 0 2 6 5 3] 86]
Test Case: 585 | Input/Output: [[2 3 5 1 7 3 2 5 4 0 2 5 4 3 8 0 2 7 7 0] 72]
Test Case: 586 | Input/Output: [[2 3 6 3 1 0 0 0 8 0 1 8 5 5 5 3 4 6 2 0] 69]
Test Case: 587 | Input/Output: [[2 3 7 3 0 10 0 4 9 0 2 7 6 3 4 3 2 5 8 1] 79]
Test Case: 588 | Input/Output: [[2 3 8 0 9 0 0 6 0 2 0 5 9 0 5 1 7 3 3 5] 71]
Test Case: 589 | Input/Output: [[2 3 9 0 4 5 4 6 2 3 9 1 2 0 2 8 8 1 5 2] 88]
Test Case: 590 | Input/Output: [[2 4 0 8 4 2 0 8 9 0 3 6 5 0 5 0 6 0 7 1] 70]
Test Case: 591 | Input/Output: [[2 4 2 7 7 1 0 0 1 3 7 1 3 5 2 2 0 6 2 4] 59]
Test Case: 592 | Input/Output: [[2 4 3 7 0 3 0 3 9 1 8 1 9 0 6 2 5 5 4 4] 88]
Test Case: 593 | Input/Output: [[2 4 7 3 7 0 3 2 1 0 6 0 8 1 3 5 3 5 3 2] 72]
Test Case: 594 | Input/Output: [[2 4 8 0 9 0 2 2 2 2 3 3 6 1 6 3 7 0 3 4] 67]
Test Case: 595 | Input/Output: [[2 4 8 2 7 2 1 9 8 2 2 5 4 4 8 0 1 2 4 5] 97]
Test Case: 596 | Input/Output: [[2 4 9 1 10 5 2 7 2 6 3 1 6 9 0 6 3 9 1 7] 110]
Test Case: 597 | Input/Output: [[2 5 8 2 2 0 5 1 9 1 7 1 7 3 4 4 1 7 6 1] 89]
Test Case: 598 | Input/Output: [[2 6 0 3 1 5 10 0 6 1 4 9 0 9 1 6 1 10 8 5] 99]
Test Case: 599 | Input/Output: [[2 6 7 1 4 2 6 2 2 1 6 4 1 9 8 1 7 2 2 5] 87]
Test Case: 600 | Input/Output: [[2 6 8 2 0 3 9 0 8 2 7 1 7 2 6 0 6 2 4 4] 86]
Test Case: 601 | Input/Output: [[2 7 0 6 2 3 5 1 8 0 0 0 1 9 1 5 5 4 5 2] 67]
Test Case: 602 | Input/Output: [[2 7 0 6 4 6 0 9 6 4 9 0 3 1 10 6 4 10 4 10] 130]
Test Case: 603 | Input/Output: [[2 7 4 5 0 8 3 1 8 2 4 0 10 2 0 3 7 5 5 10] 97]
Test Case: 604 | Input/Output: [[2 7 6 4 1 7 7 2 6 2 9 0 8 1 9 0 5 4 7 1] 89]
Test Case: 605 | Input/Output: [[2 7 7 3 2 5 7 3 10 3 6 6 4 6 2 7 0 5 5 6] 123]
Test Case: 606 | Input/Output: [[2 7 8 0 8 2 9 1 8 2 9 0 9 1 6 4 8 2 0 2] 128]
Test Case: 607 | Input/Output: [[2 8 0 4 1 9 5 2 3 7 2 0 8 0 4 3 4 3 4 0] 76]
Test Case: 608 | Input/Output: [[2 8 4 0 2 6 4 5 3 4 4 6 0 10 8 2 8 1 7 1] 105]
Test Case: 609 | Input/Output: [[2 8 7 3 8 0 2 7 0 2 0 7 3 0 5 5 6 1 0 8] 95]
Test Case: 610 | Input/Output: [[3 0 1 8 5 3 6 2 8 1 4 6 6 1 2 1 2 2 7 1] 75]
Test Case: 611 | Input/Output: [[3 0 3 0 8 1 0 6 7 0 4 3 10 7 1 1 9 10 1 5] 97]
Test Case: 612 | Input/Output: [[3 0 4 1 3 2 4 6 8 0 5 3 7 0 3 4 0 10 2 3] 78]
Test Case: 613 | Input/Output: [[3 0 6 4 5 5 5 0 9 0 1 5 10 7 1 3 6 10 0 9] 107]
Test Case: 614 | Input/Output: [[3 0 9 1 1 4 2 8 0 1 8 1 8 1 8 2 2 4 5 1] 72]
Test Case: 615 | Input/Output: [[3 1 2 7 8 2 6 3 1 0 8 2 5 4 0 1 4 4 0 3] 75]
Test Case: 616 | Input/Output: [[3 1 5 0 4 3 2 2 6 2 7 0 4 2 0 4 6 1 0 0] 52]
Test Case: 617 | Input/Output: [[3 1 9 0 2 2 7 0 7 0 5 5 5 5 0 4 7 2 3 5] 77]
Test Case: 618 | Input/Output: [[3 1 10 7 0 0 5 6 2 4 0 1 9 6 4 9 0 5 5 4] 103]
Test Case: 619 | Input/Output: [[3 2 2 6 1 9 1 8 2 2 8 2 4 6 4 4 2 5 8 1] 89]
Test Case: 620 | Input/Output: [[3 2 3 7 7 0 3 1 0 4 0 10 8 2 7 2 4 4 7 2] 98]
Test Case: 621 | Input/Output: [[3 2 5 3 4 3 9 0 1 5 4 5 7 0 7 3 2 0 0 9] 74]
Test Case: 622 | Input/Output: [[3 2 8 2 3 3 8 2 4 6 5 0 8 2 6 2 7 0 3 4] 96]
Test Case: 623 | Input/Output: [[3 3 2 4 7 3 8 0 2 1 5 2 3 0 6 2 7 3 8 0] 85]
Test Case: 624 | Input/Output: [[3 3 5 0 0 7 10 2 8 2 5 9 1 1 1 2 4 1 9 0] 86]
Test Case: 625 | Input/Output: [[3 3 6 1 0 6 3 5 0 2 6 1 9 1 2 2 7 2 1 4] 66]
Test Case: 626 | Input/Output: [[3 3 8 0 7 2 5 5 5 2 9 0 8 1 5 5 10 10 2 2] 119]
Test Case: 627 | Input/Output: [[3 4 2 3 3 1 5 0 2 3 1 4 8 2 7 2 7 1 9 0] 74]
Test Case: 628 | Input/Output: [[3 4 2 8 0 0 6 2 5 0 2 4 6 1 0 0 10 9 1 2] 75]
Test Case: 629 | Input/Output: [[3 4 7 2 9 1 6 0 9 0 5 1 7 1 7 0 1 5 9 0] 83]
Test Case: 630 | Input/Output: [[3 4 8 0 2 8 9 1 7 0 0 4 2 8 2 2 0 6 0 7] 91]
Test Case: 631 | Input/Output: [[3 4 8 0 7 3 8 1 9 0 4 4 9 1 1 0 5 5 4 2] 91]
Test Case: 632 | Input/Output: [[3 4 9 1 7 1 8 2 1 9 0 1 7 0 5 1 3 4 3 1] 78]
Test Case: 633 | Input/Output: [[3 5 7 1 10 8 2 0 0 9 0 9 1 8 0 9 0 10 3 10] 113]
Test Case: 634 | Input/Output: [[3 6 1 7 5 0 6 2 10 3 7 9 1 8 2 9 1 10 5 10] 151]
Test Case: 635 | Input/Output: [[3 6 2 0 0 7 5 1 6 2 9 0 2 6 5 3 3 0 9 0] 69]
Test Case: 636 | Input/Output: [[3 6 4 0 5 5 8 1 6 3 4 0 7 2 8 0 8 1 9 0] 88]
Test Case: 637 | Input/Output: [[3 6 5 0 5 0 0 10 8 1 4 0 1 9 7 3 3 1 3 2] 89]
Test Case: 638 | Input/Output: [[3 7 0 0 2 1 2 6 9 1 6 4 6 3 4 4 6 2 3 4] 85]
Test Case: 639 | Input/Output: [[3 7 6 1 1 8 9 1 5 3 1 9 2 6 9 0 9 1 4 3] 105]
Test Case: 640 | Input/Output: [[3 7 6 3 6 0 5 3 7 3 7 1 7 2 3 2 8 1 9 0] 96]
Test Case: 641 | Input/Output: [[3 7 6 4 2 8 0 3 4 5 4 2 8 0 6 0 1 5 6 3] 85]
Test Case: 642 | Input/Output: [[3 7 7 0 7 2 2 1 3 7 6 3 4 2 6 1 10 8 2 5] 109]
Test Case: 643 | Input/Output: [[3 7 8 1 1 9 9 0 5 4 2 3 9 1 1 5 5 0 3 5] 99]
Test Case: 644 | Input/Output: [[4 0 1 4 0 1 4 2 6 0 3 5 4 3 8 1 1 5 7 2] 61]
Test Case: 645 | Input/Output: [[4 0 8 0 3 7 5 0 4 2 2 2 3 0 2 0 10 8 2 0] 77]
Test Case: 646 | Input/Output: [[4 1 1 1 6 2 8 2 3 4 6 2 5 0 0 7 1 7 1 2] 66]
Test Case: 647 | Input/Output: [[4 1 1 3 4 4 8 2 0 1 5 1 9 1 3 4 5 2 9 0] 70]
Test Case: 648 | Input/Output: [[4 1 3 1 4 6 3 0 2 1 1 1 6 2 3 1 6 2 7 1] 58]
Test Case: 649 | Input/Output: [[4 1 4 0 6 3 3 0 8 1 1 2 2 7 3 2 1 4 0 4] 56]
Test Case: 650 | Input/Output: [[4 1 4 4 0 2 9 1 1 0 1 9 6 4 4 1 9 0 6 2] 79]
Test Case: 651 | Input/Output: [[4 1 4 6 1 3 9 0 3 6 2 2 0 9 0 5 0 9 0 7] 72]
Test Case: 652 | Input/Output: [[4 1 6 1 5 2 10 5 0 7 1 7 3 6 1 8 2 8 2 3] 101]
Test Case: 653 | Input/Output: [[4 1 8 2 3 6 8 1 1 1 8 1 3 5 2 7 0 4 6 2] 76]
Test Case: 654 | Input/Output: [[4 1 8 2 8 1 7 2 2 5 8 2 7 1 5 5 10 6 4 8] 131]
Test Case: 655 | Input/Output: [[4 2 2 3 4 0 9 0 6 2 0 9 5 0 1 9 7 3 7 1] 88]
Test Case: 656 | Input/Output: [[4 2 2 5 6 2 3 2 5 3 4 1 8 1 4 2 1 2 3 0] 60]
Test Case: 657 | Input/Output: [[4 2 8 2 1 5 1 8 1 3 3 6 1 5 6 0 6 3 5 1] 72]
Test Case: 658 | Input/Output: [[4 2 9 0 1 1 2 5 4 2 8 2 1 9 9 1 7 2 5 4] 95]
Test Case: 659 | Input/Output: [[4 2 10 4 5 7 0 1 6 4 0 9 0 9 0 2 2 7 3 6] 90]
Test Case: 660 | Input/Output: [[4 3 0 0 5 2 8 0 9 0 1 2 7 3 6 2 2 1 4 2] 67]
Test Case: 661 | Input/Output: [[4 3 0 4 7 1 6 4 3 0 4 1 2 0 10 3 4 10 4 9] 89]
Test Case: 662 | Input/Output: [[4 3 2 7 4 3 3 3 5 4 4 4 5 4 5 2 9 1 3 1] 79]
Test Case: 663 | Input/Output: [[4 3 3 0 8 2 2 4 1 4 5 1 6 4 0 2 3 3 1 5] 63]
Test Case: 664 | Input/Output: [[4 3 4 1 3 0 5 0 10 7 1 2 2 1 4 4 3 10 3 8] 83]
Test Case: 665 | Input/Output: [[4 3 4 4 4 5 3 1 1 8 10 0 4 2 5 0 0 10 5 0] 77]
Test Case: 666 | Input/Output: [[4 3 7 3 5 3 3 2 8 2 5 2 5 0 7 0 1 8 6 3] 87]
Test Case: 667 | Input/Output: [[4 3 9 1 0 6 3 6 6 1 9 1 6 4 0 5 5 0 5 3] 83]
Test Case: 668 | Input/Output: [[4 4 4 4 4 2 3 2 5 2 4 6 5 4 3 5 5 1 9 0] 81]
Test Case: 669 | Input/Output: [[4 4 5 4 7 0 0 6 3 2 4 1 0 7 5 1 0 8 1 7] 69]
Test Case: 670 | Input/Output: [[4 5 0 0 3 2 5 4 3 0 2 0 2 2 1 2 5 1 9 0] 50]
Test Case: 671 | Input/Output: [[4 5 1 0 6 1 1 5 8 1 0 7 2 0 6 4 3 0 4 5] 66]
Test Case: 672 | Input/Output: [[4 5 1 5 10 7 2 7 0 2 1 8 2 9 1 7 2 8 2 5] 113]
Test Case: 673 | Input/Output: [[4 5 2 7 3 1 3 3 7 0 9 0 3 3 2 7 0 5 4 4] 72]
Test Case: 674 | Input/Output: [[4 5 3 6 6 1 7 3 6 1 9 0 1 1 1 1 0 2 2 0] 65]
Test Case: 675 | Input/Output: [[4 5 4 2 9 1 6 4 7 2 2 7 0 7 1 1 5 0 9 0] 89]
Test Case: 676 | Input/Output: [[4 5 4 3 2 8 0 7 7 3 5 2 0 8 1 9 4 4 4 0] 89]
Test Case: 677 | Input/Output: [[4 5 4 5 9 1 6 2 9 0 1 2 9 1 5 1 6 3 7 1] 92]
Test Case: 678 | Input/Output: [[4 5 6 2 2 3 3 0 3 3 7 1 5 5 1 2 4 6 0 5] 68]
Test Case: 679 | Input/Output: [[4 5 7 0 8 1 9 0 9 0 7 0 8 1 8 0 9 0 4 0] 80]
Test Case: 680 | Input/Output: [[4 5 8 2 4 3 1 2 2 5 2 5 7 1 8 1 4 4 4 0] 76]
Test Case: 681 | Input/Output: [[4 6 0 8 7 0 2 0 6 3 2 6 0 8 8 2 0 1 2 2] 67]
Test Case: 682 | Input/Output: [[4 6 3 1 7 1 2 1 1 0 4 2 4 6 1 8 9 0 4 1] 69]
Test Case: 683 | Input/Output: [[4 6 3 3 4 5 2 3 3 3 4 2 4 6 6 3 10 10 8 5] 121]
Test Case: 684 | Input/Output: [[4 6 3 4 1 0 9 0 6 0 10 2 8 5 3 7 1 7 3 5] 102]
Test Case: 685 | Input/Output: [[4 6 3 7 3 3 0 2 6 4 7 1 7 1 9 0 8 1 0 5] 90]
Test Case: 686 | Input/Output: [[4 6 5 3 3 5 0 5 9 0 8 2 6 1 4 3 1 7 2 4] 89]
Test Case: 687 | Input/Output: [[4 6 6 0 8 2 6 4 9 0 8 0 1 7 9 1 4 0 3 5] 108]
Test Case: 688 | Input/Output: [[4 6 9 0 4 5 2 4 1 3 3 7 2 0 6 0 2 5 5 0] 79]
Test Case: 689 | Input/Output: [[4 6 9 0 5 5 9 0 10 9 0 7 2 3 2 7 0 2 8 0] 115]
Test Case: 690 | Input/Output: [[4 6 9 1 2 7 7 1 5 0 1 4 7 3 3 4 0 0 9 0] 87]
Test Case: 691 | Input/Output: [[4 6 10 8 2 8 0 1 3 1 9 0 1 6 3 1 2 9 1 0] 103]
Test Case: 692 | Input/Output: [[5 0 3 3 6 0 4 1 6 0 0 8 2 8 2 6 9 1 8 1] 83]
Test Case: 693 | Input/Output: [[5 0 4 0 6 3 8 1 4 6 0 4 8 1 9 0 8 1 8 1] 77]
Test Case: 694 | Input/Output: [[5 0 6 0 2 0 3 7 3 3 4 4 3 6 8 2 0 8 7 0] 74]
Test Case: 695 | Input/Output: [[5 0 7 1 10 0 8 1 9 4 5 3 1 3 6 1 1 5 5 8] 95]
Test Case: 696 | Input/Output: [[5 1 0 4 7 2 3 3 1 7 1 4 8 2 3 4 3 2 0 2] 65]
Test Case: 697 | Input/Output: [[5 1 0 6 7 3 9 1 5 0 4 5 6 2 5 4 5 1 2 5] 90]
Test Case: 698 | Input/Output: [[5 1 1 6 4 3 7 1 6 2 8 0 3 0 7 2 8 0 4 3] 71]
Test Case: 699 | Input/Output: [[5 1 2 8 7 3 5 3 6 3 10 5 5 9 1 2 2 2 8 4] 124]
Test Case: 700 | Input/Output: [[5 1 4 1 4 6 9 0 5 5 4 1 4 2 4 5 0 0 6 3] 82]
Test Case: 701 | Input/Output: [[5 2 0 5 9 1 9 0 0 7 6 4 9 0 1 6 8 1 3 3] 97]
Test Case: 702 | Input/Output: [[5 2 0 6 5 2 6 3 8 2 5 0 5 4 9 0 0 8 7 2] 84]
Test Case: 703 | Input/Output: [[5 2 5 1 2 8 8 2 6 1 9 0 5 4 8 1 5 3 2 4] 95]
Test Case: 704 | Input/Output: [[5 2 7 2 9 0 2 5 9 1 0 6 5 0 0 1 8 0 0 6] 68]
Test Case: 705 | Input/Output: [[5 2 8 1 10 7 2 1 5 0 8 7 3 0 3 9 1 8 2 8] 107]
Test Case: 706 | Input/Output: [[5 2 9 0 4 4 6 0 1 4 4 0 3 1 0 0 10 9 1 10] 83]
Test Case: 707 | Input/Output: [[5 3 0 6 9 1 1 9 7 1 7 3 7 1 4 0 10 3 7 4] 113]
Test Case: 708 | Input/Output: [[5 3 3 4 8 2 4 2 6 2 7 2 7 2 4 4 9 1 2 7] 90]
Test Case: 709 | Input/Output: [[5 3 4 2 6 1 8 0 4 5 5 0 8 0 0 3 8 0 8 0] 70]
Test Case: 710 | Input/Output: [[5 3 6 4 0 5 0 2 6 0 0 2 2 8 3 6 5 5 4 0] 73]
Test Case: 711 | Input/Output: [[5 3 7 2 0 9 7 0 9 1 2 7 4 2 2 8 7 1 2 3] 90]
Test Case: 712 | Input/Output: [[5 3 8 1 3 6 7 2 4 2 2 0 8 0 2 3 5 0 1 3] 65]
Test Case: 713 | Input/Output: [[5 4 3 4 0 0 6 2 3 7 2 0 4 3 5 0 1 1 6 1] 59]
Test Case: 714 | Input/Output: [[5 4 4 1 2 7 2 6 8 0 1 6 0 1 8 0 7 2 7 2] 73]
Test Case: 715 | Input/Output: [[5 4 5 1 7 3 3 7 7 3 5 2 1 4 2 8 7 3 1 6] 107]
Test Case: 716 | Input/Output: [[5 4 6 4 7 2 2 4 7 3 5 4 3 1 4 0 1 5 6 2] 87]
Test Case: 717 | Input/Output: [[5 4 7 3 0 2 3 0 9 1 0 0 3 4 10 0 10 8 2 1] 90]
Test Case: 718 | Input/Output: [[5 4 9 1 2 2 2 3 3 3 5 0 0 9 9 1 8 2 2 6] 88]
Test Case: 719 | Input/Output: [[5 5 2 6 5 2 2 6 5 0 4 1 1 1 7 2 2 8 6 3] 81]
Test Case: 720 | Input/Output: [[5 5 6 3 1 4 4 4 4 0 7 3 1 7 2 0 4 0 2 3] 72]
Test Case: 721 | Input/Output: [[5 5 7 0 1 5 7 1 5 1 9 0 4 0 9 1 6 2 1 4] 86]
Test Case: 722 | Input/Output: [[5 5 8 0 1 7 6 2 7 0 1 6 9 0 6 2 5 1 0 4] 83]
Test Case: 723 | Input/Output: [[6 0 0 8 10 4 5 8 0 2 1 0 5 4 0 5 3 10 7 1] 88]
Test Case: 724 | Input/Output: [[6 0 0 9 2 3 1 0 4 5 8 2 7 3 2 5 9 1 7 1] 91]
Test Case: 725 | Input/Output: [[6 0 1 0 7 0 6 1 3 7 4 1 8 1 5 3 2 4 5 0] 68]
Test Case: 726 | Input/Output: [[6 0 2 5 7 3 6 1 6 0 6 2 6 3 9 1 0 10 8 1] 96]
Test Case: 727 | Input/Output: [[6 0 3 5 6 2 7 3 9 0 4 2 1 8 4 0 5 3 0 5] 82]
Test Case: 728 | Input/Output: [[6 0 6 0 9 0 2 3 7 2 3 5 8 1 0 8 0 9 4 0] 73]
Test Case: 729 | Input/Output: [[6 0 6 3 2 2 8 1 7 3 1 6 0 1 7 0 8 1 1 7] 71]
Test Case: 730 | Input/Output: [[6 0 10 5 1 2 8 3 3 5 0 1 7 9 1 8 0 3 7 9] 105]
Test Case: 731 | Input/Output: [[6 1 1 0 4 4 0 5 1 1 2 1 7 1 3 1 5 0 5 4] 52]
Test Case: 732 | Input/Output: [[6 1 1 9 6 3 4 3 3 7 5 3 5 5 8 1 7 1 3 2] 102]
Test Case: 733 | Input/Output: [[6 1 2 1 0 5 6 2 0 0 4 5 3 1 0 9 5 5 4 1] 64]
Test Case: 734 | Input/Output: [[6 1 2 4 3 1 8 1 0 10 7 0 7 2 9 0 6 4 2 0] 82]
Test Case: 735 | Input/Output: [[6 1 5 1 2 0 0 8 5 3 8 1 6 2 2 2 1 4 0 3] 60]
Test Case: 736 | Input/Output: [[6 1 6 2 2 8 5 4 7 0 0 4 4 4 1 5 1 3 1 1] 70]
Test Case: 737 | Input/Output: [[6 1 7 0 2 4 6 0 2 0 0 8 0 6 0 3 5 0 4 3] 57]
Test Case: 738 | Input/Output: [[6 1 7 1 0 0 3 7 5 4 3 5 2 0 8 2 3 7 5 2] 84]
Test Case: 739 | Input/Output: [[6 2 0 4 9 1 7 1 7 2 4 6 8 1 5 5 3 3 3 1] 96]
Test Case: 740 | Input/Output: [[6 2 2 0 7 1 9 0 2 1 1 2 1 3 4 4 4 1 6 1] 57]
Test Case: 741 | Input/Output: [[6 2 2 1 3 5 6 1 3 7 5 3 3 5 2 6 9 1 7 1] 90]
Test Case: 742 | Input/Output: [[6 2 3 4 9 1 7 0 10 2 5 1 5 0 10 4 5 9 1 7] 109]
Test Case: 743 | Input/Output: [[6 2 4 2 3 4 2 5 9 1 1 3 2 7 8 1 9 0 1 0] 71]
Test Case: 744 | Input/Output: [[6 2 4 3 2 2 1 0 1 2 3 0 4 3 9 1 1 8 8 1] 62]
Test Case: 745 | Input/Output: [[6 2 4 5 10 2 5 2 5 5 4 2 3 7 3 0 2 10 9 5] 98]
Test Case: 746 | Input/Output: [[6 2 5 0 5 1 6 2 6 3 6 2 7 3 9 1 0 3 4 2] 82]
Test Case: 747 | Input/Output: [[6 2 7 3 5 1 9 0 3 4 7 2 3 0 8 2 5 1 0 3] 81]
Test Case: 748 | Input/Output: [[6 2 9 0 2 0 9 1 5 1 5 1 6 3 5 4 3 7 5 3] 87]
Test Case: 749 | Input/Output: [[6 2 9 0 7 0 4 0 3 7 5 2 9 0 6 2 6 0 0 3] 76]
Test Case: 750 | Input/Output: [[6 3 2 1 5 0 0 1 6 2 1 7 8 1 7 0 9 0 3 0] 62]
Test Case: 751 | Input/Output: [[6 3 6 2 5 3 7 1 5 3 8 0 5 3 3 7 7 3 3 3] 93]
Test Case: 752 | Input/Output: [[6 3 6 4 0 7 1 6 4 0 3 3 2 6 9 0 3 6 5 1] 75]
Test Case: 753 | Input/Output: [[6 3 8 1 5 4 6 0 9 0 7 0 5 1 4 2 0 5 3 5] 74]
Test Case: 754 | Input/Output: [[6 4 0 8 7 3 1 0 3 2 0 9 3 0 6 3 10 10 3 4] 96]
Test Case: 755 | Input/Output: [[6 4 4 5 6 0 3 4 9 1 7 1 2 7 0 2 5 5 5 3] 95]
Test Case: 756 | Input/Output: [[6 4 5 2 0 3 9 0 4 3 1 9 9 0 2 1 3 2 6 3] 86]
Test Case: 757 | Input/Output: [[6 4 7 3 9 1 1 5 5 0 5 3 1 8 9 0 6 0 8 1] 99]
Test Case: 758 | Input/Output: [[6 4 9 1 1 9 10 5 2 4 5 7 0 9 0 0 4 9 1 6] 119]
Test Case: 759 | Input/Output: [[7 0 0 6 7 2 8 0 6 0 2 8 1 4 8 2 1 3 1 5] 73]
Test Case: 760 | Input/Output: [[7 0 0 10 8 2 6 0 3 4 8 0 10 7 3 1 8 10 7 9] 128]
Test Case: 761 | Input/Output: [[7 0 1 9 2 8 6 4 7 0 8 1 1 9 4 4 9 0 1 1] 101]
Test Case: 762 | Input/Output: [[7 0 2 0 1 0 4 5 4 1 6 0 3 0 5 3 5 3 1 0] 50]
Test Case: 763 | Input/Output: [[7 0 2 2 3 1 3 1 5 1 8 0 3 1 0 5 10 9 1 1] 73]
Test Case: 764 | Input/Output: [[7 0 2 5 1 7 2 0 10 2 1 7 1 7 0 9 1 9 1 4] 88]
Test Case: 765 | Input/Output: [[7 0 4 0 6 1 6 3 4 5 2 2 6 3 6 1 2 3 7 1] 69]
Test Case: 766 | Input/Output: [[7 0 4 1 2 7 8 2 6 1 2 7 2 0 0 9 9 0 8 1] 82]
Test Case: 767 | Input/Output: [[7 0 4 4 6 2 7 2 9 0 7 0 8 0 2 8 5 4 8 1] 89]
Test Case: 768 | Input/Output: [[7 0 4 5 0 1 9 0 5 3 9 0 0 9 7 0 8 0 8 0] 75]
Test Case: 769 | Input/Output: [[7 0 4 5 7 3 0 9 3 4 8 0 8 1 6 0 1 2 1 3] 72]
Test Case: 770 | Input/Output: [[7 0 4 5 8 0 6 1 6 1 0 2 10 9 1 9 1 10 3 3] 115]
Test Case: 771 | Input/Output: [[7 0 5 3 7 2 5 5 5 2 5 4 5 4 4 6 6 4 1 7] 99]
Test Case: 772 | Input/Output: [[7 0 6 1 6 1 4 1 2 8 0 2 3 6 5 1 5 4 9 0] 71]
Test Case: 773 | Input/Output: [[7 1 1 2 9 1 1 6 3 5 2 5 3 1 4 4 2 0 1 4] 63]
Test Case: 774 | Input/Output: [[7 1 2 0 7 0 3 1 8 0 5 2 1 1 6 0 3 0 5 0] 52]
Test Case: 775 | Input/Output: [[7 1 2 2 1 0 9 0 7 2 2 2 8 1 0 9 2 7 9 0] 71]
Test Case: 776 | Input/Output: [[7 1 3 3 5 2 3 1 1 6 3 5 4 0 0 8 1 8 6 2] 69]
Test Case: 777 | Input/Output: [[7 1 4 2 1 5 3 6 9 1 5 3 4 2 6 1 5 0 7 1] 78]
Test Case: 778 | Input/Output: [[7 1 4 4 6 0 8 0 1 7 7 3 5 4 1 9 3 4 3 4] 89]
Test Case: 779 | Input/Output: [[7 1 5 3 3 3 3 1 2 3 6 0 8 2 7 1 5 0 7 0] 74]
Test Case: 780 | Input/Output: [[7 2 0 7 6 4 1 3 5 1 5 5 3 7 7 0 2 8 7 2] 100]
Test Case: 781 | Input/Output: [[7 2 0 10 10 4 4 8 0 4 3 6 1 2 6 6 3 7 3 10] 114]
Test Case: 782 | Input/Output: [[7 2 2 1 2 0 2 6 5 5 5 0 1 3 2 3 0 1 8 0] 60]
Test Case: 783 | Input/Output: [[7 2 2 6 1 7 10 2 8 2 6 5 1 1 0 5 1 4 6 9] 97]
Test Case: 784 | Input/Output: [[7 2 2 7 2 2 4 6 4 3 5 3 9 1 2 0 3 0 0 1] 69]
Test Case: 785 | Input/Output: [[7 2 2 7 2 3 5 5 3 0 8 1 5 3 2 0 7 3 9 0] 86]
Test Case: 786 | Input/Output: [[7 2 4 2 3 6 6 4 6 0 6 3 6 3 8 0 0 0 0 6] 78]
Test Case: 787 | Input/Output: [[7 2 4 5 3 0 4 6 3 1 1 9 4 0 4 1 4 5 9 0] 79]
Test Case: 788 | Input/Output: [[7 2 4 6 6 1 1 1 7 2 3 1 3 6 6 0 0 2 2 4] 70]
Test Case: 789 | Input/Output: [[7 2 6 1 2 8 1 1 9 1 9 0 8 0 3 5 8 0 4 2] 87]
Test Case: 790 | Input/Output: [[7 2 8 0 8 2 10 7 1 3 4 5 5 3 3 0 3 10 7 2] 111]
Test Case: 791 | Input/Output: [[7 2 8 1 9 1 0 6 6 1 10 8 1 3 1 2 1 9 1 9] 95]
Test Case: 792 | Input/Output: [[7 2 9 0 3 0 0 0 9 0 7 2 6 1 0 7 3 0 6 0] 62]
Test Case: 793 | Input/Output: [[7 2 10 4 1 6 2 0 2 0 0 6 1 4 4 7 2 8 2 0] 73]
Test Case: 794 | Input/Output: [[7 3 2 6 5 2 2 1 3 7 5 0 8 1 7 2 1 4 0 5] 78]
Test Case: 795 | Input/Output: [[7 3 2 8 10 2 7 8 2 7 0 6 0 5 1 7 2 1 9 4] 119]
Test Case: 796 | Input/Output: [[7 3 6 1 9 1 3 6 5 2 8 0 9 1 3 3 5 5 0 0] 89]
Test Case: 797 | Input/Output: [[7 3 8 1 6 1 3 0 5 4 6 2 8 2 3 5 8 2 8 0] 101]
Test Case: 798 | Input/Output: [[7 3 10 5 3 3 1 0 4 6 0 9 1 4 5 7 1 9 1 9] 110]
Test Case: 799 | Input/Output: [[8 0 1 6 2 3 7 3 10 0 6 7 0 2 4 9 1 10 2 3] 110]
Test Case: 800 | Input/Output: [[8 0 1 9 2 4 5 5 7 2 9 1 2 2 1 8 6 0 2 3] 88]
Test Case: 801 | Input/Output: [[8 0 2 1 7 1 10 8 0 5 5 9 1 0 9 6 3 7 3 1] 103]
Test Case: 802 | Input/Output: [[8 0 2 3 7 1 3 2 2 0 4 4 8 1 7 2 5 3 2 7] 71]
Test Case: 803 | Input/Output: [[8 0 4 2 8 2 9 0 1 8 9 0 10 1 1 0 5 6 4 10] 99]
Test Case: 804 | Input/Output: [[8 0 5 2 5 4 4 0 4 4 10 0 5 5 4 7 0 10 9 4] 95]
Test Case: 805 | Input/Output: [[8 0 6 4 7 2 0 10 4 0 10 1 4 3 3 2 3 10 10 10] 113]
Test Case: 806 | Input/Output: [[8 0 6 4 8 2 8 0 5 2 5 0 3 2 4 5 9 1 0 8] 96]
Test Case: 807 | Input/Output: [[8 0 7 3 1 9 7 1 8 2 1 7 8 2 7 1 4 6 8 1] 115]
Test Case: 808 | Input/Output: [[8 0 8 1 9 0 6 0 8 0 4 6 4 5 8 0 6 4 1 3] 86]
Test Case: 809 | Input/Output: [[8 1 1 9 8 2 8 0 8 2 7 1 2 0 9 1 0 2 7 0] 99]
Test Case: 810 | Input/Output: [[8 1 2 2 7 1 2 1 6 2 6 2 6 4 1 6 4 5 9 0] 76]
Test Case: 811 | Input/Output: [[8 1 3 0 6 0 1 6 1 6 1 5 5 2 7 1 0 4 7 1] 65]
Test Case: 812 | Input/Output: [[8 1 3 1 4 1 3 6 8 1 10 8 0 6 4 7 0 10 3 1] 100]
Test Case: 813 | Input/Output: [[8 1 4 0 9 1 4 3 6 3 4 2 5 5 9 1 7 1 7 1] 101]
Test Case: 814 | Input/Output: [[8 1 4 4 1 9 1 3 9 0 6 3 7 0 7 1 0 10 5 0] 85]
Test Case: 815 | Input/Output: [[8 1 6 0 6 2 6 1 6 4 9 1 7 1 6 4 8 0 2 0] 102]
Test Case: 816 | Input/Output: [[8 1 6 3 4 2 2 1 8 0 1 0 1 8 2 7 7 3 5 1] 75]
Test Case: 817 | Input/Output: [[8 1 9 0 8 0 9 0 5 2 9 0 2 3 10 1 4 5 5 4] 90]
Test Case: 818 | Input/Output: [[8 1 10 7 0 8 1 7 3 6 3 5 5 9 1 5 5 10 3 7] 141]
Test Case: 819 | Input/Output: [[8 2 0 4 10 1 0 5 3 2 8 4 4 8 0 7 1 10 6 1] 89]
Test Case: 820 | Input/Output: [[8 2 0 9 5 0 1 0 3 0 0 10 4 6 9 0 4 4 7 0] 85]
Test Case: 821 | Input/Output: [[8 2 2 7 8 2 2 7 4 4 2 4 5 3 0 8 1 2 2 6] 83]
Test Case: 822 | Input/Output: [[8 2 3 2 3 4 8 0 6 3 7 0 8 2 5 2 2 7 2 1] 83]
Test Case: 823 | Input/Output: [[8 2 3 6 4 2 2 2 3 4 3 5 6 1 5 0 4 0 4 0] 67]
Test Case: 824 | Input/Output: [[8 2 4 6 5 0 7 1 3 1 2 5 7 0 4 2 0 9 8 0] 83]
Test Case: 825 | Input/Output: [[8 2 5 1 4 2 4 3 5 1 6 3 3 6 8 1 4 6 9 0] 95]
Test Case: 826 | Input/Output: [[8 2 5 3 6 1 5 3 4 1 2 6 6 2 7 0 7 2 5 0] 80]
Test Case: 827 | Input/Output: [[8 2 5 3 8 2 7 3 10 1 6 8 0 7 0 0 5 4 6 8] 122]
Test Case: 828 | Input/Output: [[8 2 6 1 9 1 1 9 8 0 3 6 9 1 2 4 3 1 1 8] 100]
Test Case: 829 | Input/Output: [[8 2 6 2 2 6 3 1 7 0 8 2 7 0 4 0 10 0 10 10] 111]
Test Case: 830 | Input/Output: [[8 2 6 4 6 0 6 4 9 0 0 2 7 0 4 0 9 1 2 4] 97]
Test Case: 831 | Input/Output: [[8 2 8 0 3 0 3 2 9 1 3 0 9 1 3 1 2 8 6 0] 89]
Test Case: 832 | Input/Output: [[9 0 0 0 3 7 3 0 6 3 2 3 6 2 7 3 6 4 5 3] 86]
Test Case: 833 | Input/Output: [[9 0 0 8 10 4 2 9 1 7 0 0 10 1 6 1 5 4 6 9] 106]
Test Case: 834 | Input/Output: [[9 0 1 9 1 2 4 4 1 3 8 1 2 7 4 5 5 3 4 2] 76]
Test Case: 835 | Input/Output: [[9 0 2 2 10 1 8 2 6 0 2 6 2 0 0 5 2 10 5 2] 83]
Test Case: 836 | Input/Output: [[9 0 3 1 5 5 2 4 5 1 1 0 2 0 8 0 0 6 0 6] 60]
Test Case: 837 | Input/Output: [[9 0 3 2 4 3 3 5 8 1 0 4 0 2 6 4 4 3 9 0] 74]
Test Case: 838 | Input/Output: [[9 0 3 5 0 1 8 2 8 2 2 0 1 5 9 1 0 4 2 7] 79]
Test Case: 839 | Input/Output: [[9 0 3 7 2 4 5 1 6 4 6 4 3 6 3 4 9 0 2 2] 91]
Test Case: 840 | Input/Output: [[9 0 4 1 3 4 4 1 3 2 3 4 5 0 3 5 5 2 1 4] 63]
Test Case: 841 | Input/Output: [[9 0 5 0 7 0 6 0 3 7 5 5 2 7 8 1 2 3 3 4] 84]
Test Case: 842 | Input/Output: [[9 0 5 3 5 3 1 5 0 4 1 0 4 2 8 1 7 2 3 2] 65]
Test Case: 843 | Input/Output: [[9 0 6 1 9 1 7 3 1 3 9 1 1 8 6 1 8 1 6 3] 93]
Test Case: 844 | Input/Output: [[9 0 8 2 2 4 4 1 3 7 4 4 3 5 1 6 0 7 6 2] 84]
Test Case: 845 | Input/Output: [[9 0 9 1 3 6 9 0 3 1 2 5 7 1 2 5 7 0 7 1] 81]
Test Case: 846 | Input/Output: [[9 1 2 1 0 8 4 4 5 1 8 2 8 2 9 0 2 0 7 0] 92]
Test Case: 847 | Input/Output: [[9 1 2 1 7 3 8 1 6 4 2 8 7 3 2 3 9 0 5 1] 103]
Test Case: 848 | Input/Output: [[9 1 2 3 0 9 1 0 5 2 7 2 4 1 3 2 7 3 7 2] 79]
Test Case: 849 | Input/Output: [[9 1 3 7 2 5 7 2 2 4 9 0 6 2 9 0 10 6 4 4] 107]
Test Case: 850 | Input/Output: [[9 1 4 3 0 1 1 5 7 1 1 6 4 5 4 5 4 6 2 3] 78]
Test Case: 851 | Input/Output: [[9 1 4 6 6 3 4 2 3 7 0 3 5 0 6 3 8 2 0 9] 91]
Test Case: 852 | Input/Output: [[9 1 5 2 8 1 7 1 0 1 8 0 8 1 0 0 5 1 6 3] 72]
Test Case: 853 | Input/Output: [[9 1 5 4 1 3 1 8 3 3 7 0 1 2 7 2 6 3 3 3] 77]
Test Case: 854 | Input/Output: [[9 1 6 4 2 0 8 2 2 1 8 2 1 1 2 8 1 3 3 6] 82]
Test Case: 855 | Input/Output: [[9 1 6 4 4 0 6 2 4 4 5 3 10 1 2 8 2 9 1 10] 113]
Test Case: 856 | Input/Output: [[9 1 6 4 8 0 4 6 8 2 8 2 2 0 6 0 0 6 4 0] 108]
Test Case: 857 | Input/Output: [[9 1 7 1 8 0 2 3 8 1 5 3 7 0 0 1 3 6 0 0] 72]
Test Case: 858 | Input/Output: [[9 1 7 2 1 1 8 0 8 2 4 1 2 6 3 6 8 1 2 1] 84]
Test Case: 859 | Input/Output: [[9 1 8 0 8 0 7 3 3 6 2 0 3 1 3 4 1 5 6 3] 84]
Test Case: 860 | Input/Output: [[9 1 8 1 3 3 8 0 5 5 3 0 10 2 8 5 2 10 3 0] 112]
Test Case: 861 | Input/Output: [[9 1 9 1 9 0 5 0 0 1 10 1 3 9 0 3 7 10 7 3] 120]
Test Case: 862 | Input/Output: [[9 1 10 2 0 4 5 9 1 0 3 0 7 9 1 8 1 10 7 5] 112]
Test Case: 863 | Input/Output: [[10 0 4 3 7 6 2 7 1 2 8 7 1 8 1 6 3 4 6 6] 109]
Test Case: 864 | Input/Output: [[10 1 0 6 1 3 5 6 1 2 6 8 0 0 2 9 0 5 5 7] 78]
Test Case: 865 | Input/Output: [[10 1 5 0 10 7 3 7 1 1 2 2 0 2 1 0 3 8 2 10] 95]
Test Case: 866 | Input/Output: [[10 1 8 2 1 6 2 8 0 8 0 7 3 2 1 9 1 7 3 6] 103]
Test Case: 867 | Input/Output: [[10 2 7 0 4 6 2 1 3 7 0 4 2 3 3 5 5 1 9 1] 85]
Test Case: 868 | Input/Output: [[10 2 8 6 1 2 1 5 2 4 5 5 2 3 5 3 2 10 1 5] 98]
Test Case: 869 | Input/Output: [[10 3 0 0 2 5 2 6 1 8 1 8 2 9 1 4 2 6 4 5] 95]
Test Case: 870 | Input/Output: [[10 4 6 2 1 9 0 3 2 4 6 6 0 5 4 1 0 9 1 6] 97]
Test Case: 871 | Input/Output: [[10 4 6 3 1 7 3 3 3 1 9 3 0 2 8 7 1 9 1 3] 110]
Test Case: 872 | Input/Output: [[10 5 0 8 0 8 0 5 4 6 3 4 1 0 0 1 7 10 7 0] 84]
Test Case: 873 | Input/Output: [[10 6 4 5 5 1 8 9 0 5 0 5 4 6 1 9 0 6 4 1] 105]
Test Case: 874 | Input/Output: [[10 7 2 9 1 8 0 1 1 7 3 4 5 3 5 3 0 10 2 1] 103]
Test Case: 875 | Input/Output: [[10 8 0 2 0 3 3 3 4 7 3 2 6 1 9 2 4 10 10 0] 99]
Test Case: 876 | Input/Output: [[10 8 1 2 8 0 5 4 2 9 0 2 5 6 3 4 6 4 6 1] 99]
Test Case: 877 | Input/Output: [[0 1 6 3 3 6 2 6 0 9 5 2 0 8 9 1 9 0 10 7 8] 104]
Test Case: 878 | Input/Output: [[0 4 2 6 4 0 4 2 0 3 2 2 9 1 8 0 2 1 5 5 7] 75]
Test Case: 879 | Input/Output: [[0 4 8 2 8 0 2 7 2 0 5 1 1 6 4 2 2 7 8 2 10] 89]
Test Case: 880 | Input/Output: [[0 6 3 0 2 4 8 0 3 2 3 3 6 0 1 5 4 1 9 1 2] 63]
Test Case: 881 | Input/Output: [[0 7 7 0 3 1 8 0 9 0 2 3 9 1 8 1 3 6 10 10 5] 101]
Test Case: 882 | Input/Output: [[0 8 7 3 1 3 8 0 5 0 4 1 1 9 5 5 7 1 8 2 10] 101]
Test Case: 883 | Input/Output: [[0 8 9 0 2 3 7 0 7 3 5 1 3 6 2 8 6 0 10 10 5] 106]
Test Case: 884 | Input/Output: [[0 9 2 5 1 4 4 2 2 1 5 0 9 0 5 3 3 6 5 5 10] 81]
Test Case: 885 | Input/Output: [[0 9 4 4 0 8 6 0 9 1 3 6 2 6 6 0 1 7 10 8 3] 96]
Test Case: 886 | Input/Output: [[0 9 4 6 3 6 1 7 3 1 4 6 4 1 3 0 6 0 5 5 5] 86]
Test Case: 887 | Input/Output: [[0 10 0 10 4 5 8 1 4 3 1 8 4 4 6 2 7 1 8 2 10] 102]
Test Case: 888 | Input/Output: [[1 0 6 4 7 0 8 2 8 0 9 1 4 4 9 0 9 0 9 1 2] 103]
Test Case: 889 | Input/Output: [[1 1 8 0 4 0 8 0 4 2 3 7 6 0 3 7 5 4 10 8 5] 97]
Test Case: 890 | Input/Output: [[1 3 1 6 9 0 8 2 8 2 1 0 5 2 5 1 9 0 4 6 10] 92]
Test Case: 891 | Input/Output: [[1 3 7 2 9 0 0 5 2 1 2 3 6 2 7 1 9 0 1 9 8] 78]
Test Case: 892 | Input/Output: [[1 3 9 0 0 10 8 2 8 1 9 1 7 0 6 0 4 1 5 5 0] 103]
Test Case: 893 | Input/Output: [[1 4 2 7 7 1 8 2 7 2 9 1 6 0 5 4 8 1 9 1 2] 100]
Test Case: 894 | Input/Output: [[1 5 4 5 5 3 3 5 5 1 6 4 5 1 9 0 4 6 3 7 10] 100]
Test Case: 895 | Input/Output: [[1 6 0 9 3 0 8 0 3 1 5 2 8 2 3 4 1 7 10 5 8] 89]
Test Case: 896 | Input/Output: [[1 6 2 1 8 0 2 2 0 3 3 5 1 6 2 8 3 0 10 0 1] 67]
Test Case: 897 | Input/Output: [[1 6 9 1 1 9 9 1 2 5 5 5 8 1 4 3 6 4 10 5 5] 130]
Test Case: 898 | Input/Output: [[1 7 1 8 5 3 8 0 1 2 3 2 1 4 8 0 1 1 6 4 7] 73]
Test Case: 899 | Input/Output: [[1 8 4 5 2 0 2 3 3 5 5 2 6 3 5 3 2 5 9 1 3] 77]
Test Case: 900 | Input/Output: [[1 8 5 0 8 0 9 0 4 6 1 2 8 1 3 1 1 9 10 2 2] 92]
Test Case: 901 | Input/Output: [[1 8 6 2 2 7 1 4 5 1 7 3 2 4 7 0 4 5 5 5 10] 91]
Test Case: 902 | Input/Output: [[1 9 7 0 2 1 9 0 1 9 6 4 7 1 9 0 6 0 10 0 4] 106]
Test Case: 903 | Input/Output: [[2 0 3 6 6 1 2 7 5 3 5 4 2 1 0 8 9 1 8 2 0] 83]
Test Case: 904 | Input/Output: [[2 0 5 4 9 1 7 2 0 4 6 1 3 3 7 2 8 2 2 8 10] 95]
Test Case: 905 | Input/Output: [[2 0 7 2 4 1 8 2 2 6 9 1 0 7 6 3 6 2 10 10 6] 96]
Test Case: 906 | Input/Output: [[2 0 8 0 2 8 0 3 8 1 4 5 6 3 9 1 4 4 10 3 3] 88]
Test Case: 907 | Input/Output: [[2 1 1 5 9 0 8 1 9 0 9 1 4 5 9 1 5 5 7 3 2] 103]
Test Case: 908 | Input/Output: [[2 1 8 1 0 1 1 5 4 0 3 5 5 2 6 4 9 0 8 2 3] 79]
Test Case: 909 | Input/Output: [[2 1 8 2 9 1 6 0 9 0 7 3 0 5 0 10 6 3 6 4 3] 106]
Test Case: 910 | Input/Output: [[2 2 2 3 3 0 4 3 4 6 2 2 5 4 9 0 9 1 10 9 2] 94]
Test Case: 911 | Input/Output: [[2 2 3 1 5 5 1 7 0 4 0 2 8 1 3 6 4 0 6 4 4] 69]
Test Case: 912 | Input/Output: [[2 2 5 2 2 0 2 1 0 10 6 3 1 3 2 7 0 10 10 1 9] 94]
Test Case: 913 | Input/Output: [[2 3 0 6 0 6 8 0 4 2 3 4 2 4 7 3 1 5 0 10 7] 78]
Test Case: 914 | Input/Output: [[2 3 3 6 2 1 3 3 9 0 0 4 4 1 1 5 5 3 9 1 1] 66]
Test Case: 915 | Input/Output: [[2 3 7 2 3 7 8 0 5 1 3 6 9 1 4 1 2 8 9 1 2] 105]
Test Case: 916 | Input/Output: [[2 6 9 0 6 3 0 0 2 5 3 7 8 2 3 5 3 4 5 5 7] 96]
Test Case: 917 | Input/Output: [[2 8 5 5 8 0 3 7 0 9 6 3 2 1 0 7 5 4 5 5 4] 102]
Test Case: 918 | Input/Output: [[2 8 8 0 4 0 5 5 2 0 4 6 9 0 3 7 2 7 3 7 2] 105]
Test Case: 919 | Input/Output: [[3 0 0 9 6 1 8 0 7 3 0 6 0 1 5 1 5 5 4 6 6] 80]
Test Case: 920 | Input/Output: [[3 1 0 2 7 0 7 2 5 4 4 6 8 1 4 0 2 2 9 1 2] 78]
Test Case: 921 | Input/Output: [[3 1 4 4 4 6 6 2 2 4 6 4 8 1 8 2 6 1 10 4 1] 107]
Test Case: 922 | Input/Output: [[3 2 2 7 0 2 6 4 6 2 0 9 5 5 4 6 3 3 10 10 4] 106]
Test Case: 923 | Input/Output: [[3 3 5 3 2 7 3 2 5 1 2 2 2 3 3 2 0 0 7 3 3] 61]
Test Case: 924 | Input/Output: [[3 4 4 4 8 2 8 1 9 1 8 1 7 2 5 3 8 1 9 1 9] 114]
Test Case: 925 | Input/Output: [[3 4 5 1 2 7 7 0 3 2 1 2 0 5 3 7 2 0 9 1 0] 66]
Test Case: 926 | Input/Output: [[3 4 5 3 1 0 9 0 7 3 2 6 7 0 4 3 9 0 3 7 2] 80]
Test Case: 927 | Input/Output: [[3 4 5 3 4 6 4 1 1 0 1 7 7 2 1 4 6 2 2 8 9] 84]
Test Case: 928 | Input/Output: [[4 0 3 1 0 9 5 2 2 0 5 2 0 3 9 1 1 3 9 1 3] 64]
Test Case: 929 | Input/Output: [[4 0 6 3 0 8 8 2 4 6 2 7 4 2 5 1 1 1 10 1 6] 87]
Test Case: 930 | Input/Output: [[4 1 2 8 9 0 0 0 5 2 8 2 2 8 8 0 7 0 8 2 3] 98]
Test Case: 931 | Input/Output: [[4 1 8 0 5 3 1 5 5 5 4 6 1 6 8 0 8 2 10 2 9] 108]
Test Case: 932 | Input/Output: [[4 2 3 3 9 1 1 8 3 4 3 1 0 1 3 3 9 1 4 6 7] 81]
Test Case: 933 | Input/Output: [[4 2 9 0 6 2 0 8 6 4 9 0 7 3 7 1 1 6 0 10 10] 111]
Test Case: 934 | Input/Output: [[4 3 0 10 8 1 2 6 0 4 2 6 4 5 8 1 8 2 4 6 4] 100]
Test Case: 935 | Input/Output: [[4 3 7 1 5 5 0 4 8 1 4 4 7 3 1 7 7 3 8 2 3] 96]
Test Case: 936 | Input/Output: [[4 3 9 0 3 5 7 1 8 1 3 2 8 1 0 6 3 7 10 6 8] 105]
Test Case: 937 | Input/Output: [[4 4 0 4 9 0 1 7 5 1 2 1 8 0 1 7 7 2 2 8 1] 74]
Test Case: 938 | Input/Output: [[4 5 5 0 1 3 9 1 2 4 2 6 1 1 6 2 7 2 5 5 0] 73]
Test Case: 939 | Input/Output: [[4 6 0 8 3 4 4 5 6 0 2 2 7 2 9 0 0 2 7 3 6] 80]
Test Case: 940 | Input/Output: [[4 6 9 0 9 0 7 3 6 0 4 0 2 6 1 0 0 1 2 8 7] 90]
Test Case: 941 | Input/Output: [[5 0 0 10 0 7 8 0 0 5 6 2 1 6 3 3 9 1 10 5 3] 94]
Test Case: 942 | Input/Output: [[5 0 1 5 5 1 1 3 1 9 1 2 8 2 2 2 9 1 9 1 7] 87]
Test Case: 943 | Input/Output: [[5 0 7 1 7 2 5 0 1 8 7 1 2 1 3 3 7 0 8 2 2] 72]
Test Case: 944 | Input/Output: [[5 0 9 0 0 5 6 1 1 1 6 1 9 1 6 1 1 0 0 10 8] 77]
Test Case: 945 | Input/Output: [[5 1 4 3 5 1 3 7 8 2 2 7 8 2 7 2 8 2 10 7 10] 131]
Test Case: 946 | Input/Output: [[5 1 6 1 5 0 3 7 3 2 8 2 6 4 4 1 8 2 10 9 4] 114]
Test Case: 947 | Input/Output: [[5 1 8 0 3 5 7 0 4 4 8 1 0 8 7 0 0 5 3 7 6] 82]
Test Case: 948 | Input/Output: [[5 2 3 6 3 3 7 0 6 4 3 6 7 0 9 0 8 2 9 1 10] 106]
Test Case: 949 | Input/Output: [[5 3 2 0 2 3 8 1 8 1 0 5 6 2 2 2 0 2 7 3 10] 72]
Test Case: 950 | Input/Output: [[5 3 2 5 8 1 5 4 7 3 3 6 0 7 7 1 9 1 10 4 10] 114]
Test Case: 951 | Input/Output: [[5 4 3 4 7 3 8 1 3 1 7 1 6 2 8 2 9 0 6 4 0] 101]
Test Case: 952 | Input/Output: [[5 4 3 5 0 0 5 1 6 2 2 2 7 2 3 3 1 7 9 1 6] 74]
Test Case: 953 | Input/Output: [[5 4 7 3 4 5 8 2 9 1 3 6 9 0 6 2 0 9 5 5 2] 111]
Test Case: 954 | Input/Output: [[6 2 1 5 8 1 0 6 3 0 2 7 2 3 2 7 3 1 7 3 0] 69]
Test Case: 955 | Input/Output: [[6 3 1 6 1 3 7 0 9 0 4 4 6 1 2 1 4 2 1 9 3] 73]
Test Case: 956 | Input/Output: [[6 3 1 8 0 9 6 3 9 1 4 4 1 3 7 0 3 1 6 4 0] 83]
Test Case: 957 | Input/Output: [[6 3 5 3 8 1 4 3 3 0 4 2 2 5 9 0 0 2 10 1 1] 72]
Test Case: 958 | Input/Output: [[6 3 7 2 1 5 8 2 8 1 0 1 7 3 3 6 7 0 4 6 3] 94]
Test Case: 959 | Input/Output: [[6 3 8 1 8 2 2 7 0 1 6 3 2 1 1 3 6 1 10 2 10] 85]
Test Case: 960 | Input/Output: [[6 4 5 1 4 6 4 2 5 3 0 5 3 7 8 1 4 6 7 3 2] 110]
Test Case: 961 | Input/Output: [[6 4 7 1 8 2 4 4 8 0 6 4 2 6 7 2 8 1 7 3 9] 112]
Test Case: 962 | Input/Output: [[6 4 9 1 6 0 1 9 3 4 8 0 9 1 3 4 7 3 2 8 9] 120]
Test Case: 963 | Input/Output: [[7 0 7 3 8 1 3 3 6 3 0 7 5 4 8 0 7 3 10 4 9] 116]
Test Case: 964 | Input/Output: [[7 1 5 2 2 3 0 10 2 5 3 1 1 9 8 2 4 3 6 4 2] 94]
Test Case: 965 | Input/Output: [[7 1 7 2 6 4 8 0 7 1 4 4 2 4 1 5 8 0 4 6 8] 97]
Test Case: 966 | Input/Output: [[7 1 9 0 5 2 8 1 4 1 7 2 2 8 3 0 6 2 10 7 0] 88]
Test Case: 967 | Input/Output: [[7 1 9 0 6 1 0 9 9 1 0 0 1 4 1 2 4 1 9 1 6] 72]
Test Case: 968 | Input/Output: [[7 1 9 1 5 5 1 0 4 1 1 8 8 2 5 3 5 2 10 4 7] 100]
Test Case: 969 | Input/Output: [[7 2 4 1 9 0 5 3 1 2 3 1 5 2 6 0 8 0 10 0 7] 76]
Test Case: 970 | Input/Output: [[7 2 4 3 8 0 3 4 8 0 9 1 8 1 3 3 3 0 4 6 0] 85]
Test Case: 971 | Input/Output: [[7 2 7 2 0 0 4 1 1 9 0 10 0 10 4 3 0 4 10 3 9] 90]
Test Case: 972 | Input/Output: [[7 3 5 0 6 1 0 10 7 2 6 3 7 1 1 2 3 0 10 10 1] 97]
Test Case: 973 | Input/Output: [[7 3 5 2 4 6 0 2 7 1 9 0 6 0 5 2 8 0 10 1 5] 88]
Test Case: 974 | Input/Output: [[7 3 5 2 8 0 0 3 8 0 6 1 3 4 7 3 0 9 3 7 5] 89]
Test Case: 975 | Input/Output: [[7 3 8 2 6 0 1 0 2 1 7 0 1 1 6 4 3 2 8 2 0] 81]
Test Case: 976 | Input/Output: [[8 0 2 0 4 4 0 8 4 2 3 2 1 6 9 0 9 1 5 5 1] 79]
Test Case: 977 | Input/Output: [[8 0 4 5 4 4 1 6 0 9 5 1 2 4 3 6 1 2 10 8 0] 83]
Test Case: 978 | Input/Output: [[8 0 6 1 0 6 0 1 4 0 9 0 2 7 9 0 9 1 9 1 8] 90]
Test Case: 979 | Input/Output: [[8 0 9 1 5 4 6 2 5 5 1 1 4 4 4 5 0 7 9 1 1] 88]
Test Case: 980 | Input/Output: [[8 1 0 1 1 8 4 4 5 0 9 0 5 1 6 2 1 0 7 3 1] 67]
Test Case: 981 | Input/Output: [[8 1 3 3 9 0 5 1 6 3 2 7 2 2 1 3 3 0 10 8 10] 87]
Test Case: 982 | Input/Output: [[8 1 6 4 0 4 0 4 6 0 0 10 7 0 2 3 3 4 9 1 4] 83]
Test Case: 983 | Input/Output: [[8 1 6 4 7 1 1 4 3 3 0 8 3 5 0 4 4 0 2 8 10] 89]
Test Case: 984 | Input/Output: [[8 1 9 0 6 2 9 0 3 6 4 5 7 1 2 7 3 2 2 8 3] 88]
Test Case: 985 | Input/Output: [[8 2 1 3 6 3 6 3 0 7 9 0 0 2 6 0 5 2 10 0 6] 80]
Test Case: 986 | Input/Output: [[8 2 1 7 1 8 3 1 2 3 1 3 4 2 0 7 6 3 5 5 5] 78]
Test Case: 987 | Input/Output: [[8 2 4 5 5 5 9 1 9 0 7 0 2 1 9 0 8 1 4 6 2] 110]
Test Case: 988 | Input/Output: [[8 2 5 2 9 1 6 1 3 0 7 0 7 0 3 0 8 0 7 3 6] 89]
Test Case: 989 | Input/Output: [[8 2 7 0 6 1 0 3 3 5 9 0 0 9 1 6 2 8 10 5 8] 110]
Test Case: 990 | Input/Output: [[8 2 8 0 1 3 9 0 8 0 9 0 7 3 9 0 8 1 0 10 6] 109]
Test Case: 991 | Input/Output: [[8 2 9 0 6 2 5 5 1 4 0 3 3 0 2 2 4 1 3 7 6] 83]
Test Case: 992 | Input/Output: [[9 0 0 7 2 5 4 0 9 0 5 0 3 1 5 2 6 3 10 0 0] 71]
Test Case: 993 | Input/Output: [[9 0 4 3 2 7 3 4 1 2 2 0 5 2 5 1 3 7 4 6 0] 74]
Test Case: 994 | Input/Output: [[9 0 4 5 0 7 4 3 4 4 1 3 9 1 2 0 2 0 6 4 5] 75]
Test Case: 995 | Input/Output: [[9 0 5 0 7 0 9 0 0 5 8 2 0 9 2 3 4 2 8 2 1] 76]
Test Case: 996 | Input/Output: [[9 0 6 2 9 0 7 0 7 1 3 4 6 2 5 1 6 3 9 1 0] 81]
Test Case: 997 | Input/Output: [[9 0 9 1 5 2 8 0 1 9 1 2 6 1 2 3 0 6 8 2 1] 82]
Test Case: 998 | Input/Output: [[9 1 2 1 9 0 3 7 7 1 5 3 2 2 6 1 1 2 10 1 6] 88]
Test Case: 999 | Input/Output: [[9 1 3 1 6 2 2 8 1 6 9 0 2 8 3 7 0 2 10 3 3] 93]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 994bc7fe4bb0d8330ff3b97ede81b749344ccefb
GitHub link = https://github.com/lspector/Clojush/commit/994bc7fe4bb0d8330ff3b97ede81b749344ccefb
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (#object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x1acc768 clojush.instructions.tag$tag_instruction_erc$fn__2160@1acc768] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x38caad07 clojush.instructions.tag$tagged_instruction_erc$fn__2166@38caad07] in1 integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472 0x85c3522 clojush.problems.software.bowling$make_bowling_error_function_from_cases$the_actual_bowling_error_function__7472@85c3522]
error-threshold = 0
evalpush-limit = 4000
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000000000
max-generations = 300
max-genome-size-in-initial-program = 200
max-point-evaluations = 1.0E101
max-points = 1600
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.problems.software.bowling$bowling_initial_report 0x129c760d clojush.problems.software.bowling$bowling_initial_report@129c760d]
problem-specific-report = #object[clojush.problems.software.bowling$bowling_report 0x180f33b2 clojush.problems.software.bowling$bowling_report@180f33b2]
random-screen = false
random-seed = 84 -127 113 -72 -3 33 -105 112 48 -48 -36 -61 -119 48 -74 -113
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- bowling problem report - generation 0
Test total error for best: 60434
Test mean error for best: 60.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 31
Correct output:    117 | Program output: 31
Correct output:    146 | Program output: 31
Correct output:    141 | Program output: 31
Correct output:    125 | Program output: 31
Correct output:    117 | Program output: 31
Correct output:    153 | Program output: 31
Correct output:     84 | Program output: 31
Correct output:     88 | Program output: 31
Correct output:     95 | Program output: 31
Correct output:    101 | Program output: 31
Correct output:     97 | Program output: 31
Correct output:    115 | Program output: 31
Correct output:    107 | Program output: 31
Correct output:     83 | Program output: 31
Correct output:    123 | Program output: 31
Correct output:    145 | Program output: 31
Correct output:    121 | Program output: 31
Correct output:    105 | Program output: 31
Correct output:    130 | Program output: 31
Correct output:     10 | Program output: 31
Correct output:    128 | Program output: 31
Correct output:    106 | Program output: 31
Correct output:     86 | Program output: 31
Correct output:     69 | Program output: 31
Correct output:    106 | Program output: 31
Correct output:    102 | Program output: 31
Correct output:     61 | Program output: 31
Correct output:    102 | Program output: 31
Correct output:     95 | Program output: 31
Correct output:     95 | Program output: 31
Correct output:    100 | Program output: 31
Correct output:    123 | Program output: 31
Correct output:     97 | Program output: 31
Correct output:     96 | Program output: 31
Correct output:    106 | Program output: 31
Correct output:    101 | Program output: 31
Correct output:    103 | Program output: 31
Correct output:     99 | Program output: 31
Correct output:     81 | Program output: 31
Correct output:    108 | Program output: 31
Correct output:     84 | Program output: 31
Correct output:    113 | Program output: 31
Correct output:    152 | Program output: 31
Correct output:     88 | Program output: 31
Correct output:     79 | Program output: 31
Correct output:     66 | Program output: 31
Correct output:     72 | Program output: 31
Correct output:     85 | Program output: 31
Correct output:    118 | Program output: 31
Correct output:     70 | Program output: 31
Correct output:     80 | Program output: 31
Correct output:     75 | Program output: 31
Correct output:     73 | Program output: 31
Correct output:     72 | Program output: 31
Correct output:      0 | Program output: 31
Correct output:     10 | Program output: 31
Correct output:     69 | Program output: 31
Correct output:     89 | Program output: 31
Correct output:     76 | Program output: 31
Correct output:     85 | Program output: 31
Correct output:     75 | Program output: 31
Correct output:    116 | Program output: 31
Correct output:     77 | Program output: 31
Correct output:    116 | Program output: 31
Correct output:     61 | Program output: 31
Correct output:     86 | Program output: 31
Correct output:     80 | Program output: 31
Correct output:    141 | Program output: 31
Correct output:     76 | Program output: 31
Correct output:     55 | Program output: 31
Correct output:     61 | Program output: 31
Correct output:    100 | Program output: 31
Correct output:    100 | Program output: 31
Correct output:    101 | Program output: 31
Correct output:     68 | Program output: 31
Correct output:    104 | Program output: 31
Correct output:    120 | Program output: 31
Correct output:     85 | Program output: 31
Correct output:     66 | Program output: 31
Correct output:     81 | Program output: 31
Correct output:    107 | Program output: 31
Correct output:     68 | Program output: 31
Correct output:    104 | Program output: 31
Correct output:    103 | Program output: 31
Correct output:     58 | Program output: 31
Correct output:     79 | Program output: 31
Correct output:     94 | Program output: 31
Correct output:    103 | Program output: 31
Correct output:     79 | Program output: 31
Correct output:    103 | Program output: 31
Correct output:     94 | Program output: 31
Correct output:    103 | Program output: 31
Correct output:    150 | Program output: 31
Correct output:     92 | Program output: 31
Correct output:    104 | Program output: 31
Correct output:     97 | Program output: 31
Correct output:    113 | Program output: 31
Correct output:     70 | Program output: 31
Correct output:     97 | Program output: 31
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_299} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup exec_k_when_autoconstructing (integer_swap integer_add integer_min boolean_yankdup boolean_and) (integer_yankdup) integer_mod boolean_flush integer_stackdepth exec_swap () (integer_swap) integer_mod boolean_rot boolean_yankdup integer_gt exec_k (exec_s_when_autoconstructing (exec_swap () (integer_dec boolean_eq integer_empty integer_div boolean_shove integer_shove boolean_yank integer_dup exec_empty exec_shove () exec_rot () (boolean_not exec_yankdup integer_fromboolean integer_sub integer_dup_items exec_dup_items integer_sub integer_gt) (integer_inc exec_if (boolean_yankdup exec_y_when_autoconstructing () exec_k (boolean_eq boolean_or exec_swap (integer_stackdepth exec_rot (exec_do*while (exec_do*count (boolean_invert_first_then_and boolean_eq exec_dup_times (integer_stackdepth boolean_xor exec_swap (integer_min exec_eq integer_shove tagged_299 exec_rot (exec_yank integer_max integer_inc integer_gte integer_sub boolean_invert_first_then_and exec_k_when_autoconstructing (integer_div boolean_dup_times boolean_shove integer_dec exec_k_when_autoconstructing (boolean_yankdup integer_pop integer_yank) (integer_dup_times integer_yank boolean_dup)) (boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) () ())) () ()) ())))) () ()) ()) ()) ()))) () ()) ())
Lexicase best errors: [269 86 115 110 94 86 122 53 57 64 70 66 84 76 52 92 114 90 74 99 21 97 75 55 38 75 71 30 71 64 64 69 92 66 65 75 70 72 68 50 77 53 82 121 57 48 35 41 54 87 39 49 44 42 41 31 21 38 58 45 54 44 85 46 85 30 55 49 110 45 24 30 69 69 70 37 73 89 54 35 50 76 37 73 72 27 48 63 72 48 72 63 72 119 61 73 66 82 39 66]
Lexicase best number of elite cases: 77
Lexicase best total error: 6656
Lexicase best mean error: 66.56
Lexicase best size: 199
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction tagged_976} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_invert_second_then_and integer_fromboolean exec_rot (exec_stackdepth integer_sub) (in1) (boolean_or) integer_empty exec_swap () () exec_s_when_autoconstructing (integer_eq integer_fromboolean exec_pop ()) (integer_sub exec_stackdepth exec_if (exec_y (integer_dup_times boolean_pop boolean_pop boolean_shove) exec_k_when_autoconstructing () (exec_y (exec_s_when_autoconstructing (boolean_shove) (exec_s_when_autoconstructing (integer_mult) (boolean_or integer_inc) (boolean_xor) integer_max integer_empty integer_dec) (exec_rot (exec_dup_items boolean_dup integer_dec integer_sub boolean_and exec_swap (boolean_dup) (boolean_yankdup) integer_lte) (boolean_swap) (integer_yankdup integer_flush exec_noop) integer_yank exec_rot (integer_rot) (integer_pop integer_mod integer_inc exec_k (integer_eq) (boolean_frominteger integer_div exec_swap () (boolean_rot) boolean_and boolean_yank) integer_eq boolean_and) (exec_y_when_autoconstructing () exec_s (tag_boolean_847 integer_stackdepth integer_max boolean_rot integer_rot integer_rot exec_stackdepth integer_shove) (exec_k_when_autoconstructing (integer_pop integer_mult integer_empty integer_dup_items exec_noop integer_dup_items) (exec_dup (exec_stackdepth) tagged_976) integer_dup integer_inc boolean_stackdepth integer_dup_items) (exec_s_when_autoconstructing (boolean_stackdepth) (integer_pop) (boolean_eq))))))) ()) ())
Zero cases best errors: [290 107 136 131 115 107 143 74 78 85 91 87 105 97 73 113 135 111 95 120 0 118 96 76 59 96 92 51 92 85 85 90 113 87 86 96 91 93 89 71 98 74 103 142 78 69 56 62 75 108 60 70 65 63 62 10 0 59 79 66 75 65 106 67 106 51 76 70 131 66 45 51 90 90 91 58 94 110 75 56 71 97 58 94 93 48 69 84 93 69 93 84 93 140 82 94 87 103 60 87]
Zero cases best number of elite cases: 2
Zero cases best number of zero cases: 2
Zero cases best total error: 8630
Zero cases best mean error: 86.3
Zero cases best size: 135
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 97 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 0.20
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 97 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_299} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup exec_k_when_autoconstructing (integer_swap integer_add integer_min boolean_yankdup boolean_and) (integer_yankdup) integer_mod boolean_flush integer_stackdepth exec_swap () (integer_swap) integer_mod boolean_rot boolean_yankdup integer_gt exec_k (exec_s_when_autoconstructing (exec_swap () (integer_dec boolean_eq integer_empty integer_div boolean_shove integer_shove boolean_yank integer_dup exec_empty exec_shove () exec_rot () (boolean_not exec_yankdup integer_fromboolean integer_sub integer_dup_items exec_dup_items integer_sub integer_gt) (integer_inc exec_if (boolean_yankdup exec_y_when_autoconstructing () exec_k (boolean_eq boolean_or exec_swap (integer_stackdepth exec_rot (exec_do*while (exec_do*count (boolean_invert_first_then_and boolean_eq exec_dup_times (integer_stackdepth boolean_xor exec_swap (integer_min exec_eq integer_shove tagged_299 exec_rot (exec_yank integer_max integer_inc integer_gte integer_sub boolean_invert_first_then_and exec_k_when_autoconstructing (integer_div boolean_dup_times boolean_shove integer_dec exec_k_when_autoconstructing (boolean_yankdup integer_pop integer_yank) (integer_dup_times integer_yank boolean_dup)) (boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) () ())) () ()) ())))) () ()) ()) ()) ()))) () ()) ())
Errors: [269 86 115 110 94 86 122 53 57 64 70 66 84 76 52 92 114 90 74 99 21 97 75 55 38 75 71 30 71 64 64 69 92 66 65 75 70 72 68 50 77 53 82 121 57 48 35 41 54 87 39 49 44 42 41 31 21 38 58 45 54 44 85 46 85 30 55 49 110 45 24 30 69 69 70 37 73 89 54 35 50 76 37 73 72 27 48 63 72 48 72 63 72 119 61 73 66 82 39 66]
Total: 6656
Mean: 66.56
Genome size: 141
Size: 199
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.8600002668794E10
Median total errors in population: 100000000000
Error averages by case: (7.86000068945E8 7.86000030973E8 7.86000036947E8 7.86000035917E8 7.86000032621E8 7.86000030973E8 7.86000038389E8 7.86000024175E8 7.86000024999E8 7.86000026441E8 7.86000027677E8 7.86000026853E8 7.86000030561E8 7.86000028913E8 7.86000023969E8 7.86000032209E8 7.86000036741E8 7.86000031797E8 7.86000028501E8 7.86000033651E8 7.86000009193E8 7.86000033239E8 7.86000028707E8 7.86000024587E8 7.86000021085E8 7.86000028707E8 7.86000027883E8 7.86000019437E8 7.86000027883E8 7.86000026441E8 7.86000026441E8 7.86000027471E8 7.86000032209E8 7.86000026853E8 7.86000026647E8 7.86000028707E8 7.86000027677E8 7.86000028089E8 7.86000027265E8 7.86000023557E8 7.86000029119E8 7.86000024175E8 7.86000030149E8 7.86000038183E8 7.86000024999E8 7.86000023145E8 7.86000020467E8 7.86000021703E8 7.86000024381E8 7.86000031179E8 7.86000021291E8 7.86000023351E8 7.86000022321E8 7.86000021909E8 7.86000021703E8 7.86000008107E8 7.86000009193E8 7.86000021085E8 7.86000025205E8 7.86000022527E8 7.86000024381E8 7.86000022321E8 7.86000030767E8 7.86000022733E8 7.86000030767E8 7.86000019437E8 7.86000024587E8 7.86000023351E8 7.86000035917E8 7.86000022527E8 7.86000018201E8 7.86000019437E8 7.86000027471E8 7.86000027471E8 7.86000027677E8 7.86000020879E8 7.86000028295E8 7.86000031591E8 7.86000024381E8 7.86000020467E8 7.86000023557E8 7.86000028913E8 7.86000020879E8 7.86000028295E8 7.86000028089E8 7.86000018819E8 7.86000023145E8 7.86000026235E8 7.86000028089E8 7.86000023145E8 7.86000028089E8 7.86000026235E8 7.86000028089E8 7.86000037771E8 7.86000025823E8 7.86000028295E8 7.86000026853E8 7.86000030149E8 7.86000021291E8 7.86000026853E8)
Error minima by case: (36 82 53 58 74 82 46 53 57 64 70 66 84 76 52 76 54 78 74 69 0 71 75 55 38 75 71 30 71 64 64 69 76 66 65 75 70 72 68 50 77 53 82 47 57 48 35 41 54 81 39 49 44 42 41 0 0 38 58 45 54 44 83 46 83 30 55 49 58 45 24 30 69 69 70 37 73 79 54 35 50 76 37 73 72 27 48 63 72 48 72 63 72 49 61 73 66 82 39 66)
Average genome size in population (length): 102.251
Average program size in population (points): 142.401
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 64603700
--- Timings ---
Current time: 1559324803891 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- bowling problem report - generation 1
Test total error for best: 20348
Test mean error for best: 20.34800
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 73
Correct output:    117 | Program output: 73
Correct output:    146 | Program output: 73
Correct output:    141 | Program output: 73
Correct output:    125 | Program output: 73
Correct output:    117 | Program output: 73
Correct output:    153 | Program output: 73
Correct output:     84 | Program output: 73
Correct output:     88 | Program output: 73
Correct output:     95 | Program output: 73
Correct output:    101 | Program output: 73
Correct output:     97 | Program output: 73
Correct output:    115 | Program output: 73
Correct output:    107 | Program output: 73
Correct output:     83 | Program output: 73
Correct output:    123 | Program output: 73
Correct output:    145 | Program output: 73
Correct output:    121 | Program output: 73
Correct output:    105 | Program output: 73
Correct output:    130 | Program output: 73
Correct output:     10 | Program output: 73
Correct output:    128 | Program output: 73
Correct output:    106 | Program output: 73
Correct output:     86 | Program output: 73
Correct output:     69 | Program output: 73
Correct output:    106 | Program output: 73
Correct output:    102 | Program output: 73
Correct output:     61 | Program output: 73
Correct output:    102 | Program output: 73
Correct output:     95 | Program output: 73
Correct output:     95 | Program output: 73
Correct output:    100 | Program output: 73
Correct output:    123 | Program output: 73
Correct output:     97 | Program output: 73
Correct output:     96 | Program output: 73
Correct output:    106 | Program output: 73
Correct output:    101 | Program output: 73
Correct output:    103 | Program output: 73
Correct output:     99 | Program output: 73
Correct output:     81 | Program output: 73
Correct output:    108 | Program output: 73
Correct output:     84 | Program output: 73
Correct output:    113 | Program output: 73
Correct output:    152 | Program output: 73
Correct output:     88 | Program output: 73
Correct output:     79 | Program output: 73
Correct output:     66 | Program output: 73
Correct output:     72 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:    118 | Program output: 73
Correct output:     70 | Program output: 73
Correct output:     80 | Program output: 73
Correct output:     75 | Program output: 73
Correct output:     73 | Program output: 73
Correct output:     72 | Program output: 73
Correct output:      0 | Program output: 73
Correct output:     10 | Program output: 73
Correct output:     69 | Program output: 73
Correct output:     89 | Program output: 73
Correct output:     76 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:     75 | Program output: 73
Correct output:    116 | Program output: 73
Correct output:     77 | Program output: 73
Correct output:    116 | Program output: 73
Correct output:     61 | Program output: 73
Correct output:     86 | Program output: 73
Correct output:     80 | Program output: 73
Correct output:    141 | Program output: 73
Correct output:     76 | Program output: 73
Correct output:     55 | Program output: 73
Correct output:     61 | Program output: 73
Correct output:    100 | Program output: 73
Correct output:    100 | Program output: 73
Correct output:    101 | Program output: 73
Correct output:     68 | Program output: 73
Correct output:    104 | Program output: 73
Correct output:    120 | Program output: 73
Correct output:     85 | Program output: 73
Correct output:     66 | Program output: 73
Correct output:     81 | Program output: 73
Correct output:    107 | Program output: 73
Correct output:     68 | Program output: 73
Correct output:    104 | Program output: 73
Correct output:    103 | Program output: 73
Correct output:     58 | Program output: 73
Correct output:     79 | Program output: 73
Correct output:     94 | Program output: 73
Correct output:    103 | Program output: 73
Correct output:     79 | Program output: 73
Correct output:    103 | Program output: 73
Correct output:     94 | Program output: 73
Correct output:    103 | Program output: 73
Correct output:    150 | Program output: 73
Correct output:     92 | Program output: 73
Correct output:    104 | Program output: 73
Correct output:     97 | Program output: 73
Correct output:    113 | Program output: 73
Correct output:     70 | Program output: 73
Correct output:     97 | Program output: 73
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup) () boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) () ()))
Lexicase best errors: [227 44 73 68 52 44 80 11 15 22 28 24 42 34 10 50 72 48 32 57 63 55 33 13 4 33 29 12 29 22 22 27 50 24 23 33 28 30 26 8 35 11 40 79 15 6 7 1 12 45 3 7 2 0 1 73 63 4 16 3 12 2 43 4 43 12 13 7 68 3 18 12 27 27 28 5 31 47 12 7 8 34 5 31 30 15 6 21 30 6 30 21 30 77 19 31 24 40 3 24]
Lexicase best number of elite cases: 65
Lexicase best total error: 2926
Lexicase best mean error: 29.26
Lexicase best size: 203
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_299} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup exec_k_when_autoconstructing (integer_swap integer_add integer_min boolean_yankdup boolean_and) (integer_yankdup) integer_mod boolean_flush integer_stackdepth exec_swap () (integer_swap) boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot boolean_xor exec_swap (integer_min exec_eq integer_shove tagged_299 exec_rot (exec_yank integer_max integer_inc integer_gte integer_sub boolean_invert_first_then_and exec_k_when_autoconstructing (integer_div boolean_dup_times boolean_shove integer_dec exec_k_when_autoconstructing (boolean_yankdup integer_pop integer_yank) (integer_dup_times integer_yank boolean_dup)) (boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and) () ()) () ()) ())) () ()) () ())) () ()) ())) ()))
Zero cases best errors: [239 56 85 80 64 56 92 23 27 34 40 36 54 46 22 62 84 60 44 69 51 67 45 25 8 45 41 0 41 34 34 39 62 36 35 45 40 42 38 20 47 23 52 91 27 18 5 11 24 57 9 19 14 12 11 61 51 8 28 15 24 14 55 16 55 0 25 19 80 15 6 0 39 39 40 7 43 59 24 5 20 46 7 43 42 3 18 33 42 18 42 33 42 89 31 43 36 52 9 36]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3854
Zero cases best mean error: 38.54
Zero cases best size: 216
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 14 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 19 14 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1)
Population mean number of elite cases: 0.16
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 14 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 19 14 0 0 0 0 0 0 0 0 2 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup) () boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) () ()))
Errors: [227 44 73 68 52 44 80 11 15 22 28 24 42 34 10 50 72 48 32 57 63 55 33 13 4 33 29 12 29 22 22 27 50 24 23 33 28 30 26 8 35 11 40 79 15 6 7 1 12 45 3 7 2 0 1 73 63 4 16 3 12 2 43 4 43 12 13 7 68 3 18 12 27 27 28 5 31 47 12 7 8 34 5 31 30 15 6 21 30 6 30 21 30 77 19 31 24 40 3 24]
Total: 2926
Mean: 29.26
Genome size: 156
Size: 203
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 3.60000719205E9
Median total errors in population: 6656
Error averages by case: (3.6000230027E7 3.6000083199E7 3.6000100889E7 3.6000097839E7 3.6000088079E7 3.6000083199E7 3.6000105159E7 3.6000063069E7 3.6000065509E7 3.6000069779E7 3.6000073439E7 3.6000070999E7 3.6000081979E7 3.6000077099E7 3.6000062459E7 3.6000086859E7 3.6000100279E7 3.6000085639E7 3.6000075879E7 3.6000091129E7 3.6000049947E7 3.6000089909E7 3.6000076489E7 3.6000064289E7 3.6000053927E7 3.6000076489E7 3.6000074049E7 3.6000049089E7 3.6000074049E7 3.6000069779E7 3.6000069779E7 3.6000072829E7 3.6000086859E7 3.6000070999E7 3.6000070389E7 3.6000076489E7 3.6000073439E7 3.6000074659E7 3.6000072219E7 3.6000061239E7 3.6000077709E7 3.6000063069E7 3.6000080759E7 3.6000104549E7 3.6000065509E7 3.6000060019E7 3.6000052105E7 3.6000055751E7 3.6000063679E7 3.6000083809E7 3.6000054535E7 3.6000060629E7 3.6000057579E7 3.6000056359E7 3.6000055751E7 3.6000059173E7 3.6000049947E7 3.6000053927E7 3.6000066119E7 3.6000058189E7 3.6000063679E7 3.6000057579E7 3.6000082589E7 3.6000058799E7 3.6000082589E7 3.6000049089E7 3.6000064289E7 3.6000060629E7 3.6000097839E7 3.6000058189E7 3.6000045525E7 3.6000049089E7 3.6000072829E7 3.6000072829E7 3.6000073439E7 3.6000053319E7 3.6000075269E7 3.6000085029E7 3.6000063679E7 3.6000052105E7 3.6000061239E7 3.6000077099E7 3.6000053319E7 3.6000075269E7 3.6000074659E7 3.6000047301E7 3.6000060019E7 3.6000069169E7 3.6000074659E7 3.6000060019E7 3.6000074659E7 3.6000069169E7 3.6000074659E7 3.6000103329E7 3.6000067949E7 3.6000075269E7 3.6000070999E7 3.6000080759E7 3.6000054535E7 3.6000070999E7)
Error minima by case: (36 36 7 12 28 36 0 11 15 22 28 24 38 34 10 30 8 32 32 23 0 25 33 13 2 33 29 0 29 22 22 27 30 24 23 33 28 30 26 8 35 11 40 1 15 6 1 1 12 35 3 7 2 0 1 0 0 2 16 3 12 2 37 4 37 0 13 7 12 3 0 0 27 27 28 1 31 33 12 1 8 34 1 31 30 0 6 21 30 6 30 21 30 3 19 31 24 40 3 24)
Average genome size in population (length): 134.741
Average program size in population (points): 187.422
Average percent parens in population: 0.279
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.057
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 113190000
--- Timings ---
Current time: 1559324850103 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- bowling problem report - generation 2
Test total error for best: 15114
Test mean error for best: 15.11400
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    146 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:    125 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    153 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    115 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     83 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:    145 | Program output: 97
Correct output:    121 | Program output: 97
Correct output:    105 | Program output: 97
Correct output:    130 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:    128 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:     96 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     99 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    108 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:    152 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:    118 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:     73 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:      0 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:     89 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     77 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     55 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    120 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     58 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:    150 | Program output: 97
Correct output:     92 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     97 | Program output: 97
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty integer_yankdup) integer_dup_times) exec_empty) (boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup)) boolean_and boolean_invert_first_then_and boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub boolean_pop integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup boolean_and boolean_invert_first_then_and boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) () ()) () ()))
Lexicase best errors: [183 0 29 24 8 0 36 33 29 22 16 20 2 10 34 6 28 4 12 13 107 11 11 31 48 11 15 56 15 22 22 17 6 20 21 11 16 14 18 36 9 33 4 35 29 38 51 45 32 1 47 37 42 44 45 117 107 48 28 41 32 42 1 40 1 56 31 37 24 41 62 56 17 17 16 49 13 3 32 51 36 10 49 13 14 59 38 23 14 38 14 23 14 33 25 13 20 4 47 20]
Lexicase best number of elite cases: 13
Lexicase best total error: 2978
Lexicase best mean error: 29.78
Lexicase best size: 261
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult exec_do*times () boolean_empty exec_shove () exec_empty exec_k () (integer_dup_times) exec_empty boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_items integer_dup integer_pop integer_yank boolean_shove integer_dup_times boolean_invert_first_then_and integer_fromboolean boolean_empty tag_integer_396 boolean_dup exec_empty boolean_yankdup integer_sub exec_noop boolean_empty tag_integer_396 integer_inc integer_pop exec_dup_times () exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ())
Zero cases best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 2252
Zero cases best mean error: 22.52
Zero cases best size: 154
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 118 1 1 1 118 2 3 3 1 2 1 1 11 1 118 1 1 1 18 1 1 4 14 1 2 20 2 3 3 1 1 2 2 1 1 1 1 13 1 2 1 118 3 9 13 10 6 1 17 6 22 213 10 10 18 14 2 13 6 22 1 9 1 20 4 6 1 13 14 20 1 1 1 16 1 1 6 13 13 1 16 1 1 8 9 1 1 9 1 1 1 118 4 1 2 1 17 2)
Population mean number of elite cases: 1.33
Count of perfect (error zero) individuals by case: (0 1 0 0 0 1 118 2 3 0 1 2 0 1 11 0 0 0 0 0 18 0 0 4 14 0 0 20 0 0 0 0 0 2 2 0 1 1 0 13 0 2 0 0 3 9 13 10 6 0 17 6 22 213 10 10 18 14 2 13 6 22 0 9 0 20 4 6 0 13 14 20 0 0 1 16 1 0 6 13 13 1 16 1 1 8 9 1 1 9 1 1 1 0 4 1 2 0 17 2)
Population mean number of perfect (error zero) cases: 0.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup exec_k_when_autoconstructing (integer_swap integer_add integer_min boolean_yankdup boolean_and) (integer_yankdup) integer_mod boolean_flush integer_stackdepth exec_swap () (integer_swap) boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup boolean_and boolean_invert_first_then_and boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) () ()))
Errors: [203 20 49 44 28 20 56 13 9 2 4 0 18 10 14 26 48 24 8 33 87 31 9 11 28 9 5 36 5 2 2 3 26 0 1 9 4 6 2 16 11 13 16 55 9 18 31 25 12 21 27 17 22 24 25 97 87 28 8 21 12 22 19 20 19 36 11 17 44 21 42 36 3 3 4 29 7 23 12 31 16 10 29 7 6 39 18 3 6 18 6 3 6 53 5 7 0 16 27 0]
Total: 2174
Mean: 21.74
Genome size: 163
Size: 208
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 5.700016845516E9
Median total errors in population: 3602
Error averages by case: (5.7000330091E7 5.7000177048E7 5.7000195425E7 5.700019225E7 5.7000182112E7 5.7000177048E7 5.700019987E7 5.7000156727E7 5.7000159041E7 5.7000163254E7 5.7000166974E7 5.7000164484E7 5.7000175786E7 5.7000170738E7 5.7000156166E7 5.7000180846E7 5.700019479E7 5.700017958E7 5.700016948E7 5.7000185277E7 5.7000194127E7 5.7000184011E7 5.7000170109E7 5.7000157869E7 5.700015201E7 5.7000170109E7 5.7000167599E7 5.7000154842E7 5.7000167599E7 5.7000163254E7 5.7000163254E7 5.7000166351E7 5.7000180846E7 5.7000164484E7 5.7000163867E7 5.7000170109E7 5.7000166974E7 5.7000168224E7 5.7000165728E7 5.7000155094E7 5.7000171369E7 5.7000156727E7 5.7000174524E7 5.7000199235E7 5.7000159041E7 5.7000154092E7 5.7000152693E7 5.7000151633E7 5.7000157292E7 5.7000177681E7 5.7000151853E7 5.7000154587E7 5.7000152282E7 5.7000151556E7 5.7000151633E7 5.7000203259E7 5.7000194127E7 5.700015201E7 5.7000159634E7 5.7000152703E7 5.7000157292E7 5.7000152282E7 5.7000176417E7 5.700015315E7 5.7000176417E7 5.7000154842E7 5.7000157869E7 5.7000154587E7 5.700019225E7 5.7000152703E7 5.700015843E7 5.7000154842E7 5.7000166351E7 5.7000166351E7 5.7000166974E7 5.7000152195E7 5.7000168851E7 5.7000178947E7 5.7000157292E7 5.7000152693E7 5.7000155094E7 5.7000170738E7 5.7000152195E7 5.7000168851E7 5.7000168224E7 5.7000156577E7 5.7000154092E7 5.7000162641E7 5.7000168224E7 5.7000154092E7 5.7000168224E7 5.7000162641E7 5.7000168224E7 5.7000197965E7 5.7000161425E7 5.7000168851E7 5.7000164484E7 5.7000174524E7 5.7000151853E7 5.7000164484E7)
Error minima by case: (5 0 7 5 8 0 0 0 0 1 0 0 2 0 0 6 8 4 1 6 0 8 1 0 0 1 1 0 1 1 1 1 6 0 0 1 0 0 1 0 1 0 4 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 5 0 0 0 1 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 4 0 0)
Average genome size in population (length): 140.422
Average program size in population (points): 184.844
Average percent parens in population: 0.241
Minimum age in population: 2.0
Maximum age in population: 3.5
Average age in population: 2.528
Median age in population: 2.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.108
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 186058100
--- Timings ---
Current time: 1559324909449 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- bowling problem report - generation 3
Test total error for best: 15114
Test mean error for best: 15.11400
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    146 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:    125 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    153 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    115 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     83 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:    145 | Program output: 97
Correct output:    121 | Program output: 97
Correct output:    105 | Program output: 97
Correct output:    130 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:    128 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:     96 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     99 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    108 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:    152 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:    118 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:     73 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:      0 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:     89 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     77 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     55 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    120 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     58 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:    150 | Program output: 97
Correct output:     92 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     97 | Program output: 97
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove boolean_stackdepth integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () integer_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times exec_empty boolean_not integer_dup_times exec_do*times (integer_sub exec_when (exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup boolean_and boolean_invert_first_then_and boolean_shove boolean_dup boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) ()))
Lexicase best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Lexicase best number of elite cases: 5
Lexicase best total error: 2252
Lexicase best mean error: 22.52
Lexicase best size: 189
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove boolean_stackdepth integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () integer_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times exec_empty boolean_not integer_dup_times exec_do*times (integer_sub exec_when (exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup boolean_and boolean_invert_first_then_and boolean_shove boolean_dup boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ())) () ()) ()))
Zero cases best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 2252
Zero cases best mean error: 22.52
Zero cases best size: 189
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 32 1 1 3 32 17 12 20 13 24 19 12 28 11 2 1 3 6 4 15 1 15 22 10 15 5 24 5 13 13 14 2 19 16 15 24 31 14 18 4 12 5 18 20 18 11 22 20 4 17 16 16 9 22 8 15 10 14 15 20 16 6 13 6 24 22 16 1 15 4 24 14 14 24 13 20 1 20 11 18 28 13 20 31 6 18 21 31 18 31 21 31 1 16 20 19 5 17 19)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (0 32 0 0 3 32 17 12 20 13 24 19 12 28 11 2 0 3 6 4 15 1 15 22 10 15 5 24 5 13 13 14 2 19 16 15 24 31 14 18 4 12 5 0 20 18 11 22 20 4 17 16 16 9 22 8 15 10 14 15 20 16 6 13 6 24 22 16 0 15 4 24 14 14 24 13 20 1 20 11 18 28 13 20 31 6 18 21 31 18 31 21 31 0 16 20 19 5 17 19)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap) (exec_do*times () exec_dup_items) (integer_add) integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_mult integer_add boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () exec_flush) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup) () boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (integer_inc integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ()) ()) () ()) () ()) ())) () ()) () ()))
Errors: [203 20 49 44 28 20 56 13 9 2 4 0 18 10 14 26 48 24 8 33 87 31 9 11 28 9 5 36 5 2 2 3 26 0 1 9 4 6 2 16 11 13 16 55 9 18 31 25 12 21 27 17 22 24 25 97 87 28 8 21 12 22 19 20 19 36 11 17 44 21 42 36 3 3 4 29 7 23 12 31 16 10 29 7 6 39 18 3 6 18 6 3 6 53 5 7 0 16 27 0]
Total: 2174
Mean: 21.74
Genome size: 205
Size: 273
Percent parens: 0.249
--- Population Statistics ---
Average total errors in population: 3.90000360109E9
Median total errors in population: 2684
Error averages by case: (3.9000203159E7 3.9000036608E7 3.9000060835E7 3.900005642E7 3.900004294E7 3.9000036608E7 3.900006702E7 3.9000026121E7 3.9000025651E7 3.9000026048E7 3.9000027524E7 3.900002641E7 3.9000035198E7 3.900003021E7 3.9000026322E7 3.9000041334E7 3.9000059952E7 3.9000039742E7 3.9000029194E7 3.9000047021E7 3.9000081069E7 3.9000045383E7 3.9000029687E7 3.9000025807E7 3.900003197E7 3.9000029687E7 3.9000027893E7 3.9000037226E7 3.9000027893E7 3.9000026048E7 3.9000026048E7 3.9000027203E7 3.9000041334E7 3.900002641E7 3.9000026213E7 3.9000029687E7 3.9000027524E7 3.9000028272E7 3.900002691E7 3.9000026792E7 3.9000030789E7 3.9000026121E7 3.9000033864E7 3.9000066135E7 3.9000025651E7 3.900002739E7 3.9000033829E7 3.9000030319E7 3.9000025944E7 3.9000037383E7 3.9000031393E7 3.9000027075E7 3.9000028912E7 3.9000029832E7 3.9000030319E7 3.9000090501E7 3.9000081069E7 3.900003197E7 3.9000025628E7 3.9000028493E7 3.9000025944E7 3.9000028912E7 3.9000035897E7 3.9000028104E7 3.9000035897E7 3.9000037226E7 3.9000025807E7 3.9000027075E7 3.900005642E7 3.9000028493E7 3.9000041828E7 3.9000037226E7 3.9000027203E7 3.9000027203E7 3.9000027524E7 3.9000032567E7 3.9000028713E7 3.9000038953E7 3.9000025944E7 3.9000033829E7 3.9000026792E7 3.900003021E7 3.9000032567E7 3.9000028713E7 3.9000028272E7 3.9000039485E7 3.900002739E7 3.9000025909E7 3.9000028272E7 3.900002739E7 3.9000028272E7 3.9000025909E7 3.9000028272E7 3.9000064367E7 3.9000025725E7 3.9000028713E7 3.900002641E7 3.9000033864E7 3.9000031393E7 3.900002641E7)
Error minima by case: (5 0 5 1 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 154.361
Average program size in population (points): 197.409
Average percent parens in population: 0.218
Minimum age in population: 3.0
Maximum age in population: 5.25
Average age in population: 4.166
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.961
Total error diversity:				 0.132
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 218688700
--- Timings ---
Current time: 1559324939104 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- bowling problem report - generation 4
Test total error for best: 15114
Test mean error for best: 15.11400
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    146 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:    125 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    153 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    115 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     83 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:    145 | Program output: 97
Correct output:    121 | Program output: 97
Correct output:    105 | Program output: 97
Correct output:    130 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:    128 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:     96 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     99 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    108 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:    152 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:    118 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:     73 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:      0 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:     89 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     77 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     55 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    120 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     58 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:    150 | Program output: 97
Correct output:     92 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     97 | Program output: 97
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (exec_do*while ()) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult exec_do*times () boolean_empty exec_shove () exec_empty exec_k () (integer_dup_times) exec_empty boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_items integer_dup integer_pop integer_yank boolean_shove integer_dup_times boolean_invert_first_then_and integer_fromboolean boolean_empty tag_integer_396 boolean_dup exec_empty boolean_yankdup integer_sub exec_noop boolean_empty tag_integer_396 integer_inc integer_pop exec_dup_times () exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_flush exec_do*times (exec_while (boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ()))) () ())) () ()) () ())
Lexicase best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Lexicase best number of elite cases: 5
Lexicase best total error: 2252
Lexicase best mean error: 22.52
Lexicase best size: 191
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (exec_do*while ()) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult exec_do*times () boolean_empty exec_shove () exec_empty exec_k () (integer_dup_times) exec_empty boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_items integer_dup integer_pop integer_yank boolean_shove integer_dup_times boolean_invert_first_then_and integer_fromboolean boolean_empty tag_integer_396 boolean_dup exec_empty boolean_yankdup integer_sub exec_noop boolean_empty tag_integer_396 integer_inc integer_pop exec_dup_times () exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (integer_empty) exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_flush exec_do*times (exec_while (boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ()) ()))) () ())) () ()) () ())
Zero cases best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 2252
Zero cases best mean error: 22.52
Zero cases best size: 191
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 11 1 2 7 11 6 18 16 19 23 26 9 17 12 13 1 6 20 8 14 4 10 15 19 10 18 21 18 19 19 22 13 26 11 10 23 25 17 14 13 18 13 1 16 12 11 15 22 12 17 14 20 7 15 16 14 19 11 15 22 20 10 10 10 21 15 14 2 15 6 21 22 22 23 11 22 5 22 11 14 17 11 22 25 12 12 18 25 12 25 18 25 5 18 22 26 13 17 26)
Population mean number of elite cases: 1.51
Count of perfect (error zero) individuals by case: (0 11 1 2 7 11 6 18 16 19 23 26 9 17 12 13 1 6 20 8 14 4 10 15 19 10 18 21 18 19 19 22 13 26 11 10 23 25 17 14 13 18 13 1 16 12 11 15 22 12 17 14 20 7 15 16 14 19 11 15 22 20 10 10 10 21 15 14 2 15 6 21 22 22 23 11 22 5 22 11 14 17 11 22 25 12 12 18 25 12 25 18 25 0 18 22 26 13 17 26)
Population mean number of perfect (error zero) cases: 1.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_integer_396} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_rot boolean_shove) integer_mult exec_do*times () boolean_empty exec_shove (exec_empty exec_k () (integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap integer_dup_items integer_dup_items) integer_dup integer_pop integer_yank boolean_shove integer_dup_times boolean_invert_first_then_and integer_fromboolean boolean_empty tag_integer_396 boolean_dup exec_empty boolean_yankdup integer_sub exec_noop boolean_empty tag_integer_396 integer_inc integer_pop exec_dup_times () exec_empty exec_s_when_autoconstructing (integer_swap exec_s_when_autoconstructing (integer_dec boolean_and integer_div boolean_rot integer_lt exec_swap (boolean_eq integer_add integer_yank boolean_rot boolean_dup_items boolean_dup_items) ()) () ()) () ())
Errors: [203 20 49 44 28 20 56 13 9 2 4 0 18 10 14 26 48 24 8 33 87 31 9 11 28 9 5 36 5 2 2 3 26 0 1 9 4 6 2 16 11 13 16 55 9 18 31 25 12 21 27 17 22 24 25 97 87 28 8 21 12 22 19 20 19 36 11 17 44 21 42 36 3 3 4 29 7 23 12 31 16 10 29 7 6 39 18 3 6 18 6 3 6 53 5 7 0 16 27 0]
Total: 2174
Mean: 21.74
Genome size: 128
Size: 155
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 2.400003263498E9
Median total errors in population: 2684
Error averages by case: (2.4000201982E7 2.4000031324E7 2.4000055324E7 2.4000050786E7 2.4000037256E7 2.4000031324E7 2.4000061794E7 2.4000023704E7 2.400002286E7 2.40000224E7 2.4000023232E7 2.4000022534E7 2.4000030008E7 2.40000255E7 2.4000024004E7 2.4000035688E7 2.4000054412E7 2.4000034186E7 2.4000024588E7 2.4000041302E7 2.4000081498E7 2.4000039668E7 2.4000025034E7 2.400002322E7 2.4000030584E7 2.4000025034E7 2.4000023508E7 2.4000036312E7 2.4000023508E7 2.40000224E7 2.40000224E7 2.4000023002E7 2.4000035688E7 2.4000022534E7 2.4000022456E7 2.4000025034E7 2.4000023232E7 2.400002382E7 2.4000022816E7 2.4000024666E7 2.4000026E7 2.4000023704E7 2.4000028764E7 2.400006086E7 2.400002286E7 2.4000025426E7 2.4000032614E7 2.4000028802E7 2.400002344E7 2.4000032014E7 2.4000029964E7 2.4000025032E7 2.4000027204E7 2.4000028256E7 2.4000028802E7 2.4000090918E7 2.4000081498E7 2.4000030584E7 2.4000022722E7 2.4000026724E7 2.400002344E7 2.4000027204E7 2.4000030656E7 2.4000026274E7 2.4000030656E7 2.4000036312E7 2.400002322E7 2.4000025032E7 2.4000050786E7 2.4000026724E7 2.4000041262E7 2.4000036312E7 2.4000023002E7 2.4000023002E7 2.4000023232E7 2.4000031242E7 2.4000024182E7 2.4000033452E7 2.400002344E7 2.4000032614E7 2.4000024666E7 2.40000255E7 2.4000031242E7 2.4000024182E7 2.400002382E7 2.4000038738E7 2.4000025426E7 2.4000022382E7 2.400002382E7 2.4000025426E7 2.400002382E7 2.4000022382E7 2.400002382E7 2.4000059004E7 2.4000022438E7 2.4000024182E7 2.4000022534E7 2.4000028764E7 2.4000029964E7 2.4000022534E7)
Error minima by case: (5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 158.167
Average program size in population (points): 199.803
Average percent parens in population: 0.207
Minimum age in population: 4.0
Maximum age in population: 7.125
Average age in population: 5.7015
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.123
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 233882500
--- Timings ---
Current time: 1559324958241 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- bowling problem report - generation 5
Test total error for best: 15114
Test mean error for best: 15.11400
;;------------------------------
Outputs of best individual on training cases:
Correct output:    300 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    146 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:    125 | Program output: 97
Correct output:    117 | Program output: 97
Correct output:    153 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    115 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     83 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:    145 | Program output: 97
Correct output:    121 | Program output: 97
Correct output:    105 | Program output: 97
Correct output:    130 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:    128 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    102 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:     95 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    123 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:     96 | Program output: 97
Correct output:    106 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     99 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    108 | Program output: 97
Correct output:     84 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:    152 | Program output: 97
Correct output:     88 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:    118 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:     73 | Program output: 97
Correct output:     72 | Program output: 97
Correct output:      0 | Program output: 97
Correct output:     10 | Program output: 97
Correct output:     69 | Program output: 97
Correct output:     89 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     75 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     77 | Program output: 97
Correct output:    116 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:     86 | Program output: 97
Correct output:     80 | Program output: 97
Correct output:    141 | Program output: 97
Correct output:     76 | Program output: 97
Correct output:     55 | Program output: 97
Correct output:     61 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    100 | Program output: 97
Correct output:    101 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    120 | Program output: 97
Correct output:     85 | Program output: 97
Correct output:     66 | Program output: 97
Correct output:     81 | Program output: 97
Correct output:    107 | Program output: 97
Correct output:     68 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     58 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     79 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:     94 | Program output: 97
Correct output:    103 | Program output: 97
Correct output:    150 | Program output: 97
Correct output:     92 | Program output: 97
Correct output:    104 | Program output: 97
Correct output:     97 | Program output: 97
Correct output:    113 | Program output: 97
Correct output:     70 | Program output: 97
Correct output:     97 | Program output: 97
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup exec_k_when_autoconstructing (integer_swap integer_add integer_min boolean_yankdup boolean_and) (integer_yankdup) integer_mod boolean_flush integer_stackdepth exec_swap () (integer_swap) boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_pop integer_max boolean_invert_first_then_and integer_rot integer_dup_times exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup) () boolean_and boolean_invert_first_then_and boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (exec_shove () exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing () () ()) ())) () ()) () ())))
Lexicase best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Lexicase best number of elite cases: 5
Lexicase best total error: 2252
Lexicase best mean error: 22.52
Lexicase best size: 237
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush integer_mult integer_yankdup exec_k_when_autoconstructing (integer_swap integer_add integer_min boolean_yankdup boolean_and) (integer_yankdup) integer_mod boolean_flush integer_stackdepth exec_swap () (integer_swap) boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) boolean_dup exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () boolean_invert_first_then_and) (integer_eq boolean_shove) integer_mult integer_eq boolean_eq integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_pop integer_max boolean_invert_first_then_and integer_rot integer_dup_times exec_eq integer_div exec_rot () (exec_do*times (exec_do*count () integer_gte exec_k_when_autoconstructing () (exec_do*times () boolean_empty exec_shove () exec_empty exec_y_when_autoconstructing () integer_dup_times) exec_empty) boolean_not integer_dup_times exec_do*times () integer_sub exec_when (integer_add boolean_rot exec_noop boolean_pop) integer_flush integer_dec exec_when (boolean_invert_second_then_and boolean_swap) integer_dup_items integer_dup_times integer_yank boolean_dup) () boolean_and boolean_invert_first_then_and boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_dup (exec_shove () exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_flush exec_do*times (exec_while () boolean_dup integer_lt exec_if (exec_empty exec_s_when_autoconstructing () () ()) ())) () ()) () ())))
Zero cases best errors: [197 14 43 38 22 14 50 19 15 8 2 6 12 4 20 20 42 18 2 27 93 25 3 17 34 3 1 42 1 8 8 3 20 6 7 3 2 0 4 22 5 19 10 49 15 24 37 31 18 15 33 23 28 30 31 103 93 34 14 27 18 28 13 26 13 42 17 23 38 27 48 42 3 3 2 35 1 17 18 37 22 4 35 1 0 45 24 9 0 24 0 9 0 47 11 1 6 10 33 6]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 2252
Zero cases best mean error: 22.52
Zero cases best size: 237
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 8 3 10 7 8 1 15 22 26 21 23 9 14 9 7 4 6 15 6 12 5 11 16 12 11 13 19 13 26 26 17 7 23 21 11 21 21 17 18 15 15 12 3 22 21 9 20 19 7 17 16 8 7 20 7 12 12 15 11 19 8 6 11 6 19 16 16 10 11 6 19 17 17 21 18 19 8 19 9 18 14 18 19 21 5 21 23 21 21 21 23 21 2 12 19 23 12 17 23)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (0 8 3 10 7 8 1 15 22 26 21 23 9 14 9 7 4 6 15 6 12 5 11 16 12 11 13 19 13 26 26 17 7 23 21 11 21 21 17 18 15 15 12 3 22 21 9 20 19 7 17 16 8 7 20 7 12 12 15 11 19 8 6 11 6 19 16 16 10 11 6 19 17 17 21 18 19 8 19 9 18 14 18 19 21 5 21 23 21 21 21 23 21 2 12 19 23 12 17 23)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_272} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_712} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items})
Best program: (integer_mult integer_lt exec_stackdepth exec_flush boolean_dup boolean_xor boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_empty boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup boolean_yankdup exec_stackdepth boolean_or boolean_or boolean_eq integer_eq integer_dup integer_dup exec_flush boolean_yank integer_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove boolean_dup boolean_not boolean_invert_second_then_and integer_inc boolean_rot exec_shove (integer_div) exec_empty integer_yank boolean_dup_items integer_dup_times integer_shove boolean_yankdup integer_lte integer_min boolean_yank boolean_invert_second_then_and integer_shove exec_pop (integer_mod integer_yank boolean_xor integer_flush boolean_stackdepth) boolean_or tag_exec_272 (integer_dup) exec_yank exec_y_when_autoconstructing (integer_rot integer_mult integer_add) boolean_swap exec_do*times () exec_dup_items integer_add integer_stackdepth boolean_invert_second_then_and in1 exec_stackdepth exec_s (boolean_stackdepth integer_yank integer_rot integer_dup_times exec_dup ()) (exec_dup () exec_swap () (integer_eq boolean_shove) integer_mult integer_eq integer_inc) (integer_lt tagged_712 integer_dup exec_rot () (boolean_swap integer_max boolean_invert_first_then_and integer_rot integer_dup_times) (exec_eq integer_div exec_rot () (exec_do*times (boolean_dup)) (boolean_and boolean_invert_first_then_and) boolean_shove boolean_dup exec_empty boolean_yankdup integer_sub exec_k_when_autoconstructing (integer_empty) (exec_do*while (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_and integer_flush boolean_frominteger boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_not integer_empty integer_eq boolean_flush boolean_and integer_rot exec_rot (boolean_dup_items boolean_dup_items) () ()) () ()) () ())))))
Errors: [203 20 49 44 28 20 56 13 9 2 4 0 18 10 14 26 48 24 8 33 87 31 9 11 28 9 5 36 5 2 2 3 26 0 1 9 4 6 2 16 11 13 16 55 9 18 31 25 12 21 27 17 22 24 25 97 87 28 8 21 12 22 19 20 19 36 11 17 44 21 42 36 3 3 4 29 7 23 12 31 16 10 29 7 6 39 18 3 6 18 6 3 6 53 5 7 0 16 27 0]
Total: 2174
Mean: 21.74
Genome size: 159
Size: 193
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 2.500003360576E9
Median total errors in population: 2638
Error averages by case: (2.5000200959E7 2.5000033118E7 2.5000056399E7 2.500005198E7 2.5000038852E7 2.5000033118E7 2.5000062772E7 2.5000024241E7 2.5000023529E7 2.500002338E7 2.5000024668E7 2.5000023668E7 2.5000031824E7 2.5000027196E7 2.5000024496E7 2.500003735E7 2.50000555E7 2.5000035888E7 2.5000026224E7 2.5000042795E7 2.5000082125E7 2.5000041193E7 2.5000026699E7 2.5000023829E7 2.500003081E7 2.5000026699E7 2.5000025007E7 2.5000036502E7 2.5000025007E7 2.500002338E7 2.500002338E7 2.5000024371E7 2.500003735E7 2.5000023668E7 2.5000023503E7 2.5000026699E7 2.5000024668E7 2.5000025372E7 2.5000024108E7 2.5000025072E7 2.5000027721E7 2.5000024241E7 2.5000030582E7 2.5000061851E7 2.5000023529E7 2.5000025782E7 2.5000032829E7 2.5000029049E7 2.5000024016E7 2.5000033787E7 2.5000030189E7 2.5000025411E7 2.5000027548E7 2.5000028536E7 2.5000029049E7 2.5000091713E7 2.5000082125E7 2.500003081E7 2.5000023428E7 2.5000027075E7 2.5000024016E7 2.5000027548E7 2.5000032465E7 2.5000026624E7 2.5000032465E7 2.5000036502E7 2.5000023829E7 2.5000025411E7 2.500005198E7 2.5000027075E7 2.5000041502E7 2.5000036502E7 2.5000024371E7 2.5000024371E7 2.5000024668E7 2.5000031455E7 2.5000025779E7 2.5000035171E7 2.5000024016E7 2.5000032829E7 2.5000025072E7 2.5000027196E7 2.5000031455E7 2.5000025779E7 2.5000025372E7 2.5000038961E7 2.5000025782E7 2.5000023309E7 2.5000025372E7 2.5000025782E7 2.5000025372E7 2.5000023309E7 2.5000025372E7 2.5000060023E7 2.5000023285E7 2.5000025779E7 2.5000023668E7 2.5000030582E7 2.5000030189E7 2.5000023668E7)
Error minima by case: (5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 157.456
Average program size in population (points): 198.276
Average percent parens in population: 0.204
Minimum age in population: 5.0
Maximum age in population: 9.0
Average age in population: 7.1821875
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.128
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 249473300
--- Timings ---
Current time: 1559324989220 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
